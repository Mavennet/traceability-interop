{
	"info": {
		"_postman_id": "77dde9f5-84a0-40fb-83c9-3e8c4096ecbd",
		"name": "Conformance Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Issue Credential",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Request",
							"item": [
								{
									"name": "credential:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential is required",
													"delete rawBody.credential",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.@context:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.@context is required",
													"delete rawBody.credential[\"@context\"]",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.@context:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.@context must be an array",
													"rawBody.credential[\"@context\"] = 42;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.@context.members:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.@context array must contain only strings",
													"rawBody.credential[\"@context\"] = [1, 2, 3];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.id:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.id must be string when present",
													"rawBody.credential.id = [1, 2, 3];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.type:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.type is required",
													"delete rawBody.credential.type",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.type:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.type must be an array",
													"rawBody.credential.type = 42;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.type.members:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.type array must contain only strings",
													"rawBody.credential.type = [1, 2, 3];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.issuer:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer is required",
													"delete rawBody.credential.issuer",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.issuer:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer must be a string or an object",
													"rawBody.credential.issuer = [\"arrays are invalid\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.issuer.id:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer can be an object with an optional \"id\"",
													"// property that must be a string when present.",
													"rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.issuanceDate.missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuanceDate is required",
													"delete rawBody.credential.issuanceDate",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.issuanceDate:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuanceDate must be a string",
													"rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.issuanceDate:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuanceDate must be an XML Date Time String",
													"rawBody.credential.issuanceDate = \"not an xml date time string\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.credentialSubject:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.credentialSubject is required",
													"delete rawBody.credential.credentialSubject",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.credentialSubject:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.credentialSubject must be a string or an object",
													"rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credential.credentialSubject.id:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.credentialSubject can be an object with an optional \"id\"",
													"// property that must be a string when present.",
													"rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "options:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options is required",
													"delete rawBody.options",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "options:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options must be an object",
													"rawBody.options = [\"array\", \"element\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "options.type:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.type is required",
													"delete rawBody.options.type",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "options.type:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.type must be a string",
													"rawBody.options.type = [\"an\", \"array\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "options.type:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.type must be valid",
													"rawBody.options.type = \"invalid value\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "options.created:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.created must be a string when present",
													"rawBody.options.created = [\"an\", \"array\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "options.credentialStatus:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.credentialStatus must be an object when present",
													"rawBody.options.credentialStatus = \"a string\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "options.credentialStatus.type:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.credentialStatus.type must be a string when present",
													"rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "options.credentialStatus.type:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.credentialStatus.type must be valid",
													"rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server."
						},
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "missing_auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "missing_scope:issue_credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Missing scope tests should be skipped if the OAuth2 provider does",
													"// not support requesting tokens with specific scopes.",
													"const maybe = utils(pm).tokenHasScope(",
													"    pm.variables.get('currentAccessToken'),",
													"    'issue:credentials'",
													") ? pm.test : pm.test.skip;",
													"",
													"maybe(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"maybe(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"issue:credentials\" scope",
													"utils(pm).getAccessToken('', (err, res) => {",
													"    pm.expect(err).to.be.null;",
													"    pm.variables.set('currentAccessToken', res.json().access_token)",
													"});",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "base",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credential:opt.id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.id is optional",
											"rawBody.credential.id = pm.variables.get(\"credential_id\");",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credential:alt.issuer:object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.issuer can be an object with optional 'id' element.",
											"rawBody.credential.issuer = {};",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credential:alt.issuer.object:opt.id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.issuer can be an object with optional 'id' element",
											"rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credential:alt.credentialSubject.object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.credentialSubject can be an object with optional 'id' element.",
											"rawBody.credential.credentialSubject = {};",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credential:alt.credentialSubject.object:opt.id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.credentialSubject can be an object with optional 'id' element",
											"rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "options:opt.created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// options.created can be an optional string value",
											"rawBody.options.created = \"an arbitrary string\";",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "options:opt.credentialStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// options.credentialStatus can be an optional object",
											"rawBody.options.credentialStatus = {};",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "options:opt.credentialStatus Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// options.credentialStatus.type can specific string",
											"rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Raw body should exclude all optional items and should contain",
							"// first alternate version of any 'oneOf' elements defined in the",
							"// OpenAPI schema.",
							"const date = new Date();",
							"const isoDate = date.toISOString();",
							"pm.environment.set('currentDate', isoDate.substring(0, isoDate.length - 5) + 'Z');",
							"",
							"pm.variables.set(\"rawBody\", {",
							"    \"credential\": {",
							"        \"@context\": [",
							"            \"https://www.w3.org/2018/credentials/v1\"",
							"        ],",
							"        \"type\": [",
							"            \"VerifiableCredential\"",
							"        ],",
							"        \"issuer\": \"{{credential_issuer_id}}\",",
							"        \"issuanceDate\": \"{{currentDate}}\",",
							"        \"credentialSubject\": \"{{credential_subject}}\"",
							"    },",
							"    \"options\": {",
							"        \"type\": \"Ed25519Signature2018\",",
							"        \"created\": \"{{currenDate}}\"",
							"    }",
							"});",
							"",
							"// Obtain an access token with the required \"issue:credentials\" scope",
							"if (!pm.variables.get('currentAccessToken')) {",
							"    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
							"        pm.expect(err).to.be.null;",
							"        pm.variables.set('currentAccessToken', res.json().access_token)",
							"    });",
							"}",
							"",
							"// Obtain the credential issuer ID via did:web resolution",
							"if (!pm.variables.get('credential_issuer_id')) {",
							"    // TODO: This needs to be populated correctly",
							"    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
							"}",
							"",
							"// Set the credential subject to use for testing",
							"if (!pm.variables.get('credential_subject')) {",
							"    pm.variables.set('credential_subject', 'did:example:123')",
							"}",
							"",
							"// Set the credential id to use for testing",
							"if (!pm.variables.get('credential_id')) {",
							"    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// The pm variable is not available inside global methods.",
					"utils = (pm) => {",
					"    return {",
					"        getAccessToken: (scope, cb) => {",
					"            const accessTokenRequest = {",
					"                url: pm.environment.get(\"TOKEN_ENDPOINT\"),",
					"                method: 'POST',",
					"                header: 'Content-Type:application/json',",
					"                body: {",
					"                    mode: 'application/json',",
					"                    raw: JSON.stringify({",
					"                        client_id:pm.environment.get(\"CLIENT_ID\"),",
					"                        client_secret:pm.environment.get(\"CLIENT_SECRET\"),",
					"                        audience:pm.environment.get(\"TOKEN_AUDIENCE\"),",
					"                        grant_type:'client_credentials',",
					"                        scope,",
					"                    }),",
					"                }",
					"            };",
					"            return pm.sendRequest(accessTokenRequest, cb);",
					"        },",
					"        tokenHasScope: (token, scope) => {",
					"            try {",
					"                const parts = token.split('.');",
					"                const payload = JSON.parse(atob(parts[1]));",
					"                if (payload.scope.split(' ').includes(scope)) {",
					"                    return true;",
					"                }",
					"            } catch {",
					"                return false;",
					"            }",
					"        }",
					"    };",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "responseSchema201",
			"value": "{\"title\":\"Serialized Verifiable Credential\",\"oneOf\":[{\"title\":\"Verifiable Credential\",\"type\":\"object\",\"allOf\":[{\"type\":\"object\",\"required\":[\"@context\",\"type\",\"issuer\",\"issuanceDate\",\"credentialSubject\"],\"properties\":{\"@context\":{\"description\":\"This JSON-LD Context defining all terms in the Credential.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"id\":{\"description\":\"The IRI identifying the Credential\",\"type\":\"string\"},\"type\":{\"description\":\"The Type of the Credential\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"issuer\":{\"description\":\"This value MUST match the assertionMethod used to create the Verifiable Credential.\",\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\",\"properties\":{\"id\":{\"description\":\"The IRI identifying the Issuer\",\"type\":\"string\"}}}]},\"issuanceDate\":{\"description\":\"This value MUST be an XML Date Time String\",\"type\":\"string\"},\"credentialSubject\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\",\"properties\":{\"id\":{\"description\":\"The IRI identifying the Subject\",\"type\":\"string\"}}}]}},\"example\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\"issuanceDate\":\"2010-01-01T19:23:24Z\",\"credentialSubject\":\"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\"}},{\"type\":\"object\",\"properties\":{\"proof\":{\"title\":\"Credential Linked Data Proof\",\"allOf\":[{\"title\":\"Linked Data Proof\",\"type\":\"object\",\"description\":\"A JSON-LD Linked Data proof.\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Linked Data Signature Suite used to produce proof.\",\"enum\":[\"JsonWebSignature2020\"]},\"created\":{\"type\":\"string\",\"description\":\"Date the proof was created.\"},\"verificationMethod\":{\"type\":\"string\",\"description\":\"Verification Method used to verify proof.\"},\"jws\":{\"type\":\"string\",\"description\":\"Detached JSON Web Signature\"}},\"example\":{\"type\":\"JsonWebSignature2020\",\"created\":\"2020-04-02T18:28:08Z\",\"verificationMethod\":\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\",\"proofPurpose\":\"assertionMethod\",\"jws\":\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"}},{\"type\":\"object\",\"properties\":{\"proofPurpose\":{\"type\":\"string\",\"description\":\"Credentials rely on assertionMethod proof purpose.\",\"enum\":[\"assertionMethod\"]}}}]}}}],\"example\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\"issuanceDate\":\"2010-01-01T19:23:24Z\",\"credentialSubject\":\"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\"proof\":{\"type\":\"Ed25519Signature2018\",\"created\":\"2021-10-30T19:16:30Z\",\"verificationMethod\":\"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn#z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\"proofPurpose\":\"assertionMethod\",\"jws\":\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..puetBYS3pkYlYzAecBiT-WkigYAlVbslrz9wPFnk9JW4AwjrpJvcsSdZJPhZtNy_myMJUNzC_QaYyw3ni1V0BA\"}}},{\"title\":\"VC JWT\",\"type\":\"string\",\"example\":\"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3RpU3pxRjlrcXdkVThWa2RCS3g1NkVZelhmcGduTlBVQUd6bnBpY05pV2ZuI3o2TWt0aVN6cUY5a3F3ZFU4VmtkQkt4NTZFWXpYZnBnbk5QVUFHem5waWNOaVdmbiJ9.eyJpc3MiOiJkaWQ6a2V5Ono2TWt0aVN6cUY5a3F3ZFU4VmtkQkt4NTZFWXpYZnBnbk5QVUFHem5waWNOaVdmbiIsInN1YiI6ImRpZDprZXk6ejZNa3RpU3pxRjlrcXdkVThWa2RCS3g1NkVZelhmcGduTlBVQUd6bnBpY05pV2ZuIiwidmMiOnsiQGNvbnRleHQiOlsiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJodHRwczovL3czaWQub3JnL3NlY3VyaXR5L3N1aXRlcy9qd3MtMjAyMC92MSJdLCJpZCI6InVybjp1dWlkOjA3YWE5NjllLWI0MGQtNGMxYi1hYjQ2LWRlZDI1MjAwM2RlZCIsInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjoiZGlkOmtleTp6Nk1rdGlTenFGOWtxd2RVOFZrZEJLeDU2RVl6WGZwZ25OUFVBR3pucGljTmlXZm4iLCJpc3N1YW5jZURhdGUiOiIyMDEwLTAxLTAxVDE5OjIzOjI0WiIsImNyZWRlbnRpYWxTdWJqZWN0IjoiZGlkOmtleTp6Nk1rdGlTenFGOWtxd2RVOFZrZEJLeDU2RVl6WGZwZ25OUFVBR3pucGljTmlXZm4ifSwianRpIjoidXJuOnV1aWQ6MDdhYTk2OWUtYjQwZC00YzFiLWFiNDYtZGVkMjUyMDAzZGVkIiwibmJmIjoxMjYyMzczODA0fQ.ZXlKaGJHY2lPaUpGWkVSVFFTSXNJbUkyTkNJNlptRnNjMlVzSW1OeWFYUWlPbHNpWWpZMElsMTkuLlBUZ1N5UndTRmdRRmZRQXJRSkVfUm43c3cyNzJRZnhlTUZjYk16R05KZDRKVGtWS3d4a2p1UzRXQV9xTGdhM2NGYzRKd0JILXJPMk5haTFfRExsWEF3\"}],\"example\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\"issuanceDate\":\"2010-01-01T19:23:24Z\",\"credentialSubject\":\"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\"proof\":{\"type\":\"Ed25519Signature2018\",\"created\":\"2021-10-30T19:16:30Z\",\"verificationMethod\":\"did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn#z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn\",\"proofPurpose\":\"assertionMethod\",\"jws\":\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..puetBYS3pkYlYzAecBiT-WkigYAlVbslrz9wPFnk9JW4AwjrpJvcsSdZJPhZtNy_myMJUNzC_QaYyw3ni1V0BA\"}}}",
			"type": "string"
		},
		{
			"key": "responseSchema400",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"code\",\"message\"],\"properties\":{\"code\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"details\":{\"type\":\"object\"}}},{\"type\":\"object\",\"properties\":{\"code\":{\"enum\":[400]},\"message\":{\"enum\":[\"Bad Request: Your request body does not conform to the required schema\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema401",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"code\",\"message\"],\"properties\":{\"code\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"details\":{\"type\":\"object\"}}},{\"type\":\"object\",\"properties\":{\"code\":{\"enum\":[401]},\"message\":{\"enum\":[\"Unauthorized: This endpoint requires an OAuth2 bearer token\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema403",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"code\",\"message\"],\"properties\":{\"code\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"details\":{\"type\":\"object\"}}},{\"type\":\"object\",\"properties\":{\"code\":{\"enum\":[403]},\"message\":{\"enum\":[\"Forbidden: OAuth2 bearer token does not have the required scope\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema500",
			"value": "{\"type\":\"object\",\"required\":[\"code\",\"message\"],\"properties\":{\"code\":{\"type\":\"integer\"},\"message\":{\"type\":\"string\"},\"details\":{\"type\":\"object\"}}}",
			"type": "string"
		}
	]
}