name: Interoperability Report

on:
  workflow_dispatch:
  schedule:
    # Every day at midnight
    - cron: '0 0 * * *'

jobs:

  interop-sanity:
    name: Sanity
    runs-on: ubuntu-latest
    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci
      - name: Sanity Test
        run: |
          npx newman run ./docs/tutorials/report-generation/report-tester.collection.json \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-skipSensitiveData \
          --reporter-htmlextra-export "newman/${{format('{0}-{1}.html', github.run_id, github.job)}}" \
          --reporter-json-export "newman/${{format('{0}-{1}.json', github.run_id, github.job)}}"

      # Write sanitized Newman output to `./docs/reports`.
      - name: Sanitize Report Output
        if: always() # Run even when postman tests fail
        run: npm run report:sanitize

      # Sanitized reports are needed by subsequent jobs
      - uses: actions/upload-artifact@v3
        if: always() # Run even when postman tests fail
        with:
          name: reports
          path: docs/reports/

  interop-credentials-issue:
    name: Issue Credential
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Mavennet"
            actor: "MAVENNET_STAGING"
          - name: "mesur.io"
            actor: "MESUR_IO_PRODUCTION"
          - name: "Transmute"
            actor: "TRANSMUTE_PRODUCTION"
    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci
      - name: Run Tests
        env:
          organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.actor)]}}
          client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.actor)]}}
          client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.actor)]}}
          token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.actor)]}}
          token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.actor)]}}
          api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.actor)]}}
        run: |
          npx newman run ./docs/tutorials/credentials-issue/credentials-issue.postman_collection.json \
          --env-var ORGANIZATION_DID_WEB=$organization_did_web \
          --env-var CLIENT_ID=$client_id \
          --env-var CLIENT_SECRET=$client_secret \
          --env-var TOKEN_AUDIENCE=$token_audience \
          --env-var TOKEN_ENDPOINT=$token_endpoint \
          --env-var API_BASE_URL=$api_base_url \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-skipSensitiveData \
          --reporter-htmlextra-export "newman/${{format('{0}-{1}-{2}.html', github.run_id, github.job, matrix.name)}}" \
          --reporter-json-export "newman/${{format('{0}-{1}-{2}.json', github.run_id, github.job, matrix.name)}}"

      # Write sanitized Newman output to `./docs/reports`.
      - name: Sanitize Report Output
        if: always() # Run even when postman tests fail
        run: npm run report:sanitize

      # Sanitized reports are needed by subsequent jobs
      - uses: actions/upload-artifact@v3
        if: always() # Run even when postman tests fail
        with:
          name: reports
          path: docs/reports/

  interop-credentials-verify:
    name: Verify Credential
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Mavennet"
            actor: "MAVENNET_STAGING"
          - name: "mesur.io"
            actor: "MESUR_IO_PRODUCTION"
          - name: "Transmute"
            actor: "TRANSMUTE_PRODUCTION"
    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci
      - name: Run Tests
        env:
          organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.actor)]}}
          client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.actor)]}}
          client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.actor)]}}
          token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.actor)]}}
          token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.actor)]}}
          api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.actor)]}}
        run: |
          npx newman run ./docs/tutorials/credentials-verify/credentials-verify.postman_collection.json \
          --env-var ORGANIZATION_DID_WEB=$organization_did_web \
          --env-var CLIENT_ID=$client_id \
          --env-var CLIENT_SECRET=$client_secret \
          --env-var TOKEN_AUDIENCE=$token_audience \
          --env-var TOKEN_ENDPOINT=$token_endpoint \
          --env-var API_BASE_URL=$api_base_url \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-skipSensitiveData \
          --reporter-htmlextra-export "newman/${{format('{0}-{1}-{2}.html', github.run_id, github.job, matrix.name)}}" \
          --reporter-json-export "newman/${{format('{0}-{1}-{2}.json', github.run_id, github.job, matrix.name)}}"

      # Write sanitized Newman output to `./docs/reports`.
      - name: Sanitize Report Output
        if: always() # Run even when postman tests fail
        run: npm run report:sanitize

      # Sanitized reports are needed by subsequent jobs
      - uses: actions/upload-artifact@v3
        if: always() # Run even when postman tests fail
        with:
          name: reports
          path: docs/reports/

  interop-did-web-discovery:
    name: DID Web Discovery
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Mavennet"
            actor: "MAVENNET_STAGING"
          - name: "mesur.io"
            actor: "MESUR_IO_PRODUCTION"
          - name: "Transmute"
            actor: "TRANSMUTE_PRODUCTION"
    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci
      - name: Run Tests
        env:
          organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.actor)]}}
          client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.actor)]}}
          client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.actor)]}}
          token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.actor)]}}
          token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.actor)]}}
          api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.actor)]}}
        run: |
          npx newman run ./docs/tutorials/did-web-discovery/did-web-discovery.postman_collection.json \
          --env-var ORGANIZATION_DID_WEB=$organization_did_web \
          --env-var CLIENT_ID=$client_id \
          --env-var CLIENT_SECRET=$client_secret \
          --env-var TOKEN_AUDIENCE=$token_audience \
          --env-var TOKEN_ENDPOINT=$token_endpoint \
          --env-var API_BASE_URL=$api_base_url \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-skipSensitiveData \
          --reporter-htmlextra-export "newman/${{format('{0}-{1}-{2}.html', github.run_id, github.job, matrix.name)}}" \
          --reporter-json-export "newman/${{format('{0}-{1}-{2}.json', github.run_id, github.job, matrix.name)}}"

      # Write sanitized Newman output to `./docs/reports`.
      - name: Sanitize Report Output
        if: always() # Run even when postman tests fail
        run: npm run report:sanitize

      # Sanitized reports are needed by subsequent jobs
      - uses: actions/upload-artifact@v3
        if: always() # Run even when postman tests fail
        with:
          name: reports
          path: docs/reports/

  interop-presentations-exchange:
    name: Presentations Exchange
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "mesur.io-Transmute"
            issuer: MESUR_IO_PRODUCTION
            verifier: TRANSMUTE_PRODUCTION
          - name: "mesur.io-Mavennet"
            issuer: MESUR_IO_PRODUCTION
            verifier: MAVENNET_STAGING
          - name: "Transmute-Mavennet"
            issuer: TRANSMUTE_PRODUCTION
            verifier: MAVENNET_STAGING
          - name: "Transmute-mesur.io"
            issuer: TRANSMUTE_PRODUCTION
            verifier: MESUR_IO_PRODUCTION
          - name: "Mavennet-mesur.io"
            issuer: MAVENNET_STAGING
            verifier: MESUR_IO_PRODUCTION
          - name: "Mavennet-Transmute"
            issuer: MAVENNET_STAGING
            verifier: TRANSMUTE_PRODUCTION
    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci
      - name: Run Tests
        env:
          issuer_organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.issuer)]}}
          issuer_client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.issuer)]}}
          issuer_client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.issuer)]}}
          issuer_token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.issuer)]}}
          issuer_token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.issuer)]}}
          issuer_api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.issuer)]}}
          verifier_organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.verifier)]}}
          verifier_client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.verifier)]}}
          verifier_client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.verifier)]}}
          verifier_token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.verifier)]}}
          verifier_token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.verifier)]}}
          verifier_api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.verifier)]}}
        run: |
          npx newman run ./docs/tutorials/presentations-exchange/presentations-exchange.postman_collection.json \
          --env-var ISSUER_ORGANIZATION_DID_WEB=$issuer_organization_did_web \
          --env-var ISSUER_CLIENT_ID=$issuer_client_id \
          --env-var ISSUER_CLIENT_SECRET=$issuer_client_secret \
          --env-var ISSUER_TOKEN_AUDIENCE=$issuer_token_audience \
          --env-var ISSUER_TOKEN_ENDPOINT=$issuer_token_endpoint \
          --env-var ISSUER_API_BASE_URL=$issuer_api_base_url \
          --env-var VERIFIER_ORGANIZATION_DID_WEB=$verifier_organization_did_web \
          --env-var VERIFIER_CLIENT_ID=$verifier_client_id \
          --env-var VERIFIER_CLIENT_SECRET=$verifier_client_secret \
          --env-var VERIFIER_TOKEN_AUDIENCE=$verifier_token_audience \
          --env-var VERIFIER_TOKEN_ENDPOINT=$verifier_token_endpoint \
          --env-var VERIFIER_API_BASE_URL=$verifier_api_base_url \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-skipSensitiveData \
          --reporter-htmlextra-export "newman/${{format('{0}-{1}-{2}.html', github.run_id, github.job, matrix.name)}}" \
          --reporter-json-export "newman/${{format('{0}-{1}-{2}.json', github.run_id, github.job, matrix.name)}}"

      # Write sanitized Newman output to `./docs/reports`.
      - name: Sanitize Report Output
        if: always() # Run even when postman tests fail
        run: npm run report:sanitize

      # Sanitized reports are needed by subsequent jobs
      - uses: actions/upload-artifact@v3
        if: always() # Run even when postman tests fail
        with:
          name: reports
          path: docs/reports/

  interop-presentations-exchange-oauth:
    name: Presentations Exchange OAuth
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "mesur.io-Transmute"
            holder: MESUR_IO_PRODUCTION
            verifier: TRANSMUTE_PRODUCTION
          - name: "mesur.io-Mavennet"
            holder: MESUR_IO_PRODUCTION
            verifier: MAVENNET_STAGING
          - name: "Transmute-Mavennet"
            holder: TRANSMUTE_PRODUCTION
            verifier: MAVENNET_STAGING
          - name: "Transmute-mesur.io"
            holder: TRANSMUTE_PRODUCTION
            verifier: MESUR_IO_PRODUCTION
          - name: "Mavennet-mesur.io"
            holder: MAVENNET_STAGING
            verifier: MESUR_IO_PRODUCTION
          - name: "Mavennet-Transmute"
            holder: MAVENNET_STAGING
            verifier: TRANSMUTE_PRODUCTION
    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci
      - name: Run Tests
        env:
          holder_organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.holder)]}}
          holder_client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.holder)]}}
          holder_client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.holder)]}}
          holder_token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.holder)]}}
          holder_token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.holder)]}}
          holder_api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.holder)]}}
          verifier_organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.verifier)]}}
          verifier_client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.verifier)]}}
          verifier_client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.verifier)]}}
          verifier_token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.verifier)]}}
          verifier_token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.verifier)]}}
          verifier_api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.verifier)]}}
        run: |
          npx newman run ./docs/tutorials/presentations-exchange-oauth/presentations-exchange-oauth.json \
          --env-var HOLDER_ORGANIZATION_DID_WEB=$holder_organization_did_web \
          --env-var HOLDER_CLIENT_ID=$holder_client_id \
          --env-var HOLDER_CLIENT_SECRET=$holder_client_secret \
          --env-var HOLDER_TOKEN_AUDIENCE=$holder_token_audience \
          --env-var HOLDER_TOKEN_ENDPOINT=$holder_token_endpoint \
          --env-var HOLDER_API_BASE_URL=$holder_api_base_url \
          --env-var VERIFIER_ORGANIZATION_DID_WEB=$verifier_organization_did_web \
          --env-var VERIFIER_CLIENT_ID=$verifier_client_id \
          --env-var VERIFIER_CLIENT_SECRET=$verifier_client_secret \
          --env-var VERIFIER_TOKEN_AUDIENCE=$verifier_token_audience \
          --env-var VERIFIER_TOKEN_ENDPOINT=$verifier_token_endpoint \
          --env-var VERIFIER_API_BASE_URL=$verifier_api_base_url \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-skipSensitiveData \
          --reporter-htmlextra-export "newman/${{format('{0}-{1}-{2}.html', github.run_id, github.job, matrix.name)}}" \
          --reporter-json-export "newman/${{format('{0}-{1}-{2}.json', github.run_id, github.job, matrix.name)}}"

      # Write sanitized Newman output to `./docs/reports`.
      - name: Sanitize Report Output
        if: always() # Run even when postman tests fail
        run: npm run report:sanitize

      # Sanitized reports are needed by subsequent jobs
      - uses: actions/upload-artifact@v3
        if: always() # Run even when postman tests fail
        with:
          name: reports
          path: docs/reports/

  interop-presentations-verify:
    name: Presentations Verify
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "mesur.io-Transmute"
            issuer: MESUR_IO_PRODUCTION
            verifier: TRANSMUTE_PRODUCTION
          - name: "mesur.io-Mavennet"
            issuer: MESUR_IO_PRODUCTION
            verifier: MAVENNET_STAGING
          - name: "Transmute-Mavennet"
            issuer: TRANSMUTE_PRODUCTION
            verifier: MAVENNET_STAGING
          - name: "Transmute-mesur.io"
            issuer: TRANSMUTE_PRODUCTION
            verifier: MESUR_IO_PRODUCTION
          - name: "Mavennet-mesur.io"
            issuer: MAVENNET_STAGING
            verifier: MESUR_IO_PRODUCTION
          - name: "Mavennet-Transmute"
            issuer: MAVENNET_STAGING
            verifier: TRANSMUTE_PRODUCTION
    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci
      - name: Run Tests
        env:
          issuer_organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.issuer)]}}
          issuer_client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.issuer)]}}
          issuer_client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.issuer)]}}
          issuer_token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.issuer)]}}
          issuer_token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.issuer)]}}
          issuer_api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.issuer)]}}
          verifier_organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.verifier)]}}
          verifier_client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.verifier)]}}
          verifier_client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.verifier)]}}
          verifier_token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.verifier)]}}
          verifier_token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.verifier)]}}
          verifier_api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.verifier)]}}
        run: |
          npx newman run ./docs/tutorials/presentations-verify/presentations-verify.postman_collection.json \
          --env-var ISSUER_ORGANIZATION_DID_WEB=$issuer_organization_did_web \
          --env-var ISSUER_CLIENT_ID=$issuer_client_id \
          --env-var ISSUER_CLIENT_SECRET=$issuer_client_secret \
          --env-var ISSUER_TOKEN_AUDIENCE=$issuer_token_audience \
          --env-var ISSUER_TOKEN_ENDPOINT=$issuer_token_endpoint \
          --env-var ISSUER_API_BASE_URL=$issuer_api_base_url \
          --env-var VERIFIER_ORGANIZATION_DID_WEB=$verifier_organization_did_web \
          --env-var VERIFIER_CLIENT_ID=$verifier_client_id \
          --env-var VERIFIER_CLIENT_SECRET=$verifier_client_secret \
          --env-var VERIFIER_TOKEN_AUDIENCE=$verifier_token_audience \
          --env-var VERIFIER_TOKEN_ENDPOINT=$verifier_token_endpoint \
          --env-var VERIFIER_API_BASE_URL=$verifier_api_base_url \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-skipSensitiveData \
          --reporter-htmlextra-export "newman/${{format('{0}-{1}-{2}.html', github.run_id, github.job, matrix.name)}}" \
          --reporter-json-export "newman/${{format('{0}-{1}-{2}.json', github.run_id, github.job, matrix.name)}}"

      # Write sanitized Newman output to `./docs/reports`.
      - name: Sanitize Report Output
        if: always() # Run even when postman tests fail
        run: npm run report:sanitize

      # Sanitized reports are needed by subsequent jobs
      - uses: actions/upload-artifact@v3
        if: always() # Run even when postman tests fail
        with:
          name: reports
          path: docs/reports/

  interop-workflow-instance-join:
    name: Workflow Instance Join
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Transmute"
            org_1_token_endpoint: TRANSMUTE_PRODUCTION_TOKEN_ENDPOINT
            org_1_token_audience: TRANSMUTE_PRODUCTION_TOKEN_AUDIENCE
            org_1_api_base_url: TRANSMUTE_PRODUCTION_API_BASE_URL
            org_1_did_web: TRANSMUTE_PRODUCTION_ORGANIZATION_DID_WEB
            org_1_client_id: TRANSMUTE_PRODUCTION_CLIENT_ID
            org_1_client_secret: TRANSMUTE_PRODUCTION_CLIENT_SECRET
            org_2_token_endpoint: TRANSMUTE_PRODUCTION_TOKEN_ENDPOINT
            org_2_token_audience: TRANSMUTE_PRODUCTION_TOKEN_AUDIENCE
            org_2_api_base_url: TRANSMUTE_PRODUCTION_API_BASE_URL
            org_2_did_web: TRANSMUTE_PRODUCTION_TENANT_2_ORGANIZATION_DID_WEB
            org_2_client_id: TRANSMUTE_PRODUCTION_TENANT_2_CLIENT_ID
            org_2_client_secret: TRANSMUTE_PRODUCTION_TENANT_2_CLIENT_SECRET
            org_3_token_endpoint: TRANSMUTE_PRODUCTION_TOKEN_ENDPOINT
            org_3_token_audience: TRANSMUTE_PRODUCTION_TOKEN_AUDIENCE
            org_3_api_base_url: TRANSMUTE_PRODUCTION_API_BASE_URL
            org_3_did_web: TRANSMUTE_PRODUCTION_TENANT_3_ORGANIZATION_DID_WEB
            org_3_client_id: TRANSMUTE_PRODUCTION_TENANT_3_CLIENT_ID
            org_3_client_secret: TRANSMUTE_PRODUCTION_TENANT_3_CLIENT_SECRET
    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci
      - name: Workflow Instance Join
        env:
          org_1_token_endpoint: ${{secrets[matrix.org_1_token_endpoint]}}
          org_1_token_audience: ${{secrets[matrix.org_1_token_audience]}}
          org_1_api_base_url: ${{secrets[matrix.org_1_api_base_url]}}
          org_1_did_web: ${{secrets[matrix.org_1_did_web]}}
          org_1_client_id: ${{secrets[matrix.org_1_client_id]}}
          org_1_client_secret: ${{secrets[matrix.org_1_client_secret]}}
          org_2_token_endpoint: ${{secrets[matrix.org_2_token_endpoint]}}
          org_2_token_audience: ${{secrets[matrix.org_2_token_audience]}}
          org_2_api_base_url: ${{secrets[matrix.org_2_api_base_url]}}
          org_2_did_web: ${{secrets[matrix.org_2_did_web]}}
          org_2_client_id: ${{secrets[matrix.org_2_client_id]}}
          org_2_client_secret: ${{secrets[matrix.org_2_client_secret]}}
          org_3_token_endpoint: ${{secrets[matrix.org_3_token_endpoint]}}
          org_3_token_audience: ${{secrets[matrix.org_3_token_audience]}}
          org_3_api_base_url: ${{secrets[matrix.org_3_api_base_url]}}
          org_3_did_web: ${{secrets[matrix.org_3_did_web]}}
          org_3_client_id: ${{secrets[matrix.org_3_client_id]}}
          org_3_client_secret: ${{secrets[matrix.org_3_client_secret]}}
        run: |
          npx newman run ./docs/tutorials/workflow-join/workflow-instance-join.collection.json \
          --env-var ORG_1_TOKEN_ENDPOINT=$org_1_token_endpoint \
          --env-var ORG_1_TOKEN_AUDIENCE=$org_1_token_audience \
          --env-var ORG_1_BASE_URL=$org_1_api_base_url \
          --env-var ORG_1_DID_WEB=$org_1_did_web \
          --env-var ORG_1_CLIENT_ID=$org_1_client_id \
          --env-var ORG_1_CLIENT_SECRET=$org_1_client_secret \
          --env-var ORG_2_TOKEN_ENDPOINT=$org_2_token_endpoint \
          --env-var ORG_2_TOKEN_AUDIENCE=$org_2_token_audience \
          --env-var ORG_2_BASE_URL=$org_2_api_base_url \
          --env-var ORG_2_DID_WEB=$org_2_did_web \
          --env-var ORG_2_CLIENT_ID=$org_2_client_id \
          --env-var ORG_2_CLIENT_SECRET=$org_2_client_secret \
          --env-var ORG_3_TOKEN_ENDPOINT=$org_3_token_endpoint \
          --env-var ORG_3_TOKEN_AUDIENCE=$org_3_token_audience \
          --env-var ORG_3_BASE_URL=$org_3_api_base_url \
          --env-var ORG_3_DID_WEB=$org_3_did_web \
          --env-var ORG_3_CLIENT_ID=$org_3_client_id \
          --env-var ORG_3_CLIENT_SECRET=$org_3_client_secret \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-skipSensitiveData \
          --reporter-htmlextra-export "newman/${{format('{0}-{1}-{2}.html', github.run_id, github.job, matrix.name)}}" \
          --reporter-json-export "newman/${{format('{0}-{1}-{2}.json', github.run_id, github.job, matrix.name)}}"

      # Write sanitized Newman output to `./docs/reports`.
      - name: Sanitize Report Output
        if: always() # Run even when postman tests fail
        run: npm run report:sanitize

      # Sanitized reports are needed by subsequent jobs
      - uses: actions/upload-artifact@v3
        if: always() # Run even when postman tests fail
        with:
          name: reports
          path: docs/reports/

  interop-credentials-revocation:
    name: Revoke Credential
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Mavennet"
            actor: "MAVENNET_STAGING"
          - name: "mesur.io"
            actor: "MESUR_IO_PRODUCTION"
          - name: "Transmute"
            actor: "TRANSMUTE_PRODUCTION"
    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci
      - name: Run Tests
        env:
          organization_did_web: ${{secrets[format('{0}_ORGANIZATION_DID_WEB', matrix.actor)]}}
          client_id: ${{secrets[format('{0}_CLIENT_ID', matrix.actor)]}}
          client_secret: ${{secrets[format('{0}_CLIENT_SECRET', matrix.actor)]}}
          token_audience: ${{secrets[format('{0}_TOKEN_AUDIENCE', matrix.actor)]}}
          token_endpoint: ${{secrets[format('{0}_TOKEN_ENDPOINT', matrix.actor)]}}
          api_base_url: ${{secrets[format('{0}_API_BASE_URL', matrix.actor)]}}
        run: |
          npx newman run ./docs/tutorials/credentials-revocation/credentials-revocation.postman_collection.json \
          --env-var ORGANIZATION_DID_WEB=$organization_did_web \
          --env-var CLIENT_ID=$client_id \
          --env-var CLIENT_SECRET=$client_secret \
          --env-var TOKEN_AUDIENCE=$token_audience \
          --env-var TOKEN_ENDPOINT=$token_endpoint \
          --env-var API_BASE_URL=$api_base_url \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-skipSensitiveData \
          --reporter-htmlextra-export "newman/${{format('{0}-{1}-{2}.html', github.run_id, github.job, matrix.name)}}" \
          --reporter-json-export "newman/${{format('{0}-{1}-{2}.json', github.run_id, github.job, matrix.name)}}"

      # Write sanitized Newman output to `./docs/reports`.
      - name: Sanitize Report Output
        if: always() # Run even when postman tests fail
        run: npm run report:sanitize

      # Sanitized reports are needed by subsequent jobs
      - uses: actions/upload-artifact@v3
        if: always() # Run even when postman tests fail
        with:
          name: reports
          path: docs/reports/

  interop-publish:
    name: Publish
    runs-on: ubuntu-latest

    # Publishing must only happen when triggered on the 'main' branch to prevent
    # tests on other branches from polluting the published reports. Note that
    # `always()`` is a special flag that is REQUIRED in order to get this job to
    # run if jobs listed in the `needs:` section fail.
    if: github.ref == 'refs/heads/main' && always()

    # All jobs for which output will be published must be complete before this
    # job can run.
    needs:
      - interop-sanity
      - interop-credentials-issue
      - interop-credentials-verify
      - interop-credentials-revocation
      - interop-did-web-discovery
      - interop-presentations-exchange
      - interop-presentations-exchange-oauth
      - interop-presentations-verify
      - interop-workflow-instance-join

    steps:
      # Check out repo, setup node, and install dependencies.
      # @see https://github.com/actions/setup-node#usage
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.15.1
          cache: 'npm'
      - run: npm ci

      # Download 'reports' artifact
      - uses: actions/download-artifact@v3
        with:
          name: reports
          path: docs/reports/

      # Build report index
      - name: Build JSON Index
        run: npm run report:index -- --folder interoperability

      # Set up Python 3.x
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: pip
      - run: pip install -r ./reporting/requirements.txt

        # Build interactive report
      - name: Build Interactive Report
        working-directory: ./reporting
        run: ./reporter.py --mode ci

      # Publish reports subfolder to GitHub Pages
      - name: Publish Reports
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/reports
          destination_dir: reports/interoperability
