name: Interoperability Report

on: ['push', 'workflow_dispatch']

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    # With the exception of GITHUB_TOKEN, secrets are not passed to the runner
    # when a workflow is triggered from a forked repository.
    if: "!contains(github.event.head_commit.message, '[skip ci]') && github.repository == github.event.repository.full_name"

    steps:
      - name: Check out git repository
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Install
        run: npm i
      - uses: actions/cache@v2
        id: cache-save
        with:
          path: |
            ./*
          key: ${{ github.sha }}
  # sanity:
  #   name: Sanity Test
  #   needs:
  #     - install
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/cache@v2
  #       id: cache-restore
  #       with:
  #         path: |
  #           ./*
  #         key: ${{ github.sha }}
  #     - name: Test Report
  #       run: |-
  #         npm run report:generate -- ./docs/tutorials/report-generation/report-tester.collection.json \
  #         --reporters cli,html,json
  #     - uses: actions/cache@v2
  #       id: cache-save
  #       with:
  #         path: |
  #           docs/reports/*.html
  #           docs/reports/*.json
  #         key: multiple-files-${{ hashFiles('docs/reports/*') }}
  test:
    needs:
      - install
    runs-on: ubuntu-latest
    strategy:
      # Matrix paths are independent, and failure for one provider should not
      # halt the running jobs testing another provider.
      fail-fast: false
      # See matrix of secrets...
      # https://sbulav.github.io/terraform/github-actions-matrix-secrets/
      matrix:
        include:
          # - organization_did_web: MAVENNET_STAGING_ORGANIZATION_DID_WEB
          #   client_id: MAVENNET_STAGING_CLIENT_ID
          #   client_secret: MAVENNET_STAGING_CLIENT_SECRET
          #   token_audience: MAVENNET_STAGING_TOKEN_AUDIENCE
          #   token_endpoint: MAVENNET_STAGING_TOKEN_ENDPOINT
          #   api_base_url: MAVENNET_STAGING_API_BASE_URL
          # - organization_did_web: MESUR_IO_PRODUCTION_ORGANIZATION_DID_WEB
          #   client_id: MESUR_IO_PRODUCTION_CLIENT_ID
          #   client_secret: MESUR_IO_PRODUCTION_CLIENT_SECRET
          #   token_audience: MESUR_IO_PRODUCTION_TOKEN_AUDIENCE
          #   token_endpoint: MESUR_IO_PRODUCTION_TOKEN_ENDPOINT
          #   api_base_url: MESUR_IO_PRODUCTION_API_BASE_URL
          - organization_did_web: TRANSMUTE_STAGING_ORGANIZATION_DID_WEB
            client_id: TRANSMUTE_STAGING_CLIENT_ID
            client_secret: TRANSMUTE_STAGING_CLIENT_SECRET
            token_audience: TRANSMUTE_STAGING_TOKEN_AUDIENCE
            token_endpoint: TRANSMUTE_STAGING_TOKEN_ENDPOINT
            api_base_url: TRANSMUTE_STAGING_API_BASE_URL

    steps:
      - uses: actions/cache@v2
        id: cache-restore-src
        with:
          path: |
            ./*
          key: ${{ github.sha }}
      # - uses: actions/cache@v2
      #   id: cache-restore
      #   with:
      #     path: |
      #       docs/reports/*.html
      #       docs/reports/*.json
      #     key: multiple-files-${{ hashFiles('docs/reports/*') }}
      #     restore-keys: |
      #       multiple-files-${{ hashFiles('docs/reports/*') }}
      #       multiple-files-

      - name: DID Web Discovery
        env:
          organization_did_web: ${{secrets[matrix.organization_did_web]}}
          client_id: ${{secrets[matrix.client_id]}}
          client_secret: ${{secrets[matrix.client_secret]}}
          token_audience: ${{secrets[matrix.token_audience]}}
          token_endpoint: ${{secrets[matrix.token_endpoint]}}
          api_base_url: ${{secrets[matrix.api_base_url]}}
        run: |
          npm run report:generate -- ./docs/tutorials/did-web-discovery/did-web-discovery.postman_collection.json \
          --env-var ORGANIZATION_DID_WEB=$organization_did_web \
          --env-var CLIENT_ID=$client_id \
          --env-var CLIENT_SECRET=$client_secret \
          --env-var TOKEN_AUDIENCE=$token_audience \
          --env-var TOKEN_ENDPOINT=$token_endpoint \
          --env-var API_BASE_URL=$api_base_url \
          --reporters cli,html,json
      - uses: actions/cache@v2
        id: cache-save
        with:
          path: |
            docs/reports/*.html
            docs/reports/*.json
          key: multiple-files-${{ hashFiles('docs/reports/*') }}
  publish:
    name: Publish
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        id: cache-restore-src
        with:
          path: |
            ./*
          key: ${{ github.sha }}
      - name: Bundle OAS JSON
        run: npm run preserve

      # - name: Download existing reports so they will be preserved in the next publish
      #   run: npm run report:append

      - uses: actions/cache@v2
        id: cache-restore
        with:
          path: |
            docs/reports/*.html
            docs/reports/*.json
          key: multiple-files-${{ hashFiles('docs/reports/*') }}
          restore-keys: |
            multiple-files-${{ hashFiles('docs/reports/*') }}
            multiple-files-
      - name: Publish Reports
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
