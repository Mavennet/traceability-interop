{
	"info": {
		"_postman_id": "0f1b33c5-de85-4e5e-a0c6-4f84c748d407",
		"name": "Service Providers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "DID Sanity Checks",
			"item": [
				{
					"name": "DID Configuration Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(",
									"    \"sanity\" + \"::\" + ",
									"    pm.variables.get(\"server\") + \"::\" + ",
									"    \"did\" + \"::\" + \"config\" + \"::\" + ",
									"    pm.request.url+ \"::\" + ",
									"    \"present\", ",
									"    function(){",
									"        pm.response.to.have.status(200);",
									"    }",
									");",
									"",
									"var didMethods = [\"key\",\"web\"]",
									"var linked_dids = JSON.parse(responseBody).linked_dids;",
									"// console.log('*** Server:', pm.variables.get(\"server\"),\"\\nLinked DIDs:\", linked_dids);",
									"",
									"for (method in didMethods) {",
									"    pm.test(",
									"        \"sanity\" + \"::\" + ",
									"        pm.variables.get(\"server\") + \"::\" + ",
									"        \"did\" + \"::\" + \"config\" + \"::\" + ",
									"        pm.request.url+ \"::\" + ",
									"        didMethods[method], ",
									"        function(){",
									"            var found = false;",
									"            for (did in linked_dids) {",
									"                // console.log('**** Checking did', linked_dids[did]);",
									"                if (linked_dids[did].issuer.includes(\"did:\"+didMethods[method])) {",
									"                    found = true;",
									"                }",
									"            }",
									"            pm.expect(found).to.be.true;",
									"        }",
									"    );",
									"}",
									"",
									"var now = new Date();",
									"for (did in linked_dids) {",
									"    didDoc = linked_dids[did];",
									"    pm.test(",
									"        \"sanity\" + \"::\" + ",
									"        pm.variables.get(\"server\") + \"::\" + ",
									"        \"did\" + \"::\" + \"config\" + \"::\" + ",
									"        didDoc.issuer+ \"::\" + ",
									"        \"issuanceDate\", ",
									"        function(){",
									"            var aDate = Date.parse(didDoc.issuanceDate)",
									"            pm.expect(now > aDate).to.be.true;",
									"        }",
									"    );",
									"    pm.test(",
									"        \"sanity\" + \"::\" + ",
									"        pm.variables.get(\"server\") + \"::\" + ",
									"        \"did\" + \"::\" + \"config\" + \"::\" + ",
									"        didDoc.issuer+ \"::\" + ",
									"        \"expirationDate\", ",
									"        function(){",
									"            var aDate = Date.parse(didDoc.expirationDate)",
									"            pm.expect(now < aDate).to.be.true;",
									"        }",
									"    );",
									"    pm.test(",
									"        \"sanity\" + \"::\" + ",
									"        pm.variables.get(\"server\") + \"::\" + ",
									"        \"did\" + \"::\" + \"config\" + \"::\" + ",
									"        didDoc.issuer+ \"::\" + ",
									"        \"VerifiableCredential\", ",
									"        function(){",
									"            pm.expect(didDoc.type.includes(\"VerifiableCredential\")).to.be.true;",
									"        }",
									"    );",
									"    pm.test(",
									"        \"sanity\" + \"::\" + ",
									"        pm.variables.get(\"server\") + \"::\" + ",
									"        \"did\" + \"::\" + \"config\" + \"::\" + ",
									"        didDoc.issuer+ \"::\" + ",
									"        \"DomainLinkageCredential\", ",
									"        function(){",
									"            pm.expect(didDoc.type.includes(\"DomainLinkageCredential\")).to.be.true;",
									"        }",
									"    );",
									"    pm.test(",
									"        \"sanity\" + \"::\" + ",
									"        pm.variables.get(\"server\") + \"::\" + ",
									"        \"did\" + \"::\" + \"config\" + \"::\" + ",
									"        didDoc.issuer+ \"::\" + ",
									"        \"origin\", ",
									"        function(){",
									"            pm.expect(didDoc.credentialSubject.origin == \"https://\"+pm.request.url.host.join('.')).to.be.true;",
									"        }",
									"    );",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/.well-known/did-configuration.json",
							"host": [
								"{{server}}"
							],
							"path": [
								".well-known",
								"did-configuration.json"
							]
						}
					},
					"response": [
						{
							"name": "DID Configuration Endpoint",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server}}/.well-known/did-configuration.json",
									"host": [
										"{{server}}"
									],
									"path": [
										".well-known",
										"did-configuration.json"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Length",
									"value": "1714"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Thu, 11 Mar 2021 17:14:40 GMT"
								},
								{
									"key": "Server",
									"value": "Caddy"
								},
								{
									"key": "Vary",
									"value": "Origin"
								}
							],
							"cookie": [],
							"body": "{\n    \"@context\": \"https://identity.foundation/.well-known/contexts/did-configuration-v0.2.jsonld\",\n    \"linked_dids\": [\n        {\n            \"@context\": [\n                \"https://www.w3.org/2018/credentials/v1\",\n                \"https://identity.foundation/.well-known/contexts/did-configuration-v0.2.jsonld\"\n            ],\n            \"issuer\": \"did:key:z6Mki93tJ2rwrDaWTMZcdMShk4xLWf75Fu559dAapKe8pdmX\",\n            \"issuanceDate\": \"2021-03-09T21:58:09.995Z\",\n            \"expirationDate\": \"2022-03-09T21:58:09.996Z\",\n            \"type\": [\n                \"VerifiableCredential\",\n                \"DomainLinkageCredential\"\n            ],\n            \"credentialSubject\": {\n                \"id\": \"did:key:z6Mki93tJ2rwrDaWTMZcdMShk4xLWf75Fu559dAapKe8pdmX\",\n                \"origin\": \"https://vc.mesur.io\"\n            },\n            \"proof\": {\n                \"type\": \"Ed25519Signature2018\",\n                \"created\": \"2021-03-09T21:58:10.060Z\",\n                \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQk-zlMce07uSb1MQHBXDk-IE4QnA_VGV56Md17biFBZdGBrrORIZbc0vRw8BmZ03N4cDU6_hfkgjIwTC-HRCw\",\n                \"proofPurpose\": \"assertionMethod\",\n                \"verificationMethod\": \"did:key:z6Mki93tJ2rwrDaWTMZcdMShk4xLWf75Fu559dAapKe8pdmX#z6Mki93tJ2rwrDaWTMZcdMShk4xLWf75Fu559dAapKe8pdmX\"\n            }\n        },\n        {\n            \"@context\": [\n                \"https://www.w3.org/2018/credentials/v1\",\n                \"https://identity.foundation/.well-known/contexts/did-configuration-v0.2.jsonld\"\n            ],\n            \"issuer\": \"did:web:vc.mesur.io\",\n            \"issuanceDate\": \"2021-03-09T21:58:10.000Z\",\n            \"expirationDate\": \"2022-03-09T21:58:10.000Z\",\n            \"type\": [\n                \"VerifiableCredential\",\n                \"DomainLinkageCredential\"\n            ],\n            \"credentialSubject\": {\n                \"id\": \"did:web:vc.mesur.io\",\n                \"origin\": \"https://vc.mesur.io\"\n            },\n            \"proof\": {\n                \"type\": \"Ed25519Signature2018\",\n                \"created\": \"2021-03-09T21:58:10.060Z\",\n                \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..HGBnLTv0py2eX7dy8q7U0QavQzf528Aow-DQyPQv5-5sxvsOYCzHyYsO41Eqlilcc8CZzLgy_SClinYvpVn6Aw\",\n                \"proofPurpose\": \"assertionMethod\",\n                \"verificationMethod\": \"did:web:vc.mesur.io#z6MkgZNUfVWUR8DAC4o6YiZ7xoqHcmzHeTYYATNrczvxUXDm\"\n            }\n        }\n    ]\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Service Liveness",
			"item": [
				{
					"name": "Alive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(",
									"    \"sanity\" + \"::\" + ",
									"    pm.variables.get(\"server\") + \"::\" + ",
									"    \"web\" + \"::\" + \"config\" + \"::\" + ",
									"    pm.request.url+ \"::\" + ",
									"    \"alive\", ",
									"    function(){",
									"        pm.response.to.have.status(200);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}/",
							"host": [
								"{{server}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var server = pm.iterationData.get(\"serviceProvider\");",
					"pm.variables.set(",
					"    'server',",
					"    server.baseURL",
					");",
					"// console.log('*** Got Service Provider:', pm.variables.get('server'))"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(",
					"    \"sanity\" + \"::\" + ",
					"    pm.variables.get(\"server\") + \"::\" + ",
					"    \"response\" + \"::\" + \"timing\" + \"::\" + ",
					"    pm.request.url+ \"::\" + ",
					"    pm.response.responseTime, ",
					"    function(){",
					"        pm.expect(pm.response.responseTime).to.be.below(Number.parseInt(pm.variables.get(\"responseTime\")));",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "responseTime",
			"value": "1000"
		}
	]
}

