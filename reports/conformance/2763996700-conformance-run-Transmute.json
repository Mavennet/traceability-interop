{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "62b028d0-6fb0-41ce-b433-3b62b6825f14",
        "name": "API Configuration",
        "item": [
          {
            "id": "b024ad45-010d-405f-8a0b-ba73d7728bcd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8cae1e28-c697-4c99-a030-dbd5ee6fc5ba",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6440543-76ee-48a0-90d1-0fd915646747",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bed1cca4-6ade-4d4e-bf27-852c1fb6559e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "10ff2f83-6020-4f35-997b-0d12415d042c",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "828b8cf0-389d-42dd-9a54-2b582561dd5f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eae6ab90-d82f-4456-8695-23dc0d9a13df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a883c79-2796-4904-a3d2-ba1c790ea2aa",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db59be1a-1a16-47dc-ad3c-eff96ea3198b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6ad2305-e329-4dac-9ceb-49e87ffc0c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce91378-5a9b-4267-a304-cb89456a234a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be363c5a-34ab-4c53-9df1-1c60a35158c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8a32cd-1546-4272-99c8-c56cfc89c45b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff3aa04-c2a4-438c-af24-29ec92abf93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "716b532d-2858-4468-be05-8bb941552c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12b098d-c831-4c29-a970-4936e3040607",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76d91346-85f5-4790-9072-c29be4caf321"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e754ee48-898c-46e5-ac88-5d6a34d13faa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a44e7a4-41c7-4d9d-a48c-7c4cdd71d1f9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a056865b-1283-4d85-8fc9-ac58ab7d6d0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ba2605fe-1d17-4a08-b704-80fdd5299681"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06b9ceb5-8e8a-4fbd-b582-d2eeefca2eb3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "454abb57-a9e5-4370-9ec7-91340f11f520"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ecffcaf-3b89-4b88-9b3f-d42197f2c239",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dfb95377-8111-4d76-9724-96e2143837b0"
            }
          }
        ]
      },
      {
        "id": "7cef0b77-7a67-429f-8c6b-36e627ff1f5a",
        "name": "Issue Credential",
        "item": [
          {
            "id": "04d2378d-2183-4035-b0ee-cfcfe900c9e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2daee35a-0372-4af4-8d76-aec940602b4a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cf62e600-d854-4042-a5e0-571aa8ed25e0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc7f962-b6e1-4bbc-b227-64420aecfe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45dfd48b-8218-4c59-9e89-3df6db5f4a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909e5afc-9f31-4df2-b225-66da652a87c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427a0874-e6a8-4696-963a-e6c9447e12dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f3dc00-8397-4b74-be9b-f557ea9be703",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7ee1e9-368f-49d9-b27c-925435b8ec24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1795151-33ce-4dab-aeee-c28967cf3cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601f967d-40fb-4801-92ef-90efde0c188b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9f62dce-e949-43e1-a5b8-a0f55a857426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde86610-bf79-4f7d-ae57-3951bd8df9f1",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c91abe-883e-49eb-92df-5b12f103526c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94b57ed-d62c-4146-95d2-10ee1c93cdb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663f9969-ed08-4dc6-8940-56ada8755ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f88ed78-71a4-4a67-9035-473f8f621d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4288b5b-b2ad-45a9-b181-20d950791c33",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f544b4b-76dd-448b-8864-ae9d518fff67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f169e66-5e5f-4b2e-aa5b-2dcc1a8b5b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743c59df-5219-4fde-8cbd-a7cd4807d235",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62aa1e02-351d-4c2a-8003-e49a45a44db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a5cc98-959d-40e2-a880-c864b3743a14",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fd3e03-cc52-45a4-941d-3a8cbf160372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a13951b-7fd7-41b9-ad66-96031410bc03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f486f2d-ef39-4bcd-81de-7fc98010c315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5090cfa9-fd6a-400e-8344-112321ca4743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30637043-66fb-499b-8b62-9d435e9c6a9c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb39f17-189d-4cc3-9ec8-7b20753a0303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c673a17-74b3-480e-9e1f-d360bfb3440c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e41db52-fc66-4fce-81d3-c2c5b98169fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c796108-2691-4583-a60f-772426e80c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fdda41b-ec68-4aa0-be75-b239e2ee6e21",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e14b96-ea7b-4a00-9dc2-cab5f40bc7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4dae747-5ef1-4069-975a-8bae04bcb8d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475912c8-8474-46e7-bb22-51e2a454a780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8552c41-a9c7-42d6-88df-8496dea601fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32b1c54-ecb9-4303-9e02-bf683fb58347",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fc71cf-82d4-45ce-a434-e77ef44603d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f5d441-5817-4d3e-8d5a-6a4194d65a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0f875c-1d7b-4243-80b2-6920ecd24351",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1f30287-cb5a-45b1-b908-fa4c4e1515ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d011399-834a-4ce9-9077-6c2264930e48",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1885f11a-6aaa-441c-8d4e-63584083d897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7cb576e-75ef-4784-aa15-6b33762f4003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4c150f-2058-4533-94d0-e8be5ccf7bdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5203f4b-9ee8-4112-ac75-df985470c5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56171813-c392-422e-8940-d485336a8c01",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e16257-77b6-40d7-a4ba-e717b2961215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c257bffe-15e6-4ac5-a320-d030d2aee04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a80aac-091c-46f4-9910-3a0389993a14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15753006-82df-41d3-8859-c49103d7eb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae137f0-bd46-4085-a0d8-77825d374859",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fea637-7b1d-4dc3-b8b7-561d20bd35b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cc42ec-98e4-4151-add9-81c6a49b654c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fa2d2e-8baf-4335-90ec-78dd95b830b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8790be76-ed63-47aa-8337-1fd524da7ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab598d7d-535a-49dc-81d7-9e87d64e0c50",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3930049f-970a-47c5-99d1-60959d8b46d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b89c35-bc19-41d3-86c3-0006f8a06b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d32b70c-5658-4cd0-890a-8e7060f04fcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20343fe1-e799-46d3-99b1-b0aa588e027d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e44b54-44cc-49ec-b679-2df8f8d155e1",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e18a1a-7d4f-4bcf-bea7-991ff38de0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d01117a-8da3-4917-9391-dff9699b776b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3955c33f-e593-4b7d-8d13-0699a6cff8bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "4fd2e606-ad3c-4509-a8e9-a992f27f37d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff3ab6f-93cc-42c4-96f8-af4f40dd8d1b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5f2109-8a3b-41d8-b2b8-f7326d0bc226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069f7a42-5f7f-4aaf-a88b-5c2e90fb7770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab1b5af-70ee-459b-a2de-719a369ade58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f0ef4aa-76db-4db8-b0d5-45e1501ef8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c1e8e1-ef89-4ed9-b31f-dbcf22a8c224",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad473a5-7efc-490d-aac4-4f656112269b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee09a84-9444-435e-ae33-2cab6827bfa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febd0452-bccb-4d8d-a3ae-c44075d02e1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee502ac8-07a5-41de-9a41-336428267816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20eb23ae-bb5e-4adc-9a7e-77af658038ee",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c32b336-dcd5-4425-abae-8b8fcdfd22fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd410b4-8886-4a19-893a-88fa43ba7e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f81cb4-c488-4b56-ac27-769228016a4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee7bb45-e6a9-4874-a64a-d524036d4587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6695cd90-f9f7-4b17-89c4-fe6470c44871",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e220fd15-3b97-46d7-b3f9-f6a870773a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac15ee9-b83c-469f-817c-e13dd89b44b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a021e6-5cb8-4dfc-965a-a5477eafcaaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549e6c58-cdba-4d70-851d-6806212cb15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa564143-8dd1-41bc-9008-18da926e4983",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4932361c-380b-47fb-a4d6-3a0f0e4d8502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5af4aec-8aca-4103-83c1-3565594c21bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87612607-1402-40a5-9e62-41841f27f13d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bc28c6b-d918-4514-8226-ae723cd9a042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c998b15-73b9-46cc-b79b-313d9bc05ccd",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcdcb7a-9e07-4d9e-9524-c8dfb8f4fa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e572a566-66e1-4ce0-ac1b-43e1b40654a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66aaf5e4-85ce-454d-9614-eff07f47970d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b0a9e79-b5e3-4226-9a01-bfa1695b9de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633a3490-cc1f-4d0e-ae2d-f441874f17c7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3ce9b9-1ee9-48d9-a799-285c9c46e50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b1ff95-d43c-4e6a-a035-ca01ea35e9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a575d6ba-b25d-41af-803f-f752cab974ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "250f3825-c6c4-4bc2-bebc-0861d730e605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a4a350-1031-4c56-8d01-bcab1431db0e",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6d8cd2-b7c2-40bc-a46c-80dbaf7ac8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8401d66-b47f-4649-9bdc-a31593baa131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e21883-a981-4153-90b6-fbb8ec3e7f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06448b8e-15d4-428c-bf7e-a64eb9c43407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a0cc04-12d9-4905-80a2-3e52db77a199",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d7a614-21cd-4583-9d6e-a331fa128015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5443fedb-342b-45b8-ad53-c0930e66d755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b96c5c-1a64-4715-a881-2b5279fcb572",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9e2153a-f246-4aab-ac6c-12c95f9e3298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32978516-3f91-49db-9471-e2cb5805e3fc",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9dedb6-b4fa-4069-b189-5469fca595f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffbe374-8c5d-4c14-a234-d9b6d5261e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c320fa1f-19da-4137-9527-1fb194c35a1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d02fba0f-1597-43d9-8aba-a44ed9f63531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3af697-426e-43e6-8017-9191e70967a9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa25b0bd-32a1-446e-a2c2-8c727aac00ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fed6d95-7d88-4b1c-95a7-da94e55b42ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77275747-c9f1-49c1-a26e-5faaf7770f83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c91dd3cc-eebc-433f-8880-1b528799a85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2652e72c-f7a2-4030-bcd2-5bdd872b40cb",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388a72f6-7169-44ab-ac9b-d6ccc56380b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147a1318-4475-4c09-b703-fd5e1ff23488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee744a3-3f8f-4483-96fd-99491da4b1b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d035d99-f2bc-493a-b43a-9da02f8e419d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8b1b0b-75d7-4055-adf5-614514815dba",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1eea00-d39b-4f55-9224-e477e99609a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb6bf2a9-e500-41f9-b64b-c3460e973b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0522bf0b-78f3-4d6b-a836-0d1e2a3c23ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7793a7a0-af53-4fdb-88d3-b4b90058b001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ea784e-5843-42a8-86f5-f862d61bdac6",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde47393-4037-450c-89d0-da76e9c459f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e34e17-fccd-4174-a4f4-861d0ea0e618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e45453-7dee-4eba-b9e3-efc387fc210c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf57803-6953-491a-88ee-1691138542db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f44cdcf-26dc-4b87-becc-89d78b6c5d82",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f39a35-c213-43a8-9fe0-cef903f7f653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9b0c0137-af9f-4958-a16f-6ce64a39bbad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025d68b3-9d02-467b-8df9-dcfdd6047ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "479ccf98-3d52-4b8f-9cce-90b9061c1c4f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1b76c4e8-98b0-41f5-a410-08ec962dd2f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20311f6d-b4f8-4bff-b449-bb97c665f09c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4796a3e-3e23-4552-874b-be8fbff2c14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31c6b9bb-b4b6-41f4-9f03-eb4035332eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e733d7-1495-4a4a-8439-9d7f246414d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "a15c132d-12b1-4797-9443-4c837fc01412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97842da8-0b08-4602-b703-ecf5cd474e44",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f125d5c4-9b72-4ea7-80ed-145191b3d0cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dac51810-3591-4896-a536-adc6b0adc255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9e19ff-c271-449d-b6f4-a93af8e39f5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "553fe37d-3dd9-4bbd-b5fd-2bc41d6176c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23207eb9-90f7-49a1-849d-23b42723dd36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54871775-ae3a-459c-aa45-4e95c1c2adec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b57d5a03-bbf0-416a-924f-5814151dede1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bb1931e-67f9-40e5-a7d2-693c10193d3d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b97cabd9-7fb3-4412-b618-e517de53ebd6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b37b327-5d92-42cc-8ae5-0b5121ddd353"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "79bebaf1-e2c8-494c-8d9b-d9ac1e959ef9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78c681c2-7528-4684-8694-b9d57567c5dc"
                }
              }
            ]
          },
          {
            "id": "8529e9c2-8ae3-49e2-b5ef-5d2845ad9dad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "858e10a8-0f50-4fe2-bcf3-a69de9a7c5da",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ad02ab5-c5e9-462f-b87f-77436c460d50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65ba8cc1-e929-4762-b64c-37b6612316b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbcd30f5-da75-4bba-b164-8fd1b013680e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "bacb174a-3044-468f-abb1-00d09b33a30d"
                    }
                  }
                ]
              },
              {
                "id": "dd579c46-b723-4895-bb10-23e594f7a2fc",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a5e354b-5f7c-46b9-845f-f7246dce6a18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2399702-e338-4d79-8839-adbb5d8161c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47be8887-ee2e-4a71-ac33-35bab7986959",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "dbf66703-e7e9-4991-8955-d46f0e5dc120"
                    }
                  }
                ]
              },
              {
                "id": "f55b7975-67fa-4ae3-b974-07afa2f69ce2",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00aca740-b2d9-44cb-9a41-f9fc958b2f8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d565843b-ab82-43ec-97d3-f5cee4daaceb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e76be143-14a5-4a30-93c4-038aaa1d90ef",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "50275440-29d4-4b56-a495-8f2b0f91088a"
                    }
                  }
                ]
              },
              {
                "id": "d1c9caf2-0a8b-422e-8aba-56aa89975ae9",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47de755e-3840-4841-837b-5027fa657849",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3601fdf-9f15-4818-aec2-013f41f9008e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a9c16af-e82f-46e5-b74d-023b86fe17ae",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "b731e97e-3a96-4851-8b23-012d61c12466"
                    }
                  }
                ]
              },
              {
                "id": "52109c58-9008-406e-b5b1-e52b33a0b0cc",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7254bc4f-d443-4872-89c4-0a9c29afc8d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f01bd9ca-8398-45fb-b127-669885bd3fcc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5f2f00b-c009-41b4-a507-febb7395ac4f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "9930cf11-ae8f-4dbe-98f5-c22f2e75cded"
                    }
                  }
                ]
              },
              {
                "id": "56dd7ac3-6381-4a7f-aeaa-bd5fe9a041fe",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87b1d239-a476-4c8e-b886-b80eaa3d6e6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f43f5f83-2ad1-40ed-b57a-6dfb801272b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dad7ae39-3556-4a56-a97a-7153e9eb7859",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "6f57b3d6-4c58-45f9-9f32-5263c23bfe07"
                    }
                  }
                ]
              },
              {
                "id": "84b30b5a-8fff-476e-95fc-85de6a9da822",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a412a90-c46b-42e9-8530-16584d0cd5f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b828584-d8e8-4d97-aa35-78dfdbab7392"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65eda193-b03b-4aa9-843c-e57e489f95b4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "cb34855c-7f1e-42b7-a6db-366591d785ab"
                    }
                  }
                ]
              },
              {
                "id": "dcc7345a-03f6-484a-9fc1-2918942d9eb7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbb08a5d-58c9-4178-8b2e-4207bb98b1cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9fec740-ae47-4d60-ac3f-663f16928d9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fcc4e4b-da75-4267-aba3-e07a2db76f23",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "097af5c2-eee9-4f8d-8947-42f9fa766fce"
                    }
                  }
                ]
              },
              {
                "id": "3f0e91c3-57f1-4e8b-aff8-020192f3bed2",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44a69673-bccf-4000-9626-776a5c70c231",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3855b8b-a028-4838-ac4c-d402fba78443"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5980b098-9e5b-48b8-ace7-ceebf3c48c4a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "726e3582-4f03-414b-81f3-267df0615e5f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "808400b0-e4e5-494a-8158-15ecc4712df2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a16abb1-02e1-4599-956c-f34d455a5efe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ac070e51-8883-4c30-b563-d80810c2f4f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8df6beed-125e-4ef6-b4c2-425774ce435f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f10e7f4-5197-4c50-9f55-539522812bd0",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "c56721e4-8c79-46e9-a08c-bce0f1c8f8ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "438a66a9-a85c-4cb3-971b-c131fdad0147",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55d4d142-0483-41fe-af98-cc002b1925e7"
            }
          }
        ]
      },
      {
        "id": "5d1de6e5-1785-491f-8428-ddef35583426",
        "name": "Credentials Status",
        "item": [
          {
            "id": "7dd3c170-07aa-4fea-83c6-82d65254230d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24f9d42d-5ad6-4b0d-92e7-b6ece30e927c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "744a56fe-6ac2-46bb-89eb-9a98163bd7bb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b7a028-fd7d-4406-bba3-bb5687d08b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c45b9ca-71d4-47f5-b040-d6cda4a31e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c8ef86-f6c7-4402-9fa5-5f67138d5732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f97b85c-c2d3-41eb-bf17-e28aa9e08cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de08c6e7-2ae7-4a9c-8a95-ba0c7f79a8f7",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46aaf9cb-f360-4070-8fd2-f4a9e416e898",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf59d927-8a83-47b2-9bcb-eaf14d9f0022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce6fcb9-c2b0-463c-8379-9f318cc0be25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c66c9fc7-9ae8-4995-9bab-9e5b35733456"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e57e1409-bbdb-4c86-87b4-03690280c5e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebc247bf-97be-4eb4-ab6d-a566503be4c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ed90dd6-ce8a-4e26-918f-dcc097dc72ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bf357ed-c33c-4fd7-a975-2d3aa1a3eebf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7b19b37-f01c-4edb-89cf-e89bf52fb8f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "0504a1d9-2e28-4c52-84fc-ad9a222f930e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a85ea72-6644-4e70-ac5c-e23621983049",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "036ba568-93b0-48f7-96c1-1286871223c2"
            }
          }
        ]
      },
      {
        "id": "c0c31023-f2c8-4814-beeb-a694ff29f50d",
        "name": "Presentations",
        "item": [
          {
            "id": "beb8b4b0-0b3c-459d-afd1-1603d814db5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f322aa1c-cf7d-4e03-b3cf-1bc0cf37d3d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8cbf891-390a-4aba-8cae-895fea320dae",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3052f97e-aa3b-4d13-b047-85214256709d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41974e5-25d2-4ef1-8255-7dd6869981c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5450ce-7c09-4a39-9d4e-6eb22fde2365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "938678aa-994e-430d-8a06-90cbfa139f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc9f228-4382-4bf8-84c2-5b1e9ba9f4b3",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2edffe-6e7e-47af-bd3c-0d4b74d14f10",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28e5a002-b6de-4f9c-96af-709ab8de300b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e671b86-5323-4eb9-80ab-4c01d1662412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fad21be0-2dca-47b1-8650-b18745a0b8cd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eac0a053-c448-4839-848f-15e9db314ebb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c246b9f7-67c2-4257-a4ce-673fe2ea3017"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54625eb0-4edb-4093-b206-2fb30fe7fa51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58bd2d8c-8592-45cb-8b64-b08be6845975"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7610cfb8-68f1-4b46-828e-2ffbafa18b0f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "29c6ff71-a27f-40b0-85e9-43a606415d1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11d6ace1-96bf-4631-9d3c-5d9920667a48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f928d73a-ef38-4adb-af8d-827aa2726b4d"
            }
          }
        ]
      },
      {
        "id": "1545b82e-64fd-49e7-9ff8-d6aa3c3bd5f0",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "5d96f234-565b-43a4-9f45-067ad27b209b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5790ae58-e63f-44d2-b1cf-4968f985ebf1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a71a1609-f61f-4d1f-a7e4-56378915faec",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84027b75-0ee6-45db-8362-4a6c9f06df92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29dde09c-f1de-45b0-b999-95278b011902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41114422-2b8f-4265-bca7-c0690f570acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1fa787d4-1ccc-4b19-8f22-a42a860f3a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c62bca-77d0-4646-be72-fedcb3b89f7a",
                    "name": "credentials_verify:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96f0d4f-25e0-463d-88f3-4c2373a38276",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "333f5321-4e50-4559-9b3b-6d03d20787c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461fadfa-b666-467f-9bce-3404d3d237a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40c09dfa-1574-42da-bc3c-09d21aee1060"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48ea58bf-b86a-4f38-b561-19597860d740",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbe31d6b-f662-46be-b47a-629bfd60c7fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8838028-85b9-4fff-b168-6616b7073139",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b86866ff-c92d-4c07-9b58-3c95506da4f7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93ffa047-0fff-44f1-840c-5d25faecf74c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "d327150a-ba28-4192-98df-be76f63ecd7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e42b8818-9942-4c17-9a4b-3eeccb5b8c58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f24af3c-d1ab-4d36-a672-93730febb308"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 384,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 102,
        "pending": 0,
        "failed": 102
      },
      "tests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 98,
        "pending": 0,
        "failed": 96
      },
      "testScripts": {
        "total": 193,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 191,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1659140434908,
      "completed": 1659140437457
    },
    "executions": [
      {
        "id": "8cae1e28-c697-4c99-a030-dbd5ee6fc5ba",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 49,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f6952370-9086-4f41-abc3-8c7c07a28bd7",
          "httpRequestId": "3d52f7b2-0208-46b5-89ac-8cc23716d42e"
        },
        "item": {
          "id": "8cae1e28-c697-4c99-a030-dbd5ee6fc5ba",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "6a883c79-2796-4904-a3d2-ba1c790ea2aa",
        "cursor": {
          "ref": "d1b9defa-7ca1-4260-bbde-7ae3caa27080",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6154b2ce-d538-48dd-b23e-1a257afe44c0"
        },
        "item": {
          "id": "6a883c79-2796-4904-a3d2-ba1c790ea2aa",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "6a883c79-2796-4904-a3d2-ba1c790ea2aa",
        "cursor": {
          "ref": "d1b9defa-7ca1-4260-bbde-7ae3caa27080",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6154b2ce-d538-48dd-b23e-1a257afe44c0"
        },
        "item": {
          "id": "6a883c79-2796-4904-a3d2-ba1c790ea2aa",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "ed8a32cd-1546-4272-99c8-c56cfc89c45b",
        "cursor": {
          "ref": "0b4e0855-ca20-4a02-af0d-ab39a1654eff",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0af18915-19e7-4c7a-a4e7-33415cc5b2f1"
        },
        "item": {
          "id": "ed8a32cd-1546-4272-99c8-c56cfc89c45b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "ed8a32cd-1546-4272-99c8-c56cfc89c45b",
        "cursor": {
          "ref": "0b4e0855-ca20-4a02-af0d-ab39a1654eff",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0af18915-19e7-4c7a-a4e7-33415cc5b2f1"
        },
        "item": {
          "id": "ed8a32cd-1546-4272-99c8-c56cfc89c45b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "ed8a32cd-1546-4272-99c8-c56cfc89c45b",
        "cursor": {
          "ref": "0b4e0855-ca20-4a02-af0d-ab39a1654eff",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0af18915-19e7-4c7a-a4e7-33415cc5b2f1"
        },
        "item": {
          "id": "ed8a32cd-1546-4272-99c8-c56cfc89c45b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "4a44e7a4-41c7-4d9d-a48c-7c4cdd71d1f9",
        "cursor": {
          "ref": "586479c5-0841-498b-ad29-71441e04eda4",
          "length": 49,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4a988ea6-0f52-455e-8940-3a330b596b49"
        },
        "item": {
          "id": "4a44e7a4-41c7-4d9d-a48c-7c4cdd71d1f9",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4a44e7a4-41c7-4d9d-a48c-7c4cdd71d1f9",
        "cursor": {
          "ref": "586479c5-0841-498b-ad29-71441e04eda4",
          "length": 49,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4a988ea6-0f52-455e-8940-3a330b596b49"
        },
        "item": {
          "id": "4a44e7a4-41c7-4d9d-a48c-7c4cdd71d1f9",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cf62e600-d854-4042-a5e0-571aa8ed25e0",
        "cursor": {
          "ref": "3eb7d18f-9cef-4d70-a1ab-fbc67c37f80f",
          "length": 49,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3dab9c00-a85e-4be9-a9ea-67f2f9c88f31"
        },
        "item": {
          "id": "cf62e600-d854-4042-a5e0-571aa8ed25e0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "cf62e600-d854-4042-a5e0-571aa8ed25e0",
        "cursor": {
          "ref": "3eb7d18f-9cef-4d70-a1ab-fbc67c37f80f",
          "length": 49,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3dab9c00-a85e-4be9-a9ea-67f2f9c88f31"
        },
        "item": {
          "id": "cf62e600-d854-4042-a5e0-571aa8ed25e0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "d7f3dc00-8397-4b74-be9b-f557ea9be703",
        "cursor": {
          "ref": "c186b2e9-71ce-45e9-aba9-d449ed1c5026",
          "length": 49,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "94e62a1c-a742-4160-8c82-b0921aef0902"
        },
        "item": {
          "id": "d7f3dc00-8397-4b74-be9b-f557ea9be703",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "d7f3dc00-8397-4b74-be9b-f557ea9be703",
        "cursor": {
          "ref": "c186b2e9-71ce-45e9-aba9-d449ed1c5026",
          "length": 49,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "94e62a1c-a742-4160-8c82-b0921aef0902"
        },
        "item": {
          "id": "d7f3dc00-8397-4b74-be9b-f557ea9be703",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "dde86610-bf79-4f7d-ae57-3951bd8df9f1",
        "cursor": {
          "ref": "1a2ed525-b672-438b-b21e-4b61fa0745bc",
          "length": 49,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f78a867f-ed45-400e-9016-41cf3a7770c3"
        },
        "item": {
          "id": "dde86610-bf79-4f7d-ae57-3951bd8df9f1",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "dde86610-bf79-4f7d-ae57-3951bd8df9f1",
        "cursor": {
          "ref": "1a2ed525-b672-438b-b21e-4b61fa0745bc",
          "length": 49,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f78a867f-ed45-400e-9016-41cf3a7770c3"
        },
        "item": {
          "id": "dde86610-bf79-4f7d-ae57-3951bd8df9f1",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e4288b5b-b2ad-45a9-b181-20d950791c33",
        "cursor": {
          "ref": "cfa31699-bd05-4973-999a-28d17f1ca384",
          "length": 49,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "56fb1141-e7c3-4440-be3a-2e4734d2479c"
        },
        "item": {
          "id": "e4288b5b-b2ad-45a9-b181-20d950791c33",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e4288b5b-b2ad-45a9-b181-20d950791c33",
        "cursor": {
          "ref": "cfa31699-bd05-4973-999a-28d17f1ca384",
          "length": 49,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "56fb1141-e7c3-4440-be3a-2e4734d2479c"
        },
        "item": {
          "id": "e4288b5b-b2ad-45a9-b181-20d950791c33",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c7a5cc98-959d-40e2-a880-c864b3743a14",
        "cursor": {
          "ref": "b291a8d4-31ca-4802-bb9c-001ca97efdd0",
          "length": 49,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e886adca-1c10-4c08-8afe-6ebf4174227c"
        },
        "item": {
          "id": "c7a5cc98-959d-40e2-a880-c864b3743a14",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "c7a5cc98-959d-40e2-a880-c864b3743a14",
        "cursor": {
          "ref": "b291a8d4-31ca-4802-bb9c-001ca97efdd0",
          "length": 49,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e886adca-1c10-4c08-8afe-6ebf4174227c"
        },
        "item": {
          "id": "c7a5cc98-959d-40e2-a880-c864b3743a14",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "30637043-66fb-499b-8b62-9d435e9c6a9c",
        "cursor": {
          "ref": "2bbcdfd5-fbc1-469b-9a1f-ca5466a64113",
          "length": 49,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "69aae2b4-29f2-4cfd-b0d2-bd2ff1c53ebe"
        },
        "item": {
          "id": "30637043-66fb-499b-8b62-9d435e9c6a9c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "30637043-66fb-499b-8b62-9d435e9c6a9c",
        "cursor": {
          "ref": "2bbcdfd5-fbc1-469b-9a1f-ca5466a64113",
          "length": 49,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "69aae2b4-29f2-4cfd-b0d2-bd2ff1c53ebe"
        },
        "item": {
          "id": "30637043-66fb-499b-8b62-9d435e9c6a9c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "6fdda41b-ec68-4aa0-be75-b239e2ee6e21",
        "cursor": {
          "ref": "750e527d-3b7c-4cd2-9a7f-46b4d0cc62e1",
          "length": 49,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "662354f0-b778-4328-9787-fcc729b17fc6"
        },
        "item": {
          "id": "6fdda41b-ec68-4aa0-be75-b239e2ee6e21",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "6fdda41b-ec68-4aa0-be75-b239e2ee6e21",
        "cursor": {
          "ref": "750e527d-3b7c-4cd2-9a7f-46b4d0cc62e1",
          "length": 49,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "662354f0-b778-4328-9787-fcc729b17fc6"
        },
        "item": {
          "id": "6fdda41b-ec68-4aa0-be75-b239e2ee6e21",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "a32b1c54-ecb9-4303-9e02-bf683fb58347",
        "cursor": {
          "ref": "af50b981-c8a7-44ea-9506-accb23da6954",
          "length": 49,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bc306a38-bb85-4937-9850-e5bc3def046d"
        },
        "item": {
          "id": "a32b1c54-ecb9-4303-9e02-bf683fb58347",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "a32b1c54-ecb9-4303-9e02-bf683fb58347",
        "cursor": {
          "ref": "af50b981-c8a7-44ea-9506-accb23da6954",
          "length": 49,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bc306a38-bb85-4937-9850-e5bc3def046d"
        },
        "item": {
          "id": "a32b1c54-ecb9-4303-9e02-bf683fb58347",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "0d011399-834a-4ce9-9077-6c2264930e48",
        "cursor": {
          "ref": "510f7371-9981-43fc-92e4-ac7b60f85a3d",
          "length": 49,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "27101976-207b-45e6-a65f-a40365dac7d0"
        },
        "item": {
          "id": "0d011399-834a-4ce9-9077-6c2264930e48",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "0d011399-834a-4ce9-9077-6c2264930e48",
        "cursor": {
          "ref": "510f7371-9981-43fc-92e4-ac7b60f85a3d",
          "length": 49,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "27101976-207b-45e6-a65f-a40365dac7d0"
        },
        "item": {
          "id": "0d011399-834a-4ce9-9077-6c2264930e48",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "56171813-c392-422e-8940-d485336a8c01",
        "cursor": {
          "ref": "50638442-cbbb-4709-947d-7d551baf8747",
          "length": 49,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0c48364c-9e9f-4b2b-b9ef-1ebc52929e75"
        },
        "item": {
          "id": "56171813-c392-422e-8940-d485336a8c01",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "56171813-c392-422e-8940-d485336a8c01",
        "cursor": {
          "ref": "50638442-cbbb-4709-947d-7d551baf8747",
          "length": 49,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0c48364c-9e9f-4b2b-b9ef-1ebc52929e75"
        },
        "item": {
          "id": "56171813-c392-422e-8940-d485336a8c01",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "eae137f0-bd46-4085-a0d8-77825d374859",
        "cursor": {
          "ref": "fbf3026c-69a7-4713-ba19-95394b3bb265",
          "length": 49,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9620ed11-91ae-4a44-b233-1e95a2db196f"
        },
        "item": {
          "id": "eae137f0-bd46-4085-a0d8-77825d374859",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "eae137f0-bd46-4085-a0d8-77825d374859",
        "cursor": {
          "ref": "fbf3026c-69a7-4713-ba19-95394b3bb265",
          "length": 49,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9620ed11-91ae-4a44-b233-1e95a2db196f"
        },
        "item": {
          "id": "eae137f0-bd46-4085-a0d8-77825d374859",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "ab598d7d-535a-49dc-81d7-9e87d64e0c50",
        "cursor": {
          "ref": "1bb129a0-9b87-4b52-8817-6d3ecad229d0",
          "length": 49,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6ad9db29-6cc1-4698-a53b-fb0cf4a6ebcb"
        },
        "item": {
          "id": "ab598d7d-535a-49dc-81d7-9e87d64e0c50",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ab598d7d-535a-49dc-81d7-9e87d64e0c50",
        "cursor": {
          "ref": "1bb129a0-9b87-4b52-8817-6d3ecad229d0",
          "length": 49,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6ad9db29-6cc1-4698-a53b-fb0cf4a6ebcb"
        },
        "item": {
          "id": "ab598d7d-535a-49dc-81d7-9e87d64e0c50",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b3e44b54-44cc-49ec-b679-2df8f8d155e1",
        "cursor": {
          "ref": "e6d71539-704e-440c-b9fe-6b7bfd5e1469",
          "length": 49,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f5adb492-9c4b-449d-8d9a-e1129d208794"
        },
        "item": {
          "id": "b3e44b54-44cc-49ec-b679-2df8f8d155e1",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b3e44b54-44cc-49ec-b679-2df8f8d155e1",
        "cursor": {
          "ref": "e6d71539-704e-440c-b9fe-6b7bfd5e1469",
          "length": 49,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f5adb492-9c4b-449d-8d9a-e1129d208794"
        },
        "item": {
          "id": "b3e44b54-44cc-49ec-b679-2df8f8d155e1",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "aff3ab6f-93cc-42c4-96f8-af4f40dd8d1b",
        "cursor": {
          "ref": "4ece862b-e263-4b9e-bfa5-c492ec5d31b7",
          "length": 49,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "acc32837-6cee-4f3b-b917-d24cb0ba43c7"
        },
        "item": {
          "id": "aff3ab6f-93cc-42c4-96f8-af4f40dd8d1b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "aff3ab6f-93cc-42c4-96f8-af4f40dd8d1b",
        "cursor": {
          "ref": "4ece862b-e263-4b9e-bfa5-c492ec5d31b7",
          "length": 49,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "acc32837-6cee-4f3b-b917-d24cb0ba43c7"
        },
        "item": {
          "id": "aff3ab6f-93cc-42c4-96f8-af4f40dd8d1b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "d7c1e8e1-ef89-4ed9-b31f-dbcf22a8c224",
        "cursor": {
          "ref": "b2ec5560-0c63-4c53-b226-aa8fd67fb48d",
          "length": 49,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "46cdb244-15fe-4071-ac8b-a17bac37761a"
        },
        "item": {
          "id": "d7c1e8e1-ef89-4ed9-b31f-dbcf22a8c224",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "d7c1e8e1-ef89-4ed9-b31f-dbcf22a8c224",
        "cursor": {
          "ref": "b2ec5560-0c63-4c53-b226-aa8fd67fb48d",
          "length": 49,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "46cdb244-15fe-4071-ac8b-a17bac37761a"
        },
        "item": {
          "id": "d7c1e8e1-ef89-4ed9-b31f-dbcf22a8c224",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "20eb23ae-bb5e-4adc-9a7e-77af658038ee",
        "cursor": {
          "ref": "30f65c57-a36b-4a51-9aac-95a8939a7e21",
          "length": 49,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f5d35726-fb95-4de3-94bb-aeeeef9178d0"
        },
        "item": {
          "id": "20eb23ae-bb5e-4adc-9a7e-77af658038ee",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "20eb23ae-bb5e-4adc-9a7e-77af658038ee",
        "cursor": {
          "ref": "30f65c57-a36b-4a51-9aac-95a8939a7e21",
          "length": 49,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f5d35726-fb95-4de3-94bb-aeeeef9178d0"
        },
        "item": {
          "id": "20eb23ae-bb5e-4adc-9a7e-77af658038ee",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6695cd90-f9f7-4b17-89c4-fe6470c44871",
        "cursor": {
          "ref": "3f0c7018-20a3-4a50-a50a-45be772d4438",
          "length": 49,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "61fd6ee8-83dc-447b-aecb-f3fd60bbbf12"
        },
        "item": {
          "id": "6695cd90-f9f7-4b17-89c4-fe6470c44871",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "6695cd90-f9f7-4b17-89c4-fe6470c44871",
        "cursor": {
          "ref": "3f0c7018-20a3-4a50-a50a-45be772d4438",
          "length": 49,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "61fd6ee8-83dc-447b-aecb-f3fd60bbbf12"
        },
        "item": {
          "id": "6695cd90-f9f7-4b17-89c4-fe6470c44871",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "fa564143-8dd1-41bc-9008-18da926e4983",
        "cursor": {
          "ref": "0a3a9fcc-9164-4236-83fb-d97a160b1203",
          "length": 49,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "09d79e59-f9c3-4488-9182-15c295c39b7f"
        },
        "item": {
          "id": "fa564143-8dd1-41bc-9008-18da926e4983",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "fa564143-8dd1-41bc-9008-18da926e4983",
        "cursor": {
          "ref": "0a3a9fcc-9164-4236-83fb-d97a160b1203",
          "length": 49,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "09d79e59-f9c3-4488-9182-15c295c39b7f"
        },
        "item": {
          "id": "fa564143-8dd1-41bc-9008-18da926e4983",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "3c998b15-73b9-46cc-b79b-313d9bc05ccd",
        "cursor": {
          "ref": "0e447665-575b-46ac-ab4a-6424ea2ac2b8",
          "length": 49,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2ee33a08-3803-4639-8bf8-56c7b02384d6"
        },
        "item": {
          "id": "3c998b15-73b9-46cc-b79b-313d9bc05ccd",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3c998b15-73b9-46cc-b79b-313d9bc05ccd",
        "cursor": {
          "ref": "0e447665-575b-46ac-ab4a-6424ea2ac2b8",
          "length": 49,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2ee33a08-3803-4639-8bf8-56c7b02384d6"
        },
        "item": {
          "id": "3c998b15-73b9-46cc-b79b-313d9bc05ccd",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "633a3490-cc1f-4d0e-ae2d-f441874f17c7",
        "cursor": {
          "ref": "99761024-2ca8-48e5-8dad-e3e7553bcbe7",
          "length": 49,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "29d5b1c4-4884-48ff-9b4c-4786b6863e8b"
        },
        "item": {
          "id": "633a3490-cc1f-4d0e-ae2d-f441874f17c7",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "633a3490-cc1f-4d0e-ae2d-f441874f17c7",
        "cursor": {
          "ref": "99761024-2ca8-48e5-8dad-e3e7553bcbe7",
          "length": 49,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "29d5b1c4-4884-48ff-9b4c-4786b6863e8b"
        },
        "item": {
          "id": "633a3490-cc1f-4d0e-ae2d-f441874f17c7",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "57a4a350-1031-4c56-8d01-bcab1431db0e",
        "cursor": {
          "ref": "977e6f27-756b-4f5a-acce-47a0914ec1b1",
          "length": 49,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "03103af0-bedc-4fbc-af2e-2188091eb476"
        },
        "item": {
          "id": "57a4a350-1031-4c56-8d01-bcab1431db0e",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "57a4a350-1031-4c56-8d01-bcab1431db0e",
        "cursor": {
          "ref": "977e6f27-756b-4f5a-acce-47a0914ec1b1",
          "length": 49,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "03103af0-bedc-4fbc-af2e-2188091eb476"
        },
        "item": {
          "id": "57a4a350-1031-4c56-8d01-bcab1431db0e",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a5a0cc04-12d9-4905-80a2-3e52db77a199",
        "cursor": {
          "ref": "c2248292-1abd-4d4f-bc7b-48f8b6a3a5f8",
          "length": 49,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e3963571-faa9-4ed5-b7de-cc69a65327f4"
        },
        "item": {
          "id": "a5a0cc04-12d9-4905-80a2-3e52db77a199",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "a5a0cc04-12d9-4905-80a2-3e52db77a199",
        "cursor": {
          "ref": "c2248292-1abd-4d4f-bc7b-48f8b6a3a5f8",
          "length": 49,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e3963571-faa9-4ed5-b7de-cc69a65327f4"
        },
        "item": {
          "id": "a5a0cc04-12d9-4905-80a2-3e52db77a199",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "32978516-3f91-49db-9471-e2cb5805e3fc",
        "cursor": {
          "ref": "82cb1603-3903-4b16-a8f7-5c04d0cda3e6",
          "length": 49,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "490c95be-b8aa-4e53-9926-f8317d227241"
        },
        "item": {
          "id": "32978516-3f91-49db-9471-e2cb5805e3fc",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "32978516-3f91-49db-9471-e2cb5805e3fc",
        "cursor": {
          "ref": "82cb1603-3903-4b16-a8f7-5c04d0cda3e6",
          "length": 49,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "490c95be-b8aa-4e53-9926-f8317d227241"
        },
        "item": {
          "id": "32978516-3f91-49db-9471-e2cb5805e3fc",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "ad3af697-426e-43e6-8017-9191e70967a9",
        "cursor": {
          "ref": "01d3fe33-8c06-4347-a71c-b3ab032525c6",
          "length": 49,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a55370d1-a160-4082-b936-a1a0178e2248"
        },
        "item": {
          "id": "ad3af697-426e-43e6-8017-9191e70967a9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "ad3af697-426e-43e6-8017-9191e70967a9",
        "cursor": {
          "ref": "01d3fe33-8c06-4347-a71c-b3ab032525c6",
          "length": 49,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a55370d1-a160-4082-b936-a1a0178e2248"
        },
        "item": {
          "id": "ad3af697-426e-43e6-8017-9191e70967a9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "2652e72c-f7a2-4030-bcd2-5bdd872b40cb",
        "cursor": {
          "ref": "0fdb56b2-dad0-4a73-a901-aa500199059c",
          "length": 49,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fc7fd68e-91cf-410d-aac1-322b3b1abc18"
        },
        "item": {
          "id": "2652e72c-f7a2-4030-bcd2-5bdd872b40cb",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "2652e72c-f7a2-4030-bcd2-5bdd872b40cb",
        "cursor": {
          "ref": "0fdb56b2-dad0-4a73-a901-aa500199059c",
          "length": 49,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fc7fd68e-91cf-410d-aac1-322b3b1abc18"
        },
        "item": {
          "id": "2652e72c-f7a2-4030-bcd2-5bdd872b40cb",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7d8b1b0b-75d7-4055-adf5-614514815dba",
        "cursor": {
          "ref": "bb1fa595-a6e1-4aad-97f8-903b3cfb1712",
          "length": 49,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9531a2ad-3137-4ebe-bdf2-bd3e81552769"
        },
        "item": {
          "id": "7d8b1b0b-75d7-4055-adf5-614514815dba",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7d8b1b0b-75d7-4055-adf5-614514815dba",
        "cursor": {
          "ref": "bb1fa595-a6e1-4aad-97f8-903b3cfb1712",
          "length": 49,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9531a2ad-3137-4ebe-bdf2-bd3e81552769"
        },
        "item": {
          "id": "7d8b1b0b-75d7-4055-adf5-614514815dba",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "f1ea784e-5843-42a8-86f5-f862d61bdac6",
        "cursor": {
          "ref": "aa54dc73-60c5-4281-93e7-ca394316eab7",
          "length": 49,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "29625056-69c4-46fe-8b74-2b46f84304c5"
        },
        "item": {
          "id": "f1ea784e-5843-42a8-86f5-f862d61bdac6",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f1ea784e-5843-42a8-86f5-f862d61bdac6",
        "cursor": {
          "ref": "aa54dc73-60c5-4281-93e7-ca394316eab7",
          "length": 49,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "29625056-69c4-46fe-8b74-2b46f84304c5"
        },
        "item": {
          "id": "f1ea784e-5843-42a8-86f5-f862d61bdac6",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "3f44cdcf-26dc-4b87-becc-89d78b6c5d82",
        "cursor": {
          "ref": "fafebdd2-dd1e-404f-ae0d-1577f4ad8760",
          "length": 49,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4aaf2f06-4e85-41cd-82fc-960fb2f1f512"
        },
        "item": {
          "id": "3f44cdcf-26dc-4b87-becc-89d78b6c5d82",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "3f44cdcf-26dc-4b87-becc-89d78b6c5d82",
        "cursor": {
          "ref": "fafebdd2-dd1e-404f-ae0d-1577f4ad8760",
          "length": 49,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4aaf2f06-4e85-41cd-82fc-960fb2f1f512"
        },
        "item": {
          "id": "3f44cdcf-26dc-4b87-becc-89d78b6c5d82",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "20311f6d-b4f8-4bff-b449-bb97c665f09c",
        "cursor": {
          "ref": "53e64460-6776-4506-88ca-613328e2a358",
          "length": 49,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9ce5adeb-43b3-4741-894f-517ce1bef521"
        },
        "item": {
          "id": "20311f6d-b4f8-4bff-b449-bb97c665f09c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "20311f6d-b4f8-4bff-b449-bb97c665f09c",
        "cursor": {
          "ref": "53e64460-6776-4506-88ca-613328e2a358",
          "length": 49,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9ce5adeb-43b3-4741-894f-517ce1bef521"
        },
        "item": {
          "id": "20311f6d-b4f8-4bff-b449-bb97c665f09c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "97842da8-0b08-4602-b703-ecf5cd474e44",
        "cursor": {
          "ref": "0279b259-a032-435c-bfd7-eeac27296cdc",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "978dd74c-4471-4526-99c2-299eaa9b81e2"
        },
        "item": {
          "id": "97842da8-0b08-4602-b703-ecf5cd474e44",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "97842da8-0b08-4602-b703-ecf5cd474e44",
        "cursor": {
          "ref": "0279b259-a032-435c-bfd7-eeac27296cdc",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "978dd74c-4471-4526-99c2-299eaa9b81e2"
        },
        "item": {
          "id": "97842da8-0b08-4602-b703-ecf5cd474e44",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "97842da8-0b08-4602-b703-ecf5cd474e44",
        "cursor": {
          "ref": "0279b259-a032-435c-bfd7-eeac27296cdc",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "978dd74c-4471-4526-99c2-299eaa9b81e2"
        },
        "item": {
          "id": "97842da8-0b08-4602-b703-ecf5cd474e44",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "858e10a8-0f50-4fe2-bcf3-a69de9a7c5da",
        "cursor": {
          "ref": "f240ea69-31c8-4203-bf75-973d7df5db8d",
          "length": 49,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ceaff831-5fce-4bda-b33a-8ed05c4c333b"
        },
        "item": {
          "id": "858e10a8-0f50-4fe2-bcf3-a69de9a7c5da",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "858e10a8-0f50-4fe2-bcf3-a69de9a7c5da",
        "cursor": {
          "ref": "f240ea69-31c8-4203-bf75-973d7df5db8d",
          "length": 49,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ceaff831-5fce-4bda-b33a-8ed05c4c333b"
        },
        "item": {
          "id": "858e10a8-0f50-4fe2-bcf3-a69de9a7c5da",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "dd579c46-b723-4895-bb10-23e594f7a2fc",
        "cursor": {
          "ref": "995c0603-24fe-4052-8892-900af7d07e52",
          "length": 49,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "608225ae-2f7e-4133-9f3c-eda856a1ed9e"
        },
        "item": {
          "id": "dd579c46-b723-4895-bb10-23e594f7a2fc",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "dd579c46-b723-4895-bb10-23e594f7a2fc",
        "cursor": {
          "ref": "995c0603-24fe-4052-8892-900af7d07e52",
          "length": 49,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "608225ae-2f7e-4133-9f3c-eda856a1ed9e"
        },
        "item": {
          "id": "dd579c46-b723-4895-bb10-23e594f7a2fc",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f55b7975-67fa-4ae3-b974-07afa2f69ce2",
        "cursor": {
          "ref": "1aca54e6-5228-4601-a7bf-a63ca6389321",
          "length": 49,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "462eb6cc-90c2-4408-a0ab-fa5d11989dda"
        },
        "item": {
          "id": "f55b7975-67fa-4ae3-b974-07afa2f69ce2",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "f55b7975-67fa-4ae3-b974-07afa2f69ce2",
        "cursor": {
          "ref": "1aca54e6-5228-4601-a7bf-a63ca6389321",
          "length": 49,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "462eb6cc-90c2-4408-a0ab-fa5d11989dda"
        },
        "item": {
          "id": "f55b7975-67fa-4ae3-b974-07afa2f69ce2",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "d1c9caf2-0a8b-422e-8aba-56aa89975ae9",
        "cursor": {
          "ref": "58ca8233-56f5-4e0f-a1f2-bb6aa715b198",
          "length": 49,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fb082e2f-9efb-4dde-ad80-3325f50c07d4"
        },
        "item": {
          "id": "d1c9caf2-0a8b-422e-8aba-56aa89975ae9",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "d1c9caf2-0a8b-422e-8aba-56aa89975ae9",
        "cursor": {
          "ref": "58ca8233-56f5-4e0f-a1f2-bb6aa715b198",
          "length": 49,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fb082e2f-9efb-4dde-ad80-3325f50c07d4"
        },
        "item": {
          "id": "d1c9caf2-0a8b-422e-8aba-56aa89975ae9",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "52109c58-9008-406e-b5b1-e52b33a0b0cc",
        "cursor": {
          "ref": "b2fe5d2a-4121-4b24-9e7c-e7405d9ae1c1",
          "length": 49,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ff7f5940-81a7-446c-9202-fb0158661e28"
        },
        "item": {
          "id": "52109c58-9008-406e-b5b1-e52b33a0b0cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "52109c58-9008-406e-b5b1-e52b33a0b0cc",
        "cursor": {
          "ref": "b2fe5d2a-4121-4b24-9e7c-e7405d9ae1c1",
          "length": 49,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ff7f5940-81a7-446c-9202-fb0158661e28"
        },
        "item": {
          "id": "52109c58-9008-406e-b5b1-e52b33a0b0cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "56dd7ac3-6381-4a7f-aeaa-bd5fe9a041fe",
        "cursor": {
          "ref": "f7ec6b0b-1dec-442f-ba01-39cb1aba4eeb",
          "length": 49,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ddb72614-691d-405d-be69-1a037583ee10"
        },
        "item": {
          "id": "56dd7ac3-6381-4a7f-aeaa-bd5fe9a041fe",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "56dd7ac3-6381-4a7f-aeaa-bd5fe9a041fe",
        "cursor": {
          "ref": "f7ec6b0b-1dec-442f-ba01-39cb1aba4eeb",
          "length": 49,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ddb72614-691d-405d-be69-1a037583ee10"
        },
        "item": {
          "id": "56dd7ac3-6381-4a7f-aeaa-bd5fe9a041fe",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "84b30b5a-8fff-476e-95fc-85de6a9da822",
        "cursor": {
          "ref": "6461c9f6-edd7-4550-823b-15a4ed51fdd1",
          "length": 49,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "eba030b8-fd2c-4bbc-bd58-b3198994af67"
        },
        "item": {
          "id": "84b30b5a-8fff-476e-95fc-85de6a9da822",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "84b30b5a-8fff-476e-95fc-85de6a9da822",
        "cursor": {
          "ref": "6461c9f6-edd7-4550-823b-15a4ed51fdd1",
          "length": 49,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "eba030b8-fd2c-4bbc-bd58-b3198994af67"
        },
        "item": {
          "id": "84b30b5a-8fff-476e-95fc-85de6a9da822",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "dcc7345a-03f6-484a-9fc1-2918942d9eb7",
        "cursor": {
          "ref": "ca9bb295-ed73-4590-92cc-9fb62b8cdb74",
          "length": 49,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "de027338-6288-4309-a4ec-50f854d61ef0"
        },
        "item": {
          "id": "dcc7345a-03f6-484a-9fc1-2918942d9eb7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "dcc7345a-03f6-484a-9fc1-2918942d9eb7",
        "cursor": {
          "ref": "ca9bb295-ed73-4590-92cc-9fb62b8cdb74",
          "length": 49,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "de027338-6288-4309-a4ec-50f854d61ef0"
        },
        "item": {
          "id": "dcc7345a-03f6-484a-9fc1-2918942d9eb7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3f0e91c3-57f1-4e8b-aff8-020192f3bed2",
        "cursor": {
          "ref": "a505220c-d970-4009-99f7-a4c6bd805ec9",
          "length": 49,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8b4d8e98-098a-4128-aab7-3277d8f8c1de"
        },
        "item": {
          "id": "3f0e91c3-57f1-4e8b-aff8-020192f3bed2",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3f0e91c3-57f1-4e8b-aff8-020192f3bed2",
        "cursor": {
          "ref": "a505220c-d970-4009-99f7-a4c6bd805ec9",
          "length": 49,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8b4d8e98-098a-4128-aab7-3277d8f8c1de"
        },
        "item": {
          "id": "3f0e91c3-57f1-4e8b-aff8-020192f3bed2",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "744a56fe-6ac2-46bb-89eb-9a98163bd7bb",
        "cursor": {
          "ref": "644f6931-5714-409b-9489-dd2575e0f5d6",
          "length": 49,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0a196da2-73e7-4b16-afc5-c35be3177523"
        },
        "item": {
          "id": "744a56fe-6ac2-46bb-89eb-9a98163bd7bb",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "744a56fe-6ac2-46bb-89eb-9a98163bd7bb",
        "cursor": {
          "ref": "644f6931-5714-409b-9489-dd2575e0f5d6",
          "length": 49,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0a196da2-73e7-4b16-afc5-c35be3177523"
        },
        "item": {
          "id": "744a56fe-6ac2-46bb-89eb-9a98163bd7bb",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "de08c6e7-2ae7-4a9c-8a95-ba0c7f79a8f7",
        "cursor": {
          "ref": "4203433a-3335-4f18-b0f7-b5c356bbfff0",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8d236b26-be9d-419c-9aa6-330da951fff5"
        },
        "item": {
          "id": "de08c6e7-2ae7-4a9c-8a95-ba0c7f79a8f7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "de08c6e7-2ae7-4a9c-8a95-ba0c7f79a8f7",
        "cursor": {
          "ref": "4203433a-3335-4f18-b0f7-b5c356bbfff0",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8d236b26-be9d-419c-9aa6-330da951fff5"
        },
        "item": {
          "id": "de08c6e7-2ae7-4a9c-8a95-ba0c7f79a8f7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "de08c6e7-2ae7-4a9c-8a95-ba0c7f79a8f7",
        "cursor": {
          "ref": "4203433a-3335-4f18-b0f7-b5c356bbfff0",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8d236b26-be9d-419c-9aa6-330da951fff5"
        },
        "item": {
          "id": "de08c6e7-2ae7-4a9c-8a95-ba0c7f79a8f7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a8cbf891-390a-4aba-8cae-895fea320dae",
        "cursor": {
          "ref": "4d0dd470-3a4e-4e40-a99b-a5124e104e97",
          "length": 49,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bb5c28be-89d1-4d9e-bb04-4466986fe15a"
        },
        "item": {
          "id": "a8cbf891-390a-4aba-8cae-895fea320dae",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a8cbf891-390a-4aba-8cae-895fea320dae",
        "cursor": {
          "ref": "4d0dd470-3a4e-4e40-a99b-a5124e104e97",
          "length": 49,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bb5c28be-89d1-4d9e-bb04-4466986fe15a"
        },
        "item": {
          "id": "a8cbf891-390a-4aba-8cae-895fea320dae",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "abc9f228-4382-4bf8-84c2-5b1e9ba9f4b3",
        "cursor": {
          "ref": "6a07165f-33cf-460b-9a39-c59763d5238a",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6ba850f5-b00f-403b-9d72-2420e12bf23c"
        },
        "item": {
          "id": "abc9f228-4382-4bf8-84c2-5b1e9ba9f4b3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "abc9f228-4382-4bf8-84c2-5b1e9ba9f4b3",
        "cursor": {
          "ref": "6a07165f-33cf-460b-9a39-c59763d5238a",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6ba850f5-b00f-403b-9d72-2420e12bf23c"
        },
        "item": {
          "id": "abc9f228-4382-4bf8-84c2-5b1e9ba9f4b3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "abc9f228-4382-4bf8-84c2-5b1e9ba9f4b3",
        "cursor": {
          "ref": "6a07165f-33cf-460b-9a39-c59763d5238a",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6ba850f5-b00f-403b-9d72-2420e12bf23c"
        },
        "item": {
          "id": "abc9f228-4382-4bf8-84c2-5b1e9ba9f4b3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a71a1609-f61f-4d1f-a7e4-56378915faec",
        "cursor": {
          "ref": "0635de93-b80c-4eec-a294-f289e1a74910",
          "length": 49,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "61f5b02e-d84f-4745-97c4-9eaaf58c2948"
        },
        "item": {
          "id": "a71a1609-f61f-4d1f-a7e4-56378915faec",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a71a1609-f61f-4d1f-a7e4-56378915faec",
        "cursor": {
          "ref": "0635de93-b80c-4eec-a294-f289e1a74910",
          "length": 49,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "61f5b02e-d84f-4745-97c4-9eaaf58c2948"
        },
        "item": {
          "id": "a71a1609-f61f-4d1f-a7e4-56378915faec",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "73c62bca-77d0-4646-be72-fedcb3b89f7a",
        "cursor": {
          "ref": "24f4caf2-f4a0-4bd5-a600-4266778c1417",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1ac8ed29-6437-4b1e-9597-d481fe9e9c7f"
        },
        "item": {
          "id": "73c62bca-77d0-4646-be72-fedcb3b89f7a",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "73c62bca-77d0-4646-be72-fedcb3b89f7a",
        "cursor": {
          "ref": "24f4caf2-f4a0-4bd5-a600-4266778c1417",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1ac8ed29-6437-4b1e-9597-d481fe9e9c7f"
        },
        "item": {
          "id": "73c62bca-77d0-4646-be72-fedcb3b89f7a",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "73c62bca-77d0-4646-be72-fedcb3b89f7a",
        "cursor": {
          "ref": "24f4caf2-f4a0-4bd5-a600-4266778c1417",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1ac8ed29-6437-4b1e-9597-d481fe9e9c7f"
        },
        "item": {
          "id": "73c62bca-77d0-4646-be72-fedcb3b89f7a",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      }
    ]
  }
}