{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1a0d3732-4f71-4725-a554-629b16d9cff5",
        "name": "API Configuration",
        "item": [
          {
            "id": "7a26ed08-9422-447b-b8c2-985334597f97",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fe91dbba-6e9e-4841-a7f9-eaaec13b4db0",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64f5d4f6-7a0a-44b1-ad1f-69a3566d5b9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b68fddd-d11a-459d-8345-4f58ea80ab09"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "5da9ab7f-85ae-4b76-8ab9-b183abbbb701",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "2fa12193-4c7f-42a4-b7c3-80747ad69427",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa2ff020-35f2-43f6-836d-dff7ef216de9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b9c186a-7aad-448e-8cbe-5f7298c61b9b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c084af5-6a78-49a7-8e57-cbf713024d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7da94625-c99b-44f5-9c90-3497339e3c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9636b74f-c120-48db-a99f-a6675afc0571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d3dd36-c332-458b-8683-744c1e74da6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9901b72-b3fb-4af8-89d2-0f314b4d3311",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcd0c2f-135e-467d-b815-05505bf6172c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ca37957-9210-4a82-8f17-0404cf88a619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca496b96-1c41-4f0f-abad-5996c7de4196",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff830c83-852a-475a-a20b-6ce1f21cee52"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ffbe191d-b7df-48d2-828f-9e6d36d93718",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a6c3bff5-03d5-45a0-a07e-f98217bbd68d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac22e591-3757-4fbb-8443-5dcbcee18efe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fe3a127b-64bc-41ac-af9b-740d1e7dabb8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1284244f-00e5-4470-8b6e-c859d19dbd79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "90f7e2ff-fa21-4bb7-a365-c48d714e9fcb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1c3827a-047c-4447-8521-c57df76799c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2576e5d5-3382-46d7-a453-2ce0d43d2fbf"
            }
          }
        ]
      },
      {
        "id": "8161923b-c77a-47d3-970c-d577bb7a7312",
        "name": "Issue Credential",
        "item": [
          {
            "id": "a5fccbfd-da70-40b5-a597-022d8117c45f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6815b04d-30da-4a6d-b0c4-2ef4feabbe6a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "846a02fe-1edd-4ffc-9bb0-b6fbafde0fe5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ce5acf-4721-4d81-8a51-3c13fc25c041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66db1ec9-121b-4345-849f-88214d9e7706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf7bc06-a450-4c5a-b794-6cdd628eafeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40c4008d-2ede-4836-9c5b-d3a5f380b54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3eebeb-7324-4c22-8ce2-1da8370ce152",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0112a3c-f465-432f-85b4-c4f0b584b12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db34a54e-6170-43a1-a560-734270831ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29313f96-b4dc-4c40-a3b3-e742f4a1b057",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17e6000a-5f0d-45f3-8d0d-a1c265362d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43931e3b-bdcf-4a9f-81d6-ff49d87f2bd9",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aea198a-f261-4216-9fec-5ca0d1f5d24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ffec41-9d89-4271-9b86-d05e6dacf609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec444e4-2bb1-4088-b071-e5debf642568",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba78fdfb-9e82-467f-a77e-530c4b86875a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65ce399-5f12-40c3-b600-d1acbef7e7b5",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1963ba8-a951-455b-bf72-ddfe58d0eda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632aea83-65db-4490-a495-4bc52e15c9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56366b82-d0e4-43c6-984b-c1c5e8366501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c628749c-cc15-47b1-8f73-21c1969360bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a212430-d508-4776-ae7c-36e0d21322eb",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee9b8b2-4bbd-4d8f-806c-b522f6b7cd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2072c81-7ac4-413f-9ea6-306da1b5f0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a69d6a-1934-4259-b9b8-a6585142a522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b9942cb-1b24-4013-b50c-0527bc14a8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d6df04-5fd9-4457-b757-4de4e96ecc68",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d35e9d-b209-4e96-ac5d-61a99c645684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0cc961-90df-4b78-9f24-cf9a44966c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a58f445-b7f4-4b1d-b7ef-976a3f9d56f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "652f35cc-f9ff-4402-a0b4-4027f50d1754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b74f245-890f-45c8-bd41-b75718adcfeb",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3630e5f6-a237-407f-8820-1257536468ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1dc360-9849-4261-be0c-2bf36fe73c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bf53e3-1c4c-462c-b6aa-746ded189696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "726765cd-d0f0-40f7-8e0e-62d28a414481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce7ae7e-7182-4aa1-bc91-e50fdac3319b",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a14fbcb-3fe2-462e-bfdf-5adedc5e7494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddae044-dbab-4d52-971d-c654edf3bd99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30673674-54b8-43f3-99c4-814c7e4df48b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab6ee33c-46d1-4d12-8d50-470ead7d804e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476b098d-5a2d-4eb4-acd3-82ae93deb557",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01460e1c-f85d-4a10-b562-0534afbe47a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8fb321-f7de-4691-97f6-5269bdd065c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46924fdd-3014-48e5-813a-6c1d3720ab65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60fb91a7-fb60-4419-8253-16c02995d9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc12f4f5-4fca-4f38-b94c-8d499fa9689c",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b52448-33b1-4ebc-80ac-9f0e8d87a197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ab9098-c56e-4ce4-9cbd-29a0ac9eb23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bf2e7f-5c2f-4c58-b71c-455dabbd9cdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6073309b-f513-475b-8012-0952a244a402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650fe7db-f3af-403d-860f-bed020d5a378",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00724871-c713-4144-a6ae-7fd6f5716074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5edf4494-9205-4637-9098-79aec38ac5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd8a5c3-4c66-4b0e-a899-d32f51e45ca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "46d7ee21-e964-4bf1-8c30-78af1a3c0f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0db7fdc-6632-4d6c-80fd-4f56759d8a20",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29cd7c5-5cd7-4a75-bc70-9fe9e35d8f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fbe4721-a868-4980-872a-3a7ecc120d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abdbc96-d117-4205-960a-d49248ca66e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01b9ce8f-970b-493a-92c2-f6dfcc63360b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925c96b0-a254-4d10-976b-5c4dc9df7b23",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6e4456-5c42-48aa-8808-ac867268eea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60d7716-0d7d-4626-814b-8b45c713913b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f679e1c0-6516-44b8-9ea5-12d46988e63b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "da7fed7f-812b-4117-8138-ae2a44aaa3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26472e1c-247e-4628-a089-7a89cf2e4b93",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7eb0c1-3bf2-4ace-a49f-1a9f0ddc2920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be1cd1c-b43f-48d1-a14c-c0dca202c844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffb01c8-a8bb-4f99-9073-2077911864f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feb5e8a4-64e8-44ea-aa49-96cb829895ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e2ee70-b48b-43fa-8698-4f8fc589b1e8",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a9b550-bc81-45fa-843d-df138ff8e775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "666ef419-c86f-49a1-9f85-bfec6f086388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c49dd6-db11-475b-8d88-2e383d19efc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65d1eb3f-467a-4a77-9a3f-547242afdec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0559b2e6-61b5-4232-b675-dce98875c7a7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064d67bd-ae14-4571-86cc-0888a9b9ebd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6075797-5220-47e1-a389-0415a123087d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16978427-8b20-47ff-a278-78d6a87d6b53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae0aa400-316c-47c1-ad62-862bea5e52c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cefcb2b-e2cd-4108-ad54-4fd3edaa8ed9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f588d0cf-6815-4b13-a32e-59091b04180a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea51fd8-e51e-4e8d-891c-4b079d81afbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835dde75-7973-4b7a-9663-a3cd12156420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30ef061a-12cb-47e9-bf71-01dc58989040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39692f11-fc4d-45e0-a6c4-b561beb971ff",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9fa5be-6dd0-4939-8346-26ecd8873ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ddc0a3-2236-4875-85c7-e3d848f71f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c88c25-e5eb-4b1e-b884-4501b0553c59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b11662-72b8-4662-bd6f-36aac5d6e700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07580d96-149b-4f7e-828b-f61c4d2da61d",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffaed5f-1b5f-45ae-bc13-428062a1d7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4e31c9-5e0e-4622-a3f5-d718d5a2270f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416d5dd1-c88b-477a-91c4-0d9fd6db1deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c396b9d8-bef7-46e0-967c-a195a8527588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c9d14a-43f3-42f3-95c0-a97b8d5f358b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c134d9b-9685-4fa5-8703-b6b5a7174cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c6a6b4-4996-4da7-8964-3f24b58b19ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83c51d5-ae21-4511-8e6a-e66b33ac1169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3e505a6-6265-4020-8a25-977bb6335b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f38112-93a0-4c6d-9004-aefa2141fa87",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1410b11b-554d-4f24-b8cd-b996a05cfda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a44e0c79-cc57-4a5f-9d64-71bb37eafacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432ec64d-37aa-407e-accc-1df0651872e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc0b6fa8-8e7b-4629-882e-ca9f3429e58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc76eb48-1fe2-46d9-8f89-20c7bfb98b30",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a05fc8-8d51-48a4-91a3-2c55362057b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a2afab-eb49-4ae4-ab42-4e08c070a316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90210548-028a-4eda-bd28-0fc5be0fc5fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae0c7473-40dc-41bb-b3f4-d7e8ce4924a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e6c4c3-052c-4e30-b8f4-9cfc57bd0c78",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a8b0b2-7a11-4868-929f-d0d2663f8c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e4632a-0529-438b-bda8-a30629974ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fccb0bb-faab-4c86-8f1f-ca332113bbe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa188e09-5412-4b71-9713-8b089ca69632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cf0a9f-60fb-4eb1-8a66-a70c13ffd9bf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a17f76-0534-47bd-95c0-21524d575561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e793976b-4c31-4a32-b266-a20df7fe9e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc359ea-9b68-4b66-8ba3-4bba2a330884",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4a93f28-60d7-4965-8e72-24a938c9ed90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93bcbab-fa68-490d-9db6-76df6c60345a",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd18fb7-3fb0-42c0-aace-4891cedaf6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "540a1c54-aef2-42be-9195-4086a44b58cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183b3e77-23b2-4011-b52e-5b16e234c3e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fbc3ecf-a143-4ab1-9533-c18f3de9acf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb4593a-876d-4cd2-8817-0fc097e26455",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ed4492-f3b3-43f0-a565-1ca169bf8783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1195a9-9041-4c94-aede-b01397bb5b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b8f75b-2384-4bc7-9f40-db76ded953ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fd02c8a-6ac6-48c3-bac7-174b67c7d7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8320406c-c9ee-4143-b19e-3382ac614e8f",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660d5784-28f1-49f3-a8ed-b4962a3695a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1339c75f-525e-439e-9371-1b9f0cc0fd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ff18da-e0db-454a-9644-3f5312c3ee8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5016976-a896-497e-bdc1-567524e0d773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb6e900-7722-4e0f-9631-57134200e88c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef57fb1-79f1-402f-8d94-995496b82aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6a9a8496-c9f9-47c0-ab06-99add555274a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9caecc84-6210-47fe-ae65-709afe36ea19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2305d7a9-3e05-4e75-a102-3db79e7e6eaf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8329416-63af-46b9-9e9d-09794ee0ec56",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb27a9ca-61d2-4bda-b9db-53e34ee4486e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746f1f97-8934-40ce-8702-7e23a56cca5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9eb4a87-61cf-4606-be2b-fa000e373900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8d5359-14a8-4b0d-becb-13627f2beeb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "fc51cd48-4801-4490-9e2f-5dd4d8f5e67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4572af60-de2c-4421-8da4-3104ea4c0532",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d54558-7c8c-4c36-a83b-ca9d1d72bfdc",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaa42b40-a2be-40c3-b70c-488f43a998bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c4cddf-637b-47fb-a1be-2d6698f05eed",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "cfb98eef-075a-4be5-8c45-a89bfdcae8c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef1c098d-553b-40d5-9f35-e65c6c0f9619",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf5bb314-727f-48d1-951c-84a56b79005e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a3225c0-42b8-4f64-b8cd-c545470873e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52e6b195-ff67-4759-a717-37766eb810a2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4a0454e-3b59-4472-821b-f7d2279b714d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d903d959-2c65-4248-b521-37e0597af9e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "273f356f-d7f6-4acb-bd16-72a769b5b891",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a458ea47-53d6-4eb0-9b38-ec0c3b28210b"
                }
              }
            ]
          },
          {
            "id": "d18cf054-dcfb-4cde-8c55-c9f2c34eb3d1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7478ba99-67c9-4539-b9cc-333ac2f07f1c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9d30851-c2ae-4594-b726-9cb84c81bb95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f991e2e-f91d-4c25-998c-292f9982bfdb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1ccb652-76a4-4682-8918-abfdba57e424",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "1754485e-1418-44ba-9e0d-b67c7b1b9b07"
                    }
                  }
                ]
              },
              {
                "id": "a683529b-083c-4765-9338-e668a9ce025f",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "615579c9-c389-46b5-9274-1cb29ee2e31b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65f0bfae-45c1-49fc-91c6-4940a3c23442"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc7ed9a0-9948-4861-98fe-d3e5d01cc2a3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "c17024c5-d1b0-45d9-bc49-35371b5f3312"
                    }
                  }
                ]
              },
              {
                "id": "fffa1b23-720d-4ef8-8bfa-a19675a7ea98",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a190f48-4a8b-4e26-88d3-485acf33fb8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4bac575a-99dc-4f4a-8a39-05485f3ccf51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "319fcf7b-4e54-4403-aee7-feefe93ca639",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "afc4cbe4-d99d-47ed-bc78-9aee5c61a0ee"
                    }
                  }
                ]
              },
              {
                "id": "265b214e-780f-41d7-8d91-1dc1f064a9cf",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ef30df8-d9ef-4d73-9cf8-31bb1cdb5d89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ec403f7-d4f8-4379-81f5-a5477ea93840"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e2d1783-caa5-4dc6-aec2-ed77c282b097",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "01486cb2-ce0d-4cbd-bb7e-ca6df37a9079"
                    }
                  }
                ]
              },
              {
                "id": "3e6f3522-e454-48f9-beca-91ca25477857",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac5e87ef-6496-4b2e-a468-6ad7a493e52e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2088c05c-ac7d-4477-a700-9243e4e6b2e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5718232-8172-4101-b12d-fe252ff6bb8a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "ff6d9a92-2e5a-4c8c-8526-ea19ed8603ad"
                    }
                  }
                ]
              },
              {
                "id": "3d13fea4-3a92-4fe1-8b16-d6924a5f3132",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8af3012-2a17-4b3f-8fd9-29145bdb311c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef3d8530-6b1d-4e48-85c7-087112d1bf55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aff1f3be-5157-4fea-aede-b1c805dfbc5a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "f90bcec0-317e-4cd2-8ead-4c4b399d4dc6"
                    }
                  }
                ]
              },
              {
                "id": "e4d37b2f-69ff-44e7-a02c-b7059870a717",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d538e37-8aac-41e4-a646-d98548628374",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3565cea3-d769-46d8-8b4e-954a6428b0d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4d9cace-4105-4d95-959b-9cba90152273",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "72020fd1-8980-4d7a-8d7c-7a379c98aba9"
                    }
                  }
                ]
              },
              {
                "id": "83c80909-04c7-4f77-815d-8e723f40fa09",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3e42136-1143-4e86-9ab5-65d8faa8071e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fba6668-91a8-4fb3-ada6-d4d08cf67822"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43b85973-12cc-4b36-9579-570469369665",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "afd0d0c6-73d3-4fe6-8640-7e586c75f689"
                    }
                  }
                ]
              },
              {
                "id": "523394e2-5732-4835-9ff6-b232134d16d2",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "def81b25-8bfc-47fe-a154-decb206ffffe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2cf7517a-c4dc-4c69-a11d-e67e3179b8c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1e779c8-b15e-4337-bdb6-d99ebcc628c4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "a7b4b46b-6ea5-4f39-9f49-b6b22b8bd9b9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e4ef9094-149d-42ba-8c8f-6bac13b248fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9d4b21a-d9d1-4c19-b5ed-8e2cb7399fe0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6047d45-890c-4131-a750-f658e3eeaf36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f898a3f2-c6d1-4c96-8dbf-87c2d75ca400"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "942ea702-66e8-4270-abd4-b423918d457a",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "15b7f2c0-4663-4766-89ec-d032957fac30"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d92f00f7-d3bf-4868-9098-18dd8ed8eaa2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83a15593-7c23-4f28-9024-38af3802b866"
            }
          }
        ]
      },
      {
        "id": "1d673e00-1d22-4742-ab7a-7878be600e31",
        "name": "Credentials Status",
        "item": [
          {
            "id": "471d0749-2a64-47d5-aded-534bcea6df6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07c31b5d-b42f-4045-8730-049a6097e30f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e880eae-a8be-44e0-afc3-a447386740e5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8ed56e-b42a-42a6-867f-680a1fd41e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae83b17-e319-44ea-8699-bde3489f9ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a568de6-c0be-4b78-82f6-fc39fbeb7490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c06aef8-7dd1-4a2d-b528-213b7848c73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60ae90a-893e-4901-a8f4-b1c4db7c2f5a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a3b346-79d5-4363-a962-406177afe3af",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "486d7a2d-e918-4cb1-9bbe-75b1cc5ee777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ddd7ed0-1903-4522-b770-2ac795be04d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86d4ce74-38cc-4097-aa4f-d9c470ddc939"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e487456-add5-419e-91e9-b6abbdbb0c5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89d69a42-1b4b-4643-a498-876ff19ca2e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b65e14a-534e-426e-90d7-40985b4c2ab1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "587c8286-3e07-43ed-b1c3-bd5d7b8eb046"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c706923-d570-4a9a-b67a-7d1b6c8482ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "d667a108-c965-48b3-b1fc-a1b534ac5e22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f34fd150-5e8b-4b3c-8a7a-0248e427ad35",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e87f694-51e7-4de4-a6f2-cddbd640002b"
            }
          }
        ]
      },
      {
        "id": "b112205b-f99f-414a-a855-d786ac2722e3",
        "name": "Presentations",
        "item": [
          {
            "id": "05019229-e565-4a8e-a3b4-c6d098f53480",
            "name": "Negative Testing",
            "item": [
              {
                "id": "173bd3e0-2d64-421b-a5e9-ed09f1419abc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "620940b7-6dbd-4422-bbeb-f937b362bcbb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa1b6db-ab80-41a9-a486-bc27f682bc40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a870d7-59be-4d35-8ed5-f5c2929c4974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625217f4-ef6a-4836-b6bf-968ac0d1075d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3800c9fa-2acd-4a21-a668-3b81bcd7de3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997ee7e8-0646-44a0-b0d9-9238165df459",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74409d29-3658-46ae-8e8e-2c3c3538c33c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c294b29f-11f7-4763-8d60-2960e0aa2c8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e5e626-f892-46d5-88cf-655403134841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "856bb630-262c-4eec-8f1a-1a241c150476"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72881c9c-0af2-4efd-998f-c89be705a4fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01e6239d-a9e0-4ca3-9b70-3ecf396c80b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b53aa57c-27cb-443f-b547-e483289c089e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84b7b1eb-318b-4966-830f-782f00c30b0b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34acd8d3-cbc6-428b-9cee-e7f8febbc757",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "62202cb4-9ff4-473e-a48f-c3afc36f9980"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abe5f639-08ee-43bf-a0ba-19bdcc84667c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3b39ae0-3881-4cee-839c-53becc3207c9"
            }
          }
        ]
      },
      {
        "id": "2e234158-e384-4eb9-86ed-69a0a325d8b1",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "e9c5c755-2d2b-43b3-8d1f-a1e69a167c47",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49cc525b-59ba-478f-9808-a750e61568ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1017cb0-171c-44a9-b511-6c020c15ad07",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224f6964-3e3d-4e4c-8874-af15fa72b75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e825743d-c9ca-4bdb-9d13-c5f09942d9bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2a3dc2-705c-4365-9126-895b752d065c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0a925c3-50bc-47cd-8ff3-02d27ef36aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df691bc9-cb61-4254-af89-cbd19b758bcb",
                    "name": "credentials_verify:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f397ce-153e-4f2b-9096-c9b7bd309718",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0aaf3dd5-046e-4568-bf1d-b4c806285ec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f480de-0d46-4bb9-a058-c80273ba37db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a5304cf-b111-4772-a3da-0cbcf721ca1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ce00636-4cf8-49d3-9784-2ef0caedef6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2ebe30e-6bd7-4bd0-a660-3766b35db39d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ce600e5-46d2-4c12-b6b4-6407263b1be1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac0f06ef-c29b-4661-b963-5c0b3ab05ce0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0392a55-6844-4162-a9cc-4bc619eb8dc6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "2393a487-0159-4772-890f-1e0f999908ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f4baadb-2a14-485c-977e-7eb9d3d4540e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71dc0252-321e-428c-8a1d-ceaccd411314"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 384,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 102,
        "pending": 0,
        "failed": 102
      },
      "tests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 98,
        "pending": 0,
        "failed": 96
      },
      "testScripts": {
        "total": 193,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 191,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1659140438462,
      "completed": 1659140440914
    },
    "executions": [
      {
        "id": "fe91dbba-6e9e-4841-a7f9-eaaec13b4db0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 49,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ec6dd383-60e1-4ddc-93df-277f52887fc1",
          "httpRequestId": "f12cd80b-2051-490a-8274-f260456d4d77"
        },
        "item": {
          "id": "fe91dbba-6e9e-4841-a7f9-eaaec13b4db0",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "5b9c186a-7aad-448e-8cbe-5f7298c61b9b",
        "cursor": {
          "ref": "6f9e7f5f-1ee9-45f7-99c2-c5e873ba0c4c",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cab6da58-4321-4376-b8b8-21910126c3aa"
        },
        "item": {
          "id": "5b9c186a-7aad-448e-8cbe-5f7298c61b9b",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "5b9c186a-7aad-448e-8cbe-5f7298c61b9b",
        "cursor": {
          "ref": "6f9e7f5f-1ee9-45f7-99c2-c5e873ba0c4c",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cab6da58-4321-4376-b8b8-21910126c3aa"
        },
        "item": {
          "id": "5b9c186a-7aad-448e-8cbe-5f7298c61b9b",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "d9901b72-b3fb-4af8-89d2-0f314b4d3311",
        "cursor": {
          "ref": "87a85b1d-d33f-429f-866a-ee7fd7d9e694",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d3b0d2da-b62c-4c84-9e9d-7d765bcf3453"
        },
        "item": {
          "id": "d9901b72-b3fb-4af8-89d2-0f314b4d3311",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "d9901b72-b3fb-4af8-89d2-0f314b4d3311",
        "cursor": {
          "ref": "87a85b1d-d33f-429f-866a-ee7fd7d9e694",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d3b0d2da-b62c-4c84-9e9d-7d765bcf3453"
        },
        "item": {
          "id": "d9901b72-b3fb-4af8-89d2-0f314b4d3311",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "d9901b72-b3fb-4af8-89d2-0f314b4d3311",
        "cursor": {
          "ref": "87a85b1d-d33f-429f-866a-ee7fd7d9e694",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d3b0d2da-b62c-4c84-9e9d-7d765bcf3453"
        },
        "item": {
          "id": "d9901b72-b3fb-4af8-89d2-0f314b4d3311",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "a6c3bff5-03d5-45a0-a07e-f98217bbd68d",
        "cursor": {
          "ref": "16f1d0ba-bebf-4421-addf-ff142253550a",
          "length": 49,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c65b1b9-b986-40d6-a810-c40fdfa08564"
        },
        "item": {
          "id": "a6c3bff5-03d5-45a0-a07e-f98217bbd68d",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a6c3bff5-03d5-45a0-a07e-f98217bbd68d",
        "cursor": {
          "ref": "16f1d0ba-bebf-4421-addf-ff142253550a",
          "length": 49,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c65b1b9-b986-40d6-a810-c40fdfa08564"
        },
        "item": {
          "id": "a6c3bff5-03d5-45a0-a07e-f98217bbd68d",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "846a02fe-1edd-4ffc-9bb0-b6fbafde0fe5",
        "cursor": {
          "ref": "0f64112e-2706-41cc-8692-f2c0bb553602",
          "length": 49,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b5ef153f-4343-418b-89e5-f9a364f17137"
        },
        "item": {
          "id": "846a02fe-1edd-4ffc-9bb0-b6fbafde0fe5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "846a02fe-1edd-4ffc-9bb0-b6fbafde0fe5",
        "cursor": {
          "ref": "0f64112e-2706-41cc-8692-f2c0bb553602",
          "length": 49,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b5ef153f-4343-418b-89e5-f9a364f17137"
        },
        "item": {
          "id": "846a02fe-1edd-4ffc-9bb0-b6fbafde0fe5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "fe3eebeb-7324-4c22-8ce2-1da8370ce152",
        "cursor": {
          "ref": "49ce749d-7fd1-4537-93d2-92ed83d0f389",
          "length": 49,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "db91b43d-f714-4b29-bad0-f55cfbb8a220"
        },
        "item": {
          "id": "fe3eebeb-7324-4c22-8ce2-1da8370ce152",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "fe3eebeb-7324-4c22-8ce2-1da8370ce152",
        "cursor": {
          "ref": "49ce749d-7fd1-4537-93d2-92ed83d0f389",
          "length": 49,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "db91b43d-f714-4b29-bad0-f55cfbb8a220"
        },
        "item": {
          "id": "fe3eebeb-7324-4c22-8ce2-1da8370ce152",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "43931e3b-bdcf-4a9f-81d6-ff49d87f2bd9",
        "cursor": {
          "ref": "9e610d28-4659-494a-9b10-93d6c2a93d65",
          "length": 49,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4ff6bd55-1d2a-4e71-a53a-ddfe8ccb9f3c"
        },
        "item": {
          "id": "43931e3b-bdcf-4a9f-81d6-ff49d87f2bd9",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "43931e3b-bdcf-4a9f-81d6-ff49d87f2bd9",
        "cursor": {
          "ref": "9e610d28-4659-494a-9b10-93d6c2a93d65",
          "length": 49,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4ff6bd55-1d2a-4e71-a53a-ddfe8ccb9f3c"
        },
        "item": {
          "id": "43931e3b-bdcf-4a9f-81d6-ff49d87f2bd9",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d65ce399-5f12-40c3-b600-d1acbef7e7b5",
        "cursor": {
          "ref": "63985a1d-a4a7-455d-b5fd-26bfafed87dc",
          "length": 49,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4d3df746-38e1-4e0c-b5d5-84f0f28205d6"
        },
        "item": {
          "id": "d65ce399-5f12-40c3-b600-d1acbef7e7b5",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d65ce399-5f12-40c3-b600-d1acbef7e7b5",
        "cursor": {
          "ref": "63985a1d-a4a7-455d-b5fd-26bfafed87dc",
          "length": 49,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4d3df746-38e1-4e0c-b5d5-84f0f28205d6"
        },
        "item": {
          "id": "d65ce399-5f12-40c3-b600-d1acbef7e7b5",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8a212430-d508-4776-ae7c-36e0d21322eb",
        "cursor": {
          "ref": "870f6272-7ea5-4637-a779-05ffe5c5385f",
          "length": 49,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ad52c832-daad-4a50-a508-d2955537b7ea"
        },
        "item": {
          "id": "8a212430-d508-4776-ae7c-36e0d21322eb",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "8a212430-d508-4776-ae7c-36e0d21322eb",
        "cursor": {
          "ref": "870f6272-7ea5-4637-a779-05ffe5c5385f",
          "length": 49,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ad52c832-daad-4a50-a508-d2955537b7ea"
        },
        "item": {
          "id": "8a212430-d508-4776-ae7c-36e0d21322eb",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "10d6df04-5fd9-4457-b757-4de4e96ecc68",
        "cursor": {
          "ref": "923e1bb5-fd42-41a0-88df-d954d6934b76",
          "length": 49,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4e717908-4f17-4f2f-9fb2-2d3a01d7099e"
        },
        "item": {
          "id": "10d6df04-5fd9-4457-b757-4de4e96ecc68",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "10d6df04-5fd9-4457-b757-4de4e96ecc68",
        "cursor": {
          "ref": "923e1bb5-fd42-41a0-88df-d954d6934b76",
          "length": 49,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4e717908-4f17-4f2f-9fb2-2d3a01d7099e"
        },
        "item": {
          "id": "10d6df04-5fd9-4457-b757-4de4e96ecc68",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "4b74f245-890f-45c8-bd41-b75718adcfeb",
        "cursor": {
          "ref": "1dab97c4-586e-432d-bff4-b6bad6945e70",
          "length": 49,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8c7374ab-ada5-404c-8956-0a5890e6f67b"
        },
        "item": {
          "id": "4b74f245-890f-45c8-bd41-b75718adcfeb",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "4b74f245-890f-45c8-bd41-b75718adcfeb",
        "cursor": {
          "ref": "1dab97c4-586e-432d-bff4-b6bad6945e70",
          "length": 49,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8c7374ab-ada5-404c-8956-0a5890e6f67b"
        },
        "item": {
          "id": "4b74f245-890f-45c8-bd41-b75718adcfeb",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "dce7ae7e-7182-4aa1-bc91-e50fdac3319b",
        "cursor": {
          "ref": "1c58e2d1-9ded-4d85-bdf3-82dd1cdd264d",
          "length": 49,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1f0d8bb9-840d-4168-81be-fff58e3b11f4"
        },
        "item": {
          "id": "dce7ae7e-7182-4aa1-bc91-e50fdac3319b",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "dce7ae7e-7182-4aa1-bc91-e50fdac3319b",
        "cursor": {
          "ref": "1c58e2d1-9ded-4d85-bdf3-82dd1cdd264d",
          "length": 49,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1f0d8bb9-840d-4168-81be-fff58e3b11f4"
        },
        "item": {
          "id": "dce7ae7e-7182-4aa1-bc91-e50fdac3319b",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "476b098d-5a2d-4eb4-acd3-82ae93deb557",
        "cursor": {
          "ref": "7a88a2b8-8653-4c05-8d96-d9f9fa5ef8cb",
          "length": 49,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "83cc4699-b191-41d8-b1fc-9b84c050179c"
        },
        "item": {
          "id": "476b098d-5a2d-4eb4-acd3-82ae93deb557",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "476b098d-5a2d-4eb4-acd3-82ae93deb557",
        "cursor": {
          "ref": "7a88a2b8-8653-4c05-8d96-d9f9fa5ef8cb",
          "length": 49,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "83cc4699-b191-41d8-b1fc-9b84c050179c"
        },
        "item": {
          "id": "476b098d-5a2d-4eb4-acd3-82ae93deb557",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "fc12f4f5-4fca-4f38-b94c-8d499fa9689c",
        "cursor": {
          "ref": "9e83bd90-d270-4c8a-a392-08090d286daa",
          "length": 49,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dddc6ad2-2687-48af-b9a5-c1d423e47acf"
        },
        "item": {
          "id": "fc12f4f5-4fca-4f38-b94c-8d499fa9689c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "fc12f4f5-4fca-4f38-b94c-8d499fa9689c",
        "cursor": {
          "ref": "9e83bd90-d270-4c8a-a392-08090d286daa",
          "length": 49,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dddc6ad2-2687-48af-b9a5-c1d423e47acf"
        },
        "item": {
          "id": "fc12f4f5-4fca-4f38-b94c-8d499fa9689c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "650fe7db-f3af-403d-860f-bed020d5a378",
        "cursor": {
          "ref": "82e0bc89-a991-4628-ad05-4643cf4e2ed2",
          "length": 49,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f5e7c4a5-ee49-4433-93a1-44a404ec7103"
        },
        "item": {
          "id": "650fe7db-f3af-403d-860f-bed020d5a378",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "650fe7db-f3af-403d-860f-bed020d5a378",
        "cursor": {
          "ref": "82e0bc89-a991-4628-ad05-4643cf4e2ed2",
          "length": 49,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f5e7c4a5-ee49-4433-93a1-44a404ec7103"
        },
        "item": {
          "id": "650fe7db-f3af-403d-860f-bed020d5a378",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "d0db7fdc-6632-4d6c-80fd-4f56759d8a20",
        "cursor": {
          "ref": "5c63da33-a6a3-472f-ad91-e80349d7a017",
          "length": 49,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0006ded0-4460-41ac-aa3f-cfe0ed32ebe8"
        },
        "item": {
          "id": "d0db7fdc-6632-4d6c-80fd-4f56759d8a20",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d0db7fdc-6632-4d6c-80fd-4f56759d8a20",
        "cursor": {
          "ref": "5c63da33-a6a3-472f-ad91-e80349d7a017",
          "length": 49,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0006ded0-4460-41ac-aa3f-cfe0ed32ebe8"
        },
        "item": {
          "id": "d0db7fdc-6632-4d6c-80fd-4f56759d8a20",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "925c96b0-a254-4d10-976b-5c4dc9df7b23",
        "cursor": {
          "ref": "25ecba71-0be0-48b3-bc8b-7ed7c85bcf0b",
          "length": 49,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "28bdc653-84f2-45f6-989f-43183fec1e6c"
        },
        "item": {
          "id": "925c96b0-a254-4d10-976b-5c4dc9df7b23",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "925c96b0-a254-4d10-976b-5c4dc9df7b23",
        "cursor": {
          "ref": "25ecba71-0be0-48b3-bc8b-7ed7c85bcf0b",
          "length": 49,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "28bdc653-84f2-45f6-989f-43183fec1e6c"
        },
        "item": {
          "id": "925c96b0-a254-4d10-976b-5c4dc9df7b23",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "26472e1c-247e-4628-a089-7a89cf2e4b93",
        "cursor": {
          "ref": "18fc8143-f803-4caf-883e-2c63a2007a4e",
          "length": 49,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f2a542da-a046-400a-b6be-03342564faa7"
        },
        "item": {
          "id": "26472e1c-247e-4628-a089-7a89cf2e4b93",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "26472e1c-247e-4628-a089-7a89cf2e4b93",
        "cursor": {
          "ref": "18fc8143-f803-4caf-883e-2c63a2007a4e",
          "length": 49,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f2a542da-a046-400a-b6be-03342564faa7"
        },
        "item": {
          "id": "26472e1c-247e-4628-a089-7a89cf2e4b93",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "22e2ee70-b48b-43fa-8698-4f8fc589b1e8",
        "cursor": {
          "ref": "4472d21a-608c-48d7-8858-8d485ada9a44",
          "length": 49,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b91a1877-bcf0-456c-96b1-f9f841aa57f1"
        },
        "item": {
          "id": "22e2ee70-b48b-43fa-8698-4f8fc589b1e8",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "22e2ee70-b48b-43fa-8698-4f8fc589b1e8",
        "cursor": {
          "ref": "4472d21a-608c-48d7-8858-8d485ada9a44",
          "length": 49,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b91a1877-bcf0-456c-96b1-f9f841aa57f1"
        },
        "item": {
          "id": "22e2ee70-b48b-43fa-8698-4f8fc589b1e8",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "0559b2e6-61b5-4232-b675-dce98875c7a7",
        "cursor": {
          "ref": "11451fa4-0622-4c6f-a685-3f2b1a75f398",
          "length": 49,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c209ac9d-34ec-47df-b6ae-e468a36f302b"
        },
        "item": {
          "id": "0559b2e6-61b5-4232-b675-dce98875c7a7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0559b2e6-61b5-4232-b675-dce98875c7a7",
        "cursor": {
          "ref": "11451fa4-0622-4c6f-a685-3f2b1a75f398",
          "length": 49,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c209ac9d-34ec-47df-b6ae-e468a36f302b"
        },
        "item": {
          "id": "0559b2e6-61b5-4232-b675-dce98875c7a7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "9cefcb2b-e2cd-4108-ad54-4fd3edaa8ed9",
        "cursor": {
          "ref": "20a4d7d3-fd58-4a88-9afe-7365c4dbd3c5",
          "length": 49,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dfc67fdc-2b22-49fd-9a39-442b6552c233"
        },
        "item": {
          "id": "9cefcb2b-e2cd-4108-ad54-4fd3edaa8ed9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "9cefcb2b-e2cd-4108-ad54-4fd3edaa8ed9",
        "cursor": {
          "ref": "20a4d7d3-fd58-4a88-9afe-7365c4dbd3c5",
          "length": 49,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dfc67fdc-2b22-49fd-9a39-442b6552c233"
        },
        "item": {
          "id": "9cefcb2b-e2cd-4108-ad54-4fd3edaa8ed9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "39692f11-fc4d-45e0-a6c4-b561beb971ff",
        "cursor": {
          "ref": "571ea75d-ab1e-4da2-b868-f3862e85bd00",
          "length": 49,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6762e14b-e2dd-42b7-9b05-10fe33bf566c"
        },
        "item": {
          "id": "39692f11-fc4d-45e0-a6c4-b561beb971ff",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "39692f11-fc4d-45e0-a6c4-b561beb971ff",
        "cursor": {
          "ref": "571ea75d-ab1e-4da2-b868-f3862e85bd00",
          "length": 49,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6762e14b-e2dd-42b7-9b05-10fe33bf566c"
        },
        "item": {
          "id": "39692f11-fc4d-45e0-a6c4-b561beb971ff",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "07580d96-149b-4f7e-828b-f61c4d2da61d",
        "cursor": {
          "ref": "09800522-51c6-492b-9cd8-529f80af6434",
          "length": 49,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "015da382-8f5c-41cd-b0d6-16c0c1a9778f"
        },
        "item": {
          "id": "07580d96-149b-4f7e-828b-f61c4d2da61d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "07580d96-149b-4f7e-828b-f61c4d2da61d",
        "cursor": {
          "ref": "09800522-51c6-492b-9cd8-529f80af6434",
          "length": 49,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "015da382-8f5c-41cd-b0d6-16c0c1a9778f"
        },
        "item": {
          "id": "07580d96-149b-4f7e-828b-f61c4d2da61d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a4c9d14a-43f3-42f3-95c0-a97b8d5f358b",
        "cursor": {
          "ref": "66fe2e79-ffaa-4d6d-9523-4cc43da7da3a",
          "length": 49,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "442ee619-25e7-416c-869e-5911b2d7e7c2"
        },
        "item": {
          "id": "a4c9d14a-43f3-42f3-95c0-a97b8d5f358b",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "a4c9d14a-43f3-42f3-95c0-a97b8d5f358b",
        "cursor": {
          "ref": "66fe2e79-ffaa-4d6d-9523-4cc43da7da3a",
          "length": 49,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "442ee619-25e7-416c-869e-5911b2d7e7c2"
        },
        "item": {
          "id": "a4c9d14a-43f3-42f3-95c0-a97b8d5f358b",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "34f38112-93a0-4c6d-9004-aefa2141fa87",
        "cursor": {
          "ref": "bcb8176e-7e84-4e90-9403-711c9577a8f1",
          "length": 49,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d92c52a2-25c8-458d-bf91-019483d19dba"
        },
        "item": {
          "id": "34f38112-93a0-4c6d-9004-aefa2141fa87",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "34f38112-93a0-4c6d-9004-aefa2141fa87",
        "cursor": {
          "ref": "bcb8176e-7e84-4e90-9403-711c9577a8f1",
          "length": 49,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d92c52a2-25c8-458d-bf91-019483d19dba"
        },
        "item": {
          "id": "34f38112-93a0-4c6d-9004-aefa2141fa87",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "dc76eb48-1fe2-46d9-8f89-20c7bfb98b30",
        "cursor": {
          "ref": "d22b5692-1eda-479c-aaed-16767c384f27",
          "length": 49,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3c4f4aa8-24e5-4fed-b4c9-c97f2298c663"
        },
        "item": {
          "id": "dc76eb48-1fe2-46d9-8f89-20c7bfb98b30",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "dc76eb48-1fe2-46d9-8f89-20c7bfb98b30",
        "cursor": {
          "ref": "d22b5692-1eda-479c-aaed-16767c384f27",
          "length": 49,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3c4f4aa8-24e5-4fed-b4c9-c97f2298c663"
        },
        "item": {
          "id": "dc76eb48-1fe2-46d9-8f89-20c7bfb98b30",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "62e6c4c3-052c-4e30-b8f4-9cfc57bd0c78",
        "cursor": {
          "ref": "a34426fa-421b-4ee7-a5fe-5b907d8c39a3",
          "length": 49,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "82c5cc31-8555-4f5d-8b78-8037b6164c6d"
        },
        "item": {
          "id": "62e6c4c3-052c-4e30-b8f4-9cfc57bd0c78",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "62e6c4c3-052c-4e30-b8f4-9cfc57bd0c78",
        "cursor": {
          "ref": "a34426fa-421b-4ee7-a5fe-5b907d8c39a3",
          "length": 49,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "82c5cc31-8555-4f5d-8b78-8037b6164c6d"
        },
        "item": {
          "id": "62e6c4c3-052c-4e30-b8f4-9cfc57bd0c78",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "39cf0a9f-60fb-4eb1-8a66-a70c13ffd9bf",
        "cursor": {
          "ref": "ed45e256-ac0e-41e8-9377-67ff9b7de451",
          "length": 49,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2a748a05-6bf2-49cf-888a-9c6ba7d2dd44"
        },
        "item": {
          "id": "39cf0a9f-60fb-4eb1-8a66-a70c13ffd9bf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "39cf0a9f-60fb-4eb1-8a66-a70c13ffd9bf",
        "cursor": {
          "ref": "ed45e256-ac0e-41e8-9377-67ff9b7de451",
          "length": 49,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2a748a05-6bf2-49cf-888a-9c6ba7d2dd44"
        },
        "item": {
          "id": "39cf0a9f-60fb-4eb1-8a66-a70c13ffd9bf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "d93bcbab-fa68-490d-9db6-76df6c60345a",
        "cursor": {
          "ref": "552a378b-dd39-409a-9568-d10b919b3dc5",
          "length": 49,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8d3cb6d5-2f4c-435e-a648-ee4833af925a"
        },
        "item": {
          "id": "d93bcbab-fa68-490d-9db6-76df6c60345a",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "d93bcbab-fa68-490d-9db6-76df6c60345a",
        "cursor": {
          "ref": "552a378b-dd39-409a-9568-d10b919b3dc5",
          "length": 49,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8d3cb6d5-2f4c-435e-a648-ee4833af925a"
        },
        "item": {
          "id": "d93bcbab-fa68-490d-9db6-76df6c60345a",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "acb4593a-876d-4cd2-8817-0fc097e26455",
        "cursor": {
          "ref": "ef266367-e835-41f9-aa53-bbfcf2345db0",
          "length": 49,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2b07c161-1a88-4a51-b67c-698360d524be"
        },
        "item": {
          "id": "acb4593a-876d-4cd2-8817-0fc097e26455",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "acb4593a-876d-4cd2-8817-0fc097e26455",
        "cursor": {
          "ref": "ef266367-e835-41f9-aa53-bbfcf2345db0",
          "length": 49,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2b07c161-1a88-4a51-b67c-698360d524be"
        },
        "item": {
          "id": "acb4593a-876d-4cd2-8817-0fc097e26455",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "8320406c-c9ee-4143-b19e-3382ac614e8f",
        "cursor": {
          "ref": "ab8c883d-14ed-492e-9d7d-e6b87c82b055",
          "length": 49,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "de260d4e-f0a0-4a28-8380-b1904a94d432"
        },
        "item": {
          "id": "8320406c-c9ee-4143-b19e-3382ac614e8f",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "8320406c-c9ee-4143-b19e-3382ac614e8f",
        "cursor": {
          "ref": "ab8c883d-14ed-492e-9d7d-e6b87c82b055",
          "length": 49,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "de260d4e-f0a0-4a28-8380-b1904a94d432"
        },
        "item": {
          "id": "8320406c-c9ee-4143-b19e-3382ac614e8f",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "0bb6e900-7722-4e0f-9631-57134200e88c",
        "cursor": {
          "ref": "c5fe5e94-b23c-4882-b15e-7df1dfdef549",
          "length": 49,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "accae78c-0c12-4a6c-8563-8ce5bb0702e0"
        },
        "item": {
          "id": "0bb6e900-7722-4e0f-9631-57134200e88c",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "0bb6e900-7722-4e0f-9631-57134200e88c",
        "cursor": {
          "ref": "c5fe5e94-b23c-4882-b15e-7df1dfdef549",
          "length": 49,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "accae78c-0c12-4a6c-8563-8ce5bb0702e0"
        },
        "item": {
          "id": "0bb6e900-7722-4e0f-9631-57134200e88c",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "cb27a9ca-61d2-4bda-b9db-53e34ee4486e",
        "cursor": {
          "ref": "46e5f5b4-77e9-415f-9802-483772193d1d",
          "length": 49,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0199cfc6-9c0e-4db2-9936-124942688d01"
        },
        "item": {
          "id": "cb27a9ca-61d2-4bda-b9db-53e34ee4486e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "cb27a9ca-61d2-4bda-b9db-53e34ee4486e",
        "cursor": {
          "ref": "46e5f5b4-77e9-415f-9802-483772193d1d",
          "length": 49,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0199cfc6-9c0e-4db2-9936-124942688d01"
        },
        "item": {
          "id": "cb27a9ca-61d2-4bda-b9db-53e34ee4486e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "4572af60-de2c-4421-8da4-3104ea4c0532",
        "cursor": {
          "ref": "202bb110-ff03-49d8-86f7-fdf72c23b2b2",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f34b85de-b6c9-4c90-8fb1-278fbdc31462"
        },
        "item": {
          "id": "4572af60-de2c-4421-8da4-3104ea4c0532",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "4572af60-de2c-4421-8da4-3104ea4c0532",
        "cursor": {
          "ref": "202bb110-ff03-49d8-86f7-fdf72c23b2b2",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f34b85de-b6c9-4c90-8fb1-278fbdc31462"
        },
        "item": {
          "id": "4572af60-de2c-4421-8da4-3104ea4c0532",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "4572af60-de2c-4421-8da4-3104ea4c0532",
        "cursor": {
          "ref": "202bb110-ff03-49d8-86f7-fdf72c23b2b2",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f34b85de-b6c9-4c90-8fb1-278fbdc31462"
        },
        "item": {
          "id": "4572af60-de2c-4421-8da4-3104ea4c0532",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "7478ba99-67c9-4539-b9cc-333ac2f07f1c",
        "cursor": {
          "ref": "7b06822b-8200-4955-8376-5c70b830b7b5",
          "length": 49,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1a3dc80c-2696-488d-b6be-18b794e89b12"
        },
        "item": {
          "id": "7478ba99-67c9-4539-b9cc-333ac2f07f1c",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "7478ba99-67c9-4539-b9cc-333ac2f07f1c",
        "cursor": {
          "ref": "7b06822b-8200-4955-8376-5c70b830b7b5",
          "length": 49,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1a3dc80c-2696-488d-b6be-18b794e89b12"
        },
        "item": {
          "id": "7478ba99-67c9-4539-b9cc-333ac2f07f1c",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "a683529b-083c-4765-9338-e668a9ce025f",
        "cursor": {
          "ref": "37431128-a7ea-4ced-bd57-1f7956795182",
          "length": 49,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9fa38a21-98ac-4d48-8539-94365e31062b"
        },
        "item": {
          "id": "a683529b-083c-4765-9338-e668a9ce025f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "a683529b-083c-4765-9338-e668a9ce025f",
        "cursor": {
          "ref": "37431128-a7ea-4ced-bd57-1f7956795182",
          "length": 49,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9fa38a21-98ac-4d48-8539-94365e31062b"
        },
        "item": {
          "id": "a683529b-083c-4765-9338-e668a9ce025f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "fffa1b23-720d-4ef8-8bfa-a19675a7ea98",
        "cursor": {
          "ref": "fcbd9330-2c1f-4320-978f-7734a47a169f",
          "length": 49,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a078a652-be2a-41e8-829b-f08b6a529258"
        },
        "item": {
          "id": "fffa1b23-720d-4ef8-8bfa-a19675a7ea98",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "fffa1b23-720d-4ef8-8bfa-a19675a7ea98",
        "cursor": {
          "ref": "fcbd9330-2c1f-4320-978f-7734a47a169f",
          "length": 49,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a078a652-be2a-41e8-829b-f08b6a529258"
        },
        "item": {
          "id": "fffa1b23-720d-4ef8-8bfa-a19675a7ea98",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "265b214e-780f-41d7-8d91-1dc1f064a9cf",
        "cursor": {
          "ref": "1ca1857e-b536-43c3-a1b1-a653b38c5d89",
          "length": 49,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c2d2eee5-1719-4c5c-9cf3-76b4b0265671"
        },
        "item": {
          "id": "265b214e-780f-41d7-8d91-1dc1f064a9cf",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "265b214e-780f-41d7-8d91-1dc1f064a9cf",
        "cursor": {
          "ref": "1ca1857e-b536-43c3-a1b1-a653b38c5d89",
          "length": 49,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c2d2eee5-1719-4c5c-9cf3-76b4b0265671"
        },
        "item": {
          "id": "265b214e-780f-41d7-8d91-1dc1f064a9cf",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "3e6f3522-e454-48f9-beca-91ca25477857",
        "cursor": {
          "ref": "c7cd7054-0f03-4b28-a741-8e6ffe0bf90a",
          "length": 49,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "610976cd-ef0f-451b-8e20-7c19fe3ea3db"
        },
        "item": {
          "id": "3e6f3522-e454-48f9-beca-91ca25477857",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3e6f3522-e454-48f9-beca-91ca25477857",
        "cursor": {
          "ref": "c7cd7054-0f03-4b28-a741-8e6ffe0bf90a",
          "length": 49,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "610976cd-ef0f-451b-8e20-7c19fe3ea3db"
        },
        "item": {
          "id": "3e6f3522-e454-48f9-beca-91ca25477857",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3d13fea4-3a92-4fe1-8b16-d6924a5f3132",
        "cursor": {
          "ref": "fb4c6d42-3cec-4933-be12-8ec913a13fa5",
          "length": 49,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "25df6da5-6b21-4497-ae95-d040ba95a15c"
        },
        "item": {
          "id": "3d13fea4-3a92-4fe1-8b16-d6924a5f3132",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3d13fea4-3a92-4fe1-8b16-d6924a5f3132",
        "cursor": {
          "ref": "fb4c6d42-3cec-4933-be12-8ec913a13fa5",
          "length": 49,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "25df6da5-6b21-4497-ae95-d040ba95a15c"
        },
        "item": {
          "id": "3d13fea4-3a92-4fe1-8b16-d6924a5f3132",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e4d37b2f-69ff-44e7-a02c-b7059870a717",
        "cursor": {
          "ref": "a78b8089-6e71-47fa-9836-799f2fc31ffe",
          "length": 49,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "23989cb6-1db8-40c6-bb0b-fabd976d53d2"
        },
        "item": {
          "id": "e4d37b2f-69ff-44e7-a02c-b7059870a717",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e4d37b2f-69ff-44e7-a02c-b7059870a717",
        "cursor": {
          "ref": "a78b8089-6e71-47fa-9836-799f2fc31ffe",
          "length": 49,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "23989cb6-1db8-40c6-bb0b-fabd976d53d2"
        },
        "item": {
          "id": "e4d37b2f-69ff-44e7-a02c-b7059870a717",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "83c80909-04c7-4f77-815d-8e723f40fa09",
        "cursor": {
          "ref": "41084ee7-20c5-4a39-bb55-cd4b10536b6f",
          "length": 49,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5aec430d-da03-4f1b-b096-f4bdf9794c02"
        },
        "item": {
          "id": "83c80909-04c7-4f77-815d-8e723f40fa09",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "83c80909-04c7-4f77-815d-8e723f40fa09",
        "cursor": {
          "ref": "41084ee7-20c5-4a39-bb55-cd4b10536b6f",
          "length": 49,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5aec430d-da03-4f1b-b096-f4bdf9794c02"
        },
        "item": {
          "id": "83c80909-04c7-4f77-815d-8e723f40fa09",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "523394e2-5732-4835-9ff6-b232134d16d2",
        "cursor": {
          "ref": "72c39f3f-667a-49b1-a78d-0c1eef3f0e79",
          "length": 49,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f913da00-7214-49fc-9392-a0df2b69ea9d"
        },
        "item": {
          "id": "523394e2-5732-4835-9ff6-b232134d16d2",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "523394e2-5732-4835-9ff6-b232134d16d2",
        "cursor": {
          "ref": "72c39f3f-667a-49b1-a78d-0c1eef3f0e79",
          "length": 49,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f913da00-7214-49fc-9392-a0df2b69ea9d"
        },
        "item": {
          "id": "523394e2-5732-4835-9ff6-b232134d16d2",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7e880eae-a8be-44e0-afc3-a447386740e5",
        "cursor": {
          "ref": "bb641a86-7e4b-4642-8459-15b9807038ca",
          "length": 49,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "12fa3a97-4916-4ca3-8983-046523e60f11"
        },
        "item": {
          "id": "7e880eae-a8be-44e0-afc3-a447386740e5",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7e880eae-a8be-44e0-afc3-a447386740e5",
        "cursor": {
          "ref": "bb641a86-7e4b-4642-8459-15b9807038ca",
          "length": 49,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "12fa3a97-4916-4ca3-8983-046523e60f11"
        },
        "item": {
          "id": "7e880eae-a8be-44e0-afc3-a447386740e5",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b60ae90a-893e-4901-a8f4-b1c4db7c2f5a",
        "cursor": {
          "ref": "7cfc30d4-21b4-43be-a841-abc129a3bead",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "397b919f-46c7-4241-8979-92ebed59ae5f"
        },
        "item": {
          "id": "b60ae90a-893e-4901-a8f4-b1c4db7c2f5a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b60ae90a-893e-4901-a8f4-b1c4db7c2f5a",
        "cursor": {
          "ref": "7cfc30d4-21b4-43be-a841-abc129a3bead",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "397b919f-46c7-4241-8979-92ebed59ae5f"
        },
        "item": {
          "id": "b60ae90a-893e-4901-a8f4-b1c4db7c2f5a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b60ae90a-893e-4901-a8f4-b1c4db7c2f5a",
        "cursor": {
          "ref": "7cfc30d4-21b4-43be-a841-abc129a3bead",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "397b919f-46c7-4241-8979-92ebed59ae5f"
        },
        "item": {
          "id": "b60ae90a-893e-4901-a8f4-b1c4db7c2f5a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "620940b7-6dbd-4422-bbeb-f937b362bcbb",
        "cursor": {
          "ref": "4e8d95dc-bda8-411e-8a85-2b08169b63cb",
          "length": 49,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6715fe8e-248c-4f88-83fc-1775437f393d"
        },
        "item": {
          "id": "620940b7-6dbd-4422-bbeb-f937b362bcbb",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "620940b7-6dbd-4422-bbeb-f937b362bcbb",
        "cursor": {
          "ref": "4e8d95dc-bda8-411e-8a85-2b08169b63cb",
          "length": 49,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6715fe8e-248c-4f88-83fc-1775437f393d"
        },
        "item": {
          "id": "620940b7-6dbd-4422-bbeb-f937b362bcbb",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "997ee7e8-0646-44a0-b0d9-9238165df459",
        "cursor": {
          "ref": "7b9d1ff3-9189-4e89-93c6-e88e59879bf3",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "baef4774-af93-468a-9cd1-6f356a3b3ec0"
        },
        "item": {
          "id": "997ee7e8-0646-44a0-b0d9-9238165df459",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "997ee7e8-0646-44a0-b0d9-9238165df459",
        "cursor": {
          "ref": "7b9d1ff3-9189-4e89-93c6-e88e59879bf3",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "baef4774-af93-468a-9cd1-6f356a3b3ec0"
        },
        "item": {
          "id": "997ee7e8-0646-44a0-b0d9-9238165df459",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "997ee7e8-0646-44a0-b0d9-9238165df459",
        "cursor": {
          "ref": "7b9d1ff3-9189-4e89-93c6-e88e59879bf3",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "baef4774-af93-468a-9cd1-6f356a3b3ec0"
        },
        "item": {
          "id": "997ee7e8-0646-44a0-b0d9-9238165df459",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e1017cb0-171c-44a9-b511-6c020c15ad07",
        "cursor": {
          "ref": "2ca3f9d6-67ea-453d-9b78-8c032a3111cf",
          "length": 49,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6a679525-95b3-4083-ae87-11a404f055cd"
        },
        "item": {
          "id": "e1017cb0-171c-44a9-b511-6c020c15ad07",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e1017cb0-171c-44a9-b511-6c020c15ad07",
        "cursor": {
          "ref": "2ca3f9d6-67ea-453d-9b78-8c032a3111cf",
          "length": 49,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6a679525-95b3-4083-ae87-11a404f055cd"
        },
        "item": {
          "id": "e1017cb0-171c-44a9-b511-6c020c15ad07",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "df691bc9-cb61-4254-af89-cbd19b758bcb",
        "cursor": {
          "ref": "1f1a5233-454f-4bbb-8422-84808b5dacaa",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0874ba26-ad2a-4c3f-8946-13d10b922c8c"
        },
        "item": {
          "id": "df691bc9-cb61-4254-af89-cbd19b758bcb",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "df691bc9-cb61-4254-af89-cbd19b758bcb",
        "cursor": {
          "ref": "1f1a5233-454f-4bbb-8422-84808b5dacaa",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0874ba26-ad2a-4c3f-8946-13d10b922c8c"
        },
        "item": {
          "id": "df691bc9-cb61-4254-af89-cbd19b758bcb",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "df691bc9-cb61-4254-af89-cbd19b758bcb",
        "cursor": {
          "ref": "1f1a5233-454f-4bbb-8422-84808b5dacaa",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0874ba26-ad2a-4c3f-8946-13d10b922c8c"
        },
        "item": {
          "id": "df691bc9-cb61-4254-af89-cbd19b758bcb",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      }
    ]
  }
}