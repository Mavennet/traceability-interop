{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0719f6b6-921c-45e4-983d-ff6e00fecfea",
        "name": "Issue Credential",
        "item": [
          {
            "id": "4a23e79f-c47b-43e0-9fc4-7af033baeb23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a42b5212-adcc-4447-8281-775754304171",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0f74082a-f047-415d-a0d7-f42ab6ed0039",
                    "name": "credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f445c7b9-6d40-4a8a-a806-35824795beee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f5b16d-2043-4dee-bc69-c59c9edb18a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cbc130-e7d8-4772-8907-6c8ba0c1a90d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72efb0b7-98d5-4be7-89d2-4b70af8ac52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6d80dd-4c17-42f6-b258-fc200142afea",
                    "name": "credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973a6e65-415e-4c67-a985-8d9cac00e69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d12c817-8d92-4d78-ace2-520dae47af55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a009532-23f4-4f37-9a5e-0bf211c08201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23a1e02a-5bde-4a12-b169-34faf0013031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd74f9c-8cfd-4c24-a5de-f51e77255ae2",
                    "name": "credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc4be9c-48fe-4cb1-a85f-9e2ce7854958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90d07dc-6c50-4eb2-8c90-0c5130e31769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6da3d1-6dfb-43a2-863c-2218bb44fde6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20af42d2-a550-4dee-b136-886fbce99571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559017d0-5030-498f-b88b-dbaf73bf7d24",
                    "name": "credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d60b27-9d6b-4785-98d5-d2ee78c5a4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56479616-bf21-42fc-84ed-079e641e54cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96869688-78eb-4dc2-b3df-6d9a8daea7bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11d27481-27e0-4eea-8b04-c7aa9198baa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30d6230-8f05-4054-9cc9-5cf28a18dfef",
                    "name": "credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32683a3-c4a3-45dd-be62-d33cc9721179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06aa859-f186-4c8d-b3fa-8723597df7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b3653f-218f-4b23-ad04-b5a6cf762139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94f1ef2d-e940-4c01-b6cb-ba7223dd36ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa582de-9c23-4609-aba4-2dbf78b69671",
                    "name": "credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d08be1-f4d9-40df-b087-b1c45e271c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1044d24-3306-4a78-9f9c-b03bf4494279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8f7c24-258d-45ef-8122-2179c6c3d784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ee4d96-8df6-4a34-afbc-4cdd44e02f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc88d3c-1d26-47d3-820a-72797581cba8",
                    "name": "credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f25505-a246-4fbb-abc9-e9ac5eb6e7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263d00f6-b9a9-4d24-a4c5-10071cee0412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b34013-57c4-45b1-b429-a9f1fe4f2f80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad1bb9e3-e2fe-46bd-bd38-7c790d4cae99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b9240f-a643-4889-b1ca-692f9f750348",
                    "name": "credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2564fe10-d55f-484d-9891-fc2e2f604ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70cf3ae8-9860-4e61-a687-b16db1326d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b14eb2-f267-4791-8c4c-05c3c67d9438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21069c1b-7bf7-4d58-a4c9-9b2dd0580cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8920da10-cf88-4511-a690-f4cb4b12b340",
                    "name": "credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f74d54e-49a7-4c95-9676-96be0729559f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0a88b9-f7a3-4ce3-9d8f-ebd785714712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8eb6e5-9ac9-406b-881a-19190ceb912f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08de5a9e-69e2-421a-b895-48caa7f2e221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d87e24-9766-4837-88b9-441dced88eab",
                    "name": "credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15936395-b08f-40f2-8360-530abf282006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93909c44-3171-45e6-b60b-ee8ea10817e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572651f9-3499-4e1c-96b3-d6c8879a54b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3133dc1-0b8f-4cc7-9eff-daad5cbfc71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14c864d-dd5a-44fe-a5ea-7fb8f8ed79db",
                    "name": "credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0cc1c6-a4fe-4d2c-9dd8-f0d3e6b4cbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4258ae-ddd6-4026-8833-78666882d1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d862bd3e-7d3f-4dd8-b03f-7263d024ef30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4289018-52f7-4aea-b2a5-e440bba9af96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6e65bb-9713-4adb-ae5f-24e2793a0b82",
                    "name": "credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eaa7219-1f20-429b-8afc-b8dcda388615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab56dcc-e263-4494-bc95-e0b08e8a1f4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854c1f2c-5d5d-4a83-98ea-eccbf21548a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9e371dd-be33-4751-b9a7-3286f3feb5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ed7bf8-3a37-4307-9ac5-f076abc509b6",
                    "name": "credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b03af0-66f9-42ab-adae-60d06e6bdb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95486a2f-c62a-4f52-ae15-fdb0d2858a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57211a9-6a40-4965-b67b-3f2e0f3716fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "852f6e4b-52e6-4cc3-b6ea-c50fc849ab27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aced08f-8a4f-4ff8-b937-06fb7188e39d",
                    "name": "credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9febefad-ac42-4af6-9670-74d5f1a065b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c8bc31-c120-4ba7-8738-68a4b99d937d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921a3596-e048-402a-9fe2-2b51721b1f01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d177081-45f2-4e9b-94cd-4dc789f96991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8209391b-a73e-49f8-9f93-b0c9b93439a1",
                    "name": "credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8fe005-23b1-43f9-8e9f-fd55230d17eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d435b236-8a2a-48f0-8102-82bf0fdaa4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43587cc-9a02-4f56-9a00-c06d9f848161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eff9d6ea-4b38-4c2b-a5e7-e03f7c602e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5758eab-e88d-40f3-8c12-964d08ab1eed",
                    "name": "credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d9f49d-ac17-4e0c-9034-9baf71016cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b1d6fb-82dc-45d3-b040-61cf076458e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b559736d-ff85-48b1-8a39-79f37aa00ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15a03810-1732-4f37-8d6c-82aaba3e537d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2db641-d2f6-4e6f-b407-155dacc6a49b",
                    "name": "credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd803fb3-a7d0-42e9-a079-0fc410212759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287d29e8-9864-48c3-905c-5bb9720e96f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672b9662-3ad6-4a07-b516-f9b081d23658",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef131d49-511d-43de-9ace-2cd884dd17b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e724477d-00b3-49ad-ae47-c68ef14de3cd",
                    "name": "options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c93447-9855-4478-9021-b8b9afd4594b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db021b1b-0d1f-4293-b6d7-ec9fccf961d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def02190-9e0b-4fa4-bc49-2681ef85e323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b07c4a54-0422-434d-b778-5411dee25c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be462d9-270b-42cf-bcc8-c16b3ca7f24b",
                    "name": "options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a0fe9a-608c-407d-90dc-25e480598838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2463cf87-473d-4cc6-8d1a-381bdb668b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ed9a3f-89e2-4795-9fb0-7cc40ddbe1dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "736ca5f4-e6f9-453a-a2ba-b526dab54279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4073c17-acd5-496f-a679-cdd0b6861903",
                    "name": "options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bef630-918f-40e7-8336-d42c879d44cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7fbecbb-1c57-414b-80a3-e880485794ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea764e52-0cad-4e9f-a409-510078c45b34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e7e4909-6dbd-419d-a20e-020b04c74f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717932cc-2351-4eaf-a328-ac038d42223c",
                    "name": "options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7f9a37-e7e8-489e-9029-f0e55e1bcee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f732223-2314-4091-9380-237bfb463dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6a2d2c-0bd9-48bf-ad66-60cf21b4a4f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a95b57e-eb87-493a-9791-736ba796215b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60727dd0-3268-4f38-96f4-8f388d6808bb",
                    "name": "options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cdb6b2-5f50-4e5d-a9a9-bcc34c48d90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54637954-4236-443d-9cac-91ad229a16d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24264402-6d55-4f7d-b0e4-369757a4d0d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d208e737-4baf-4142-a63a-c4887ef10cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2622a37-5931-4b7c-9be4-b01fbd8df1ce",
                    "name": "options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679612cc-6170-42f5-afa0-d50fef38dbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27832c19-9ecc-40d1-a6b9-4262dac12e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce0c620-f0e7-4650-abd7-6d3170dfdd92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c04dc609-da53-4a86-ac68-de87b0c5f146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba28961-625e-46c9-b612-2361b11b3453",
                    "name": "options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2c3b01-00cd-4906-8607-b565ef13cdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6fddc7-b0dd-4ca2-9798-0baff46fa7cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fa07e1-74f6-4709-bf35-03df3522c04d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a20b324e-4771-4b54-ba9f-bf034710d1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578f16cd-2711-43b7-942b-24987b81083c",
                    "name": "options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5bccf7-2731-4a13-bbf9-39add4a8c1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b8ef9e-b3d4-4349-850c-5c95de2aa76a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a547f264-d93d-440c-be72-bf1cba89f4b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "437b463b-3fc6-41f0-8628-5c2d1a8117a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985c7845-a2b8-4f8f-b3e4-611630a2772a",
                    "name": "options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162f20cb-d0fa-425b-a10c-7a591f3dff34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e26e346a-221b-44b6-8574-964b903afbce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f74ef4-a981-46a3-8cc6-4afc483eaef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae91fea1-b7d8-4fb9-a652-1a49322e78ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9e31182d-fe2a-4603-aa9f-0698f5720b4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82278ff3-c79e-4f32-9d28-ff6c90605a18",
                    "name": "missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384adb98-3075-4b0c-b51a-a48630162c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7408df80-427a-4ae3-a7c2-f5a926f61a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bc32f6-5f26-4edd-ae2e-e718633166f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "79a2ac6e-8e48-44a0-b619-8e0915ca1da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3079957-cc3f-49b7-a14b-8d264dd996fa",
                    "name": "missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5e5196-5f1f-4b64-b170-e96df6489630",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d94f31a-2df0-49ee-afe7-1e5e7cd4627d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ac9fb4-0c43-4b03-bf08-23053703deb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "2157b456-b3ca-4736-87e8-960b1995373f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db01f845-3c65-4d66-8e7b-b8a9ea530db3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "541d46b1-a63e-4119-8781-8fa3cac59bd8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24b29af9-dc95-4b7d-85f0-2719b679b131",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "946e0e1e-b2d6-452c-9012-9d726fd96a49"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41425eeb-9d17-4c8b-82f9-c2c6af675c2a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c27c374-3024-4be5-910a-2d3bede42983"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d9022167-d8de-4532-8a04-2889a6ddb0e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "024c90d0-9132-47d5-bcb1-71b0ae548e30"
                }
              }
            ]
          },
          {
            "id": "e7761db0-bb80-45a4-9d0a-c4bcdccaa431",
            "name": "Happy Path",
            "item": [
              {
                "id": "f31a516a-d464-46ca-9557-241aac22cb85",
                "name": "base",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9c92e5f-0965-4821-a552-0d33cf2881ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b7be790-d44e-4b0d-81bc-a0d8f07b8734"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba9939d1-6a05-46b5-9511-b1c338edf6ac",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "611175ad-05b8-441d-8979-a6d9bb2d4ff3"
                    }
                  }
                ]
              },
              {
                "id": "1488499d-61c9-47ab-9d23-0a61a932cd1d",
                "name": "credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e670f24b-505c-4318-9e08-50202ca91523",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "098ec7a5-17b5-41eb-aa7f-a80b876d07ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14cc4f15-3ada-43cc-8513-b27c794075a2",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "d3c9c449-be1a-445c-a37e-06315cfdc953"
                    }
                  }
                ]
              },
              {
                "id": "a5e3f6aa-a0b9-4626-8d30-7ece34f34958",
                "name": "credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49fa8975-35db-4a35-9a9c-e39cf5107d31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ae1bc8f-6cb3-4326-8e58-100fe47da592"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "584c2b14-aff3-44b7-91cf-e0828293e96c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "43c9bb78-46d9-4181-8f86-713937e98d3c"
                    }
                  }
                ]
              },
              {
                "id": "809660d0-2cf2-4f8b-bb03-c2a1eb4df783",
                "name": "credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35f7edd9-bf5b-4484-a585-7abfe8721715",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0e5eedf-1d5f-40cf-a8b2-91ad50c25fd8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2556c169-76ba-4f6e-9101-903645a5745d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "f9b6367f-5d28-4c76-8a36-dca4d11cd6c5"
                    }
                  }
                ]
              },
              {
                "id": "d1b32dab-1c64-4923-975d-c6da86d91ae6",
                "name": "credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3261786-abae-45bc-8767-a5e222ed9f88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04764b82-0470-480b-95d2-07459e5257c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bb3c627-ce93-4fd2-b475-347ce3ca9c97",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "2ccd8544-1274-4ed3-a285-a38d69a62526"
                    }
                  }
                ]
              },
              {
                "id": "66fe37b4-986c-4362-978b-f7f70e9de8d4",
                "name": "credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97c105aa-18ca-4b94-b74b-afdfe8531c39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce9df2d6-21f8-4f7a-ad79-afb32d9eea37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "845fa1f3-5d49-4c83-801a-4238632806c8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "f981c425-d376-4846-82e7-70663b1e72a0"
                    }
                  }
                ]
              },
              {
                "id": "fa751aaa-929b-4aad-b2fe-95ffa8565628",
                "name": "options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0499284-ae8c-48b9-8ea5-72ae76ea16a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2dfc6d4f-095d-42b5-a361-fa09ca131f75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8769fa75-730e-411f-b7c4-a46429fbb36d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "34cba85f-ee65-4d2d-891d-d9bdd3c50512"
                    }
                  }
                ]
              },
              {
                "id": "96cc5a97-57f5-4a98-abeb-b8631837cf25",
                "name": "options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c5ac241-d558-41c1-aeda-b479d9cb61d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3e38d87-3c01-4118-8dc2-d2d7ba372853"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79021ae8-3b76-4b6d-98f1-4ee2d07fbdbb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "857c02fc-1def-4e69-af34-a159583c2199"
                    }
                  }
                ]
              },
              {
                "id": "c8130d1b-46ca-4f37-958b-5931f6e052a0",
                "name": "options:opt.credentialStatus Copy",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cf6e827-f79c-4ec0-87ec-7ade468fe609",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38e0d2df-ae30-42d9-aeab-88580f7e9944"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e090b92-805f-465c-a38c-1cce73634ea9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "5fcb0645-dd71-4830-b5e1-4a9103ffd4d5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a967aee0-1b3f-42e9-851e-332aac71e2ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f49b081-a9cf-48aa-a611-0619e0251e5c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d38d7c31-1aae-40d7-9e29-e053feb65b6d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fa5d8881-93e7-43d6-93d1-ee9f3dce1f2d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c2c2892-d1d1-4a9a-b586-c6da6561c808",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "e7a5d066-4047-403b-9b40-bb308c88a47d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83e1a647-6950-4886-91a5-9bbe4476843e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "330890dc-5fb6-42d4-abd7-37b40c4f2b02"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 300,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 75,
        "pending": 0,
        "failed": 75
      },
      "tests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 74,
        "pending": 0,
        "failed": 72
      },
      "testScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1658276522563,
      "completed": 1658276524410
    },
    "executions": [
      {
        "id": "0f74082a-f047-415d-a0d7-f42ab6ed0039",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5b403380-f9b5-41e1-8695-982db0dd00a6",
          "httpRequestId": "d839fa96-17b1-4e2e-a206-e921a2c29fb1"
        },
        "item": {
          "id": "0f74082a-f047-415d-a0d7-f42ab6ed0039",
          "name": "credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "0f74082a-f047-415d-a0d7-f42ab6ed0039",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5b403380-f9b5-41e1-8695-982db0dd00a6",
          "httpRequestId": "d839fa96-17b1-4e2e-a206-e921a2c29fb1"
        },
        "item": {
          "id": "0f74082a-f047-415d-a0d7-f42ab6ed0039",
          "name": "credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "eb6d80dd-4c17-42f6-b258-fc200142afea",
        "cursor": {
          "ref": "cf7fb20c-ed1d-439e-95bd-697c8048e055",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "21d989ea-7ce0-4081-8844-cfca987c5e21"
        },
        "item": {
          "id": "eb6d80dd-4c17-42f6-b258-fc200142afea",
          "name": "credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "eb6d80dd-4c17-42f6-b258-fc200142afea",
        "cursor": {
          "ref": "cf7fb20c-ed1d-439e-95bd-697c8048e055",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "21d989ea-7ce0-4081-8844-cfca987c5e21"
        },
        "item": {
          "id": "eb6d80dd-4c17-42f6-b258-fc200142afea",
          "name": "credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "bdd74f9c-8cfd-4c24-a5de-f51e77255ae2",
        "cursor": {
          "ref": "996baddd-9f08-4d1e-96df-bcdfddac270e",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "66b0205e-d961-4bd3-b91f-67c8b9b4ee34"
        },
        "item": {
          "id": "bdd74f9c-8cfd-4c24-a5de-f51e77255ae2",
          "name": "credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "bdd74f9c-8cfd-4c24-a5de-f51e77255ae2",
        "cursor": {
          "ref": "996baddd-9f08-4d1e-96df-bcdfddac270e",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "66b0205e-d961-4bd3-b91f-67c8b9b4ee34"
        },
        "item": {
          "id": "bdd74f9c-8cfd-4c24-a5de-f51e77255ae2",
          "name": "credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "559017d0-5030-498f-b88b-dbaf73bf7d24",
        "cursor": {
          "ref": "b404a619-ca09-437e-9f8e-408d0d102f16",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "88b72e5d-2a0b-4966-821f-1157ec10f6c6"
        },
        "item": {
          "id": "559017d0-5030-498f-b88b-dbaf73bf7d24",
          "name": "credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "559017d0-5030-498f-b88b-dbaf73bf7d24",
        "cursor": {
          "ref": "b404a619-ca09-437e-9f8e-408d0d102f16",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "88b72e5d-2a0b-4966-821f-1157ec10f6c6"
        },
        "item": {
          "id": "559017d0-5030-498f-b88b-dbaf73bf7d24",
          "name": "credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e30d6230-8f05-4054-9cc9-5cf28a18dfef",
        "cursor": {
          "ref": "f7586f5d-b021-4736-a723-d4889f15fa1a",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "32140fd3-d107-4090-a277-06c8876bbdfb"
        },
        "item": {
          "id": "e30d6230-8f05-4054-9cc9-5cf28a18dfef",
          "name": "credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "e30d6230-8f05-4054-9cc9-5cf28a18dfef",
        "cursor": {
          "ref": "f7586f5d-b021-4736-a723-d4889f15fa1a",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "32140fd3-d107-4090-a277-06c8876bbdfb"
        },
        "item": {
          "id": "e30d6230-8f05-4054-9cc9-5cf28a18dfef",
          "name": "credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "7aa582de-9c23-4609-aba4-2dbf78b69671",
        "cursor": {
          "ref": "f78029ab-928c-4b58-95bb-ecda0ef32134",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7898c647-e79f-476f-98ca-1af65f3cd6f3"
        },
        "item": {
          "id": "7aa582de-9c23-4609-aba4-2dbf78b69671",
          "name": "credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "7aa582de-9c23-4609-aba4-2dbf78b69671",
        "cursor": {
          "ref": "f78029ab-928c-4b58-95bb-ecda0ef32134",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7898c647-e79f-476f-98ca-1af65f3cd6f3"
        },
        "item": {
          "id": "7aa582de-9c23-4609-aba4-2dbf78b69671",
          "name": "credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "8dc88d3c-1d26-47d3-820a-72797581cba8",
        "cursor": {
          "ref": "9284e948-99dd-4cc0-8ec7-0422ac483057",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bb002879-9a3e-4b0a-b684-270bb33d20c8"
        },
        "item": {
          "id": "8dc88d3c-1d26-47d3-820a-72797581cba8",
          "name": "credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "8dc88d3c-1d26-47d3-820a-72797581cba8",
        "cursor": {
          "ref": "9284e948-99dd-4cc0-8ec7-0422ac483057",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bb002879-9a3e-4b0a-b684-270bb33d20c8"
        },
        "item": {
          "id": "8dc88d3c-1d26-47d3-820a-72797581cba8",
          "name": "credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "59b9240f-a643-4889-b1ca-692f9f750348",
        "cursor": {
          "ref": "d696d0e4-92b2-4ce1-8cf9-daa4fea99c75",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fb9a9564-ce50-4827-aa4a-3242e1b856c3"
        },
        "item": {
          "id": "59b9240f-a643-4889-b1ca-692f9f750348",
          "name": "credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "59b9240f-a643-4889-b1ca-692f9f750348",
        "cursor": {
          "ref": "d696d0e4-92b2-4ce1-8cf9-daa4fea99c75",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fb9a9564-ce50-4827-aa4a-3242e1b856c3"
        },
        "item": {
          "id": "59b9240f-a643-4889-b1ca-692f9f750348",
          "name": "credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8920da10-cf88-4511-a690-f4cb4b12b340",
        "cursor": {
          "ref": "3ac0907b-9475-4cc0-81b6-be4cc77aab16",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "71955999-3a13-4099-b81d-5f7478271827"
        },
        "item": {
          "id": "8920da10-cf88-4511-a690-f4cb4b12b340",
          "name": "credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "8920da10-cf88-4511-a690-f4cb4b12b340",
        "cursor": {
          "ref": "3ac0907b-9475-4cc0-81b6-be4cc77aab16",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "71955999-3a13-4099-b81d-5f7478271827"
        },
        "item": {
          "id": "8920da10-cf88-4511-a690-f4cb4b12b340",
          "name": "credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "72d87e24-9766-4837-88b9-441dced88eab",
        "cursor": {
          "ref": "58f97ed3-7005-4be5-92ec-80255291e331",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a75e1a9a-f023-48c6-8170-b2275d142f82"
        },
        "item": {
          "id": "72d87e24-9766-4837-88b9-441dced88eab",
          "name": "credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "72d87e24-9766-4837-88b9-441dced88eab",
        "cursor": {
          "ref": "58f97ed3-7005-4be5-92ec-80255291e331",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a75e1a9a-f023-48c6-8170-b2275d142f82"
        },
        "item": {
          "id": "72d87e24-9766-4837-88b9-441dced88eab",
          "name": "credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b14c864d-dd5a-44fe-a5ea-7fb8f8ed79db",
        "cursor": {
          "ref": "3081a753-102e-46cf-b435-dc4135aea21d",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "55ad8339-bc8b-4971-bfa7-535e3a645caf"
        },
        "item": {
          "id": "b14c864d-dd5a-44fe-a5ea-7fb8f8ed79db",
          "name": "credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b14c864d-dd5a-44fe-a5ea-7fb8f8ed79db",
        "cursor": {
          "ref": "3081a753-102e-46cf-b435-dc4135aea21d",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "55ad8339-bc8b-4971-bfa7-535e3a645caf"
        },
        "item": {
          "id": "b14c864d-dd5a-44fe-a5ea-7fb8f8ed79db",
          "name": "credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "6e6e65bb-9713-4adb-ae5f-24e2793a0b82",
        "cursor": {
          "ref": "f53be8e0-8031-4bf6-83ed-29dd4ddc00bf",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e3c2aba6-ddac-48d1-a8cc-aadad07195fe"
        },
        "item": {
          "id": "6e6e65bb-9713-4adb-ae5f-24e2793a0b82",
          "name": "credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "6e6e65bb-9713-4adb-ae5f-24e2793a0b82",
        "cursor": {
          "ref": "f53be8e0-8031-4bf6-83ed-29dd4ddc00bf",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e3c2aba6-ddac-48d1-a8cc-aadad07195fe"
        },
        "item": {
          "id": "6e6e65bb-9713-4adb-ae5f-24e2793a0b82",
          "name": "credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "66ed7bf8-3a37-4307-9ac5-f076abc509b6",
        "cursor": {
          "ref": "e011a873-20ce-4f2b-bdb6-13e57138c0b2",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "72f4b5e1-6aed-4e93-9f90-6b4125e4eb55"
        },
        "item": {
          "id": "66ed7bf8-3a37-4307-9ac5-f076abc509b6",
          "name": "credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "66ed7bf8-3a37-4307-9ac5-f076abc509b6",
        "cursor": {
          "ref": "e011a873-20ce-4f2b-bdb6-13e57138c0b2",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "72f4b5e1-6aed-4e93-9f90-6b4125e4eb55"
        },
        "item": {
          "id": "66ed7bf8-3a37-4307-9ac5-f076abc509b6",
          "name": "credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "4aced08f-8a4f-4ff8-b937-06fb7188e39d",
        "cursor": {
          "ref": "f4840d53-c87b-4adf-801f-36b4f7f8042e",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "852c075c-7ef9-4477-82a5-288990f70dc3"
        },
        "item": {
          "id": "4aced08f-8a4f-4ff8-b937-06fb7188e39d",
          "name": "credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "4aced08f-8a4f-4ff8-b937-06fb7188e39d",
        "cursor": {
          "ref": "f4840d53-c87b-4adf-801f-36b4f7f8042e",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "852c075c-7ef9-4477-82a5-288990f70dc3"
        },
        "item": {
          "id": "4aced08f-8a4f-4ff8-b937-06fb7188e39d",
          "name": "credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "8209391b-a73e-49f8-9f93-b0c9b93439a1",
        "cursor": {
          "ref": "bd92437b-abbf-4adc-8e39-30d72841c189",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ea9e050f-1064-4961-b94a-7b5070deeff0"
        },
        "item": {
          "id": "8209391b-a73e-49f8-9f93-b0c9b93439a1",
          "name": "credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "8209391b-a73e-49f8-9f93-b0c9b93439a1",
        "cursor": {
          "ref": "bd92437b-abbf-4adc-8e39-30d72841c189",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ea9e050f-1064-4961-b94a-7b5070deeff0"
        },
        "item": {
          "id": "8209391b-a73e-49f8-9f93-b0c9b93439a1",
          "name": "credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "b5758eab-e88d-40f3-8c12-964d08ab1eed",
        "cursor": {
          "ref": "b75f0e10-ea0f-4f71-b722-45b4ba8516a4",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6166e11-57dd-456a-b901-046d99cfc2d2"
        },
        "item": {
          "id": "b5758eab-e88d-40f3-8c12-964d08ab1eed",
          "name": "credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b5758eab-e88d-40f3-8c12-964d08ab1eed",
        "cursor": {
          "ref": "b75f0e10-ea0f-4f71-b722-45b4ba8516a4",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6166e11-57dd-456a-b901-046d99cfc2d2"
        },
        "item": {
          "id": "b5758eab-e88d-40f3-8c12-964d08ab1eed",
          "name": "credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ec2db641-d2f6-4e6f-b407-155dacc6a49b",
        "cursor": {
          "ref": "d643e8d2-a01a-4a98-882a-361775d6dbb3",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b1b1844b-23b3-4c55-ab88-ff145df5a9f9"
        },
        "item": {
          "id": "ec2db641-d2f6-4e6f-b407-155dacc6a49b",
          "name": "credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ec2db641-d2f6-4e6f-b407-155dacc6a49b",
        "cursor": {
          "ref": "d643e8d2-a01a-4a98-882a-361775d6dbb3",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b1b1844b-23b3-4c55-ab88-ff145df5a9f9"
        },
        "item": {
          "id": "ec2db641-d2f6-4e6f-b407-155dacc6a49b",
          "name": "credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e724477d-00b3-49ad-ae47-c68ef14de3cd",
        "cursor": {
          "ref": "df206ec7-8593-4a7f-b0d9-160f4694f731",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "40f09a9a-e994-4575-8b20-2250bb9bf7b5"
        },
        "item": {
          "id": "e724477d-00b3-49ad-ae47-c68ef14de3cd",
          "name": "options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "e724477d-00b3-49ad-ae47-c68ef14de3cd",
        "cursor": {
          "ref": "df206ec7-8593-4a7f-b0d9-160f4694f731",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "40f09a9a-e994-4575-8b20-2250bb9bf7b5"
        },
        "item": {
          "id": "e724477d-00b3-49ad-ae47-c68ef14de3cd",
          "name": "options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "6be462d9-270b-42cf-bcc8-c16b3ca7f24b",
        "cursor": {
          "ref": "f09b2ace-9703-4dab-8e0b-a2868320010b",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d67dcf56-2cc7-4460-b2fe-d898ef7346e6"
        },
        "item": {
          "id": "6be462d9-270b-42cf-bcc8-c16b3ca7f24b",
          "name": "options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "6be462d9-270b-42cf-bcc8-c16b3ca7f24b",
        "cursor": {
          "ref": "f09b2ace-9703-4dab-8e0b-a2868320010b",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d67dcf56-2cc7-4460-b2fe-d898ef7346e6"
        },
        "item": {
          "id": "6be462d9-270b-42cf-bcc8-c16b3ca7f24b",
          "name": "options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "e4073c17-acd5-496f-a679-cdd0b6861903",
        "cursor": {
          "ref": "985e0348-b9d9-4ec3-adb5-5b9ac4446230",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d006cd8a-1f12-4d40-8875-ff2d3acb399b"
        },
        "item": {
          "id": "e4073c17-acd5-496f-a679-cdd0b6861903",
          "name": "options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e4073c17-acd5-496f-a679-cdd0b6861903",
        "cursor": {
          "ref": "985e0348-b9d9-4ec3-adb5-5b9ac4446230",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d006cd8a-1f12-4d40-8875-ff2d3acb399b"
        },
        "item": {
          "id": "e4073c17-acd5-496f-a679-cdd0b6861903",
          "name": "options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "717932cc-2351-4eaf-a328-ac038d42223c",
        "cursor": {
          "ref": "66a080cf-1494-4900-aa0e-0b48d59b3065",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7f2c9fa1-ea83-45a6-8e0e-34f846a359b2"
        },
        "item": {
          "id": "717932cc-2351-4eaf-a328-ac038d42223c",
          "name": "options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "717932cc-2351-4eaf-a328-ac038d42223c",
        "cursor": {
          "ref": "66a080cf-1494-4900-aa0e-0b48d59b3065",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7f2c9fa1-ea83-45a6-8e0e-34f846a359b2"
        },
        "item": {
          "id": "717932cc-2351-4eaf-a328-ac038d42223c",
          "name": "options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "60727dd0-3268-4f38-96f4-8f388d6808bb",
        "cursor": {
          "ref": "b312dc5f-6cd6-4f0a-83a6-3c94199d5ee3",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8ec34eb4-2d42-4912-b2bb-81bda7ad2b3d"
        },
        "item": {
          "id": "60727dd0-3268-4f38-96f4-8f388d6808bb",
          "name": "options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "60727dd0-3268-4f38-96f4-8f388d6808bb",
        "cursor": {
          "ref": "b312dc5f-6cd6-4f0a-83a6-3c94199d5ee3",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8ec34eb4-2d42-4912-b2bb-81bda7ad2b3d"
        },
        "item": {
          "id": "60727dd0-3268-4f38-96f4-8f388d6808bb",
          "name": "options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "c2622a37-5931-4b7c-9be4-b01fbd8df1ce",
        "cursor": {
          "ref": "e0b22075-e19a-40bc-ad43-14c3d6169668",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "08f32267-1fc4-421f-9ab9-f92d9cb827cc"
        },
        "item": {
          "id": "c2622a37-5931-4b7c-9be4-b01fbd8df1ce",
          "name": "options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "c2622a37-5931-4b7c-9be4-b01fbd8df1ce",
        "cursor": {
          "ref": "e0b22075-e19a-40bc-ad43-14c3d6169668",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "08f32267-1fc4-421f-9ab9-f92d9cb827cc"
        },
        "item": {
          "id": "c2622a37-5931-4b7c-9be4-b01fbd8df1ce",
          "name": "options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3ba28961-625e-46c9-b612-2361b11b3453",
        "cursor": {
          "ref": "fdf01c23-860e-45bf-acf9-41bca8c4e046",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9fa4f05a-ff79-4bec-b1f0-d68392b21d3f"
        },
        "item": {
          "id": "3ba28961-625e-46c9-b612-2361b11b3453",
          "name": "options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "3ba28961-625e-46c9-b612-2361b11b3453",
        "cursor": {
          "ref": "fdf01c23-860e-45bf-acf9-41bca8c4e046",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9fa4f05a-ff79-4bec-b1f0-d68392b21d3f"
        },
        "item": {
          "id": "3ba28961-625e-46c9-b612-2361b11b3453",
          "name": "options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "578f16cd-2711-43b7-942b-24987b81083c",
        "cursor": {
          "ref": "734dd89c-9ae8-4e7d-930d-52f9319daa51",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b6376f29-8c86-48e4-b89a-d0c10debd0bd"
        },
        "item": {
          "id": "578f16cd-2711-43b7-942b-24987b81083c",
          "name": "options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "578f16cd-2711-43b7-942b-24987b81083c",
        "cursor": {
          "ref": "734dd89c-9ae8-4e7d-930d-52f9319daa51",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b6376f29-8c86-48e4-b89a-d0c10debd0bd"
        },
        "item": {
          "id": "578f16cd-2711-43b7-942b-24987b81083c",
          "name": "options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "985c7845-a2b8-4f8f-b3e4-611630a2772a",
        "cursor": {
          "ref": "389d244f-35f7-4880-b93b-efe4be8893bb",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e7172856-6fc7-4a74-960e-7e939d134a70"
        },
        "item": {
          "id": "985c7845-a2b8-4f8f-b3e4-611630a2772a",
          "name": "options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "985c7845-a2b8-4f8f-b3e4-611630a2772a",
        "cursor": {
          "ref": "389d244f-35f7-4880-b93b-efe4be8893bb",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e7172856-6fc7-4a74-960e-7e939d134a70"
        },
        "item": {
          "id": "985c7845-a2b8-4f8f-b3e4-611630a2772a",
          "name": "options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "82278ff3-c79e-4f32-9d28-ff6c90605a18",
        "cursor": {
          "ref": "dd10b0ff-cca9-420b-9403-a7109e2fa3cc",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "70a74913-8ef7-49f3-b19d-bd0ced776141"
        },
        "item": {
          "id": "82278ff3-c79e-4f32-9d28-ff6c90605a18",
          "name": "missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "82278ff3-c79e-4f32-9d28-ff6c90605a18",
        "cursor": {
          "ref": "dd10b0ff-cca9-420b-9403-a7109e2fa3cc",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "70a74913-8ef7-49f3-b19d-bd0ced776141"
        },
        "item": {
          "id": "82278ff3-c79e-4f32-9d28-ff6c90605a18",
          "name": "missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "a3079957-cc3f-49b7-a14b-8d264dd996fa",
        "cursor": {
          "ref": "c57d5376-23c4-484f-b412-d0df05144a73",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cb63b17e-9179-4e38-9029-a0dc3b584cd7"
        },
        "item": {
          "id": "a3079957-cc3f-49b7-a14b-8d264dd996fa",
          "name": "missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "a3079957-cc3f-49b7-a14b-8d264dd996fa",
        "cursor": {
          "ref": "c57d5376-23c4-484f-b412-d0df05144a73",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cb63b17e-9179-4e38-9029-a0dc3b584cd7"
        },
        "item": {
          "id": "a3079957-cc3f-49b7-a14b-8d264dd996fa",
          "name": "missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "a3079957-cc3f-49b7-a14b-8d264dd996fa",
        "cursor": {
          "ref": "c57d5376-23c4-484f-b412-d0df05144a73",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cb63b17e-9179-4e38-9029-a0dc3b584cd7"
        },
        "item": {
          "id": "a3079957-cc3f-49b7-a14b-8d264dd996fa",
          "name": "missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "f31a516a-d464-46ca-9557-241aac22cb85",
        "cursor": {
          "ref": "1b5a28f5-6c6d-4533-9574-7f57918e4e4f",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "30330927-1e70-477f-8eaf-675b7dbf9f08"
        },
        "item": {
          "id": "f31a516a-d464-46ca-9557-241aac22cb85",
          "name": "base"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "f31a516a-d464-46ca-9557-241aac22cb85",
        "cursor": {
          "ref": "1b5a28f5-6c6d-4533-9574-7f57918e4e4f",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "30330927-1e70-477f-8eaf-675b7dbf9f08"
        },
        "item": {
          "id": "f31a516a-d464-46ca-9557-241aac22cb85",
          "name": "base"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "1488499d-61c9-47ab-9d23-0a61a932cd1d",
        "cursor": {
          "ref": "35ebbd0e-b01a-4aa7-a4c9-683ae39f0197",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6cbf8fad-34fa-4c3a-86d0-c6994569f848"
        },
        "item": {
          "id": "1488499d-61c9-47ab-9d23-0a61a932cd1d",
          "name": "credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "1488499d-61c9-47ab-9d23-0a61a932cd1d",
        "cursor": {
          "ref": "35ebbd0e-b01a-4aa7-a4c9-683ae39f0197",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6cbf8fad-34fa-4c3a-86d0-c6994569f848"
        },
        "item": {
          "id": "1488499d-61c9-47ab-9d23-0a61a932cd1d",
          "name": "credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a5e3f6aa-a0b9-4626-8d30-7ece34f34958",
        "cursor": {
          "ref": "e52aa28e-9d07-4c51-ae29-2f3937002e71",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "adc515f1-1ae0-4c60-8b61-947e20cbd3b9"
        },
        "item": {
          "id": "a5e3f6aa-a0b9-4626-8d30-7ece34f34958",
          "name": "credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "a5e3f6aa-a0b9-4626-8d30-7ece34f34958",
        "cursor": {
          "ref": "e52aa28e-9d07-4c51-ae29-2f3937002e71",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "adc515f1-1ae0-4c60-8b61-947e20cbd3b9"
        },
        "item": {
          "id": "a5e3f6aa-a0b9-4626-8d30-7ece34f34958",
          "name": "credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "809660d0-2cf2-4f8b-bb03-c2a1eb4df783",
        "cursor": {
          "ref": "3b5ccd9a-095a-4757-aabd-688f1d5d78d9",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "57b48155-8135-400b-8a3c-f1ef34a7980e"
        },
        "item": {
          "id": "809660d0-2cf2-4f8b-bb03-c2a1eb4df783",
          "name": "credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "809660d0-2cf2-4f8b-bb03-c2a1eb4df783",
        "cursor": {
          "ref": "3b5ccd9a-095a-4757-aabd-688f1d5d78d9",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "57b48155-8135-400b-8a3c-f1ef34a7980e"
        },
        "item": {
          "id": "809660d0-2cf2-4f8b-bb03-c2a1eb4df783",
          "name": "credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d1b32dab-1c64-4923-975d-c6da86d91ae6",
        "cursor": {
          "ref": "d93ec656-8755-4b5f-994e-97c681aa3e27",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "24b9ab1b-3145-4101-9e31-98867b87e60b"
        },
        "item": {
          "id": "d1b32dab-1c64-4923-975d-c6da86d91ae6",
          "name": "credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "d1b32dab-1c64-4923-975d-c6da86d91ae6",
        "cursor": {
          "ref": "d93ec656-8755-4b5f-994e-97c681aa3e27",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "24b9ab1b-3145-4101-9e31-98867b87e60b"
        },
        "item": {
          "id": "d1b32dab-1c64-4923-975d-c6da86d91ae6",
          "name": "credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "66fe37b4-986c-4362-978b-f7f70e9de8d4",
        "cursor": {
          "ref": "955ef65a-0810-43aa-bb17-bd7b1f43a664",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "27b7b2d0-033c-4fcf-9e54-96dfa5a0573d"
        },
        "item": {
          "id": "66fe37b4-986c-4362-978b-f7f70e9de8d4",
          "name": "credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "66fe37b4-986c-4362-978b-f7f70e9de8d4",
        "cursor": {
          "ref": "955ef65a-0810-43aa-bb17-bd7b1f43a664",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "27b7b2d0-033c-4fcf-9e54-96dfa5a0573d"
        },
        "item": {
          "id": "66fe37b4-986c-4362-978b-f7f70e9de8d4",
          "name": "credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "fa751aaa-929b-4aad-b2fe-95ffa8565628",
        "cursor": {
          "ref": "b642e3ec-39eb-44fc-a3d7-4cbc7e993121",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "30d008de-8926-4ce6-a07e-a14b067b027b"
        },
        "item": {
          "id": "fa751aaa-929b-4aad-b2fe-95ffa8565628",
          "name": "options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "fa751aaa-929b-4aad-b2fe-95ffa8565628",
        "cursor": {
          "ref": "b642e3ec-39eb-44fc-a3d7-4cbc7e993121",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "30d008de-8926-4ce6-a07e-a14b067b027b"
        },
        "item": {
          "id": "fa751aaa-929b-4aad-b2fe-95ffa8565628",
          "name": "options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "96cc5a97-57f5-4a98-abeb-b8631837cf25",
        "cursor": {
          "ref": "b2e257c4-6fde-44a8-a5ec-dbd7d6c59a0e",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "51660cd9-7c2e-4c12-a412-2ffdea7a9a40"
        },
        "item": {
          "id": "96cc5a97-57f5-4a98-abeb-b8631837cf25",
          "name": "options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "96cc5a97-57f5-4a98-abeb-b8631837cf25",
        "cursor": {
          "ref": "b2e257c4-6fde-44a8-a5ec-dbd7d6c59a0e",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "51660cd9-7c2e-4c12-a412-2ffdea7a9a40"
        },
        "item": {
          "id": "96cc5a97-57f5-4a98-abeb-b8631837cf25",
          "name": "options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "c8130d1b-46ca-4f37-958b-5931f6e052a0",
        "cursor": {
          "ref": "bb704d9a-4ba4-412b-ba2e-0617d6886734",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "72265d8a-545a-4125-91c3-728a01c33291"
        },
        "item": {
          "id": "c8130d1b-46ca-4f37-958b-5931f6e052a0",
          "name": "options:opt.credentialStatus Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "c8130d1b-46ca-4f37-958b-5931f6e052a0",
        "cursor": {
          "ref": "bb704d9a-4ba4-412b-ba2e-0617d6886734",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "72265d8a-545a-4125-91c3-728a01c33291"
        },
        "item": {
          "id": "c8130d1b-46ca-4f37-958b-5931f6e052a0",
          "name": "options:opt.credentialStatus Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      }
    ]
  }
}