{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f4e6f497-1cab-4373-b560-d1e4b0a5993e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d6542b86-95c5-46dd-96df-19af659444af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f26d9355-7b9c-4465-99e0-3df615ef6a19",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8e0ca17-db1d-4359-b689-d6d60a9cf790",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b51e212-29e6-42e2-9c94-e9fa684a675a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "6c95ba4e-325c-4e28-8e21-cda2a9887b7f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "138292dc-23ed-4f35-8e46-9b8e80c23d3b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "370fdffb-232d-4d16-8b0e-010b05fe0d4f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7f2bd187-654b-478a-9ae7-63b6704b0e31",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1a7de9-057f-433a-a134-c29cc55334ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b620a9ef-6e61-444b-ac93-b4049fdebd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d5d459-9346-4520-a03d-b96c812382de",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7929976a-5168-43d5-8581-9c119e8ec7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71a0bba1-e72c-4961-b88b-7fd95285c6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4942a6-2b0e-4770-a466-c48a2d18a02a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d27410-d08c-4291-82dc-9cd0ce3930b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d758c6e-dc28-41cf-8e42-c8f35cbbfe8b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d0307f76-a417-456e-a6bc-4cd3ffcc873a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a27f4408-9828-4e22-aae0-765b784a0e66",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe05a48e-785a-4b3f-b809-e84ecffddfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa0a1900-56df-47e3-98a2-6e07775b84bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515ab15a-b0a5-4e1d-b48d-5bef6be6446e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990f8466-a1db-4eeb-9e34-6e03bdc3abf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1f22ba-62f5-4e3f-aa6f-8dc8485bec73",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a9d238-3aba-40a9-abbc-436204d34af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c094a5ae-984c-44c7-80ce-6267f588a955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e08c2ff-bb4f-480c-a403-8c9069909068",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4ba4a9e4-da3d-44ef-8b84-8e788fc03021"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e8e1ec0c-be54-4bad-be59-73c312f9aed8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "74a32ff3-687d-4541-bb29-08ca7d2d4447",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "645f049c-80aa-4372-8686-83294dbdf8fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "24a38e0d-433d-4e9d-ba64-156fbae78ee0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07e39939-f3f5-4002-951c-3ea39a2199ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "9f3ce8fb-fad7-4712-93c1-21e452c73a8f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d69da24-ff91-4449-a6c3-b65535c1120d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe63ab5e-65ab-4fc0-89a6-35a8c551ed6b"
            }
          }
        ]
      },
      {
        "id": "0370db3b-2a37-4213-bc34-79a1c86519f6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8a0801ac-84e4-4d40-bde3-551980962b07",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56d9c1c7-bef5-4f5e-9534-a9301735a318",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6c28442f-6509-4c7e-8b90-dbc3bdfefb24",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de17b43-24c5-438c-a1d8-f1b67fe483d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f95757e-e622-4468-b093-f0212d7a8ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb8bfd4-ac9b-490b-b21c-702441bddb6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86041f2b-27b9-41e1-b4df-1cb65eaa129d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990edb1b-fe9b-4955-8862-6b84bf80f086",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12cdd54-5eb1-47bd-ac30-b0c6ff3d611e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ff0d9a-5e9d-4212-8480-3a24344586a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cec67d-a770-438c-8027-a0a485a61021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "257404f5-15e4-4929-8df6-86554f95f9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835cadd0-4636-4e7d-97f2-5768435d44b2",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22c78af-499f-44b9-b5fd-e31e5865ebb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bba48d-6f28-4470-8098-b1083b2976af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff0c846-b04e-4448-892b-befd2445b004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "943f9592-da0a-4788-93a2-8cb2477efe0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e963a7-cef9-4f43-a77d-cb29d789dcd6",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8163aa9-df3c-4fe4-9787-680f5c281e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26db28a2-ec38-49f6-8b14-0f14ac790841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ddf4ec-6c1f-4dd9-b064-df43239bced5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b7e1c1b-6d4c-4799-9a5e-4f7a8697dc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b69aa11-9938-4168-9b71-423188243533",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b346ae70-c72f-4adb-9ff6-8df9e793aadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b109bc9e-a940-4f95-964c-646ba332d377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9ce4bc-e0c4-452e-a64a-a6ca8e637b4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10e28755-c03d-4655-95a7-0d237ba7add4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a44ab8-9396-4a08-b47e-008cf5b9c38c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a9d104-6380-4a2c-b8a3-0914881fac3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51348a52-2082-4b92-aa58-692c3b73294b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313cc630-f7da-45d0-993c-d57019492fee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23df6d1b-21e4-49ad-ad41-34edb5f3bad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe84a75-0789-4f30-af87-fc25029935b7",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6205ca06-0f14-4a20-bac2-4b2b09643648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3559cec5-1daa-4d64-a07c-873969297b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8286a8-769d-462d-96a7-c5c6f6ac0082",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "817d06d4-6393-4f47-b403-ae4664647495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2324fff4-0ced-43ca-9e55-1d4070ab6832",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5fb2e5-3f4a-419a-89cb-11c49dc25886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a474012b-255b-47cc-b94c-44d534bb175d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921cd745-d9ad-4f9e-ad88-b5f598fcbf93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "459a91ad-4eb0-4f36-9295-944f8311b0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c3371a-74c6-44e4-b27f-5f6dbb9bbc31",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201b4722-9eb2-4827-9675-4fd14a3a1699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f10a7c9-40c5-497c-9359-5a72bcbc0ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e48b2e3-925f-4dba-b4a9-b50c9a03140a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dd0aa92-8e19-4973-9168-65bca1dd9bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3b0a1a-87f8-4cc8-96c1-0803ee8c08e7",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2f348d-4348-4a90-b42f-37ba6eeef400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dafaf8f2-bf2c-4470-a699-46ceb754b75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bc2d71-29ef-4298-a9f2-4f1e1b27c6d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d71d990-a46d-4767-a916-3f680aa8fa8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60045afb-54e3-459a-8929-40edba7dba10",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3f5f52-2e8b-4f10-885a-2a19adc43c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04a4e19-aacc-4896-9948-06a8db5b5138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1d0a6b-4391-402f-9e27-f86fc2a08f46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "c683aa3a-f380-4b70-9a11-f274d9e3b392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba46bd3e-5c2c-4806-9991-ab70214fc22d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83598219-c12e-4142-9937-245c45fbe3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ef8c70-5527-4607-8d6f-dddf5e0f232c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bcafbc-8b73-40c9-a261-9286a7406663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ba7feb83-923f-4187-b8d3-78c8b23d60aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38237b2-5f76-49c5-9de9-1b2f76281744",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd21d6e-f2a9-4a62-bd38-e27315843c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063ee250-774c-47b2-8341-265df7513b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38d8ef4-b7ee-4e43-8b81-72493681a1b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24e6bc2b-6f61-4b68-a7b2-fdac598f8f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a9e261-3667-4400-936b-aee2f7b60d5c",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb69b37-5082-4a30-9772-cf40ec32fd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c53ca93-3354-497a-b055-5c0f1473376a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f04623-455f-41c7-8a62-6ff06969a694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f410e1ef-3778-4bb3-9711-cb7269d9733f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83307231-10e7-4a4f-8191-dccb73557209",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0819398b-a545-460a-9b2e-7b3cd57741c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c51618e-e16c-4dcc-99e5-2140fbab84d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b589ff2d-72e7-449b-b4c4-17f790d9d3ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cb66b35e-5032-4777-b343-8b56acda63d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074a5c2a-f575-4923-b057-e19b7afa5695",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a45196-73af-46e7-91be-f28f2b1f3a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff20c863-1ba4-47a1-ade8-6ff511c6500b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a78889-b9b8-4cf8-9f19-404cdd6bdc09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "0b5674b0-a07d-4f73-959a-4f7b5f6d5f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11eb5c9-9412-4aa2-8863-126be46fbd95",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70f612c-c9c7-401e-a4e7-58616612f1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86c57ca-346f-425f-aecd-240013c62a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c96e11-695d-4229-89d3-903ee66e51f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54bc0a90-50a0-4ec5-85ef-75ca9a4e473f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0217733d-7bfb-4c71-ae51-45967d065b4c",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2634b2e3-76f0-4071-8d7f-59d629535d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d5eb35-9e98-4b6b-b9b5-2ddbf4dc1e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d4bfcb-8538-4309-bee4-6b3d26890238",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69e64b7d-db93-41e2-a09d-fdd2e6031576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193be51c-9fbe-432e-aea1-083bc25a70bc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24aa6767-1a54-49f0-844d-b98231024b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d3848a-5f91-469b-ac08-518b0cdcc437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf70ac4f-e496-49fd-a698-3e2f68facfc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "332c9dbb-c336-42d0-931b-1053abe64087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f43df0a-35ad-4696-9368-f1071e743461",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9454cd3-a0cb-409e-88a1-b47cbb4d75cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4717e40d-2e7f-45de-8f03-5528fae6ddcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16a7872-5f52-460e-abd8-ad90db9e5f94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb1dad2e-13bf-4607-aa5b-b76b08f2e100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2321ae85-4d6b-4b4c-a6c1-c1605f0494d8",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59dee271-434d-443c-847f-20b1eb731600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0ffec3-290e-4ff8-8109-37b32025ca42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849815f7-3753-4f41-8d29-e1a4c008d912",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39121934-973c-4f1f-9dc9-843e0b830915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0e993c-0733-43d9-8939-e8718a8d64e7",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a62968-9c04-4e49-9d33-4d9e1ad7c771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4253b3e6-b44e-427e-8a4a-f5fe1108d624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23898589-04b5-44fe-8ecc-ccae072ea705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7399bb5-5f2b-46b2-93df-0c85fd98ec1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be471d0-ee07-4ed1-84ab-e37b40c0e19f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd419e75-a608-4600-b765-1c7aec9229e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c801d2-1e87-409b-8109-1c4d5f4c96c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011fcd20-36cb-4cc7-b98a-009ab4e82030",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0749bc82-038a-4d00-ab2d-7cdec69875da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0cd8ca-b8e9-4fb7-bff0-e5b564a6c203",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec8d9bd-0b12-40ba-ab99-6fe1ade97d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dabdec2-d731-40e4-b694-a615c85929ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c3cc0d-adf9-439e-b536-74462bb6cc9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48f00600-19aa-4177-9086-c29ea0246887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b0db40-9c85-48a1-a984-92de48e14995",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2057157-05c8-4938-a99b-d02bb2c3802d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028f12c5-5891-46f7-a85d-8b597eb74bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1363373-1af5-4d1f-8d5a-258f446aafec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f80d75c-7086-400d-9154-00488c91ce86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a239cbce-a08b-42ec-80cd-705d24dd6984",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c16ee0d-e6be-4931-92b1-bbad03685bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741275a8-bd86-4a3d-91ee-a915af2fa1ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90478ff-95cd-4ad8-8185-019cb740bcdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63053072-0408-4014-8445-e04b0f3af1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6555ef7f-d136-4aee-b153-f15829b487d6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68204e7-c4e8-4265-8b01-590b4292bba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23722c60-aa46-4963-b4b0-66f4ddd0f199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e6ebab-adfd-4c84-98d4-033b3803569b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acb14665-edcb-40c1-a665-191c4b0a28dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7a743f-bd04-4cb0-9d7e-8ecf1b1c7c36",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882a4ebb-8a61-4f23-b852-019e5e40c6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3520bbf4-6895-49ff-a572-e64c1d02ed23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e34e04-24fa-4c3f-ab28-f3528fffa14f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dcc0924-5525-4908-a765-0f2a486aa583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25434a76-319c-45b4-9509-cd7e4a8574e8",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a6cf54-bae2-4e52-9a21-a2bca8456ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c62eb7-99b8-47a0-8e7f-58323bacf3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eaca67a-b1fe-4e5a-bdd9-52e6e58cf413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38b21c93-aa34-4ede-a9ca-3bce13997d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee0457b-eaaf-4bbf-9189-709e4961bf92",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21270e4-e0e8-450c-a3be-91091beb96be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db86955-61e9-4f55-b176-0df757c0581f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4212282-bda4-4781-9a64-e4a34a7da323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7e54193-c2ce-44cd-8cc0-60272d56b59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d640df-3794-4ed3-82da-d32ea713a12e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dad3e60-c8cf-440e-89f9-2d170a742697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "58fd9429-645e-44e7-89d2-c0859d331c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bfff38-3724-4586-985d-fc6d7e11a54a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08306f3b-9cf5-4a92-b22f-ddff20d011f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87a59960-f3e3-40b2-ab28-681b70a0c3c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "043342df-6d43-45ad-b345-4c3eab76c975",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e300fe5-3c8b-4821-a8d3-b8476794923e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fb7a4da-7079-45a1-a749-3d57d2d97418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859ecb66-5591-46d1-8890-f88f6ed17af2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4fb30398-49a7-4c87-8c25-1fb6b28d8fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4962345d-a2e3-4b01-9f74-c92944041248",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f82031-fb21-4a50-8174-c22b477d0fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86dc70b7-9b24-4c80-a1ed-c29fe09f74eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9811a33-eec3-4b30-9be6-988b85aa3bf5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7273cbb6-0c56-4abb-967d-d57df99f655d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c176f8c-d4b1-4e78-b0f1-4daed3681608",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "497c55b0-5451-4ecc-b7a8-848840f16ace"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2687158-bfdd-4571-91a9-3ea2b34aef1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "388da256-5dca-4bb5-b9f2-fb0079f7d994"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1e77aac-f8ce-474d-899d-cecf0e59b007",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98c90f3c-1953-4164-a266-d6b94c3d62ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1eb1122a-bd43-490c-8d00-373ad281e5de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76d6d2e2-8c67-454f-affe-52d46c20fd9e"
                }
              }
            ]
          },
          {
            "id": "9fb155fa-e289-4efc-9505-c4c065a3380e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "26f4b4a9-56ab-46cf-bbf7-7f07d7d9de09",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e98e81d9-c1bd-436a-925f-8a58de0594ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "57473747-cff9-4a5e-9d66-3939a428a03f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5c637b3-0a7b-43d9-8ced-2aec0bf143d6",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f1605e51-ff15-4579-8680-c7d3e298581a"
                    }
                  }
                ]
              },
              {
                "id": "520499fc-3e89-4904-ab66-7ae43785363a",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66781668-03ba-4f06-9bfa-5551804c16eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d632df23-9f91-4f02-a1ac-b22f1ebdd32e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "961d4dc9-b502-412b-97af-479e8666df33",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8a331aee-a4f2-47ef-9f9f-904ae773c378"
                    }
                  }
                ]
              },
              {
                "id": "b1eccb45-78e5-416c-97d0-b07203891b50",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02f15fc9-b967-4c3c-8ecb-92916edf20ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c828969-9d45-4d70-b94b-423db4c624b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64aeb566-0c7b-4a81-a617-bae9cc6206e0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d9ecb839-d321-43aa-b074-42a5dfac28be"
                    }
                  }
                ]
              },
              {
                "id": "53b23dcc-455c-4d67-8afc-4f368f84eaca",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7f79308-179d-4032-9b19-9bd7ac12b0e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d25681a5-8ab8-415e-a458-d7573de31fe1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5381e1b3-1c14-402e-a519-f827e1758fcc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f57132a6-c075-4f47-8018-015f8e321e8a"
                    }
                  }
                ]
              },
              {
                "id": "82f8b4df-430c-4b8a-82ef-dfbbdea0ffd5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c03c0588-a24f-45b8-bc4b-0bffc1798438",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "83f9c6ca-7321-421b-8435-789d9c12e0e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "404fd99d-93d2-41aa-b69a-f67921f64475",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e7e462d2-038e-4abc-b0ab-48bfd1c0b700"
                    }
                  }
                ]
              },
              {
                "id": "7927efc1-36a5-467c-9c98-da727a52ec83",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f55f66a-14a7-4342-a02e-654c161224e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16dfd35b-a90c-4ebe-8f05-b9b3dc359954"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06bb3a94-084e-44f5-94b0-3aff865176be",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3367cd7f-ea6d-4a49-af12-8ea2df2b3d7d"
                    }
                  }
                ]
              },
              {
                "id": "457bf09f-7174-4e23-a87e-891c83a0e669",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b457a10-6ebc-4cee-b1a2-16564f12f5da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d636f7a-dd69-40f1-955c-07f7cbefdc1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb6c6d01-f415-4b9e-9a50-6cdcfa05e1b9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "11617e33-fa5b-4307-97f6-9cd2df4ee0c5"
                    }
                  }
                ]
              },
              {
                "id": "27bc3f7f-59c1-4872-82d3-37af32df38b1",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d62fe86e-d126-4ace-a906-b4799fa20976",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75c9f9b6-61cf-4389-a62b-7e4d030b2fbf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cda0dbc2-599e-4bce-8676-29c90d8f404f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2f380374-1ce5-47b4-9182-25edd9450f37"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "880be333-c4c9-4e60-bae0-796477ac39e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59c473e4-fd1c-4118-b117-64e343a5e7b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "53222def-0dbc-49b1-90b1-946da34f4c39",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2ff590e-97fd-4569-bdbc-7bdd66d3650a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06aabf6b-238b-4c7f-abea-f790440d8c04",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "6fb5e6d4-22e3-4941-b34d-e313c5612c30"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cdf7515-0e8d-4e81-a2b8-c32e68ef8570",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f4ee93b-ea8b-4957-9b70-1f608fe65e9f"
            }
          }
        ]
      },
      {
        "id": "486ec8f2-4ba7-4bae-8ecc-dfff2c2cf844",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8eb1c905-3569-483b-bdea-649ce03e4bd8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80241c74-5c64-4a40-a2ea-3638127a2813",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8382f6e0-4e4e-4bb2-aa58-7b684ca1ccd1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b4ab42-ce62-4bcc-806e-bc18932e631c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946e184a-4e99-4549-9d4c-23212be75013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18da5eb-4aba-4178-ad2b-2c1ad8d96fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f6ab79c-b5c4-4523-aa28-680b53df43ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8fac9b5-31aa-4b3f-bca5-69840334c2cf",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1e925b-c792-43f2-b4db-e5383a820af3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "37566b93-1bd6-4eaa-be3f-6c630032e517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a538909a-d1ea-40e7-8051-b74d60b12140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a202b0d8-9743-42a1-b060-eef0598cfd78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15e33a7d-b2ac-4747-988b-52b08ed39453",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e43c710-041e-4e06-ab7a-2850b4b0bc2d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ad0c352-e619-4360-889c-867de5d95159",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e21f3078-77c1-474b-a04a-7cb0588e550c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bee46f40-25a8-4a41-bde7-14a9c3eecceb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "47f44cb2-93cd-4477-828b-674a09f44359"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c14c5561-e910-4ae1-abbd-4328262bddc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51508fed-9e40-4ee2-a93d-404df719e322"
            }
          }
        ]
      },
      {
        "id": "6dc20299-a070-4f5a-a0b7-3827d39351f4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "12ba6c2f-2601-4ebc-a8a7-3054eb8c7947",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47476674-877b-4cb8-892f-a9549508a8eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4474a285-0428-4e08-8f60-f76c7a27a2dd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a9c249-2978-4ec0-b9fa-f2464a3298ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "72f09182-c71f-4d20-bf58-c0fe5bbeb810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86cf08b-d20f-463b-893e-47d499ec9de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5337f539-eb8b-42e9-9d11-0cd5d72bb308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded13664-65ef-4e3e-896c-49bf223eb6eb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05600ccf-b7a6-4c1e-a91b-1c40ee3218e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "1cd4a963-cbf7-4b96-a617-3548eff3342b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ded465c-2147-4132-b81e-02c30f2fce1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "827a6f8c-11b6-4853-8e45-be40463912f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5aa7a79-9af8-4124-833f-912900bba3c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e3a9c1a-80c0-439d-80cc-afca2e7557c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd75215f-f326-464e-969a-1f7cfdf764e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5aafd17f-a650-47a1-8e13-189605528a71"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4f95316-8332-41e3-ad8b-aa3897cfe8da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cfe8bf7b-71ef-485a-9ef1-b82d3770fdde"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "393ac1a2-4df5-476a-bf03-175625871c55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd6d8240-9523-4894-bc5a-789eb70a0e99"
            }
          }
        ]
      },
      {
        "id": "42ade719-b3c3-4c86-8809-3cf7943d0e62",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "337172cd-5b0d-4286-8a43-7bf05b7387ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c812647-d00c-4140-9577-86537930c79f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dfafbb26-e189-402b-8f2e-a4b739906d31",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6347a081-3148-4620-9ac3-e7960dbabf9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05617370-26c3-49f6-b5cd-483688263a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd9247e-52ba-450b-aacc-c16c9eeb5057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0603433-3a8c-4315-aeb3-0bcbfa1129f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526cf700-9f60-4139-b3b9-198b3f300414",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c24cbc3-ccd9-4260-bb29-e77756004701",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b72f3730-0bcd-4483-9ff6-c0a8215de0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fdbd1df-0472-4a09-8654-ac1c99803d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a797d249-f53d-47a7-8a2e-ce72787b9085"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27a1189e-2f66-4d0a-a1b3-72c16ab41db4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "257fa234-2b25-4595-8a1f-07a0208d7cb7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d1feee3-37ee-49fd-bd95-d4461ae027c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "008c0b42-7948-451a-b275-e74c78b76476"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76fe4ec0-1510-4e71-a5d9-1f5e8b5bce5b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "e33a554f-92e6-40bb-9e65-8e533679c6a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "371d2b99-8908-4a68-9b43-dfa15d32cd2a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d602d5cf-c1e1-49ea-aae3-b3d39e942e5f"
            }
          }
        ]
      },
      {
        "id": "4fac2882-6ec8-458f-9b23-405ef10e89e4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "049ae6e8-ad26-4b91-b311-ca8d804fc373",
            "name": "Negative Testing",
            "item": [
              {
                "id": "884fc26b-ed57-4326-90ff-8aaa0b212383",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a738e8a-1a76-4153-b954-6548ab87cca9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f4c374-31c8-45ff-8e35-3c2aeec160ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdfd4877-50a6-443e-949d-9818e607e04d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c66c8b-888b-436c-a266-c95f3bb933e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7941149d-5b8a-44d0-ae0a-9929a1a3207a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c0f4a5-a8da-4554-8935-60ef6e132bb2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1033eac7-8e50-4236-a87d-da45401c00da",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cf2833b5-9098-4210-afc0-4c56289bcfd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56988b41-c3d1-48ae-8f36-e72c0ad43644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a07e80ae-ad97-45b0-9f13-abd25f013e8e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7ccf434-6cb2-4495-98f2-6e792f0a0f77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9305d595-8973-4f74-b646-b049a51be48b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99ef4331-5de3-4d47-8000-0e445fa543dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3165b053-b5ec-4bd0-bcc5-9297f4f5023f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "611da670-f93b-4954-b6f5-32ab2cb3a4fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "26ec8c5d-decc-4bff-b850-56a6e2094a1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac4f401a-f0e6-4a53-aac3-0af1a83ea048",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22a189f2-babc-4a0d-b8b0-fcc5be990b27"
            }
          }
        ]
      },
      {
        "id": "198318a1-f5f5-4c0d-b0cf-d2b44bb62058",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1dcfac2c-fc2a-43ed-a60a-f284fdaadd3e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5130dbc9-3e3a-450b-95fc-6ff926df1c74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a49f91f-f613-4762-af21-8510caf6d4e2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e143c1-143f-4068-9b7e-4c83100278d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a1ebf5-d44d-4a3f-a647-736b69ab7208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b67033-f205-41d7-816b-de39aeff74af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b903c104-e9c0-4e0a-82a8-27e6a8bd1c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd1b79b-f33e-4c19-ac53-5c430ead5b01",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c16f123-539f-4fff-8a5e-93aed177a4b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2c197f2b-9ff6-491b-b332-d18c29deb972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7c711b-d864-410b-81bc-599b6405b203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f008ba6b-7d0f-4229-bd0a-e54e8b11f61a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe64b865-10c6-43f1-95d5-a9e21cab2221",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b50940b-880e-4152-8dc5-9b2acb1ae7a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "749c6727-fe04-465d-b6bf-50dccfdccc5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2049f8f-5acf-4f54-b1cb-4e66c3ed1000"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "813948ce-a816-4b11-a4e9-e4db6d304ba0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "6e6c9733-3cd6-4217-a848-312e1569fa54"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "934a4b82-cbeb-46ca-b821-13fea083231a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7a32878-58fa-480d-b9dd-98a73038dc47"
            }
          }
        ]
      },
      {
        "id": "117a6d8c-e9c0-49b3-81af-4032f6ce7d68",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "db0a6523-5f16-456f-b2a5-95209e06022e",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 163,
        "pending": 0,
        "failed": 163
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 121
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682209329104,
      "completed": 1682209331809
    },
    "executions": [
      {
        "id": "f26d9355-7b9c-4465-99e0-3df615ef6a19",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b553f854-e846-413f-9c6f-2815e0151e65",
          "httpRequestId": "b9bfa50a-4279-48e7-a765-aed7b0387302"
        },
        "item": {
          "id": "f26d9355-7b9c-4465-99e0-3df615ef6a19",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "7f2bd187-654b-478a-9ae7-63b6704b0e31",
        "cursor": {
          "ref": "73fdb815-0cc8-4dde-8a19-be7d7669f83e",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff40ecfe-0cf5-4d4f-993a-6432f340d784"
        },
        "item": {
          "id": "7f2bd187-654b-478a-9ae7-63b6704b0e31",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "7f2bd187-654b-478a-9ae7-63b6704b0e31",
        "cursor": {
          "ref": "73fdb815-0cc8-4dde-8a19-be7d7669f83e",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff40ecfe-0cf5-4d4f-993a-6432f340d784"
        },
        "item": {
          "id": "7f2bd187-654b-478a-9ae7-63b6704b0e31",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "56d5d459-9346-4520-a03d-b96c812382de",
        "cursor": {
          "ref": "d43ad950-3a2d-4787-bdde-0cc4dba4661a",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8cb8d8c7-b101-4e82-afd7-c58c3da49f07"
        },
        "item": {
          "id": "56d5d459-9346-4520-a03d-b96c812382de",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "56d5d459-9346-4520-a03d-b96c812382de",
        "cursor": {
          "ref": "d43ad950-3a2d-4787-bdde-0cc4dba4661a",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8cb8d8c7-b101-4e82-afd7-c58c3da49f07"
        },
        "item": {
          "id": "56d5d459-9346-4520-a03d-b96c812382de",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "6d4942a6-2b0e-4770-a466-c48a2d18a02a",
        "cursor": {
          "ref": "78f79e7e-b2e9-4725-8501-729a489e7c3c",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7dad5d7f-0a4c-406c-95a2-2f12e1cb6a50"
        },
        "item": {
          "id": "6d4942a6-2b0e-4770-a466-c48a2d18a02a",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6d4942a6-2b0e-4770-a466-c48a2d18a02a",
        "cursor": {
          "ref": "78f79e7e-b2e9-4725-8501-729a489e7c3c",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7dad5d7f-0a4c-406c-95a2-2f12e1cb6a50"
        },
        "item": {
          "id": "6d4942a6-2b0e-4770-a466-c48a2d18a02a",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a27f4408-9828-4e22-aae0-765b784a0e66",
        "cursor": {
          "ref": "63a5e1f0-f108-40fd-bdd8-4baa620ec430",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ef4aba91-e1ea-44b8-825e-c63ecc99abac"
        },
        "item": {
          "id": "a27f4408-9828-4e22-aae0-765b784a0e66",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "a27f4408-9828-4e22-aae0-765b784a0e66",
        "cursor": {
          "ref": "63a5e1f0-f108-40fd-bdd8-4baa620ec430",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ef4aba91-e1ea-44b8-825e-c63ecc99abac"
        },
        "item": {
          "id": "a27f4408-9828-4e22-aae0-765b784a0e66",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "9f1f22ba-62f5-4e3f-aa6f-8dc8485bec73",
        "cursor": {
          "ref": "452cae86-b4e5-44e9-974b-e87ff31f6e63",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dfe3947c-12c7-4976-a23f-46dc9166363d"
        },
        "item": {
          "id": "9f1f22ba-62f5-4e3f-aa6f-8dc8485bec73",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9f1f22ba-62f5-4e3f-aa6f-8dc8485bec73",
        "cursor": {
          "ref": "452cae86-b4e5-44e9-974b-e87ff31f6e63",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dfe3947c-12c7-4976-a23f-46dc9166363d"
        },
        "item": {
          "id": "9f1f22ba-62f5-4e3f-aa6f-8dc8485bec73",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9f1f22ba-62f5-4e3f-aa6f-8dc8485bec73",
        "cursor": {
          "ref": "452cae86-b4e5-44e9-974b-e87ff31f6e63",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dfe3947c-12c7-4976-a23f-46dc9166363d"
        },
        "item": {
          "id": "9f1f22ba-62f5-4e3f-aa6f-8dc8485bec73",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "74a32ff3-687d-4541-bb29-08ca7d2d4447",
        "cursor": {
          "ref": "f7e55d7a-96a3-40b8-a560-f47198013fb6",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "904ed10d-1deb-4d2e-84d2-f7a3987cd6ab"
        },
        "item": {
          "id": "74a32ff3-687d-4541-bb29-08ca7d2d4447",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "74a32ff3-687d-4541-bb29-08ca7d2d4447",
        "cursor": {
          "ref": "f7e55d7a-96a3-40b8-a560-f47198013fb6",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "904ed10d-1deb-4d2e-84d2-f7a3987cd6ab"
        },
        "item": {
          "id": "74a32ff3-687d-4541-bb29-08ca7d2d4447",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "6c28442f-6509-4c7e-8b90-dbc3bdfefb24",
        "cursor": {
          "ref": "743e1de4-1472-4e2b-8173-27fed3e2542b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ae8b2065-e569-439c-b9c7-5dc2adcde6be"
        },
        "item": {
          "id": "6c28442f-6509-4c7e-8b90-dbc3bdfefb24",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6c28442f-6509-4c7e-8b90-dbc3bdfefb24",
        "cursor": {
          "ref": "743e1de4-1472-4e2b-8173-27fed3e2542b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ae8b2065-e569-439c-b9c7-5dc2adcde6be"
        },
        "item": {
          "id": "6c28442f-6509-4c7e-8b90-dbc3bdfefb24",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6c28442f-6509-4c7e-8b90-dbc3bdfefb24",
        "cursor": {
          "ref": "743e1de4-1472-4e2b-8173-27fed3e2542b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ae8b2065-e569-439c-b9c7-5dc2adcde6be"
        },
        "item": {
          "id": "6c28442f-6509-4c7e-8b90-dbc3bdfefb24",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "990edb1b-fe9b-4955-8862-6b84bf80f086",
        "cursor": {
          "ref": "4784fa58-2330-4f04-8a00-a5ae9b009baf",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9de18ea8-1195-4b1b-9581-30198350162c"
        },
        "item": {
          "id": "990edb1b-fe9b-4955-8862-6b84bf80f086",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "990edb1b-fe9b-4955-8862-6b84bf80f086",
        "cursor": {
          "ref": "4784fa58-2330-4f04-8a00-a5ae9b009baf",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9de18ea8-1195-4b1b-9581-30198350162c"
        },
        "item": {
          "id": "990edb1b-fe9b-4955-8862-6b84bf80f086",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "990edb1b-fe9b-4955-8862-6b84bf80f086",
        "cursor": {
          "ref": "4784fa58-2330-4f04-8a00-a5ae9b009baf",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9de18ea8-1195-4b1b-9581-30198350162c"
        },
        "item": {
          "id": "990edb1b-fe9b-4955-8862-6b84bf80f086",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "835cadd0-4636-4e7d-97f2-5768435d44b2",
        "cursor": {
          "ref": "4c5b3e87-97d9-448a-9c73-26de1f250951",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ab5a0d55-d9b3-47eb-bbfc-cd1082519808"
        },
        "item": {
          "id": "835cadd0-4636-4e7d-97f2-5768435d44b2",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "835cadd0-4636-4e7d-97f2-5768435d44b2",
        "cursor": {
          "ref": "4c5b3e87-97d9-448a-9c73-26de1f250951",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ab5a0d55-d9b3-47eb-bbfc-cd1082519808"
        },
        "item": {
          "id": "835cadd0-4636-4e7d-97f2-5768435d44b2",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "835cadd0-4636-4e7d-97f2-5768435d44b2",
        "cursor": {
          "ref": "4c5b3e87-97d9-448a-9c73-26de1f250951",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ab5a0d55-d9b3-47eb-bbfc-cd1082519808"
        },
        "item": {
          "id": "835cadd0-4636-4e7d-97f2-5768435d44b2",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "21e963a7-cef9-4f43-a77d-cb29d789dcd6",
        "cursor": {
          "ref": "f6b56aa3-548d-412d-99bf-b4793ea79060",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5700f379-74f0-451f-bda7-17b54275bdd3"
        },
        "item": {
          "id": "21e963a7-cef9-4f43-a77d-cb29d789dcd6",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "21e963a7-cef9-4f43-a77d-cb29d789dcd6",
        "cursor": {
          "ref": "f6b56aa3-548d-412d-99bf-b4793ea79060",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5700f379-74f0-451f-bda7-17b54275bdd3"
        },
        "item": {
          "id": "21e963a7-cef9-4f43-a77d-cb29d789dcd6",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "21e963a7-cef9-4f43-a77d-cb29d789dcd6",
        "cursor": {
          "ref": "f6b56aa3-548d-412d-99bf-b4793ea79060",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5700f379-74f0-451f-bda7-17b54275bdd3"
        },
        "item": {
          "id": "21e963a7-cef9-4f43-a77d-cb29d789dcd6",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "9b69aa11-9938-4168-9b71-423188243533",
        "cursor": {
          "ref": "de710923-a4a0-41dc-80ae-181869ec2e95",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "57f95d15-1702-4db2-8eff-312b74bfb035"
        },
        "item": {
          "id": "9b69aa11-9938-4168-9b71-423188243533",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9b69aa11-9938-4168-9b71-423188243533",
        "cursor": {
          "ref": "de710923-a4a0-41dc-80ae-181869ec2e95",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "57f95d15-1702-4db2-8eff-312b74bfb035"
        },
        "item": {
          "id": "9b69aa11-9938-4168-9b71-423188243533",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9b69aa11-9938-4168-9b71-423188243533",
        "cursor": {
          "ref": "de710923-a4a0-41dc-80ae-181869ec2e95",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "57f95d15-1702-4db2-8eff-312b74bfb035"
        },
        "item": {
          "id": "9b69aa11-9938-4168-9b71-423188243533",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "26a44ab8-9396-4a08-b47e-008cf5b9c38c",
        "cursor": {
          "ref": "3be0a60f-5bfa-4eec-a523-0357d27e4b13",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "efe491cf-bcad-4af5-941d-88c8fced3b06"
        },
        "item": {
          "id": "26a44ab8-9396-4a08-b47e-008cf5b9c38c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "26a44ab8-9396-4a08-b47e-008cf5b9c38c",
        "cursor": {
          "ref": "3be0a60f-5bfa-4eec-a523-0357d27e4b13",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "efe491cf-bcad-4af5-941d-88c8fced3b06"
        },
        "item": {
          "id": "26a44ab8-9396-4a08-b47e-008cf5b9c38c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "26a44ab8-9396-4a08-b47e-008cf5b9c38c",
        "cursor": {
          "ref": "3be0a60f-5bfa-4eec-a523-0357d27e4b13",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "efe491cf-bcad-4af5-941d-88c8fced3b06"
        },
        "item": {
          "id": "26a44ab8-9396-4a08-b47e-008cf5b9c38c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2fe84a75-0789-4f30-af87-fc25029935b7",
        "cursor": {
          "ref": "339995c6-4236-40e2-8b64-d45d34ff7d09",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d6e9a9e1-80e3-4a09-81a0-c99fce46fddc"
        },
        "item": {
          "id": "2fe84a75-0789-4f30-af87-fc25029935b7",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2fe84a75-0789-4f30-af87-fc25029935b7",
        "cursor": {
          "ref": "339995c6-4236-40e2-8b64-d45d34ff7d09",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d6e9a9e1-80e3-4a09-81a0-c99fce46fddc"
        },
        "item": {
          "id": "2fe84a75-0789-4f30-af87-fc25029935b7",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2fe84a75-0789-4f30-af87-fc25029935b7",
        "cursor": {
          "ref": "339995c6-4236-40e2-8b64-d45d34ff7d09",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d6e9a9e1-80e3-4a09-81a0-c99fce46fddc"
        },
        "item": {
          "id": "2fe84a75-0789-4f30-af87-fc25029935b7",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2324fff4-0ced-43ca-9e55-1d4070ab6832",
        "cursor": {
          "ref": "29ccaa8f-140c-4964-8cd9-3ad636332e71",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "da4562b9-f9e1-451a-ba69-34473a8517e9"
        },
        "item": {
          "id": "2324fff4-0ced-43ca-9e55-1d4070ab6832",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "2324fff4-0ced-43ca-9e55-1d4070ab6832",
        "cursor": {
          "ref": "29ccaa8f-140c-4964-8cd9-3ad636332e71",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "da4562b9-f9e1-451a-ba69-34473a8517e9"
        },
        "item": {
          "id": "2324fff4-0ced-43ca-9e55-1d4070ab6832",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "2324fff4-0ced-43ca-9e55-1d4070ab6832",
        "cursor": {
          "ref": "29ccaa8f-140c-4964-8cd9-3ad636332e71",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "da4562b9-f9e1-451a-ba69-34473a8517e9"
        },
        "item": {
          "id": "2324fff4-0ced-43ca-9e55-1d4070ab6832",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "a5c3371a-74c6-44e4-b27f-5f6dbb9bbc31",
        "cursor": {
          "ref": "46b03c86-9fbe-4ece-b11e-c73132cea143",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ef742c6b-6d37-4c0f-af55-de413c436479"
        },
        "item": {
          "id": "a5c3371a-74c6-44e4-b27f-5f6dbb9bbc31",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a5c3371a-74c6-44e4-b27f-5f6dbb9bbc31",
        "cursor": {
          "ref": "46b03c86-9fbe-4ece-b11e-c73132cea143",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ef742c6b-6d37-4c0f-af55-de413c436479"
        },
        "item": {
          "id": "a5c3371a-74c6-44e4-b27f-5f6dbb9bbc31",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a5c3371a-74c6-44e4-b27f-5f6dbb9bbc31",
        "cursor": {
          "ref": "46b03c86-9fbe-4ece-b11e-c73132cea143",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ef742c6b-6d37-4c0f-af55-de413c436479"
        },
        "item": {
          "id": "a5c3371a-74c6-44e4-b27f-5f6dbb9bbc31",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "bd3b0a1a-87f8-4cc8-96c1-0803ee8c08e7",
        "cursor": {
          "ref": "b929e146-9186-4298-beb9-b3fc962ecde2",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "786053f9-8723-4ff7-8506-87f808f10b21"
        },
        "item": {
          "id": "bd3b0a1a-87f8-4cc8-96c1-0803ee8c08e7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "bd3b0a1a-87f8-4cc8-96c1-0803ee8c08e7",
        "cursor": {
          "ref": "b929e146-9186-4298-beb9-b3fc962ecde2",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "786053f9-8723-4ff7-8506-87f808f10b21"
        },
        "item": {
          "id": "bd3b0a1a-87f8-4cc8-96c1-0803ee8c08e7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "bd3b0a1a-87f8-4cc8-96c1-0803ee8c08e7",
        "cursor": {
          "ref": "b929e146-9186-4298-beb9-b3fc962ecde2",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "786053f9-8723-4ff7-8506-87f808f10b21"
        },
        "item": {
          "id": "bd3b0a1a-87f8-4cc8-96c1-0803ee8c08e7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "60045afb-54e3-459a-8929-40edba7dba10",
        "cursor": {
          "ref": "f023bbd5-ec21-4c97-aa16-8389da05e3ab",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "428d5dfe-75d0-4359-b605-7d513ec2ec47"
        },
        "item": {
          "id": "60045afb-54e3-459a-8929-40edba7dba10",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "60045afb-54e3-459a-8929-40edba7dba10",
        "cursor": {
          "ref": "f023bbd5-ec21-4c97-aa16-8389da05e3ab",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "428d5dfe-75d0-4359-b605-7d513ec2ec47"
        },
        "item": {
          "id": "60045afb-54e3-459a-8929-40edba7dba10",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "60045afb-54e3-459a-8929-40edba7dba10",
        "cursor": {
          "ref": "f023bbd5-ec21-4c97-aa16-8389da05e3ab",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "428d5dfe-75d0-4359-b605-7d513ec2ec47"
        },
        "item": {
          "id": "60045afb-54e3-459a-8929-40edba7dba10",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "ba46bd3e-5c2c-4806-9991-ab70214fc22d",
        "cursor": {
          "ref": "0431d319-0f26-422c-9d02-cafd46aa7bbb",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a0b89d48-1860-4e84-a3c1-4e7e198a1863"
        },
        "item": {
          "id": "ba46bd3e-5c2c-4806-9991-ab70214fc22d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ba46bd3e-5c2c-4806-9991-ab70214fc22d",
        "cursor": {
          "ref": "0431d319-0f26-422c-9d02-cafd46aa7bbb",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a0b89d48-1860-4e84-a3c1-4e7e198a1863"
        },
        "item": {
          "id": "ba46bd3e-5c2c-4806-9991-ab70214fc22d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ba46bd3e-5c2c-4806-9991-ab70214fc22d",
        "cursor": {
          "ref": "0431d319-0f26-422c-9d02-cafd46aa7bbb",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a0b89d48-1860-4e84-a3c1-4e7e198a1863"
        },
        "item": {
          "id": "ba46bd3e-5c2c-4806-9991-ab70214fc22d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "e38237b2-5f76-49c5-9de9-1b2f76281744",
        "cursor": {
          "ref": "b8e22f1b-ae7a-441b-8210-872038c4caf9",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e68ef045-d66e-41b9-97fc-b06346615621"
        },
        "item": {
          "id": "e38237b2-5f76-49c5-9de9-1b2f76281744",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e38237b2-5f76-49c5-9de9-1b2f76281744",
        "cursor": {
          "ref": "b8e22f1b-ae7a-441b-8210-872038c4caf9",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e68ef045-d66e-41b9-97fc-b06346615621"
        },
        "item": {
          "id": "e38237b2-5f76-49c5-9de9-1b2f76281744",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e38237b2-5f76-49c5-9de9-1b2f76281744",
        "cursor": {
          "ref": "b8e22f1b-ae7a-441b-8210-872038c4caf9",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e68ef045-d66e-41b9-97fc-b06346615621"
        },
        "item": {
          "id": "e38237b2-5f76-49c5-9de9-1b2f76281744",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "06a9e261-3667-4400-936b-aee2f7b60d5c",
        "cursor": {
          "ref": "8e6d9df2-2ee6-423b-8e35-3d3c39940aa2",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e20e0a9c-b827-4dcd-b6da-28b7e4f3d097"
        },
        "item": {
          "id": "06a9e261-3667-4400-936b-aee2f7b60d5c",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "06a9e261-3667-4400-936b-aee2f7b60d5c",
        "cursor": {
          "ref": "8e6d9df2-2ee6-423b-8e35-3d3c39940aa2",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e20e0a9c-b827-4dcd-b6da-28b7e4f3d097"
        },
        "item": {
          "id": "06a9e261-3667-4400-936b-aee2f7b60d5c",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "06a9e261-3667-4400-936b-aee2f7b60d5c",
        "cursor": {
          "ref": "8e6d9df2-2ee6-423b-8e35-3d3c39940aa2",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e20e0a9c-b827-4dcd-b6da-28b7e4f3d097"
        },
        "item": {
          "id": "06a9e261-3667-4400-936b-aee2f7b60d5c",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "83307231-10e7-4a4f-8191-dccb73557209",
        "cursor": {
          "ref": "cd104911-79be-4a2e-a33e-1cb58c1221c7",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "89f84324-4ecc-48c5-93f8-3e9ab87cab82"
        },
        "item": {
          "id": "83307231-10e7-4a4f-8191-dccb73557209",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "83307231-10e7-4a4f-8191-dccb73557209",
        "cursor": {
          "ref": "cd104911-79be-4a2e-a33e-1cb58c1221c7",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "89f84324-4ecc-48c5-93f8-3e9ab87cab82"
        },
        "item": {
          "id": "83307231-10e7-4a4f-8191-dccb73557209",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "83307231-10e7-4a4f-8191-dccb73557209",
        "cursor": {
          "ref": "cd104911-79be-4a2e-a33e-1cb58c1221c7",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "89f84324-4ecc-48c5-93f8-3e9ab87cab82"
        },
        "item": {
          "id": "83307231-10e7-4a4f-8191-dccb73557209",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "074a5c2a-f575-4923-b057-e19b7afa5695",
        "cursor": {
          "ref": "45e8d5da-e973-4cf1-913f-1d0289bf3b33",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d10fe81a-0fc9-4f9b-a695-37efddef33c9"
        },
        "item": {
          "id": "074a5c2a-f575-4923-b057-e19b7afa5695",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "074a5c2a-f575-4923-b057-e19b7afa5695",
        "cursor": {
          "ref": "45e8d5da-e973-4cf1-913f-1d0289bf3b33",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d10fe81a-0fc9-4f9b-a695-37efddef33c9"
        },
        "item": {
          "id": "074a5c2a-f575-4923-b057-e19b7afa5695",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "074a5c2a-f575-4923-b057-e19b7afa5695",
        "cursor": {
          "ref": "45e8d5da-e973-4cf1-913f-1d0289bf3b33",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d10fe81a-0fc9-4f9b-a695-37efddef33c9"
        },
        "item": {
          "id": "074a5c2a-f575-4923-b057-e19b7afa5695",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f11eb5c9-9412-4aa2-8863-126be46fbd95",
        "cursor": {
          "ref": "307d53ef-9e01-464d-b9b4-db5c6fa600fe",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "afca3a1e-5021-41ec-9d44-17bcb6c06377"
        },
        "item": {
          "id": "f11eb5c9-9412-4aa2-8863-126be46fbd95",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f11eb5c9-9412-4aa2-8863-126be46fbd95",
        "cursor": {
          "ref": "307d53ef-9e01-464d-b9b4-db5c6fa600fe",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "afca3a1e-5021-41ec-9d44-17bcb6c06377"
        },
        "item": {
          "id": "f11eb5c9-9412-4aa2-8863-126be46fbd95",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f11eb5c9-9412-4aa2-8863-126be46fbd95",
        "cursor": {
          "ref": "307d53ef-9e01-464d-b9b4-db5c6fa600fe",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "afca3a1e-5021-41ec-9d44-17bcb6c06377"
        },
        "item": {
          "id": "f11eb5c9-9412-4aa2-8863-126be46fbd95",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "0217733d-7bfb-4c71-ae51-45967d065b4c",
        "cursor": {
          "ref": "7effbcdc-24f7-4eec-bf4a-b0ec393169b0",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9419e706-f426-459f-a689-a9586494395c"
        },
        "item": {
          "id": "0217733d-7bfb-4c71-ae51-45967d065b4c",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0217733d-7bfb-4c71-ae51-45967d065b4c",
        "cursor": {
          "ref": "7effbcdc-24f7-4eec-bf4a-b0ec393169b0",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9419e706-f426-459f-a689-a9586494395c"
        },
        "item": {
          "id": "0217733d-7bfb-4c71-ae51-45967d065b4c",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0217733d-7bfb-4c71-ae51-45967d065b4c",
        "cursor": {
          "ref": "7effbcdc-24f7-4eec-bf4a-b0ec393169b0",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9419e706-f426-459f-a689-a9586494395c"
        },
        "item": {
          "id": "0217733d-7bfb-4c71-ae51-45967d065b4c",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "193be51c-9fbe-432e-aea1-083bc25a70bc",
        "cursor": {
          "ref": "425132a4-1204-4614-9aa3-13a769626059",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "690ad61a-1fb7-48e2-a71f-207298eefdd6"
        },
        "item": {
          "id": "193be51c-9fbe-432e-aea1-083bc25a70bc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "193be51c-9fbe-432e-aea1-083bc25a70bc",
        "cursor": {
          "ref": "425132a4-1204-4614-9aa3-13a769626059",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "690ad61a-1fb7-48e2-a71f-207298eefdd6"
        },
        "item": {
          "id": "193be51c-9fbe-432e-aea1-083bc25a70bc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "193be51c-9fbe-432e-aea1-083bc25a70bc",
        "cursor": {
          "ref": "425132a4-1204-4614-9aa3-13a769626059",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "690ad61a-1fb7-48e2-a71f-207298eefdd6"
        },
        "item": {
          "id": "193be51c-9fbe-432e-aea1-083bc25a70bc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "6f43df0a-35ad-4696-9368-f1071e743461",
        "cursor": {
          "ref": "731832fe-fcfe-4052-928e-f92c15c5bd89",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ba9c7b14-004a-4231-8fc3-bc91686c17fe"
        },
        "item": {
          "id": "6f43df0a-35ad-4696-9368-f1071e743461",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6f43df0a-35ad-4696-9368-f1071e743461",
        "cursor": {
          "ref": "731832fe-fcfe-4052-928e-f92c15c5bd89",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ba9c7b14-004a-4231-8fc3-bc91686c17fe"
        },
        "item": {
          "id": "6f43df0a-35ad-4696-9368-f1071e743461",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6f43df0a-35ad-4696-9368-f1071e743461",
        "cursor": {
          "ref": "731832fe-fcfe-4052-928e-f92c15c5bd89",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ba9c7b14-004a-4231-8fc3-bc91686c17fe"
        },
        "item": {
          "id": "6f43df0a-35ad-4696-9368-f1071e743461",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "2321ae85-4d6b-4b4c-a6c1-c1605f0494d8",
        "cursor": {
          "ref": "e043954d-94c9-4b20-837f-20457e0b14b9",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a5f939d6-76e7-475a-aebc-79e251cafbf8"
        },
        "item": {
          "id": "2321ae85-4d6b-4b4c-a6c1-c1605f0494d8",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "2321ae85-4d6b-4b4c-a6c1-c1605f0494d8",
        "cursor": {
          "ref": "e043954d-94c9-4b20-837f-20457e0b14b9",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a5f939d6-76e7-475a-aebc-79e251cafbf8"
        },
        "item": {
          "id": "2321ae85-4d6b-4b4c-a6c1-c1605f0494d8",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "2321ae85-4d6b-4b4c-a6c1-c1605f0494d8",
        "cursor": {
          "ref": "e043954d-94c9-4b20-837f-20457e0b14b9",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a5f939d6-76e7-475a-aebc-79e251cafbf8"
        },
        "item": {
          "id": "2321ae85-4d6b-4b4c-a6c1-c1605f0494d8",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "4f0e993c-0733-43d9-8939-e8718a8d64e7",
        "cursor": {
          "ref": "f6c634f7-b101-41f5-9b60-02fde6d10584",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "154e8c1c-acba-454e-a499-53cea88ff360"
        },
        "item": {
          "id": "4f0e993c-0733-43d9-8939-e8718a8d64e7",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "4f0e993c-0733-43d9-8939-e8718a8d64e7",
        "cursor": {
          "ref": "f6c634f7-b101-41f5-9b60-02fde6d10584",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "154e8c1c-acba-454e-a499-53cea88ff360"
        },
        "item": {
          "id": "4f0e993c-0733-43d9-8939-e8718a8d64e7",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "4f0e993c-0733-43d9-8939-e8718a8d64e7",
        "cursor": {
          "ref": "f6c634f7-b101-41f5-9b60-02fde6d10584",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "154e8c1c-acba-454e-a499-53cea88ff360"
        },
        "item": {
          "id": "4f0e993c-0733-43d9-8939-e8718a8d64e7",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7be471d0-ee07-4ed1-84ab-e37b40c0e19f",
        "cursor": {
          "ref": "13e28837-e451-4153-bb16-edbd0f59d53e",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "873ed41d-e6fc-4a72-a9d1-42c19e012ccf"
        },
        "item": {
          "id": "7be471d0-ee07-4ed1-84ab-e37b40c0e19f",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7be471d0-ee07-4ed1-84ab-e37b40c0e19f",
        "cursor": {
          "ref": "13e28837-e451-4153-bb16-edbd0f59d53e",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "873ed41d-e6fc-4a72-a9d1-42c19e012ccf"
        },
        "item": {
          "id": "7be471d0-ee07-4ed1-84ab-e37b40c0e19f",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7be471d0-ee07-4ed1-84ab-e37b40c0e19f",
        "cursor": {
          "ref": "13e28837-e451-4153-bb16-edbd0f59d53e",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "873ed41d-e6fc-4a72-a9d1-42c19e012ccf"
        },
        "item": {
          "id": "7be471d0-ee07-4ed1-84ab-e37b40c0e19f",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "bf0cd8ca-b8e9-4fb7-bff0-e5b564a6c203",
        "cursor": {
          "ref": "9a6a4d19-f041-4f2f-85d8-9469e990e2bf",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ae7f816c-5eda-4e08-b8dc-8925e0254a8d"
        },
        "item": {
          "id": "bf0cd8ca-b8e9-4fb7-bff0-e5b564a6c203",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "bf0cd8ca-b8e9-4fb7-bff0-e5b564a6c203",
        "cursor": {
          "ref": "9a6a4d19-f041-4f2f-85d8-9469e990e2bf",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ae7f816c-5eda-4e08-b8dc-8925e0254a8d"
        },
        "item": {
          "id": "bf0cd8ca-b8e9-4fb7-bff0-e5b564a6c203",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "bf0cd8ca-b8e9-4fb7-bff0-e5b564a6c203",
        "cursor": {
          "ref": "9a6a4d19-f041-4f2f-85d8-9469e990e2bf",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ae7f816c-5eda-4e08-b8dc-8925e0254a8d"
        },
        "item": {
          "id": "bf0cd8ca-b8e9-4fb7-bff0-e5b564a6c203",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "70b0db40-9c85-48a1-a984-92de48e14995",
        "cursor": {
          "ref": "8a5a4365-d1c7-4909-b430-94778ce44e57",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b8efa55f-125d-42d2-8769-0f4159cbda3b"
        },
        "item": {
          "id": "70b0db40-9c85-48a1-a984-92de48e14995",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "70b0db40-9c85-48a1-a984-92de48e14995",
        "cursor": {
          "ref": "8a5a4365-d1c7-4909-b430-94778ce44e57",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b8efa55f-125d-42d2-8769-0f4159cbda3b"
        },
        "item": {
          "id": "70b0db40-9c85-48a1-a984-92de48e14995",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "70b0db40-9c85-48a1-a984-92de48e14995",
        "cursor": {
          "ref": "8a5a4365-d1c7-4909-b430-94778ce44e57",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b8efa55f-125d-42d2-8769-0f4159cbda3b"
        },
        "item": {
          "id": "70b0db40-9c85-48a1-a984-92de48e14995",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a239cbce-a08b-42ec-80cd-705d24dd6984",
        "cursor": {
          "ref": "e8a7a1c8-8f5a-466c-8765-3d4694751af3",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "70f12db8-78dd-4800-b348-a1eba2a814d8"
        },
        "item": {
          "id": "a239cbce-a08b-42ec-80cd-705d24dd6984",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "a239cbce-a08b-42ec-80cd-705d24dd6984",
        "cursor": {
          "ref": "e8a7a1c8-8f5a-466c-8765-3d4694751af3",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "70f12db8-78dd-4800-b348-a1eba2a814d8"
        },
        "item": {
          "id": "a239cbce-a08b-42ec-80cd-705d24dd6984",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "a239cbce-a08b-42ec-80cd-705d24dd6984",
        "cursor": {
          "ref": "e8a7a1c8-8f5a-466c-8765-3d4694751af3",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "70f12db8-78dd-4800-b348-a1eba2a814d8"
        },
        "item": {
          "id": "a239cbce-a08b-42ec-80cd-705d24dd6984",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6555ef7f-d136-4aee-b153-f15829b487d6",
        "cursor": {
          "ref": "5ac45e65-a592-420f-9f94-5b95fdf1757f",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ab26024e-16c5-4031-8466-8889306ba1f8"
        },
        "item": {
          "id": "6555ef7f-d136-4aee-b153-f15829b487d6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6555ef7f-d136-4aee-b153-f15829b487d6",
        "cursor": {
          "ref": "5ac45e65-a592-420f-9f94-5b95fdf1757f",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ab26024e-16c5-4031-8466-8889306ba1f8"
        },
        "item": {
          "id": "6555ef7f-d136-4aee-b153-f15829b487d6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6555ef7f-d136-4aee-b153-f15829b487d6",
        "cursor": {
          "ref": "5ac45e65-a592-420f-9f94-5b95fdf1757f",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ab26024e-16c5-4031-8466-8889306ba1f8"
        },
        "item": {
          "id": "6555ef7f-d136-4aee-b153-f15829b487d6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6c7a743f-bd04-4cb0-9d7e-8ecf1b1c7c36",
        "cursor": {
          "ref": "e655aba6-884d-4b3f-910f-1564223ee678",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "82ba27c1-2a94-4e69-bbeb-d49fc665b62a"
        },
        "item": {
          "id": "6c7a743f-bd04-4cb0-9d7e-8ecf1b1c7c36",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "6c7a743f-bd04-4cb0-9d7e-8ecf1b1c7c36",
        "cursor": {
          "ref": "e655aba6-884d-4b3f-910f-1564223ee678",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "82ba27c1-2a94-4e69-bbeb-d49fc665b62a"
        },
        "item": {
          "id": "6c7a743f-bd04-4cb0-9d7e-8ecf1b1c7c36",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "6c7a743f-bd04-4cb0-9d7e-8ecf1b1c7c36",
        "cursor": {
          "ref": "e655aba6-884d-4b3f-910f-1564223ee678",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "82ba27c1-2a94-4e69-bbeb-d49fc665b62a"
        },
        "item": {
          "id": "6c7a743f-bd04-4cb0-9d7e-8ecf1b1c7c36",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "25434a76-319c-45b4-9509-cd7e4a8574e8",
        "cursor": {
          "ref": "44dbdcb9-0b95-4170-8dcb-93cf63ffd6cd",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0ab2fa25-242e-479e-a580-04753e8dd546"
        },
        "item": {
          "id": "25434a76-319c-45b4-9509-cd7e4a8574e8",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "25434a76-319c-45b4-9509-cd7e4a8574e8",
        "cursor": {
          "ref": "44dbdcb9-0b95-4170-8dcb-93cf63ffd6cd",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0ab2fa25-242e-479e-a580-04753e8dd546"
        },
        "item": {
          "id": "25434a76-319c-45b4-9509-cd7e4a8574e8",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "25434a76-319c-45b4-9509-cd7e4a8574e8",
        "cursor": {
          "ref": "44dbdcb9-0b95-4170-8dcb-93cf63ffd6cd",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0ab2fa25-242e-479e-a580-04753e8dd546"
        },
        "item": {
          "id": "25434a76-319c-45b4-9509-cd7e4a8574e8",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "9ee0457b-eaaf-4bbf-9189-709e4961bf92",
        "cursor": {
          "ref": "2ae9854e-8d06-46ff-9bbb-301fa975ba12",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0eb31e37-ceb6-4990-ba88-1f7f250dcdcd"
        },
        "item": {
          "id": "9ee0457b-eaaf-4bbf-9189-709e4961bf92",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "9ee0457b-eaaf-4bbf-9189-709e4961bf92",
        "cursor": {
          "ref": "2ae9854e-8d06-46ff-9bbb-301fa975ba12",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0eb31e37-ceb6-4990-ba88-1f7f250dcdcd"
        },
        "item": {
          "id": "9ee0457b-eaaf-4bbf-9189-709e4961bf92",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "9ee0457b-eaaf-4bbf-9189-709e4961bf92",
        "cursor": {
          "ref": "2ae9854e-8d06-46ff-9bbb-301fa975ba12",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0eb31e37-ceb6-4990-ba88-1f7f250dcdcd"
        },
        "item": {
          "id": "9ee0457b-eaaf-4bbf-9189-709e4961bf92",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "e2d640df-3794-4ed3-82da-d32ea713a12e",
        "cursor": {
          "ref": "7ff44b16-b8d9-4576-ad04-87919863dee4",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d275b10c-7bc2-4e14-9431-114ece2d6c94"
        },
        "item": {
          "id": "e2d640df-3794-4ed3-82da-d32ea713a12e",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "e2d640df-3794-4ed3-82da-d32ea713a12e",
        "cursor": {
          "ref": "7ff44b16-b8d9-4576-ad04-87919863dee4",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d275b10c-7bc2-4e14-9431-114ece2d6c94"
        },
        "item": {
          "id": "e2d640df-3794-4ed3-82da-d32ea713a12e",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "e2d640df-3794-4ed3-82da-d32ea713a12e",
        "cursor": {
          "ref": "7ff44b16-b8d9-4576-ad04-87919863dee4",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d275b10c-7bc2-4e14-9431-114ece2d6c94"
        },
        "item": {
          "id": "e2d640df-3794-4ed3-82da-d32ea713a12e",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "043342df-6d43-45ad-b345-4c3eab76c975",
        "cursor": {
          "ref": "7e00837c-964d-42e1-a5d0-a9bfb1abb6dd",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "18796e88-eb63-436d-b4f8-51e05e06ca68"
        },
        "item": {
          "id": "043342df-6d43-45ad-b345-4c3eab76c975",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "043342df-6d43-45ad-b345-4c3eab76c975",
        "cursor": {
          "ref": "7e00837c-964d-42e1-a5d0-a9bfb1abb6dd",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "18796e88-eb63-436d-b4f8-51e05e06ca68"
        },
        "item": {
          "id": "043342df-6d43-45ad-b345-4c3eab76c975",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "043342df-6d43-45ad-b345-4c3eab76c975",
        "cursor": {
          "ref": "7e00837c-964d-42e1-a5d0-a9bfb1abb6dd",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "18796e88-eb63-436d-b4f8-51e05e06ca68"
        },
        "item": {
          "id": "043342df-6d43-45ad-b345-4c3eab76c975",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4962345d-a2e3-4b01-9f74-c92944041248",
        "cursor": {
          "ref": "05d7aff4-e707-4f11-816b-f8c26216dbf7",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8af8614c-cf7a-4c4c-a0c2-47d305c39be1"
        },
        "item": {
          "id": "4962345d-a2e3-4b01-9f74-c92944041248",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4962345d-a2e3-4b01-9f74-c92944041248",
        "cursor": {
          "ref": "05d7aff4-e707-4f11-816b-f8c26216dbf7",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8af8614c-cf7a-4c4c-a0c2-47d305c39be1"
        },
        "item": {
          "id": "4962345d-a2e3-4b01-9f74-c92944041248",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4962345d-a2e3-4b01-9f74-c92944041248",
        "cursor": {
          "ref": "05d7aff4-e707-4f11-816b-f8c26216dbf7",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8af8614c-cf7a-4c4c-a0c2-47d305c39be1"
        },
        "item": {
          "id": "4962345d-a2e3-4b01-9f74-c92944041248",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4962345d-a2e3-4b01-9f74-c92944041248",
        "cursor": {
          "ref": "05d7aff4-e707-4f11-816b-f8c26216dbf7",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8af8614c-cf7a-4c4c-a0c2-47d305c39be1"
        },
        "item": {
          "id": "4962345d-a2e3-4b01-9f74-c92944041248",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "26f4b4a9-56ab-46cf-bbf7-7f07d7d9de09",
        "cursor": {
          "ref": "017a4412-24ba-497d-9301-b5a7040aee82",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8120a658-798e-43c3-8458-01a82f8929ac"
        },
        "item": {
          "id": "26f4b4a9-56ab-46cf-bbf7-7f07d7d9de09",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "26f4b4a9-56ab-46cf-bbf7-7f07d7d9de09",
        "cursor": {
          "ref": "017a4412-24ba-497d-9301-b5a7040aee82",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8120a658-798e-43c3-8458-01a82f8929ac"
        },
        "item": {
          "id": "26f4b4a9-56ab-46cf-bbf7-7f07d7d9de09",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "26f4b4a9-56ab-46cf-bbf7-7f07d7d9de09",
        "cursor": {
          "ref": "017a4412-24ba-497d-9301-b5a7040aee82",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8120a658-798e-43c3-8458-01a82f8929ac"
        },
        "item": {
          "id": "26f4b4a9-56ab-46cf-bbf7-7f07d7d9de09",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "520499fc-3e89-4904-ab66-7ae43785363a",
        "cursor": {
          "ref": "520b3aef-434d-4b26-9a3a-25705cb91b31",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c98e480f-5d0a-494e-a03b-6dbd38ed32d1"
        },
        "item": {
          "id": "520499fc-3e89-4904-ab66-7ae43785363a",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "520499fc-3e89-4904-ab66-7ae43785363a",
        "cursor": {
          "ref": "520b3aef-434d-4b26-9a3a-25705cb91b31",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c98e480f-5d0a-494e-a03b-6dbd38ed32d1"
        },
        "item": {
          "id": "520499fc-3e89-4904-ab66-7ae43785363a",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "520499fc-3e89-4904-ab66-7ae43785363a",
        "cursor": {
          "ref": "520b3aef-434d-4b26-9a3a-25705cb91b31",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c98e480f-5d0a-494e-a03b-6dbd38ed32d1"
        },
        "item": {
          "id": "520499fc-3e89-4904-ab66-7ae43785363a",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b1eccb45-78e5-416c-97d0-b07203891b50",
        "cursor": {
          "ref": "7c1a67f6-5b89-4e95-938c-088cf04c5486",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6d521fb4-571f-4cb4-99d2-0795e9fb5ebf"
        },
        "item": {
          "id": "b1eccb45-78e5-416c-97d0-b07203891b50",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "b1eccb45-78e5-416c-97d0-b07203891b50",
        "cursor": {
          "ref": "7c1a67f6-5b89-4e95-938c-088cf04c5486",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6d521fb4-571f-4cb4-99d2-0795e9fb5ebf"
        },
        "item": {
          "id": "b1eccb45-78e5-416c-97d0-b07203891b50",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "b1eccb45-78e5-416c-97d0-b07203891b50",
        "cursor": {
          "ref": "7c1a67f6-5b89-4e95-938c-088cf04c5486",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6d521fb4-571f-4cb4-99d2-0795e9fb5ebf"
        },
        "item": {
          "id": "b1eccb45-78e5-416c-97d0-b07203891b50",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "53b23dcc-455c-4d67-8afc-4f368f84eaca",
        "cursor": {
          "ref": "db6eb221-455f-4aba-8ed7-de7c711624ed",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c4971a6b-2e62-412f-8e18-c77f5ac99dc6"
        },
        "item": {
          "id": "53b23dcc-455c-4d67-8afc-4f368f84eaca",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "53b23dcc-455c-4d67-8afc-4f368f84eaca",
        "cursor": {
          "ref": "db6eb221-455f-4aba-8ed7-de7c711624ed",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c4971a6b-2e62-412f-8e18-c77f5ac99dc6"
        },
        "item": {
          "id": "53b23dcc-455c-4d67-8afc-4f368f84eaca",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "53b23dcc-455c-4d67-8afc-4f368f84eaca",
        "cursor": {
          "ref": "db6eb221-455f-4aba-8ed7-de7c711624ed",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c4971a6b-2e62-412f-8e18-c77f5ac99dc6"
        },
        "item": {
          "id": "53b23dcc-455c-4d67-8afc-4f368f84eaca",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "82f8b4df-430c-4b8a-82ef-dfbbdea0ffd5",
        "cursor": {
          "ref": "dfecf1ea-57cc-42d2-9d32-f0dabb11807e",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e8f5587f-4a6a-4f4b-a05a-ca6a1badbb65"
        },
        "item": {
          "id": "82f8b4df-430c-4b8a-82ef-dfbbdea0ffd5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "82f8b4df-430c-4b8a-82ef-dfbbdea0ffd5",
        "cursor": {
          "ref": "dfecf1ea-57cc-42d2-9d32-f0dabb11807e",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e8f5587f-4a6a-4f4b-a05a-ca6a1badbb65"
        },
        "item": {
          "id": "82f8b4df-430c-4b8a-82ef-dfbbdea0ffd5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "82f8b4df-430c-4b8a-82ef-dfbbdea0ffd5",
        "cursor": {
          "ref": "dfecf1ea-57cc-42d2-9d32-f0dabb11807e",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e8f5587f-4a6a-4f4b-a05a-ca6a1badbb65"
        },
        "item": {
          "id": "82f8b4df-430c-4b8a-82ef-dfbbdea0ffd5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "7927efc1-36a5-467c-9c98-da727a52ec83",
        "cursor": {
          "ref": "ad159dc6-6a7f-4f78-813a-d4198c43dcd3",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7a67644b-d7eb-4111-b3ae-dccea022d9fb"
        },
        "item": {
          "id": "7927efc1-36a5-467c-9c98-da727a52ec83",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7927efc1-36a5-467c-9c98-da727a52ec83",
        "cursor": {
          "ref": "ad159dc6-6a7f-4f78-813a-d4198c43dcd3",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7a67644b-d7eb-4111-b3ae-dccea022d9fb"
        },
        "item": {
          "id": "7927efc1-36a5-467c-9c98-da727a52ec83",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7927efc1-36a5-467c-9c98-da727a52ec83",
        "cursor": {
          "ref": "ad159dc6-6a7f-4f78-813a-d4198c43dcd3",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7a67644b-d7eb-4111-b3ae-dccea022d9fb"
        },
        "item": {
          "id": "7927efc1-36a5-467c-9c98-da727a52ec83",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "457bf09f-7174-4e23-a87e-891c83a0e669",
        "cursor": {
          "ref": "df0c191c-836c-445c-8934-6ec72071847e",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5bf37e07-b9c9-4e16-b7fd-718bd6fc6f21"
        },
        "item": {
          "id": "457bf09f-7174-4e23-a87e-891c83a0e669",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "457bf09f-7174-4e23-a87e-891c83a0e669",
        "cursor": {
          "ref": "df0c191c-836c-445c-8934-6ec72071847e",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5bf37e07-b9c9-4e16-b7fd-718bd6fc6f21"
        },
        "item": {
          "id": "457bf09f-7174-4e23-a87e-891c83a0e669",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "457bf09f-7174-4e23-a87e-891c83a0e669",
        "cursor": {
          "ref": "df0c191c-836c-445c-8934-6ec72071847e",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5bf37e07-b9c9-4e16-b7fd-718bd6fc6f21"
        },
        "item": {
          "id": "457bf09f-7174-4e23-a87e-891c83a0e669",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "27bc3f7f-59c1-4872-82d3-37af32df38b1",
        "cursor": {
          "ref": "85ea21d3-2823-4f7d-a091-8fab799e29f3",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ee4e5ed2-93d2-42c1-94fb-06b6b0bf0b41"
        },
        "item": {
          "id": "27bc3f7f-59c1-4872-82d3-37af32df38b1",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "27bc3f7f-59c1-4872-82d3-37af32df38b1",
        "cursor": {
          "ref": "85ea21d3-2823-4f7d-a091-8fab799e29f3",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ee4e5ed2-93d2-42c1-94fb-06b6b0bf0b41"
        },
        "item": {
          "id": "27bc3f7f-59c1-4872-82d3-37af32df38b1",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "27bc3f7f-59c1-4872-82d3-37af32df38b1",
        "cursor": {
          "ref": "85ea21d3-2823-4f7d-a091-8fab799e29f3",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ee4e5ed2-93d2-42c1-94fb-06b6b0bf0b41"
        },
        "item": {
          "id": "27bc3f7f-59c1-4872-82d3-37af32df38b1",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8382f6e0-4e4e-4bb2-aa58-7b684ca1ccd1",
        "cursor": {
          "ref": "c16614de-8d12-464d-ba69-a358c191eafb",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e1db6699-c020-4d32-8580-fff446f0b3d5"
        },
        "item": {
          "id": "8382f6e0-4e4e-4bb2-aa58-7b684ca1ccd1",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8382f6e0-4e4e-4bb2-aa58-7b684ca1ccd1",
        "cursor": {
          "ref": "c16614de-8d12-464d-ba69-a358c191eafb",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e1db6699-c020-4d32-8580-fff446f0b3d5"
        },
        "item": {
          "id": "8382f6e0-4e4e-4bb2-aa58-7b684ca1ccd1",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d8fac9b5-31aa-4b3f-bca5-69840334c2cf",
        "cursor": {
          "ref": "d12ba158-d12b-4b2f-af44-ed0001da7029",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fc28205b-126e-4ed7-9217-0cbdec193099"
        },
        "item": {
          "id": "d8fac9b5-31aa-4b3f-bca5-69840334c2cf",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d8fac9b5-31aa-4b3f-bca5-69840334c2cf",
        "cursor": {
          "ref": "d12ba158-d12b-4b2f-af44-ed0001da7029",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fc28205b-126e-4ed7-9217-0cbdec193099"
        },
        "item": {
          "id": "d8fac9b5-31aa-4b3f-bca5-69840334c2cf",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d8fac9b5-31aa-4b3f-bca5-69840334c2cf",
        "cursor": {
          "ref": "d12ba158-d12b-4b2f-af44-ed0001da7029",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fc28205b-126e-4ed7-9217-0cbdec193099"
        },
        "item": {
          "id": "d8fac9b5-31aa-4b3f-bca5-69840334c2cf",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4474a285-0428-4e08-8f60-f76c7a27a2dd",
        "cursor": {
          "ref": "cfaac780-74b9-4577-b9c4-ac44a28981fd",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "74c3d85d-16b9-48a1-be5b-3e3a41fe0e47"
        },
        "item": {
          "id": "4474a285-0428-4e08-8f60-f76c7a27a2dd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4474a285-0428-4e08-8f60-f76c7a27a2dd",
        "cursor": {
          "ref": "cfaac780-74b9-4577-b9c4-ac44a28981fd",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "74c3d85d-16b9-48a1-be5b-3e3a41fe0e47"
        },
        "item": {
          "id": "4474a285-0428-4e08-8f60-f76c7a27a2dd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ded13664-65ef-4e3e-896c-49bf223eb6eb",
        "cursor": {
          "ref": "5364ccce-83d2-475d-ade2-70cc925dd20d",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5f412793-e6b7-4379-845f-728a710ec431"
        },
        "item": {
          "id": "ded13664-65ef-4e3e-896c-49bf223eb6eb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ded13664-65ef-4e3e-896c-49bf223eb6eb",
        "cursor": {
          "ref": "5364ccce-83d2-475d-ade2-70cc925dd20d",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5f412793-e6b7-4379-845f-728a710ec431"
        },
        "item": {
          "id": "ded13664-65ef-4e3e-896c-49bf223eb6eb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ded13664-65ef-4e3e-896c-49bf223eb6eb",
        "cursor": {
          "ref": "5364ccce-83d2-475d-ade2-70cc925dd20d",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5f412793-e6b7-4379-845f-728a710ec431"
        },
        "item": {
          "id": "ded13664-65ef-4e3e-896c-49bf223eb6eb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "dfafbb26-e189-402b-8f2e-a4b739906d31",
        "cursor": {
          "ref": "66ce0805-9b2f-444b-856d-797177ed2179",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e0fe2337-101a-4b83-a844-681a021def5c"
        },
        "item": {
          "id": "dfafbb26-e189-402b-8f2e-a4b739906d31",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "dfafbb26-e189-402b-8f2e-a4b739906d31",
        "cursor": {
          "ref": "66ce0805-9b2f-444b-856d-797177ed2179",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e0fe2337-101a-4b83-a844-681a021def5c"
        },
        "item": {
          "id": "dfafbb26-e189-402b-8f2e-a4b739906d31",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "526cf700-9f60-4139-b3b9-198b3f300414",
        "cursor": {
          "ref": "ffa5b366-f442-4c36-b021-3afb74a78d2e",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4d8ecfea-0659-40c9-9dec-38ad977cef9b"
        },
        "item": {
          "id": "526cf700-9f60-4139-b3b9-198b3f300414",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "526cf700-9f60-4139-b3b9-198b3f300414",
        "cursor": {
          "ref": "ffa5b366-f442-4c36-b021-3afb74a78d2e",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4d8ecfea-0659-40c9-9dec-38ad977cef9b"
        },
        "item": {
          "id": "526cf700-9f60-4139-b3b9-198b3f300414",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "526cf700-9f60-4139-b3b9-198b3f300414",
        "cursor": {
          "ref": "ffa5b366-f442-4c36-b021-3afb74a78d2e",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4d8ecfea-0659-40c9-9dec-38ad977cef9b"
        },
        "item": {
          "id": "526cf700-9f60-4139-b3b9-198b3f300414",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7a738e8a-1a76-4153-b954-6548ab87cca9",
        "cursor": {
          "ref": "fa99dd83-a12c-4946-866f-2fa1426a4123",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c49d2560-fdf6-4a02-8767-9e4b86a37c6f"
        },
        "item": {
          "id": "7a738e8a-1a76-4153-b954-6548ab87cca9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "7a738e8a-1a76-4153-b954-6548ab87cca9",
        "cursor": {
          "ref": "fa99dd83-a12c-4946-866f-2fa1426a4123",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c49d2560-fdf6-4a02-8767-9e4b86a37c6f"
        },
        "item": {
          "id": "7a738e8a-1a76-4153-b954-6548ab87cca9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "21c0f4a5-a8da-4554-8935-60ef6e132bb2",
        "cursor": {
          "ref": "faf04e16-c5a2-4681-bd20-0d90796e0073",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f8f8b603-1159-478b-b085-766cb7ade5dc"
        },
        "item": {
          "id": "21c0f4a5-a8da-4554-8935-60ef6e132bb2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "21c0f4a5-a8da-4554-8935-60ef6e132bb2",
        "cursor": {
          "ref": "faf04e16-c5a2-4681-bd20-0d90796e0073",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f8f8b603-1159-478b-b085-766cb7ade5dc"
        },
        "item": {
          "id": "21c0f4a5-a8da-4554-8935-60ef6e132bb2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "21c0f4a5-a8da-4554-8935-60ef6e132bb2",
        "cursor": {
          "ref": "faf04e16-c5a2-4681-bd20-0d90796e0073",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f8f8b603-1159-478b-b085-766cb7ade5dc"
        },
        "item": {
          "id": "21c0f4a5-a8da-4554-8935-60ef6e132bb2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "7a49f91f-f613-4762-af21-8510caf6d4e2",
        "cursor": {
          "ref": "67467c9e-2e6b-47ba-b9be-b379ea8acfd8",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "80bf8d9c-f0b7-4a70-a68f-fd9ad9f421bf"
        },
        "item": {
          "id": "7a49f91f-f613-4762-af21-8510caf6d4e2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "7a49f91f-f613-4762-af21-8510caf6d4e2",
        "cursor": {
          "ref": "67467c9e-2e6b-47ba-b9be-b379ea8acfd8",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "80bf8d9c-f0b7-4a70-a68f-fd9ad9f421bf"
        },
        "item": {
          "id": "7a49f91f-f613-4762-af21-8510caf6d4e2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "4cd1b79b-f33e-4c19-ac53-5c430ead5b01",
        "cursor": {
          "ref": "bf8f924b-a7d5-4ee4-80b6-8e8e3a5cad24",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f0991a32-96ad-40b3-b0e9-87541bca6c19"
        },
        "item": {
          "id": "4cd1b79b-f33e-4c19-ac53-5c430ead5b01",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "4cd1b79b-f33e-4c19-ac53-5c430ead5b01",
        "cursor": {
          "ref": "bf8f924b-a7d5-4ee4-80b6-8e8e3a5cad24",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f0991a32-96ad-40b3-b0e9-87541bca6c19"
        },
        "item": {
          "id": "4cd1b79b-f33e-4c19-ac53-5c430ead5b01",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "4cd1b79b-f33e-4c19-ac53-5c430ead5b01",
        "cursor": {
          "ref": "bf8f924b-a7d5-4ee4-80b6-8e8e3a5cad24",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f0991a32-96ad-40b3-b0e9-87541bca6c19"
        },
        "item": {
          "id": "4cd1b79b-f33e-4c19-ac53-5c430ead5b01",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}