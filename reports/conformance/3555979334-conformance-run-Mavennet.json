{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4d732ea0-fbaf-46d1-8f00-52b50e56c8cd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5de2c770-6302-4e5f-a5d2-9961f372dd50",
            "name": "Positive Testing",
            "item": [
              {
                "id": "efaa2f5e-12b6-4619-b08f-d9055cd4eb68",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bf9538a-9566-439e-b117-ecf5708dc393",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "219f7530-5366-4d42-848c-d31812a4daf5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "91222745-2c47-4c02-8654-2f6b6ff762c9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3f0e62bb-6154-4fd4-8e77-3c0e71a8c1b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "adede5ee-b96e-4e85-9fc6-b870450c61e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "431dba2b-7c34-473e-b8c4-bec5afb4b27c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d887ba3-d1af-4bee-b789-7c7e2b90dbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1461fc7-cda7-43e4-918f-eb2fedbdd112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1cd94a-f84a-40d0-9dbb-06338660bf3f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59491c8f-1b93-4359-ba8e-92a5b7f3d2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb37abc3-b9a8-4fe7-ad4c-4614aba37d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4c6bf4-3753-486f-8869-66478df2da02",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62ae501-502b-436d-858a-06768c990840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5ffbca7-1236-4f46-bd00-210b478ca0b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d7b337f-b2e4-4261-82e1-f1125e6484b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a18292b4-f5f9-4473-aabe-5e96e995fe3a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622ed3f5-3867-43c2-9454-243186914aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4122ef0-80ee-4f27-965a-2a20edb632de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c869d8ab-7663-4171-bdda-8a67f7423103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8542ed-54e6-46f9-94f2-6806e4a8882f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba72d6b8-e513-4f59-ace8-2e8596c8f18a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb69f86-e5ba-4beb-b1f1-b1b11b45f3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7381ecb7-0f81-49fa-bb88-17a9da1096bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1535574-06d4-4224-8ae8-59f3f8465f2c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b2e0425d-37db-4a15-84fc-ba2b3e8f8681"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "54f7f6ed-d8a8-4c2f-9677-56b599b28d69",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5a877820-2fd9-4241-a224-a980fcc511f0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cacec1f9-d128-4b87-bbee-a01a5c122520",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4de3c5fb-8867-49ad-9686-c1afea6b6bcb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51417817-b56c-48d1-89af-14c47c906f6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "baae53f4-a017-4bb0-bf09-af1f5c0a6b95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94f07880-813b-46da-9bce-d4ab72edd660",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99b43f6b-e17b-4bbb-97fa-0d6a4562248c"
            }
          }
        ]
      },
      {
        "id": "52ffff34-21b8-42ab-9ef5-65730324b2a5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6e5f45c8-2954-4bc1-94f0-3e2dce616dc6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f5e64495-bd90-407b-b7e7-ba3b0a04bb8b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1d1924bf-4905-40d7-a7de-cd4d802f4fac",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92e15a0-45e5-462d-9424-538577a14673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3585f04d-c357-4d53-a20c-aea605124b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b765a8-930f-458a-8c17-c4760e12b078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9651fd8b-b1a8-4702-b5ae-80e27889a7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375be3c3-7e51-4aee-b541-e1a3e3f27a5d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5577ae5-34bc-4dea-94a6-22f2684c071b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97265f19-723c-47de-b38c-010627e850b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b62e3dc-0d8f-4604-896e-21c7f7d491f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebb89390-b9f6-4c58-8343-dd4cfa438705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844cf6b2-e88d-45d4-b2da-af458f0b4c80",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdba639-6155-4fc9-990b-cb81752948b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e79dd0f9-43e7-42bc-b0f6-3b7ed9f1bd5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340bf4a3-3e11-49c6-b9d0-92382b88c4df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7f026e0-c24e-4643-9746-2c144e4e427c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b950b47-e24a-4b12-84b9-a23275487892",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98e29d3-aa15-4c29-80d8-8f6e5b09d0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d357da98-d2c9-4505-ace9-926c3bf1a49f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e06873e-f78a-47f8-8fa6-b31ad85dddf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1903904a-9cd1-4966-87af-5c6c7f885d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e706f3-5946-47c3-a3ea-a25ccb468003",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e94269-843f-4666-bd21-991e06e74e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9bdcf5-4404-4847-92c9-3d3b795550ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fee7de-36ac-40bf-b541-a3d56119b4c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e95f7b5e-b133-4353-ad0b-de94effe63a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3c2735-fe89-4f6d-813d-0814559c25c2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5410079f-cf69-4a9a-bbd9-6f55e4908f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2734b1-bb7a-46f0-bafd-a665d42b7aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f84cc4a-15bc-4f79-93ae-5b2ada626845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c9432b-3243-48aa-b25a-0579d4b989f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ddd819-092d-4ee6-8544-ed73562aeeae",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2029da0-becb-42b3-b333-8d5c1632d833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decd8efa-6414-4ace-96d3-762753f6b06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156f0f37-af7b-46c6-8be9-97db768e1328",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "423c043c-afdc-4ec7-9696-1dac107da934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84711607-f2b0-4983-a416-cea1d6e66b33",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c887f025-f41b-4a84-abf5-2f299ce49c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab52a35-bf5c-4f94-a14a-3e0ff85ac2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdae399-95fa-4ef7-bec3-96dea0046f40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07274599-2882-4c06-80b7-5b558cdf7a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce75256f-26ba-4bcd-a082-2700455b2322",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c793496e-de9d-418d-a37a-9413c859245c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2153e86c-ee48-49f7-a450-c60dde417b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51fd686-5a98-44e2-80af-c32e25634719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f61999ad-2d9e-44c7-a87f-b70d0304700a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c762aed4-d356-4ed1-9f9d-70a6c5fa9d79",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974c99ac-2603-4da4-a1b0-1f55144cdea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97de70e8-74b3-407f-9e00-67ef81f011a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead86c50-73bd-4589-ba3a-36287ec352b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc8d31a0-531b-440f-b803-dbf7a0375289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b4b9db-ea83-4787-b1ae-f73fe68b60f6",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a59ec02-9669-441e-9f27-eddf6f1d1f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729bc638-a17f-4630-867f-ea471d56bc8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9e88fc-ab5f-496a-9e02-e5e37a2d2e7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "49b2348c-03e8-4e38-931b-22af23fb68a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f38049f-bb07-4515-9bbe-02e1386241b2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158d0fd2-1ad5-420c-bede-76a2b46fa50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc20a494-e2f6-458f-a88a-df0186d49dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb38899c-7911-4aa1-9802-331e8b6c6dc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "54c41017-8ac5-463f-aa3d-aeb0b202bec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae37b6b-668d-44de-93b0-7102d077eb66",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc16e6b1-cd65-4157-9417-161a35b3f30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4bdcb0-5cb9-471c-8c62-810a0681f63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ed16d3-1129-41b8-a22c-12916cedcbee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c750926-435f-4ea7-98a4-b22aea311b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5a210c-9fcf-4922-ba59-e8e7fbccd53e",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f74140-f4bc-497b-b88b-83794270b56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7621992a-bed4-4fba-82ef-a886397eb226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85dd4dcc-c320-4cad-800d-cd7b9d134b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12138f1b-1450-48fd-a59e-4d23890dba2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdd2fb7-cba9-4a11-acfb-5c707fbaf183",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9cb497-15ae-4943-bd9d-3946722ceeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ae868b-27be-4c59-ac7f-d71c5657bf98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feac7367-462f-4271-bceb-9935aa9ff861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "6d394de4-a066-41c4-9a7b-c7914b81af98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7ac13b-fffe-4cf9-b47f-b3cedcd7a5d2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56397ae2-7619-44f5-8a26-0849a2200d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1354f86-ea50-47db-827a-67f376477b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3185cc0d-82a4-4e01-838f-e63ea77042b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "45665dc7-85c0-4c63-88d0-754deac64601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744b53b5-8538-4832-b58a-3dad8d6d1fb5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b0b670-ca8e-4a57-a096-6ad3860e64ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ba1758-5292-4f67-b578-fc6a55d179ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2473e38-25aa-406e-99fa-c069f5d31e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5ff86e3-50e3-4af9-9d84-472edb9c5a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839abea3-e328-4885-aa75-bfff9c866e89",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4b7941-a249-42db-a520-16bac823459e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479dbe1e-991c-41c7-8163-b0404cf5bac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bffa34-bde2-48c5-97dc-ebca82855b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82a9c7e4-53af-424b-8f5f-030d8c9fc916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574469f5-da92-43ec-a9e5-04eb76debe97",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd2764b-b088-4bf3-ae1f-0efb444ae4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe19cc94-f275-4d89-a396-6b3164fa59ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce29334-4d10-4070-a2cc-4ffc7c2bbd8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f4d23d2-25b8-44ac-9f3e-343655b68027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2e320c-903b-4800-ac41-fcc3b5f24aab",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b738e7-130a-45c6-b971-b1a2c06ab93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61bd09a5-1084-4277-9022-02c66edb4e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513e5fac-e6bd-478a-9624-65cc2bd9e490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e18e0f5-4872-47f3-aba7-ccf6ae934dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b157dff-9d7c-4727-996b-87be35bbb851",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5dd4adf-e99b-4ce4-821e-e3fc1f96d522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ce09bd-216d-4700-93db-32579f97c823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31542da1-cd3c-4def-9f67-09ba27912e61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e71a5138-d9b9-464c-9915-c433f47adbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8af44c-1299-47c3-8c3a-2c339603638a",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc1ffa9-be47-40cf-8f28-315943656884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a958e6a-07d9-40ba-9286-a644964892d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92838585-c833-4378-8ac6-d744a86b96ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdb08574-434a-487b-a16c-58b575bcc583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8579419-cadb-4a0d-b040-b2b1c9184542",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6238305f-00c9-4351-a799-b250af928775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b95559-fed3-4ef3-8941-3b66185dd274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6faa639-6ba7-4dd2-aa95-249cb1d8cba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "077b125a-1f95-476f-853a-989c27433d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6483ec2-54a6-42fc-a347-b6078aeba4d7",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713b56ab-1a26-4014-b2f9-04b41b633dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e8776a-93b9-4eaf-b481-935f433b3e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221464f8-9acd-4575-9f05-44808a286569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "906b6e38-4e0d-42a3-8ca1-0866c603fb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7408ca-dc43-4fe7-8992-3c24e1202d22",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d61ae4-bf47-466e-a375-d35e6cbcdf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4040475-d15b-461f-a571-1d53dae533a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90d5d85-d0f5-45d7-9bc0-be314568368d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50636af7-217d-43cb-88e7-19ea1a2ba603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5cdeb05-e803-4757-b55c-7b67ba32ecf8",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79113d5f-0315-4ace-9817-31fb28b7ea6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390954ba-2790-4e00-a65a-0374730fd6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf60b793-ed29-4542-b593-5cd25b6e5773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b583c227-ba3d-4e17-b389-cb613f05bf43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ca8f14-b9df-4de9-bb98-b9089dcb7582",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bf12be-9ad3-4da2-a6f8-fe0f31f6233e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee810f1-06ec-4f81-aeb1-5c12316231ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e855f46-b7a6-4207-91d1-48b8a84b49de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b44869a3-215f-4e64-8c0d-a3c4a628fc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872e44e1-d2b9-4eef-a19c-435c4a9993d7",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91248f14-ca3e-42f7-bf5a-9425d6d55aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f7a6d31-80ec-4aca-a09e-162407101c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27ed2f0-89d8-4ff5-ac06-9af07434ca28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72514b47-0014-495c-bf67-6f62041609c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a0dbf5-980d-429d-b76a-f8849aa6cf6c",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bec3ad-d4d3-4d4d-8069-03c63d55bb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c32ca7-962d-47c2-9854-2a0eb1addece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a64e89b-a9f9-4f7c-b1a7-f611102e7cb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23ae3d10-4cac-4b46-a0b6-d5b23911d88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597c1b83-55ef-4bca-88d9-4a8ac2138b73",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4211a903-e5f0-4a11-950f-7c323d208ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd920a8-3dff-4daf-bf8e-96434cdda4f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf63e896-42bc-4476-b45e-4bf3278e0d84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40d3e20d-8360-4040-8799-55259a0ad335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962cd607-b87b-4530-909a-37a74dec1951",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28414f1d-0bfe-4591-b6aa-c5a399b2645f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "28853ca1-ee35-4ea8-9ae8-2b35903d41eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82446e37-c3dd-449c-a2c4-2f05ca6f8077",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68b5713c-7836-4ff4-bab7-37d58bc97d86"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b13b52f4-db88-47c4-861c-52d17b6c17ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "581e52d6-59e3-4ba8-8520-f335dccb3927",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3a766e-b75a-4009-a0a2-04e3524e6f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "794855fd-c416-448d-9716-0805f9efae62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b159bab1-78b9-4109-8b93-02430f6c7499",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a27ff3a1-9e41-4a2d-aec6-1c1b812e2ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ee944f-f086-46a9-b24a-2376dcaa6d91",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395cd8d0-9a00-4a6a-a1a8-b3564967dac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56c50b51-0c42-4235-9e5a-3a0be918f6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49034c0-461e-4b6e-b1cf-a04a0041a806",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "92ee81e5-cd8a-49fd-9576-5e0a569b4133"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2359683e-dc2e-4ed6-85ca-b12876382b87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6df1f60a-28e0-46e7-ac6a-e4e5bf086d14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65476d13-77ee-4328-bc61-a4b0ea436f9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b372c43a-a75a-47c5-90d8-e2d8a6bc73b8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "794e1d16-98a1-4ee2-9c8e-bfcfa572a6f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9e2c9ae-36b3-4bf7-a28c-e51fa3af780c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2a4a75fa-04cc-439d-886f-1257f79c2b03",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61d3b948-5287-4386-a401-adc05ca57e30"
                }
              }
            ]
          },
          {
            "id": "e34d2817-24f0-40ed-8bf0-28b207bb45b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f9030090-d240-49fe-a5e6-090389d04585",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ed16426-d78b-4d03-ab14-2d7499e45ed9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "167340db-2916-4c04-9c3a-df674c9fe0c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd31f63c-3fac-4807-98ae-111cae7ee608",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "fd6224b2-af63-49eb-8218-7291d81d747f"
                    }
                  }
                ]
              },
              {
                "id": "b7015045-3559-433c-beed-d032a5a432af",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "500c7d77-6cc8-4f08-b256-86633a3cb896",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c47813f5-778d-4d2e-af62-1d5a5c916cd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd6b39ad-fc46-4dbf-aae6-270c7fb05826",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "db2fa9a6-159b-4cac-851d-137187c63fec"
                    }
                  }
                ]
              },
              {
                "id": "eb4cda7c-4b21-4270-a5de-0a54a70fcc1a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8146657c-cb3a-4da0-aec8-eee2428e1b77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c304217d-b33a-4e39-bfdf-9389c43491e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f37ee0a9-df6e-4cbe-8be8-cf500a42009d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0d980274-534e-4e79-a836-7688734afa63"
                    }
                  }
                ]
              },
              {
                "id": "9fa71abc-0823-4cfb-ae1f-a41bd7fe268c",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6b68cce-7e44-4134-bc80-8eea24cbe6f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b21d1588-5f0d-41b8-8103-1326c09ef2c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "886f30ee-212c-4dcc-af50-154862339e4e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "417190fb-e61a-450e-95ac-af456b4ab368"
                    }
                  }
                ]
              },
              {
                "id": "078bb3af-cc90-4e6e-a375-c4f913201c51",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c4790ce-dc72-4399-aea2-ec74255ea245",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "58109a00-332a-469b-900b-a2f473d7333e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bf0a59b-84e6-42cd-8e8b-b5fa10e39f74",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "75989abf-5b3e-44ca-b328-104dfdbc41cc"
                    }
                  }
                ]
              },
              {
                "id": "a1d3a6fc-20fb-4c58-9b68-4f4560028195",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dc1c299-0aaa-44ee-a2ef-dd9a293e8926",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "73f53726-d089-4450-9547-40aa84b928af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a3e90ba-a398-4e0e-addf-ab5fee2cb45d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "424b01b4-a092-46d9-b590-ce8615d67ed2"
                    }
                  }
                ]
              },
              {
                "id": "ce575d95-4d77-4b8c-a6a2-b24c396f3150",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2087b8d8-53c5-4679-8e16-0e8427bd84b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a3d48a9-5e85-497a-afb3-91630eba250c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e896b862-88a8-4fe2-93df-3428d0a040a3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "90a38c64-e95f-4a62-b3df-84c5a41bfeb7"
                    }
                  }
                ]
              },
              {
                "id": "d952605a-247a-45ec-a3ba-963c3afaced7",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0ba865b-926d-470b-905f-c757d5a272eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d2e0225-f90c-4caf-861d-07c9a1c69227"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0247e320-814f-4cf9-8988-7ba909b8704e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b5607610-e8d5-4f61-84e9-fe431db7f1c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f3ecfa45-3e72-4697-b1f0-3382b8fae822",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fdcabc0d-7519-4cc5-acc8-6f30543bb7ef"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c1e190d2-25c2-485f-b7c9-0840002bf9f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4aceba90-5deb-4010-b7da-6a62bef2dde7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4160733-6c3a-49b7-8801-c3e6498d1b6c",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "868c55c9-06bc-4b68-a1f5-db8ff5798002"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abe55f06-e4d8-401a-95f3-33b8ad5bad09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f85c5c3-1849-41ba-8f60-877646471b1b"
            }
          }
        ]
      },
      {
        "id": "0e5f35b9-0138-4c9d-97d6-49ec5701c933",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "32cd80a8-0c4a-49b6-9a09-e8e919adee98",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26f1b55e-6857-4341-80a7-785f8a14c0f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "821b7f29-e179-4e0e-bd7c-8caaa9da6a10",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e23afe3-5f36-402d-bf40-ee0e50b45e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6042db84-9155-45b3-b2dc-2d5ecd7a9d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a85d1c-898b-4336-9cff-a0b6ace92889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15867e41-fc85-4df7-8363-ba71e17008af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bbb335-249d-4677-abcf-2d0d4e0df612",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11069448-2846-44e6-b7e5-63f8b1f184d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "604b1d10-1bd8-4f75-af81-8acf5764e84b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2cf42a-3d8a-4086-8866-2783d558b85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9669d07-e310-48e6-8514-18871ea09a07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c853c889-14d7-45d0-bd04-947f400ac512",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d32879ab-6195-4d2c-8b44-ee96cc33d995"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91d64077-cdcb-4a18-b5e3-c9cffbf8101f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c68ec304-ebd9-4685-9857-e8768752caaf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d41e9828-70c8-4671-b8de-c1497749c162",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "c1ebc80a-41f2-404a-ad16-5091d9800bf3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6889d9c5-5237-41b8-9c98-710102436d7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1be0af14-0684-4f08-9473-0077312b4195"
            }
          }
        ]
      },
      {
        "id": "52209f80-492b-4da5-b087-5151c5baa1be",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "55525fb1-2715-4196-a328-21527c4ced66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6bcc0fd2-559f-4cb5-95d4-d4b743dca542",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d08058b-0d39-404f-97b6-762f2d1226b8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f53c8f7-6884-4502-b561-e999bf520d0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "d4edbdb1-01fa-418f-a4b2-320e08bb371d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8982d672-dc33-4c91-8aa1-6974cc2eb70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62baca7a-27ff-498d-aac5-c7c99334aa4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d460a2f9-92c1-4846-944b-4cc6bdfd6b9c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ea688f-ecf7-4283-ab90-01cf5004c61a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "b03d2080-47dc-4879-bebb-bd1c0bf02565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cdefcb-4909-41ba-8b81-ae5b71d6438b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23c00802-53a9-4263-8be6-6240efb2602b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d81b2e69-5af6-4244-a860-d458806366a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3844930c-705b-43f8-bb9f-c7715f4b9006"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08dbb341-43c3-4c72-957b-86f3404be67e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffbc1916-230c-4cf2-9fad-c2c769640c08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6627083c-4f7a-4b8c-a3e9-c989ee02618b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2f470cec-c165-4800-b1a4-adf0d300ac23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8b0e90f-dd75-4395-b3e6-5c406a1d58f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41afe5bf-b003-4c39-a86d-0cbeb45ab8fc"
            }
          }
        ]
      },
      {
        "id": "2b259541-8ba5-4002-a134-3463ad5194ff",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "729a19e5-1471-44bf-9aec-b5e4f26980d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9bcbfbf4-b39d-4daf-acaf-e3456b49e099",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cacc534-0261-438a-a288-d7da7e595b3e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae47fac-11a6-4e2b-a4af-309ba418c898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7241fc-ca88-4b85-b4ab-62d5471c05ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a31814-709b-427f-a834-a33e7b83b109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78ab053f-9b74-42e1-bf8f-b727a1bcb6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24de8a1-f230-4ca6-bb00-93ee7b3356f1",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ca6882-0684-4dbc-890e-c3fe652290d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0776f5c9-acf0-4331-87e1-8e430c71503e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ecbeab2-65ae-443d-b5d4-141bbd895ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59248807-26d0-4195-b0b9-9fa5ff5f6165"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7e9493e-128f-4999-a6d4-39800c76dcc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c5706e5-1020-4e62-8fa5-a282bd2f2a68"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb213653-a559-4d7c-8b49-2145141c8ce6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e531badc-955b-453b-b0ea-fde4866d475a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1656706b-cd55-4c76-a275-abcf84317122",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "de543aa1-c496-4747-9aed-80aade59d61c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39aaa0a1-6698-4570-91e1-5b88e857be7f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fb4e2ff-3a8d-45c6-a20e-d64bd6f2aa4c"
            }
          }
        ]
      },
      {
        "id": "6ded2757-544c-48a6-b291-10be511d0e43",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e3a2fc36-f5e3-418e-97d7-803d6458ead7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ea0c272-7214-4d85-9287-5d17353afe2f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "211a39a9-95e8-4736-88f5-720b3e290aad",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c9f156-a304-4bbb-8bde-1e53b13eb223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55698172-fb70-4216-9df8-981dbec205bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14839d5-d4a8-4712-8abe-fe5be63ddd80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "819a2cc8-5aff-4560-a8d1-b6443b0f8b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07063bb8-26d1-4f0f-93bd-a630fc370d7e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73756793-0cf6-48bf-9fee-881b72683475",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "678d5ec4-5023-45d5-9ceb-c30c3ddb4174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "609f675c-dd53-4695-a2e4-4cc7dda54a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "924df36e-84ad-4b40-ab17-a96e92a3b4a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e5a2582-5f85-4766-b39c-5435eb062b10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cc8062f-fd34-4fc3-8748-c6e0a963dce6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1760b483-7cd3-4c72-aa2f-a98861225ee4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78a4288f-91ef-423c-95b5-c2905f212c13"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5db9943-c473-4b45-ac46-7dc768fa4819",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "fd0d5d13-ff7d-4667-ae4e-9a07684315e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "add4a298-0a3a-4b76-9f40-f448be04f33b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91128ece-5e59-4586-bbfc-a29bcdb68c39"
            }
          }
        ]
      },
      {
        "id": "66a92740-bd94-4645-abfc-2214b8c20013",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1d70e970-5be8-43ce-8ad8-a9af194b1f9b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5018d7f-b284-4c91-81c2-6c226bde5b63",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b59925f9-2638-4a6c-9eae-4192961ca9ba",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d988bd-147e-4a08-b523-cb6062e2b936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ed0e13-d969-42d4-8a58-1a361c4c276d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e7b885-641d-429d-a207-5a091a7696a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f9df632-123a-47a7-b291-d3f1a3d9a957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23313933-2a6f-4863-9e8a-8970083795c2",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2951c4-cafe-4625-a09f-a4acadbbfff0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "234b237f-baf6-4cc4-a4c5-968c3014bfb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a981a4-ea1d-4ed7-99b8-88187f7e9829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5da8223a-a3c3-4c04-880c-001ae983e91d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28c42775-ca07-4142-baec-d611ce3586ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5c1af67-7a21-49e6-bab2-3de58c29418f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dd1818c-0c17-44ce-a28a-3349a3a52b62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dea4b00b-8053-456f-8a42-7e931df710c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b59822e6-cf9a-444a-bde6-2c03e69c4f1d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "3155effe-24ec-4bcb-904c-9af5dc9c90ca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a413879-1d20-4b37-bc12-16f7c61f8def",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0daad320-a217-48ce-8ab0-c2e9bc76ab31"
            }
          }
        ]
      },
      {
        "id": "318c9f0f-b8cc-4c01-b0ee-32ea790ea80e",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "9321443f-43cb-4394-8eb1-54785bcb42da",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 163,
        "pending": 0,
        "failed": 163
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 121
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669508648929,
      "completed": 1669508652181
    },
    "executions": [
      {
        "id": "efaa2f5e-12b6-4619-b08f-d9055cd4eb68",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b3307ece-73f1-43e4-ba57-c4a39b534e14",
          "httpRequestId": "d8d2713b-b70d-4233-86ce-3eccca8c485e"
        },
        "item": {
          "id": "efaa2f5e-12b6-4619-b08f-d9055cd4eb68",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "431dba2b-7c34-473e-b8c4-bec5afb4b27c",
        "cursor": {
          "ref": "1f9ab8f5-8cb5-4abe-8c39-8bf638992fd0",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "92230704-d97d-4349-9466-9ccb1ba78bf3"
        },
        "item": {
          "id": "431dba2b-7c34-473e-b8c4-bec5afb4b27c",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "431dba2b-7c34-473e-b8c4-bec5afb4b27c",
        "cursor": {
          "ref": "1f9ab8f5-8cb5-4abe-8c39-8bf638992fd0",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "92230704-d97d-4349-9466-9ccb1ba78bf3"
        },
        "item": {
          "id": "431dba2b-7c34-473e-b8c4-bec5afb4b27c",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "7b1cd94a-f84a-40d0-9dbb-06338660bf3f",
        "cursor": {
          "ref": "556b2d3c-5ce9-432a-ab91-d45312a2a4ec",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a2b24733-0a0a-49d9-8cf7-db6c4af4d963"
        },
        "item": {
          "id": "7b1cd94a-f84a-40d0-9dbb-06338660bf3f",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "7b1cd94a-f84a-40d0-9dbb-06338660bf3f",
        "cursor": {
          "ref": "556b2d3c-5ce9-432a-ab91-d45312a2a4ec",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a2b24733-0a0a-49d9-8cf7-db6c4af4d963"
        },
        "item": {
          "id": "7b1cd94a-f84a-40d0-9dbb-06338660bf3f",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "3c4c6bf4-3753-486f-8869-66478df2da02",
        "cursor": {
          "ref": "676e549b-8d9b-49a3-8b4c-bdf751193d9d",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5306e70f-8d6a-4c5f-b33a-e4ce499e12a2"
        },
        "item": {
          "id": "3c4c6bf4-3753-486f-8869-66478df2da02",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3c4c6bf4-3753-486f-8869-66478df2da02",
        "cursor": {
          "ref": "676e549b-8d9b-49a3-8b4c-bdf751193d9d",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5306e70f-8d6a-4c5f-b33a-e4ce499e12a2"
        },
        "item": {
          "id": "3c4c6bf4-3753-486f-8869-66478df2da02",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a18292b4-f5f9-4473-aabe-5e96e995fe3a",
        "cursor": {
          "ref": "6c87272c-b58d-4948-a726-526b2448a5c6",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "49b8df96-7aac-4b88-b75c-9aba1602cbd7"
        },
        "item": {
          "id": "a18292b4-f5f9-4473-aabe-5e96e995fe3a",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "a18292b4-f5f9-4473-aabe-5e96e995fe3a",
        "cursor": {
          "ref": "6c87272c-b58d-4948-a726-526b2448a5c6",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "49b8df96-7aac-4b88-b75c-9aba1602cbd7"
        },
        "item": {
          "id": "a18292b4-f5f9-4473-aabe-5e96e995fe3a",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "ba72d6b8-e513-4f59-ace8-2e8596c8f18a",
        "cursor": {
          "ref": "af2d8c9d-a60b-4145-a326-9e5b21cf17f1",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "22d6680c-8e9a-4462-a734-51ec3f175335"
        },
        "item": {
          "id": "ba72d6b8-e513-4f59-ace8-2e8596c8f18a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "ba72d6b8-e513-4f59-ace8-2e8596c8f18a",
        "cursor": {
          "ref": "af2d8c9d-a60b-4145-a326-9e5b21cf17f1",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "22d6680c-8e9a-4462-a734-51ec3f175335"
        },
        "item": {
          "id": "ba72d6b8-e513-4f59-ace8-2e8596c8f18a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "ba72d6b8-e513-4f59-ace8-2e8596c8f18a",
        "cursor": {
          "ref": "af2d8c9d-a60b-4145-a326-9e5b21cf17f1",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "22d6680c-8e9a-4462-a734-51ec3f175335"
        },
        "item": {
          "id": "ba72d6b8-e513-4f59-ace8-2e8596c8f18a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "5a877820-2fd9-4241-a224-a980fcc511f0",
        "cursor": {
          "ref": "d8385546-dd9c-4584-9cd6-7edec92e2ba2",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e3d58b49-460c-456d-90ba-734d809d3b98"
        },
        "item": {
          "id": "5a877820-2fd9-4241-a224-a980fcc511f0",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "5a877820-2fd9-4241-a224-a980fcc511f0",
        "cursor": {
          "ref": "d8385546-dd9c-4584-9cd6-7edec92e2ba2",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e3d58b49-460c-456d-90ba-734d809d3b98"
        },
        "item": {
          "id": "5a877820-2fd9-4241-a224-a980fcc511f0",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "1d1924bf-4905-40d7-a7de-cd4d802f4fac",
        "cursor": {
          "ref": "cd8a92c9-c504-43df-99d0-4d902e5f0756",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "21764813-0484-4301-8171-1190c951e2e7"
        },
        "item": {
          "id": "1d1924bf-4905-40d7-a7de-cd4d802f4fac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1d1924bf-4905-40d7-a7de-cd4d802f4fac",
        "cursor": {
          "ref": "cd8a92c9-c504-43df-99d0-4d902e5f0756",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "21764813-0484-4301-8171-1190c951e2e7"
        },
        "item": {
          "id": "1d1924bf-4905-40d7-a7de-cd4d802f4fac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1d1924bf-4905-40d7-a7de-cd4d802f4fac",
        "cursor": {
          "ref": "cd8a92c9-c504-43df-99d0-4d902e5f0756",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "21764813-0484-4301-8171-1190c951e2e7"
        },
        "item": {
          "id": "1d1924bf-4905-40d7-a7de-cd4d802f4fac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "375be3c3-7e51-4aee-b541-e1a3e3f27a5d",
        "cursor": {
          "ref": "e6a6f39e-778b-4288-80d3-b7a98d27772f",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f9922ea4-8ed7-43e3-98cb-99f06698a1d8"
        },
        "item": {
          "id": "375be3c3-7e51-4aee-b541-e1a3e3f27a5d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "375be3c3-7e51-4aee-b541-e1a3e3f27a5d",
        "cursor": {
          "ref": "e6a6f39e-778b-4288-80d3-b7a98d27772f",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f9922ea4-8ed7-43e3-98cb-99f06698a1d8"
        },
        "item": {
          "id": "375be3c3-7e51-4aee-b541-e1a3e3f27a5d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "375be3c3-7e51-4aee-b541-e1a3e3f27a5d",
        "cursor": {
          "ref": "e6a6f39e-778b-4288-80d3-b7a98d27772f",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f9922ea4-8ed7-43e3-98cb-99f06698a1d8"
        },
        "item": {
          "id": "375be3c3-7e51-4aee-b541-e1a3e3f27a5d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "844cf6b2-e88d-45d4-b2da-af458f0b4c80",
        "cursor": {
          "ref": "5932a805-8967-419d-848e-a589345a7373",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e1186282-368a-4463-9ef9-e93feb86aae7"
        },
        "item": {
          "id": "844cf6b2-e88d-45d4-b2da-af458f0b4c80",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "844cf6b2-e88d-45d4-b2da-af458f0b4c80",
        "cursor": {
          "ref": "5932a805-8967-419d-848e-a589345a7373",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e1186282-368a-4463-9ef9-e93feb86aae7"
        },
        "item": {
          "id": "844cf6b2-e88d-45d4-b2da-af458f0b4c80",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "844cf6b2-e88d-45d4-b2da-af458f0b4c80",
        "cursor": {
          "ref": "5932a805-8967-419d-848e-a589345a7373",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e1186282-368a-4463-9ef9-e93feb86aae7"
        },
        "item": {
          "id": "844cf6b2-e88d-45d4-b2da-af458f0b4c80",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "1b950b47-e24a-4b12-84b9-a23275487892",
        "cursor": {
          "ref": "caad5156-f919-4ecd-8b79-1b90ba9bf4d1",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9b8f8491-f6d9-4bda-8e75-fda96cd638d4"
        },
        "item": {
          "id": "1b950b47-e24a-4b12-84b9-a23275487892",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "1b950b47-e24a-4b12-84b9-a23275487892",
        "cursor": {
          "ref": "caad5156-f919-4ecd-8b79-1b90ba9bf4d1",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9b8f8491-f6d9-4bda-8e75-fda96cd638d4"
        },
        "item": {
          "id": "1b950b47-e24a-4b12-84b9-a23275487892",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "1b950b47-e24a-4b12-84b9-a23275487892",
        "cursor": {
          "ref": "caad5156-f919-4ecd-8b79-1b90ba9bf4d1",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9b8f8491-f6d9-4bda-8e75-fda96cd638d4"
        },
        "item": {
          "id": "1b950b47-e24a-4b12-84b9-a23275487892",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "79e706f3-5946-47c3-a3ea-a25ccb468003",
        "cursor": {
          "ref": "8b08f1d5-17fd-4183-a746-445cb8f82c85",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b0c18750-32dc-4db1-9d57-45b20f620dd7"
        },
        "item": {
          "id": "79e706f3-5946-47c3-a3ea-a25ccb468003",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "79e706f3-5946-47c3-a3ea-a25ccb468003",
        "cursor": {
          "ref": "8b08f1d5-17fd-4183-a746-445cb8f82c85",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b0c18750-32dc-4db1-9d57-45b20f620dd7"
        },
        "item": {
          "id": "79e706f3-5946-47c3-a3ea-a25ccb468003",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "79e706f3-5946-47c3-a3ea-a25ccb468003",
        "cursor": {
          "ref": "8b08f1d5-17fd-4183-a746-445cb8f82c85",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b0c18750-32dc-4db1-9d57-45b20f620dd7"
        },
        "item": {
          "id": "79e706f3-5946-47c3-a3ea-a25ccb468003",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "3b3c2735-fe89-4f6d-813d-0814559c25c2",
        "cursor": {
          "ref": "b0d3d93d-a8f7-4aff-a829-b6e5d7de9bd5",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "569d3867-44fc-4241-a695-4755be83ef73"
        },
        "item": {
          "id": "3b3c2735-fe89-4f6d-813d-0814559c25c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3b3c2735-fe89-4f6d-813d-0814559c25c2",
        "cursor": {
          "ref": "b0d3d93d-a8f7-4aff-a829-b6e5d7de9bd5",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "569d3867-44fc-4241-a695-4755be83ef73"
        },
        "item": {
          "id": "3b3c2735-fe89-4f6d-813d-0814559c25c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3b3c2735-fe89-4f6d-813d-0814559c25c2",
        "cursor": {
          "ref": "b0d3d93d-a8f7-4aff-a829-b6e5d7de9bd5",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "569d3867-44fc-4241-a695-4755be83ef73"
        },
        "item": {
          "id": "3b3c2735-fe89-4f6d-813d-0814559c25c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "42ddd819-092d-4ee6-8544-ed73562aeeae",
        "cursor": {
          "ref": "0d583bfa-47c9-4027-9bec-759492ebd8c8",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1f668e1a-ceec-49d8-8726-0ef28c4caf67"
        },
        "item": {
          "id": "42ddd819-092d-4ee6-8544-ed73562aeeae",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "42ddd819-092d-4ee6-8544-ed73562aeeae",
        "cursor": {
          "ref": "0d583bfa-47c9-4027-9bec-759492ebd8c8",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1f668e1a-ceec-49d8-8726-0ef28c4caf67"
        },
        "item": {
          "id": "42ddd819-092d-4ee6-8544-ed73562aeeae",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "42ddd819-092d-4ee6-8544-ed73562aeeae",
        "cursor": {
          "ref": "0d583bfa-47c9-4027-9bec-759492ebd8c8",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1f668e1a-ceec-49d8-8726-0ef28c4caf67"
        },
        "item": {
          "id": "42ddd819-092d-4ee6-8544-ed73562aeeae",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "84711607-f2b0-4983-a416-cea1d6e66b33",
        "cursor": {
          "ref": "3b02ccc2-e586-482b-aa75-710fbfac6e4f",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "21699760-d5a2-4b65-b4ea-32e9a9f873ae"
        },
        "item": {
          "id": "84711607-f2b0-4983-a416-cea1d6e66b33",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "84711607-f2b0-4983-a416-cea1d6e66b33",
        "cursor": {
          "ref": "3b02ccc2-e586-482b-aa75-710fbfac6e4f",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "21699760-d5a2-4b65-b4ea-32e9a9f873ae"
        },
        "item": {
          "id": "84711607-f2b0-4983-a416-cea1d6e66b33",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "84711607-f2b0-4983-a416-cea1d6e66b33",
        "cursor": {
          "ref": "3b02ccc2-e586-482b-aa75-710fbfac6e4f",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "21699760-d5a2-4b65-b4ea-32e9a9f873ae"
        },
        "item": {
          "id": "84711607-f2b0-4983-a416-cea1d6e66b33",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "ce75256f-26ba-4bcd-a082-2700455b2322",
        "cursor": {
          "ref": "7ce92644-186d-426e-954e-2a94bc9bbf79",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "da5b59bf-9d47-4fd0-8f38-a1f21758e0b2"
        },
        "item": {
          "id": "ce75256f-26ba-4bcd-a082-2700455b2322",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ce75256f-26ba-4bcd-a082-2700455b2322",
        "cursor": {
          "ref": "7ce92644-186d-426e-954e-2a94bc9bbf79",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "da5b59bf-9d47-4fd0-8f38-a1f21758e0b2"
        },
        "item": {
          "id": "ce75256f-26ba-4bcd-a082-2700455b2322",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ce75256f-26ba-4bcd-a082-2700455b2322",
        "cursor": {
          "ref": "7ce92644-186d-426e-954e-2a94bc9bbf79",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "da5b59bf-9d47-4fd0-8f38-a1f21758e0b2"
        },
        "item": {
          "id": "ce75256f-26ba-4bcd-a082-2700455b2322",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "c762aed4-d356-4ed1-9f9d-70a6c5fa9d79",
        "cursor": {
          "ref": "cff71a04-f489-4db0-adfa-2f6683c36b5d",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "de30a82e-0162-450b-ba2a-13d5578dd178"
        },
        "item": {
          "id": "c762aed4-d356-4ed1-9f9d-70a6c5fa9d79",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c762aed4-d356-4ed1-9f9d-70a6c5fa9d79",
        "cursor": {
          "ref": "cff71a04-f489-4db0-adfa-2f6683c36b5d",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "de30a82e-0162-450b-ba2a-13d5578dd178"
        },
        "item": {
          "id": "c762aed4-d356-4ed1-9f9d-70a6c5fa9d79",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c762aed4-d356-4ed1-9f9d-70a6c5fa9d79",
        "cursor": {
          "ref": "cff71a04-f489-4db0-adfa-2f6683c36b5d",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "de30a82e-0162-450b-ba2a-13d5578dd178"
        },
        "item": {
          "id": "c762aed4-d356-4ed1-9f9d-70a6c5fa9d79",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "72b4b9db-ea83-4787-b1ae-f73fe68b60f6",
        "cursor": {
          "ref": "a683d61c-2c92-4dff-99a1-267fbd3e0289",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "32bc17e5-d673-4d69-bf7b-900a9f193572"
        },
        "item": {
          "id": "72b4b9db-ea83-4787-b1ae-f73fe68b60f6",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "72b4b9db-ea83-4787-b1ae-f73fe68b60f6",
        "cursor": {
          "ref": "a683d61c-2c92-4dff-99a1-267fbd3e0289",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "32bc17e5-d673-4d69-bf7b-900a9f193572"
        },
        "item": {
          "id": "72b4b9db-ea83-4787-b1ae-f73fe68b60f6",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "72b4b9db-ea83-4787-b1ae-f73fe68b60f6",
        "cursor": {
          "ref": "a683d61c-2c92-4dff-99a1-267fbd3e0289",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "32bc17e5-d673-4d69-bf7b-900a9f193572"
        },
        "item": {
          "id": "72b4b9db-ea83-4787-b1ae-f73fe68b60f6",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2f38049f-bb07-4515-9bbe-02e1386241b2",
        "cursor": {
          "ref": "28659dc9-191b-462e-8c51-24433ad9bde6",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "739903c8-dc56-4176-acf6-e76190af85fe"
        },
        "item": {
          "id": "2f38049f-bb07-4515-9bbe-02e1386241b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "2f38049f-bb07-4515-9bbe-02e1386241b2",
        "cursor": {
          "ref": "28659dc9-191b-462e-8c51-24433ad9bde6",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "739903c8-dc56-4176-acf6-e76190af85fe"
        },
        "item": {
          "id": "2f38049f-bb07-4515-9bbe-02e1386241b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "2f38049f-bb07-4515-9bbe-02e1386241b2",
        "cursor": {
          "ref": "28659dc9-191b-462e-8c51-24433ad9bde6",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "739903c8-dc56-4176-acf6-e76190af85fe"
        },
        "item": {
          "id": "2f38049f-bb07-4515-9bbe-02e1386241b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "5ae37b6b-668d-44de-93b0-7102d077eb66",
        "cursor": {
          "ref": "fea2f118-1697-4401-8d1a-e1c9d7d124a7",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0147e9a7-75eb-47ee-b106-ccaf1ed91e5d"
        },
        "item": {
          "id": "5ae37b6b-668d-44de-93b0-7102d077eb66",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5ae37b6b-668d-44de-93b0-7102d077eb66",
        "cursor": {
          "ref": "fea2f118-1697-4401-8d1a-e1c9d7d124a7",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0147e9a7-75eb-47ee-b106-ccaf1ed91e5d"
        },
        "item": {
          "id": "5ae37b6b-668d-44de-93b0-7102d077eb66",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5ae37b6b-668d-44de-93b0-7102d077eb66",
        "cursor": {
          "ref": "fea2f118-1697-4401-8d1a-e1c9d7d124a7",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0147e9a7-75eb-47ee-b106-ccaf1ed91e5d"
        },
        "item": {
          "id": "5ae37b6b-668d-44de-93b0-7102d077eb66",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "1d5a210c-9fcf-4922-ba59-e8e7fbccd53e",
        "cursor": {
          "ref": "ba99479f-4cc8-469e-a5a0-6b8ecd20a0c0",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "443027ef-9cfd-4da9-a68d-733d7f7829df"
        },
        "item": {
          "id": "1d5a210c-9fcf-4922-ba59-e8e7fbccd53e",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1d5a210c-9fcf-4922-ba59-e8e7fbccd53e",
        "cursor": {
          "ref": "ba99479f-4cc8-469e-a5a0-6b8ecd20a0c0",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "443027ef-9cfd-4da9-a68d-733d7f7829df"
        },
        "item": {
          "id": "1d5a210c-9fcf-4922-ba59-e8e7fbccd53e",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1d5a210c-9fcf-4922-ba59-e8e7fbccd53e",
        "cursor": {
          "ref": "ba99479f-4cc8-469e-a5a0-6b8ecd20a0c0",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "443027ef-9cfd-4da9-a68d-733d7f7829df"
        },
        "item": {
          "id": "1d5a210c-9fcf-4922-ba59-e8e7fbccd53e",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "bfdd2fb7-cba9-4a11-acfb-5c707fbaf183",
        "cursor": {
          "ref": "03214a9b-c733-4a3f-97ac-9a3b2d11fa1a",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "866067cf-5c49-4414-b77e-34d4eb2a88b3"
        },
        "item": {
          "id": "bfdd2fb7-cba9-4a11-acfb-5c707fbaf183",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "bfdd2fb7-cba9-4a11-acfb-5c707fbaf183",
        "cursor": {
          "ref": "03214a9b-c733-4a3f-97ac-9a3b2d11fa1a",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "866067cf-5c49-4414-b77e-34d4eb2a88b3"
        },
        "item": {
          "id": "bfdd2fb7-cba9-4a11-acfb-5c707fbaf183",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "bfdd2fb7-cba9-4a11-acfb-5c707fbaf183",
        "cursor": {
          "ref": "03214a9b-c733-4a3f-97ac-9a3b2d11fa1a",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "866067cf-5c49-4414-b77e-34d4eb2a88b3"
        },
        "item": {
          "id": "bfdd2fb7-cba9-4a11-acfb-5c707fbaf183",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1d7ac13b-fffe-4cf9-b47f-b3cedcd7a5d2",
        "cursor": {
          "ref": "7dfff1a7-e97e-450d-922b-35f941324d78",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e83e1b5e-f38b-4b40-992d-f606f844c47e"
        },
        "item": {
          "id": "1d7ac13b-fffe-4cf9-b47f-b3cedcd7a5d2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1d7ac13b-fffe-4cf9-b47f-b3cedcd7a5d2",
        "cursor": {
          "ref": "7dfff1a7-e97e-450d-922b-35f941324d78",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e83e1b5e-f38b-4b40-992d-f606f844c47e"
        },
        "item": {
          "id": "1d7ac13b-fffe-4cf9-b47f-b3cedcd7a5d2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1d7ac13b-fffe-4cf9-b47f-b3cedcd7a5d2",
        "cursor": {
          "ref": "7dfff1a7-e97e-450d-922b-35f941324d78",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e83e1b5e-f38b-4b40-992d-f606f844c47e"
        },
        "item": {
          "id": "1d7ac13b-fffe-4cf9-b47f-b3cedcd7a5d2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "744b53b5-8538-4832-b58a-3dad8d6d1fb5",
        "cursor": {
          "ref": "7cff2622-fb56-4b58-ad0d-c58db17aa461",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "74be7dd7-4139-4b87-9951-7e75c22e3cdc"
        },
        "item": {
          "id": "744b53b5-8538-4832-b58a-3dad8d6d1fb5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "744b53b5-8538-4832-b58a-3dad8d6d1fb5",
        "cursor": {
          "ref": "7cff2622-fb56-4b58-ad0d-c58db17aa461",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "74be7dd7-4139-4b87-9951-7e75c22e3cdc"
        },
        "item": {
          "id": "744b53b5-8538-4832-b58a-3dad8d6d1fb5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "744b53b5-8538-4832-b58a-3dad8d6d1fb5",
        "cursor": {
          "ref": "7cff2622-fb56-4b58-ad0d-c58db17aa461",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "74be7dd7-4139-4b87-9951-7e75c22e3cdc"
        },
        "item": {
          "id": "744b53b5-8538-4832-b58a-3dad8d6d1fb5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "839abea3-e328-4885-aa75-bfff9c866e89",
        "cursor": {
          "ref": "bd91bec6-c241-43b2-9249-f517ba401f76",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "90fff144-3918-4c62-9b5a-033fe7548fc8"
        },
        "item": {
          "id": "839abea3-e328-4885-aa75-bfff9c866e89",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "839abea3-e328-4885-aa75-bfff9c866e89",
        "cursor": {
          "ref": "bd91bec6-c241-43b2-9249-f517ba401f76",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "90fff144-3918-4c62-9b5a-033fe7548fc8"
        },
        "item": {
          "id": "839abea3-e328-4885-aa75-bfff9c866e89",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "839abea3-e328-4885-aa75-bfff9c866e89",
        "cursor": {
          "ref": "bd91bec6-c241-43b2-9249-f517ba401f76",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "90fff144-3918-4c62-9b5a-033fe7548fc8"
        },
        "item": {
          "id": "839abea3-e328-4885-aa75-bfff9c866e89",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "574469f5-da92-43ec-a9e5-04eb76debe97",
        "cursor": {
          "ref": "771ee5b8-0ea5-4c04-bf37-c3e127bd955a",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e7b5c526-8c81-4711-a1f6-b849eac994b2"
        },
        "item": {
          "id": "574469f5-da92-43ec-a9e5-04eb76debe97",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "574469f5-da92-43ec-a9e5-04eb76debe97",
        "cursor": {
          "ref": "771ee5b8-0ea5-4c04-bf37-c3e127bd955a",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e7b5c526-8c81-4711-a1f6-b849eac994b2"
        },
        "item": {
          "id": "574469f5-da92-43ec-a9e5-04eb76debe97",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "574469f5-da92-43ec-a9e5-04eb76debe97",
        "cursor": {
          "ref": "771ee5b8-0ea5-4c04-bf37-c3e127bd955a",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e7b5c526-8c81-4711-a1f6-b849eac994b2"
        },
        "item": {
          "id": "574469f5-da92-43ec-a9e5-04eb76debe97",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5b2e320c-903b-4800-ac41-fcc3b5f24aab",
        "cursor": {
          "ref": "ec0a3b12-d137-470e-a925-88a5a5e19ab6",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bc608150-1113-49d1-a222-a3f3de763d7a"
        },
        "item": {
          "id": "5b2e320c-903b-4800-ac41-fcc3b5f24aab",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "5b2e320c-903b-4800-ac41-fcc3b5f24aab",
        "cursor": {
          "ref": "ec0a3b12-d137-470e-a925-88a5a5e19ab6",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bc608150-1113-49d1-a222-a3f3de763d7a"
        },
        "item": {
          "id": "5b2e320c-903b-4800-ac41-fcc3b5f24aab",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "5b2e320c-903b-4800-ac41-fcc3b5f24aab",
        "cursor": {
          "ref": "ec0a3b12-d137-470e-a925-88a5a5e19ab6",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bc608150-1113-49d1-a222-a3f3de763d7a"
        },
        "item": {
          "id": "5b2e320c-903b-4800-ac41-fcc3b5f24aab",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "7b157dff-9d7c-4727-996b-87be35bbb851",
        "cursor": {
          "ref": "5370eb6f-1313-49ec-b110-421d86064889",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "11dc7ff4-1306-4ad2-a7ce-bc91e350c500"
        },
        "item": {
          "id": "7b157dff-9d7c-4727-996b-87be35bbb851",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "7b157dff-9d7c-4727-996b-87be35bbb851",
        "cursor": {
          "ref": "5370eb6f-1313-49ec-b110-421d86064889",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "11dc7ff4-1306-4ad2-a7ce-bc91e350c500"
        },
        "item": {
          "id": "7b157dff-9d7c-4727-996b-87be35bbb851",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "7b157dff-9d7c-4727-996b-87be35bbb851",
        "cursor": {
          "ref": "5370eb6f-1313-49ec-b110-421d86064889",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "11dc7ff4-1306-4ad2-a7ce-bc91e350c500"
        },
        "item": {
          "id": "7b157dff-9d7c-4727-996b-87be35bbb851",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "ba8af44c-1299-47c3-8c3a-2c339603638a",
        "cursor": {
          "ref": "fc18326e-80dd-4e7a-8bdf-084a28911661",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e197d666-2e22-45f4-8ea4-3c009fcdb39d"
        },
        "item": {
          "id": "ba8af44c-1299-47c3-8c3a-2c339603638a",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "ba8af44c-1299-47c3-8c3a-2c339603638a",
        "cursor": {
          "ref": "fc18326e-80dd-4e7a-8bdf-084a28911661",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e197d666-2e22-45f4-8ea4-3c009fcdb39d"
        },
        "item": {
          "id": "ba8af44c-1299-47c3-8c3a-2c339603638a",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "ba8af44c-1299-47c3-8c3a-2c339603638a",
        "cursor": {
          "ref": "fc18326e-80dd-4e7a-8bdf-084a28911661",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e197d666-2e22-45f4-8ea4-3c009fcdb39d"
        },
        "item": {
          "id": "ba8af44c-1299-47c3-8c3a-2c339603638a",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "a8579419-cadb-4a0d-b040-b2b1c9184542",
        "cursor": {
          "ref": "932ef295-effb-47f1-b5e4-4c6d9ad55b41",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e987754a-caed-4688-bc16-efef19a943b9"
        },
        "item": {
          "id": "a8579419-cadb-4a0d-b040-b2b1c9184542",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a8579419-cadb-4a0d-b040-b2b1c9184542",
        "cursor": {
          "ref": "932ef295-effb-47f1-b5e4-4c6d9ad55b41",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e987754a-caed-4688-bc16-efef19a943b9"
        },
        "item": {
          "id": "a8579419-cadb-4a0d-b040-b2b1c9184542",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a8579419-cadb-4a0d-b040-b2b1c9184542",
        "cursor": {
          "ref": "932ef295-effb-47f1-b5e4-4c6d9ad55b41",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e987754a-caed-4688-bc16-efef19a943b9"
        },
        "item": {
          "id": "a8579419-cadb-4a0d-b040-b2b1c9184542",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a6483ec2-54a6-42fc-a347-b6078aeba4d7",
        "cursor": {
          "ref": "f3e89c2a-50f8-4da3-8237-10e76c67ba46",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d82afe0f-6233-420a-97d6-8046d58a9790"
        },
        "item": {
          "id": "a6483ec2-54a6-42fc-a347-b6078aeba4d7",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "a6483ec2-54a6-42fc-a347-b6078aeba4d7",
        "cursor": {
          "ref": "f3e89c2a-50f8-4da3-8237-10e76c67ba46",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d82afe0f-6233-420a-97d6-8046d58a9790"
        },
        "item": {
          "id": "a6483ec2-54a6-42fc-a347-b6078aeba4d7",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "a6483ec2-54a6-42fc-a347-b6078aeba4d7",
        "cursor": {
          "ref": "f3e89c2a-50f8-4da3-8237-10e76c67ba46",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d82afe0f-6233-420a-97d6-8046d58a9790"
        },
        "item": {
          "id": "a6483ec2-54a6-42fc-a347-b6078aeba4d7",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "cb7408ca-dc43-4fe7-8992-3c24e1202d22",
        "cursor": {
          "ref": "2cbab17b-5279-453f-ad91-5f9298475842",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ea6f18ce-246a-4eaa-b170-b8cd7478f24d"
        },
        "item": {
          "id": "cb7408ca-dc43-4fe7-8992-3c24e1202d22",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "cb7408ca-dc43-4fe7-8992-3c24e1202d22",
        "cursor": {
          "ref": "2cbab17b-5279-453f-ad91-5f9298475842",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ea6f18ce-246a-4eaa-b170-b8cd7478f24d"
        },
        "item": {
          "id": "cb7408ca-dc43-4fe7-8992-3c24e1202d22",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "cb7408ca-dc43-4fe7-8992-3c24e1202d22",
        "cursor": {
          "ref": "2cbab17b-5279-453f-ad91-5f9298475842",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ea6f18ce-246a-4eaa-b170-b8cd7478f24d"
        },
        "item": {
          "id": "cb7408ca-dc43-4fe7-8992-3c24e1202d22",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "d5cdeb05-e803-4757-b55c-7b67ba32ecf8",
        "cursor": {
          "ref": "0d24456d-614c-4f10-ac5c-a50bfe4a84b5",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d8abcde0-cb41-49c0-8bb1-352e15c2fa61"
        },
        "item": {
          "id": "d5cdeb05-e803-4757-b55c-7b67ba32ecf8",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "d5cdeb05-e803-4757-b55c-7b67ba32ecf8",
        "cursor": {
          "ref": "0d24456d-614c-4f10-ac5c-a50bfe4a84b5",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d8abcde0-cb41-49c0-8bb1-352e15c2fa61"
        },
        "item": {
          "id": "d5cdeb05-e803-4757-b55c-7b67ba32ecf8",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "d5cdeb05-e803-4757-b55c-7b67ba32ecf8",
        "cursor": {
          "ref": "0d24456d-614c-4f10-ac5c-a50bfe4a84b5",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d8abcde0-cb41-49c0-8bb1-352e15c2fa61"
        },
        "item": {
          "id": "d5cdeb05-e803-4757-b55c-7b67ba32ecf8",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "a7ca8f14-b9df-4de9-bb98-b9089dcb7582",
        "cursor": {
          "ref": "7bf8b8d1-676e-4e52-a49b-c8605b7217e6",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "15cec8ca-803c-4128-9ff6-7b3babfa54e8"
        },
        "item": {
          "id": "a7ca8f14-b9df-4de9-bb98-b9089dcb7582",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a7ca8f14-b9df-4de9-bb98-b9089dcb7582",
        "cursor": {
          "ref": "7bf8b8d1-676e-4e52-a49b-c8605b7217e6",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "15cec8ca-803c-4128-9ff6-7b3babfa54e8"
        },
        "item": {
          "id": "a7ca8f14-b9df-4de9-bb98-b9089dcb7582",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a7ca8f14-b9df-4de9-bb98-b9089dcb7582",
        "cursor": {
          "ref": "7bf8b8d1-676e-4e52-a49b-c8605b7217e6",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "15cec8ca-803c-4128-9ff6-7b3babfa54e8"
        },
        "item": {
          "id": "a7ca8f14-b9df-4de9-bb98-b9089dcb7582",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "872e44e1-d2b9-4eef-a19c-435c4a9993d7",
        "cursor": {
          "ref": "c74a50b5-f744-42a5-adbe-a771100ea865",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1da83ba5-3999-46a1-a20d-6a74ed716384"
        },
        "item": {
          "id": "872e44e1-d2b9-4eef-a19c-435c4a9993d7",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "872e44e1-d2b9-4eef-a19c-435c4a9993d7",
        "cursor": {
          "ref": "c74a50b5-f744-42a5-adbe-a771100ea865",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1da83ba5-3999-46a1-a20d-6a74ed716384"
        },
        "item": {
          "id": "872e44e1-d2b9-4eef-a19c-435c4a9993d7",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "872e44e1-d2b9-4eef-a19c-435c4a9993d7",
        "cursor": {
          "ref": "c74a50b5-f744-42a5-adbe-a771100ea865",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1da83ba5-3999-46a1-a20d-6a74ed716384"
        },
        "item": {
          "id": "872e44e1-d2b9-4eef-a19c-435c4a9993d7",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "f5a0dbf5-980d-429d-b76a-f8849aa6cf6c",
        "cursor": {
          "ref": "aa65118c-9829-4577-90bd-c31a76cf43b6",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "abc4c7c6-05a4-492a-8649-62a690090017"
        },
        "item": {
          "id": "f5a0dbf5-980d-429d-b76a-f8849aa6cf6c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f5a0dbf5-980d-429d-b76a-f8849aa6cf6c",
        "cursor": {
          "ref": "aa65118c-9829-4577-90bd-c31a76cf43b6",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "abc4c7c6-05a4-492a-8649-62a690090017"
        },
        "item": {
          "id": "f5a0dbf5-980d-429d-b76a-f8849aa6cf6c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f5a0dbf5-980d-429d-b76a-f8849aa6cf6c",
        "cursor": {
          "ref": "aa65118c-9829-4577-90bd-c31a76cf43b6",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "abc4c7c6-05a4-492a-8649-62a690090017"
        },
        "item": {
          "id": "f5a0dbf5-980d-429d-b76a-f8849aa6cf6c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "597c1b83-55ef-4bca-88d9-4a8ac2138b73",
        "cursor": {
          "ref": "ceda0cf4-f2cd-4add-9857-d770117b3d5b",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dfd69094-0525-49c2-ba3a-656f21a2fc60"
        },
        "item": {
          "id": "597c1b83-55ef-4bca-88d9-4a8ac2138b73",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "597c1b83-55ef-4bca-88d9-4a8ac2138b73",
        "cursor": {
          "ref": "ceda0cf4-f2cd-4add-9857-d770117b3d5b",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dfd69094-0525-49c2-ba3a-656f21a2fc60"
        },
        "item": {
          "id": "597c1b83-55ef-4bca-88d9-4a8ac2138b73",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "597c1b83-55ef-4bca-88d9-4a8ac2138b73",
        "cursor": {
          "ref": "ceda0cf4-f2cd-4add-9857-d770117b3d5b",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dfd69094-0525-49c2-ba3a-656f21a2fc60"
        },
        "item": {
          "id": "597c1b83-55ef-4bca-88d9-4a8ac2138b73",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "962cd607-b87b-4530-909a-37a74dec1951",
        "cursor": {
          "ref": "53ce1403-8fbf-4caa-9c9b-3b645c66dd5f",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ede56933-2059-448c-8765-d99064475f15"
        },
        "item": {
          "id": "962cd607-b87b-4530-909a-37a74dec1951",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "962cd607-b87b-4530-909a-37a74dec1951",
        "cursor": {
          "ref": "53ce1403-8fbf-4caa-9c9b-3b645c66dd5f",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ede56933-2059-448c-8765-d99064475f15"
        },
        "item": {
          "id": "962cd607-b87b-4530-909a-37a74dec1951",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "962cd607-b87b-4530-909a-37a74dec1951",
        "cursor": {
          "ref": "53ce1403-8fbf-4caa-9c9b-3b645c66dd5f",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ede56933-2059-448c-8765-d99064475f15"
        },
        "item": {
          "id": "962cd607-b87b-4530-909a-37a74dec1951",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "581e52d6-59e3-4ba8-8520-f335dccb3927",
        "cursor": {
          "ref": "d71e586b-5017-4cdb-a00a-fedff93b0361",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5fd2ce87-ed15-4fbb-a06e-c51fb24bc644"
        },
        "item": {
          "id": "581e52d6-59e3-4ba8-8520-f335dccb3927",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "581e52d6-59e3-4ba8-8520-f335dccb3927",
        "cursor": {
          "ref": "d71e586b-5017-4cdb-a00a-fedff93b0361",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5fd2ce87-ed15-4fbb-a06e-c51fb24bc644"
        },
        "item": {
          "id": "581e52d6-59e3-4ba8-8520-f335dccb3927",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "581e52d6-59e3-4ba8-8520-f335dccb3927",
        "cursor": {
          "ref": "d71e586b-5017-4cdb-a00a-fedff93b0361",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5fd2ce87-ed15-4fbb-a06e-c51fb24bc644"
        },
        "item": {
          "id": "581e52d6-59e3-4ba8-8520-f335dccb3927",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c8ee944f-f086-46a9-b24a-2376dcaa6d91",
        "cursor": {
          "ref": "e9a53e1a-2096-4944-9f8a-2ec899630999",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "11181ba0-130e-4495-88de-3706bc7689b2"
        },
        "item": {
          "id": "c8ee944f-f086-46a9-b24a-2376dcaa6d91",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c8ee944f-f086-46a9-b24a-2376dcaa6d91",
        "cursor": {
          "ref": "e9a53e1a-2096-4944-9f8a-2ec899630999",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "11181ba0-130e-4495-88de-3706bc7689b2"
        },
        "item": {
          "id": "c8ee944f-f086-46a9-b24a-2376dcaa6d91",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c8ee944f-f086-46a9-b24a-2376dcaa6d91",
        "cursor": {
          "ref": "e9a53e1a-2096-4944-9f8a-2ec899630999",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "11181ba0-130e-4495-88de-3706bc7689b2"
        },
        "item": {
          "id": "c8ee944f-f086-46a9-b24a-2376dcaa6d91",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c8ee944f-f086-46a9-b24a-2376dcaa6d91",
        "cursor": {
          "ref": "e9a53e1a-2096-4944-9f8a-2ec899630999",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "11181ba0-130e-4495-88de-3706bc7689b2"
        },
        "item": {
          "id": "c8ee944f-f086-46a9-b24a-2376dcaa6d91",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f9030090-d240-49fe-a5e6-090389d04585",
        "cursor": {
          "ref": "ad07f884-eb42-4442-9815-07616c945063",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "85536490-4d48-440e-8ebf-4af935d07d30"
        },
        "item": {
          "id": "f9030090-d240-49fe-a5e6-090389d04585",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "f9030090-d240-49fe-a5e6-090389d04585",
        "cursor": {
          "ref": "ad07f884-eb42-4442-9815-07616c945063",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "85536490-4d48-440e-8ebf-4af935d07d30"
        },
        "item": {
          "id": "f9030090-d240-49fe-a5e6-090389d04585",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "f9030090-d240-49fe-a5e6-090389d04585",
        "cursor": {
          "ref": "ad07f884-eb42-4442-9815-07616c945063",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "85536490-4d48-440e-8ebf-4af935d07d30"
        },
        "item": {
          "id": "f9030090-d240-49fe-a5e6-090389d04585",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "b7015045-3559-433c-beed-d032a5a432af",
        "cursor": {
          "ref": "1d2f749e-f738-4238-beba-f3475aa1cf9c",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5b64dfab-d939-4b93-ac65-c9f8cb32f2ee"
        },
        "item": {
          "id": "b7015045-3559-433c-beed-d032a5a432af",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b7015045-3559-433c-beed-d032a5a432af",
        "cursor": {
          "ref": "1d2f749e-f738-4238-beba-f3475aa1cf9c",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5b64dfab-d939-4b93-ac65-c9f8cb32f2ee"
        },
        "item": {
          "id": "b7015045-3559-433c-beed-d032a5a432af",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b7015045-3559-433c-beed-d032a5a432af",
        "cursor": {
          "ref": "1d2f749e-f738-4238-beba-f3475aa1cf9c",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5b64dfab-d939-4b93-ac65-c9f8cb32f2ee"
        },
        "item": {
          "id": "b7015045-3559-433c-beed-d032a5a432af",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "eb4cda7c-4b21-4270-a5de-0a54a70fcc1a",
        "cursor": {
          "ref": "aa9068d9-c58f-4084-98cf-fd847f50f4e3",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dc84f54a-9caa-4ec8-86b8-25b26f0953be"
        },
        "item": {
          "id": "eb4cda7c-4b21-4270-a5de-0a54a70fcc1a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "eb4cda7c-4b21-4270-a5de-0a54a70fcc1a",
        "cursor": {
          "ref": "aa9068d9-c58f-4084-98cf-fd847f50f4e3",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dc84f54a-9caa-4ec8-86b8-25b26f0953be"
        },
        "item": {
          "id": "eb4cda7c-4b21-4270-a5de-0a54a70fcc1a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "eb4cda7c-4b21-4270-a5de-0a54a70fcc1a",
        "cursor": {
          "ref": "aa9068d9-c58f-4084-98cf-fd847f50f4e3",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dc84f54a-9caa-4ec8-86b8-25b26f0953be"
        },
        "item": {
          "id": "eb4cda7c-4b21-4270-a5de-0a54a70fcc1a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "9fa71abc-0823-4cfb-ae1f-a41bd7fe268c",
        "cursor": {
          "ref": "f1030174-b562-417c-8764-cadf7b492b86",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "be63786f-3a42-4d98-884d-e06e247caf1f"
        },
        "item": {
          "id": "9fa71abc-0823-4cfb-ae1f-a41bd7fe268c",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9fa71abc-0823-4cfb-ae1f-a41bd7fe268c",
        "cursor": {
          "ref": "f1030174-b562-417c-8764-cadf7b492b86",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "be63786f-3a42-4d98-884d-e06e247caf1f"
        },
        "item": {
          "id": "9fa71abc-0823-4cfb-ae1f-a41bd7fe268c",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9fa71abc-0823-4cfb-ae1f-a41bd7fe268c",
        "cursor": {
          "ref": "f1030174-b562-417c-8764-cadf7b492b86",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "be63786f-3a42-4d98-884d-e06e247caf1f"
        },
        "item": {
          "id": "9fa71abc-0823-4cfb-ae1f-a41bd7fe268c",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "078bb3af-cc90-4e6e-a375-c4f913201c51",
        "cursor": {
          "ref": "49535474-5c39-44e9-a76d-b36e7b3290df",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c3e18672-b0c8-4434-a69f-51f397c56417"
        },
        "item": {
          "id": "078bb3af-cc90-4e6e-a375-c4f913201c51",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "078bb3af-cc90-4e6e-a375-c4f913201c51",
        "cursor": {
          "ref": "49535474-5c39-44e9-a76d-b36e7b3290df",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c3e18672-b0c8-4434-a69f-51f397c56417"
        },
        "item": {
          "id": "078bb3af-cc90-4e6e-a375-c4f913201c51",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "078bb3af-cc90-4e6e-a375-c4f913201c51",
        "cursor": {
          "ref": "49535474-5c39-44e9-a76d-b36e7b3290df",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c3e18672-b0c8-4434-a69f-51f397c56417"
        },
        "item": {
          "id": "078bb3af-cc90-4e6e-a375-c4f913201c51",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "a1d3a6fc-20fb-4c58-9b68-4f4560028195",
        "cursor": {
          "ref": "a588c718-88ef-47e8-bfbc-d7e368c0a19e",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f0fab362-4406-4dde-b50d-6701bbb6e624"
        },
        "item": {
          "id": "a1d3a6fc-20fb-4c58-9b68-4f4560028195",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a1d3a6fc-20fb-4c58-9b68-4f4560028195",
        "cursor": {
          "ref": "a588c718-88ef-47e8-bfbc-d7e368c0a19e",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f0fab362-4406-4dde-b50d-6701bbb6e624"
        },
        "item": {
          "id": "a1d3a6fc-20fb-4c58-9b68-4f4560028195",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a1d3a6fc-20fb-4c58-9b68-4f4560028195",
        "cursor": {
          "ref": "a588c718-88ef-47e8-bfbc-d7e368c0a19e",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f0fab362-4406-4dde-b50d-6701bbb6e624"
        },
        "item": {
          "id": "a1d3a6fc-20fb-4c58-9b68-4f4560028195",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ce575d95-4d77-4b8c-a6a2-b24c396f3150",
        "cursor": {
          "ref": "9704ee37-4571-4ba6-81fe-09a79d79d482",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0a8be2b2-8729-47d2-b654-a1c0a98d0f0b"
        },
        "item": {
          "id": "ce575d95-4d77-4b8c-a6a2-b24c396f3150",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ce575d95-4d77-4b8c-a6a2-b24c396f3150",
        "cursor": {
          "ref": "9704ee37-4571-4ba6-81fe-09a79d79d482",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0a8be2b2-8729-47d2-b654-a1c0a98d0f0b"
        },
        "item": {
          "id": "ce575d95-4d77-4b8c-a6a2-b24c396f3150",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ce575d95-4d77-4b8c-a6a2-b24c396f3150",
        "cursor": {
          "ref": "9704ee37-4571-4ba6-81fe-09a79d79d482",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0a8be2b2-8729-47d2-b654-a1c0a98d0f0b"
        },
        "item": {
          "id": "ce575d95-4d77-4b8c-a6a2-b24c396f3150",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d952605a-247a-45ec-a3ba-963c3afaced7",
        "cursor": {
          "ref": "dc3416ed-1f95-4da9-a38a-3f7211e571d6",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "626d2910-f335-4a4b-88e9-05d12958b1fb"
        },
        "item": {
          "id": "d952605a-247a-45ec-a3ba-963c3afaced7",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d952605a-247a-45ec-a3ba-963c3afaced7",
        "cursor": {
          "ref": "dc3416ed-1f95-4da9-a38a-3f7211e571d6",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "626d2910-f335-4a4b-88e9-05d12958b1fb"
        },
        "item": {
          "id": "d952605a-247a-45ec-a3ba-963c3afaced7",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d952605a-247a-45ec-a3ba-963c3afaced7",
        "cursor": {
          "ref": "dc3416ed-1f95-4da9-a38a-3f7211e571d6",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "626d2910-f335-4a4b-88e9-05d12958b1fb"
        },
        "item": {
          "id": "d952605a-247a-45ec-a3ba-963c3afaced7",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "821b7f29-e179-4e0e-bd7c-8caaa9da6a10",
        "cursor": {
          "ref": "725d1d18-6cc3-47ff-9a29-11fd989b6fa3",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0fa1f603-2c71-430b-a404-387ba9428eba"
        },
        "item": {
          "id": "821b7f29-e179-4e0e-bd7c-8caaa9da6a10",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "821b7f29-e179-4e0e-bd7c-8caaa9da6a10",
        "cursor": {
          "ref": "725d1d18-6cc3-47ff-9a29-11fd989b6fa3",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0fa1f603-2c71-430b-a404-387ba9428eba"
        },
        "item": {
          "id": "821b7f29-e179-4e0e-bd7c-8caaa9da6a10",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b4bbb335-249d-4677-abcf-2d0d4e0df612",
        "cursor": {
          "ref": "7fff60b4-1891-4466-9508-430834603e26",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "09ce7d78-f70d-45fe-9a60-7c8dff45a357"
        },
        "item": {
          "id": "b4bbb335-249d-4677-abcf-2d0d4e0df612",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b4bbb335-249d-4677-abcf-2d0d4e0df612",
        "cursor": {
          "ref": "7fff60b4-1891-4466-9508-430834603e26",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "09ce7d78-f70d-45fe-9a60-7c8dff45a357"
        },
        "item": {
          "id": "b4bbb335-249d-4677-abcf-2d0d4e0df612",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b4bbb335-249d-4677-abcf-2d0d4e0df612",
        "cursor": {
          "ref": "7fff60b4-1891-4466-9508-430834603e26",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "09ce7d78-f70d-45fe-9a60-7c8dff45a357"
        },
        "item": {
          "id": "b4bbb335-249d-4677-abcf-2d0d4e0df612",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2d08058b-0d39-404f-97b6-762f2d1226b8",
        "cursor": {
          "ref": "dbfa3d9e-49db-46ac-aaba-de6c5565f179",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8c65e039-c6a8-4d80-823b-991ae801239e"
        },
        "item": {
          "id": "2d08058b-0d39-404f-97b6-762f2d1226b8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2d08058b-0d39-404f-97b6-762f2d1226b8",
        "cursor": {
          "ref": "dbfa3d9e-49db-46ac-aaba-de6c5565f179",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8c65e039-c6a8-4d80-823b-991ae801239e"
        },
        "item": {
          "id": "2d08058b-0d39-404f-97b6-762f2d1226b8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d460a2f9-92c1-4846-944b-4cc6bdfd6b9c",
        "cursor": {
          "ref": "90315473-db6a-4820-8291-b360505f2b94",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a4ec81bd-d47c-4868-a75f-8ed74f84aa21"
        },
        "item": {
          "id": "d460a2f9-92c1-4846-944b-4cc6bdfd6b9c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d460a2f9-92c1-4846-944b-4cc6bdfd6b9c",
        "cursor": {
          "ref": "90315473-db6a-4820-8291-b360505f2b94",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a4ec81bd-d47c-4868-a75f-8ed74f84aa21"
        },
        "item": {
          "id": "d460a2f9-92c1-4846-944b-4cc6bdfd6b9c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d460a2f9-92c1-4846-944b-4cc6bdfd6b9c",
        "cursor": {
          "ref": "90315473-db6a-4820-8291-b360505f2b94",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a4ec81bd-d47c-4868-a75f-8ed74f84aa21"
        },
        "item": {
          "id": "d460a2f9-92c1-4846-944b-4cc6bdfd6b9c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7cacc534-0261-438a-a288-d7da7e595b3e",
        "cursor": {
          "ref": "58539c27-c4f4-4435-9ae4-4d734d7b600a",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e4cc8704-e03a-41c7-bd9c-74503d141f6b"
        },
        "item": {
          "id": "7cacc534-0261-438a-a288-d7da7e595b3e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "7cacc534-0261-438a-a288-d7da7e595b3e",
        "cursor": {
          "ref": "58539c27-c4f4-4435-9ae4-4d734d7b600a",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e4cc8704-e03a-41c7-bd9c-74503d141f6b"
        },
        "item": {
          "id": "7cacc534-0261-438a-a288-d7da7e595b3e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "c24de8a1-f230-4ca6-bb00-93ee7b3356f1",
        "cursor": {
          "ref": "5eadc009-d207-4579-a4e2-f2193a80c907",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "48e9efb7-bcce-4377-9685-65c8922ebe0a"
        },
        "item": {
          "id": "c24de8a1-f230-4ca6-bb00-93ee7b3356f1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c24de8a1-f230-4ca6-bb00-93ee7b3356f1",
        "cursor": {
          "ref": "5eadc009-d207-4579-a4e2-f2193a80c907",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "48e9efb7-bcce-4377-9685-65c8922ebe0a"
        },
        "item": {
          "id": "c24de8a1-f230-4ca6-bb00-93ee7b3356f1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c24de8a1-f230-4ca6-bb00-93ee7b3356f1",
        "cursor": {
          "ref": "5eadc009-d207-4579-a4e2-f2193a80c907",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "48e9efb7-bcce-4377-9685-65c8922ebe0a"
        },
        "item": {
          "id": "c24de8a1-f230-4ca6-bb00-93ee7b3356f1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "211a39a9-95e8-4736-88f5-720b3e290aad",
        "cursor": {
          "ref": "4561692e-0428-42e9-a93f-e8ebae0f1649",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e464ffc2-8982-46bb-a1fc-648abcf87e8e"
        },
        "item": {
          "id": "211a39a9-95e8-4736-88f5-720b3e290aad",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "211a39a9-95e8-4736-88f5-720b3e290aad",
        "cursor": {
          "ref": "4561692e-0428-42e9-a93f-e8ebae0f1649",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e464ffc2-8982-46bb-a1fc-648abcf87e8e"
        },
        "item": {
          "id": "211a39a9-95e8-4736-88f5-720b3e290aad",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "07063bb8-26d1-4f0f-93bd-a630fc370d7e",
        "cursor": {
          "ref": "0e0c5ed8-d6fd-44bf-aa0e-46eade8ad496",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a00c0433-f79c-4f44-b792-d9262b4ef5ab"
        },
        "item": {
          "id": "07063bb8-26d1-4f0f-93bd-a630fc370d7e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "07063bb8-26d1-4f0f-93bd-a630fc370d7e",
        "cursor": {
          "ref": "0e0c5ed8-d6fd-44bf-aa0e-46eade8ad496",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a00c0433-f79c-4f44-b792-d9262b4ef5ab"
        },
        "item": {
          "id": "07063bb8-26d1-4f0f-93bd-a630fc370d7e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "07063bb8-26d1-4f0f-93bd-a630fc370d7e",
        "cursor": {
          "ref": "0e0c5ed8-d6fd-44bf-aa0e-46eade8ad496",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a00c0433-f79c-4f44-b792-d9262b4ef5ab"
        },
        "item": {
          "id": "07063bb8-26d1-4f0f-93bd-a630fc370d7e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "b59925f9-2638-4a6c-9eae-4192961ca9ba",
        "cursor": {
          "ref": "3570d733-9154-45ce-8a76-de733746a8b8",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "898aaeb5-e103-4920-b2e4-f4505d4820ae"
        },
        "item": {
          "id": "b59925f9-2638-4a6c-9eae-4192961ca9ba",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "b59925f9-2638-4a6c-9eae-4192961ca9ba",
        "cursor": {
          "ref": "3570d733-9154-45ce-8a76-de733746a8b8",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "898aaeb5-e103-4920-b2e4-f4505d4820ae"
        },
        "item": {
          "id": "b59925f9-2638-4a6c-9eae-4192961ca9ba",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "23313933-2a6f-4863-9e8a-8970083795c2",
        "cursor": {
          "ref": "cacb1867-1770-41bb-84bf-110852bee194",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8ff86b05-fc83-4a1e-a740-988bd1c8ff00"
        },
        "item": {
          "id": "23313933-2a6f-4863-9e8a-8970083795c2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "23313933-2a6f-4863-9e8a-8970083795c2",
        "cursor": {
          "ref": "cacb1867-1770-41bb-84bf-110852bee194",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8ff86b05-fc83-4a1e-a740-988bd1c8ff00"
        },
        "item": {
          "id": "23313933-2a6f-4863-9e8a-8970083795c2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "23313933-2a6f-4863-9e8a-8970083795c2",
        "cursor": {
          "ref": "cacb1867-1770-41bb-84bf-110852bee194",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8ff86b05-fc83-4a1e-a740-988bd1c8ff00"
        },
        "item": {
          "id": "23313933-2a6f-4863-9e8a-8970083795c2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}