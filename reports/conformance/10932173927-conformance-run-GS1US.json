{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a99167e1-ff05-4556-8809-b88ec9d4aae6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d80f0af9-f575-41c8-b51a-5d2aeca35048",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "45d3f7a7-2b35-4d7e-b018-b9fcfa2d7275",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "84854ade-0a3a-48d3-8efd-26ed425f194c"
                }
              }
            ]
          },
          {
            "id": "dadb664a-ea6e-422a-8812-dd4cabcabe72",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a720935-e2cb-4d03-b073-b18dfd586865",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7b37ceda-90b2-4fa0-86b4-11dd0e9483f6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c5d9cb3b-86c2-49a0-ad68-c5d762121ff8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e76e744b-0450-4ba8-8366-7f4fb2c5b542",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8791a28-2772-4f38-abb4-208998c87627",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1d18710-75f9-4238-9b8a-a68e2927e027",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d10ea00-7a16-46a9-9a08-4ccbc2703638"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76ac1f76-4371-4a89-9341-c6f26bc34d37",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "216fc6ce-acbb-4b9f-acc5-cc5205563b04"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5fbd79ab-394c-43be-ab8a-0ee81371a37c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f216979-b027-4527-8fc3-4fa5df32e876"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a903349-adfc-4e2a-82ad-525992e1b05a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ee5ba772-e675-4185-a7d3-9fbce7d64466"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f52ec843-1422-4a09-9486-9d7c46a74c0d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1e9b2ab-c0bc-4afe-874e-d036efda0d7f"
            }
          }
        ]
      },
      {
        "id": "4a204b97-ddec-4498-9903-aeff37325422",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5bfdc53a-4342-43e9-b419-bae6fab42726",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d20f11f0-5174-47cd-8bcf-a8ec57912712",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3064f596-0a95-45f8-9072-b74be8d1ad93",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f601ce-efc1-42f1-b59d-9872dd02fcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8518ecf-c8a3-49bc-a3a2-244e956d1476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360a72fa-b158-4a4b-b6f2-db05868bcd02",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c5add6-78a0-4410-ac66-ba24e13dbc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7d89385-e276-4de2-ae42-87657df9a28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c28c33f-a8af-4031-994c-04d289a9863a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68630843-6044-451e-a4eb-7402d278457b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "999499b8-3495-40c0-903d-d99c44d428fc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ddfe2b9a-3741-4948-8313-b91b10ec3775",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed9c4a68-7de3-4854-8365-1e0976c54c15",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c98fb9-d5e4-4c5d-bdcf-3db08f0522da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53c8af55-aa6f-45b4-90c1-04ff5e8240ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b3f122-20ac-4b97-8d51-e3389a2114cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623e569d-9a60-4ff0-a36f-00dfef184ce3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b05d45e0-9f56-4604-bed7-72f77d420ba4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a1118092-5661-49e9-a102-f2da84e3ef1e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c48d3197-fce6-4b2d-bbe4-e115c558422c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c157380f-6e50-49fe-ae35-2eb89cb4b2ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b98cc55a-a24f-4e50-85bf-a1ba622496a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1de93cea-741f-491a-8fc0-00c0f11f81f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7233417a-6ad8-4c00-9f64-044bbaa7e378",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8756c8b9-6997-4f80-ae5e-c948540bf38e"
            }
          }
        ]
      },
      {
        "id": "66d4fcf3-7e34-4303-9852-84308183b59c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ccd99cb5-9c6d-4e5f-b230-3ebd7d328b61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12d92e3c-6fca-443b-8bf3-222f59c9b46b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e8d0573e-4acc-4488-8f4d-1a12f79e04e5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91759746-c351-4525-9209-32796c0ac24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216d95e8-d073-4480-b47f-510623740b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcd2669-7100-488e-832b-6c8207c199bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15525236-0f34-4c53-adf5-e0ade2f7f12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1f423d-d350-4b20-9295-f5892090a504",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4929b2-7e41-44db-8164-7833574a14b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863eefe8-9b49-40fd-b6e3-9aa2007f3e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbd2b28-eff1-4e0d-9228-77e22eeaca8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10a68573-7b9e-444b-b6a5-0062c3a63285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86826a1-408c-45e2-98c8-c9a092f8dc5f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcc02a6-b891-48a6-b683-e90c585b3277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8f51a9-5e91-43cd-849f-a45b8b990830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c58d05c-325a-4d9d-9d87-e75cebac8c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e618819-c2b0-4bbb-acdf-618336a54149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c770919b-5a96-4e3b-999e-fb82bf66124c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639548d3-86e4-49d9-8508-b70bd885ec49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291cd021-a57a-44ce-abb2-9f4df542006b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da37f6fe-f3e9-44dd-930d-39da3ccafa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc0d9fe1-f57b-4278-884f-fef0988758a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92e3fd9-06e7-4865-8a7b-40efe13e3ee3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a540ac-66e1-4926-9339-35eb3b0d5a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be83327-29e1-46e0-b063-4199a5e61e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f05e74b-64fe-468a-b07a-7dc67ba1569a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57063812-0be6-4b74-852a-f12e5d7a1203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80a0a1a-7e98-4ed6-9197-6d9f7d2da7cd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d4edb4-7acb-4eee-8585-fa1f4ae1494c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a1ed2f8-c120-4ec2-9171-05dc6b1c3c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49b5f60-821e-4af7-a934-e5ab1e95bbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1133f873-fe13-43cf-9254-8b06f2a6f200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ed89b7-b27b-40f7-9fa5-0c07bb0f7f5e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e6d7ef-21e3-4874-9a5f-a5619aa5344b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff5bee2e-e763-4fc7-ae3c-21ed3fd1d794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bf7969-0ca9-46a8-a9a9-22f6571987ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89a6a290-b62b-47db-b977-da5364fb0225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6ba27a-0194-4756-a9b5-969ecfd9692f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee78f039-6be0-4af9-8219-f775bc5fffce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded6a62b-4ff6-4852-90b7-08a4128eb5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c12ea06-068a-4e72-8411-f0a1dcbecca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69b15a1a-917b-4b31-842c-f53628286110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ee3842-519c-46ee-91b9-fa96e3c056ea",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c7d888-d82f-4310-8379-cfa97de2747a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4612bda-fa6f-4a1c-8146-c9616a7adb0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c18623-5e40-492c-8eb4-0d648ac36651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02d94119-3459-4d18-88b7-add1dade26e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a22ace2-1749-4a95-809f-e0932ac75c22",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8adde1-c92c-4705-8771-7a5c0957cd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91e48b1-e590-4100-88b4-d56a7550fd13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b836111-1a80-454f-9955-0613f4bcf4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe24e731-4954-465c-b422-9186b80ec1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaad0f8-d02d-446d-b102-184e26b130b9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6043e29-41ee-4c15-8fb0-d1f7fc917c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae45ea8b-2558-4c37-ad47-bb9d00c21089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ce1f6f-1c87-4bf5-ba3b-13d950717694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cfdc94b-8d0c-454d-be42-6c2333d3dc91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32aacd90-1674-4f68-87ea-49d7d4355ab6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6424c1d-2b95-402d-903d-46901371d178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3791128-5835-4a6e-a01b-62817bbede9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02190303-c861-457f-8fdd-74e91465d62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58e50c06-7839-4e68-83d1-7d9eb5441d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693a75b8-f33f-4621-a13f-5fabd91397e0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d94f76-63f7-4a50-9922-a1053d59304a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6cb2d8-9fcc-4c3b-a30a-035aa4db1fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49bc03f-e117-4a44-9a65-95ebb64076c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd9110d0-e801-4f23-8c68-14cea8e2e92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87a3ad5-06fe-45cb-881a-84bf4dd957db",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e0d01b-65c9-4846-b617-af36ed97c612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594b81df-c02c-43bb-a74a-afa1d1373a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ddaf28-6f15-475d-8c40-0791ad6eb807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb46dd63-c676-47ab-8a73-0ffde2b9529d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c0665a-0a3b-4bc1-a4cc-37026f890ccd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ba6b40-fc72-4f4d-9913-ab1e5b298004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e990ec9-2493-436d-9b32-c369dbf20fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac4a46b-60ec-403b-bbef-af70e1ee6f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1ed22ae-7327-4a4c-ae61-8f17bf6247d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35dc3f76-9f96-48ae-ba3d-b06283505cc0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99a1b6f-0fa9-4150-9558-806177cec62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969b8f43-7f4f-4170-a923-e75d01e2ede2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de214d92-447d-4b81-b2bd-41faaac21cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6ae86f2-d2f3-4384-a16f-a67b37c63450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195340a7-ce59-48ee-a2b9-8493cac9d410",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f61800b-7ce0-4494-b98e-4f71386a7b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c19c3cf-0b0a-4e79-b5d2-8daea1b519f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf54670-0be6-45f0-8661-f822afddd70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9558eae8-27c8-4108-ab4d-99d0e1876f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a71d91-3044-4dc1-9896-d6c71daa0591",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bda1065-efdb-49e5-afa3-55fad44f5e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c4390d-3851-46a6-bc3e-bc4c7ae07567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad16d32-8444-4be9-a82b-f8ac701bc0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c01114c-bde5-4ab5-bc96-45c115f5b8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d0ed9e-aba2-460a-b7db-ecacd41998e9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef01a9a-9b2d-4178-8147-c552af618901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae028d7a-2849-487b-bfca-aaf6e9a61985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a35542-f1d8-412d-b4f8-fb1028474b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51ec4706-3665-4f7d-bf56-24f2d1c4f120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e99687-6220-433f-b04c-a57a453ccf31",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd00a2e4-fcc6-4bb6-864b-3f8a0be1406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186bba85-65ac-4a5d-94d4-cffd14f323bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359afd64-5d46-4132-a71b-e1f143e37b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb5419d-1fa2-450b-a9ac-341a46d1b0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cd5787-dcd4-4bf5-83e1-8acf204ddf7c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6306ce74-5310-409e-9c61-f87c90c56cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8e1822-3c4e-4cc8-bb1f-2c261b6afe8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20e862b-be11-4539-b042-a4bae2d705ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71287beb-d748-4c65-8765-c0fe3f5bb746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779ae3b2-1f61-42f3-b7f6-eff460063392",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c95cab-4d19-4a4d-b6fd-d07b6decff79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1b4ecf-50ee-4b7d-aa65-74bd537f2e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9787d2-cbc5-4918-adb8-0f2f10da4835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "126db351-08f4-4fb5-a1f6-a3b6e866e553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8254ac4c-1770-499b-89d4-8e29e0b1ac32",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332eab75-7d17-4d5c-9b66-3d6f06e29a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc31ded-bd7c-480b-9d39-ce4f6fc326ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7450fc8-e3d9-4185-bf16-28b3028bdb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7761fb-b783-4102-ac3b-8150784fcc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a385df25-4a73-40d9-8d75-2331d0d5127f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f56bef-d9d4-47bf-a874-4e4a229a7c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ceeae32-2c35-4e3c-847e-c1a030d8a8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6184f537-843d-4dc3-9be0-b8c7761f663a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "facb8bd0-8263-4f9e-9f87-35de6ab86809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5296809-a9f3-43c3-b008-8444435d50bc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423bd792-5932-4356-bd3b-4c4e18584532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d714f025-f443-4c71-8649-2397ae6ecd01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e8d6ec-0c0d-43cc-88c9-b52c47855c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "01156ee0-c411-473c-a544-5964a9b15d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45a22f8-04a6-4654-be13-75a6ff00e65d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1507ee24-79e5-4579-a702-99caf613a6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b4c320-74f6-4722-bee2-92ba5a30d7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3aab394-d371-47cd-aced-efdfb09bb055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eca63587-6511-40fd-ac67-335530fa37a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145ca12c-c14e-494f-84e8-3e5266f4da89",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6000cde0-76f7-4833-97f4-2003bdfaa2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1acaf21c-37d1-4f7b-88d5-d2998fa4993e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6698d4c-8e82-4556-822a-e66c450f575c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "919238a2-51ed-480c-99ab-ab23834b68cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6764e9-429a-4613-8d50-90f26950436e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0666cb-fa38-4db7-995b-1b8028800a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896f50fb-4086-4d1a-8609-56094ae3c6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1005fa73-75db-4538-908a-43d99d9c45f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc0436f-0539-408d-b2e5-19f330a0bc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92818a85-2109-4976-af40-50736ae78540",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e0e3fd-3ac2-4138-b265-8a6567a88ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c3d31a-4186-4474-9f26-5ea7761fe1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb2e5a6-9e7f-48d9-b83e-55418dc25123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03e123ac-5991-4236-9f5d-d642658fd015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1639f8-da76-4065-930f-fac7c14f2850",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be50a2de-15ae-4824-8981-1ead4bf8a1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40e33e7-d0c2-4f57-8c4e-6746199a980c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d67fb26-5ce0-48a2-a5cc-7ed570009fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0a9448-f50d-4840-a28e-6d4ff27141c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabc70a2-9db2-4a62-997c-e342614a5715",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8177697f-994a-48d8-9310-8389fe88e014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6878ee43-9eec-43a3-94be-0eeb9fce4e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf45c6ef-d31d-48c6-b06d-17be7d364007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f78705-010a-4ca9-b39b-15ea0d60f35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d14df31-f0aa-4cd6-bed8-608c4b532686",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0e27eb-9524-4cde-b942-c14f6c3673e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98641848-0d2f-4dd9-b9c5-9529e2ab9367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409019b7-5175-4451-bc97-ceb2b55695e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "866b7d98-b2f6-4d9c-b3b2-285c5133b2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fb4b04-0d59-4d8a-b1ee-6576581bedef",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8678ffa1-a5cd-404d-bdd2-12b718397c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b69e9b-5baf-42f2-88c1-ed49851c24d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1244ef39-d755-4136-bad7-cf617516c2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05964785-da58-4e68-b304-6f95ce605dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83358a17-9527-4b6e-a3b9-1f0f12c74751",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8680c28d-91ad-4546-b3ed-ad3f51f0c890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea77039f-7fc4-45a3-9aa7-eba719e033a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de74bd3-ca0b-4f34-9c72-fa5f60d53b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "301533df-198d-450d-ba6c-f2cf38f2a1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a9f8ca-28c1-4ea4-b672-f50986d24a9b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ff9eec-6567-46a2-9eca-c7daed914f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218f7912-1818-4376-8746-3b68f032e597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6517adc2-b9da-4dd7-8d87-582c186e7ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2f07353a-2de8-4628-b66f-57cbc4d20e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9f15df-5d21-4d9b-92da-82453e9158b3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510a5a19-9f08-4ff0-b28d-a0bc17dca905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17ecb401-9d93-466c-8d16-7df3fb5bef4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f823171-953f-41f7-9500-a44ea687ce8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f58be0-b30a-4f13-9082-4cd5bc7c90ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bb040f-4456-49fb-ae51-4e425fb67182",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b3b56d-6c7a-4ce3-86d4-a6291039f4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8278a62b-fcd1-49e9-863f-2ba0362422ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e83c28-cd27-4983-8275-9a1b8c267b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb833007-6f14-425c-a9ef-6f6f0c1b58a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91016fe-8c21-4c3c-9bab-7d9ffd526fed",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909df6a5-7cfa-47b2-8030-e19f4b033867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bf08b4-bbf3-4a91-8f44-fb2ef7420c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde3431e-21c7-4159-9dce-f004dc7f4d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f90fc467-5e9c-482d-a676-7ff74abceada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421e105b-e00e-4ce3-a0d6-312c639f73c7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fca567-8ebd-44fd-a903-3a79bb641813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47fadb29-30cb-43d4-b65e-505d3843e817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2152367-5ecf-4b93-a199-fefa274d325b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "916ab98c-38ba-43fa-b4d6-7f169543a5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bcbf77-4be0-432d-8a20-f149be71e78f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939d7d4b-bf60-4622-b95c-2e5d63a97ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed93068-f312-45bb-bbc9-b7b1691c639e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032c61f5-8a43-490a-91e6-f55f0b8217a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "76ef66cd-9df0-4317-bc4b-e2123125e06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d2362f-ce7b-4222-87c9-4e142493711d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a762d2-3caa-41ad-8594-793bd8d654ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3cd2bd-872a-4824-b683-7dffe3e4a485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47338b1-9b40-4924-b073-ba6d31edeaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "556ea66d-bad3-4136-bea2-831252f7f258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0dbc98-68dd-4480-80fc-c4740cfbf341",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0924c0-1bb4-429a-875d-4aa899bec60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1efa258-fa98-4c2c-aaf8-c9c48b402e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ed1692-4454-4f4a-92ef-1d1bb18bd6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8845c4f9-2f09-4874-9fae-431e08f79734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a04d2b-f7a0-455e-a272-38ec6c8b8711",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cbd5c2-5de6-4804-8bd5-60c9ed4adbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb80bfb7-1a1d-43b5-9892-2ee640d3c3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8791e9e-2183-4c8a-85ba-dded7a923c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd531da2-2533-47c4-a591-6120bf6c0e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de9953f-6f06-4b02-8fcd-a74be9f31833",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26883fe5-709f-4219-b478-282b6615cca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b9a7bd-eb94-46e6-a2bc-0e7d2550aeee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4fb746-f861-47d3-af71-19e8e7e8a4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "71490339-ab5f-4af3-ab5b-31abfe101453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a66c102-77ae-46fa-870e-c9b0e35f1c22",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1964349-1777-4985-adfe-803273f93060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e09960-57eb-4532-ac6c-5952758a657d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061fb9ed-b3c1-4ea0-9d20-b35c3b48723a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3a5207-07db-4798-9a52-42c38bc110a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab288854-b875-4cb2-8d30-552251aa93f3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612156ac-bd3f-411f-b866-76891f86852e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0005751-381b-4ccc-87ca-4fdafffceb1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41a266e-49c6-4358-9208-e8c051f28032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "460420be-db4f-4daf-b3b5-d5bdb3165cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecc6470-d65e-4ea3-886b-cb52d66af6b2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e16de4-2e5d-4f8e-9537-91b49833c45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd73ee9-e765-4f8f-a1bb-31a184a616db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a91230-e4c7-40e9-90ee-0ea043f11ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d2824c-6b9e-4fe5-b28a-ccdb46da2ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3975cd-c42f-4c8d-928c-ce9b6841e7e8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab34aa5b-059e-467e-ac9e-7b2077f4b5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25716024-fef6-404f-8b17-09ad99a85c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1e5afd-7c00-40a2-b916-b1a5c235a3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0aaa806-e621-4c6e-9a2a-ea3ed8878289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a07f83-8707-454a-8fb1-e37b548a7a47",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3366473e-2656-4194-9575-7fa1a45fd083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b36f8560-b633-4dd3-82af-1fb03e2f1ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53184cf-c5c4-44f8-8350-9cee61495078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b8d41d5-cbce-4042-9dca-15900b61461a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85187f0-d381-4408-8a11-bef3776104fc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b713fb94-66c8-4a47-b4e0-89eeecc9a47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3577c739-c419-49ec-98f8-4d2ed4d1c975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb68d6d-193f-46f1-90b8-9dca164824ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a4e193-cd9d-4709-9e2d-7060fa6ccd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504e78ca-b26a-4769-865d-84d0f12554e7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf0f5d0-9c30-4779-8cb0-6a1cfd0c4427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c2f37e-9087-467e-b298-b5f0b21edb22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ab9a33-0d9f-42f1-9490-5b449ad2d3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f313fe60-4677-49e9-8a74-ce3779edefad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53fae216-1c90-4b21-890a-92659bafcddd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9928aaee-3e40-4ea5-b8d5-61c068b264b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c845a42-6099-49bf-8d33-bb2f0d40ca29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e75a7c8-4b52-4b42-a2bb-7e662fa8737f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf1c270-bfdb-47fd-b942-b74cb483034e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434236f2-ead2-456d-ad9e-7d638d3ed98f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74f257d-a36b-439e-8252-c00f5206f1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387897d6-2728-4ef8-b965-6eb59d4f0b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd57838a-0004-462b-aba6-9e1622500fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f383d94-7f12-415a-a981-ee45ae306472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063d0de1-55c1-4858-b175-66426e19e899",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8275c01-a900-4358-9b01-3ba88b3beeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d712002-5c9e-42a7-a2e3-4d7bf653384b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb1b7b3-38d3-49d2-9d5a-44292e74d639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e393277-fdb6-4a33-b9d4-c707852a41b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4dcf17-210c-49d1-8306-f04033d84913",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21530d8b-5e42-4a2c-9313-8d43817ee5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897ddc62-81aa-4dc9-a65a-0a6af0cbade4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3550eb-1ea5-438f-bbf1-963001a45aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "091d8f2a-5262-464c-8eae-12b50904e530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e05b181-9ced-4235-8a2b-ce7ac2ce1e8f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f3a0bb-7b94-4d4d-a484-18a72b35582f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65034387-45ee-434e-8b6b-ab10059064da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091cf2fa-0b51-4d64-80fa-ec3b0e62c626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "956aa6a0-7960-4763-8a1a-6aef850b42f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb530ce-e226-43b5-a1d9-4f5af367c914",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91879e2e-583c-447e-8451-30a90ef8dacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c43fd62-1402-450c-9bf8-1f6143aeab08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbb097b-d5db-4222-a1a2-e0dd7d9f8097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f2c03f-1695-40db-9e64-9c037b7bcb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494183cd-285c-4806-9a4e-427c5690239e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fa7c27-9140-4a29-a382-a9910427f858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b4e7a3-9d7d-46b8-80cc-1d5385bc5fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681e5e59-543a-4366-a974-12a162c98a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "da53ff71-ddea-43ea-9d0c-af64cf8b8468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54039359-8a03-4c17-a1fe-c6efc043dea7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a2d977-8b51-42f3-8e27-43e4d98557e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f093268-e48e-4015-9272-bb01865a8341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43b8a6d-c549-4652-8091-93579b372c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4254e1dd-1964-4da8-bbf5-5c4637bc03a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9604e731-0b16-4113-8bfc-266ba1924777",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd0ae58-ec95-41df-9b29-83df2b689c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdeece7-c3f7-4ea9-8993-46aad6b1589c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78143c4-f314-4c8d-9350-0cffc18023cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d936c67-39ec-475b-9c2a-885df456537d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9fe793-54d8-4846-867b-9462f4aa9b3a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cb8029-fcd7-4d1d-a0ed-2145c3321d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa775e3-ab66-46cb-82b9-667aa7cf3b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6768f0a-b83f-40f1-abae-67131f28711b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4770952-418b-4996-b443-1c90ccf0468e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13990ba1-01db-49d4-a287-39c58efeae75",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf73a105-4614-4368-af1e-ea2dff8c6ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9041adac-49ec-4a50-b634-85bbe66d6020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64aacdee-d1c4-4af0-83ca-1cedaa620f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "40fec5f8-62ca-4d97-a402-0718651128c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46c6eea-c4a9-4f34-abd3-fa2861b4f213",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1cb47f-4dee-4fba-8332-d1e72e310ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de370ee-9ef5-4433-b13f-6358b193af75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f22c74-c12e-4f55-9b29-50925c85042b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "767d832f-20ea-4ae4-b4d8-6f1a8d5ac9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e7b9c3-ae7f-4dea-a54f-90069a91ba82",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ce9842-1dd2-4536-aaad-ba49d537fada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e429db4-6e13-4ff8-8cf7-bb189315a84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6dfacbb-396f-4743-97be-fcd87f2e88c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46016154-d9ec-42c2-b92c-ed9e4a827190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65eb712d-dccd-4eac-a550-d92616fde087",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94251fd3-9834-4713-87dd-a138da5e2a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60d711a-0d64-488c-93cf-445caac364be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbd08c5-9505-427b-b6d4-37a497201856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71d9aab1-d025-499d-96c3-9f55945935f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298f19bd-1a59-4368-8a63-2b86d445f92b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391a6bf6-7aa2-47a2-9f46-6385108ca479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250a97fa-a594-4595-b0a7-c2f62ebe8a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4e3331-98ef-4432-a91b-4ba9998e6b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "827cb5eb-717c-48cc-9604-0d2060125cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e341fb4-8301-4d07-b746-d0434df2aa21",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb42d1f9-60d4-4934-9c66-d7f372766ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10de4dc1-759c-442b-8619-8ac51d58e85c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6113026-965f-4497-9256-dc4d907e8861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65e1784c-7639-4b1c-9a33-e77f5032ed2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b79d74d-3ce8-4b67-8bdd-cdf842d41b6a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac651c0-bbc1-492b-99d6-73579e3b289e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0dcfbd0-36cf-4857-8ce0-42144cda7159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402543c0-fa87-46c1-8654-da19aa26f5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1084be8-49d8-4e6a-b38d-5239d2d37a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18b43f9-27df-4ce6-a93c-4a321235d5c3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58ab366-c060-4990-bce9-781137ab0033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188c41aa-7a19-449f-addc-b3df5c1e6a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d23715b-68e0-45fb-9840-996fdff9918d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "472ac54a-9540-4e69-b7f3-72b2d23f918a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960aa497-a817-416a-9ade-f7234c0c4dae",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf0b757-2f17-4c90-8148-5ae305873bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e17086-5b67-483c-badd-3090d793b256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a46ee4-69e1-433e-bfc1-a169e2833a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "543cd308-acf4-4774-822e-1e3eeb663d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d86b412-e416-4800-86eb-fd61029a4540",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c91ef4-f11a-4760-ae89-4e0dd7c4060d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d5be3e-74f7-479f-8628-b57982a58354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3f3c42-b2c8-4b65-9542-1fdf7b43fe76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f713c7-7e11-453c-bb0c-a543ba6eba0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba61ef4d-7350-41eb-92b8-10ee56855bea",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc32a89-eee8-4834-896b-9e53d6eda0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb11e2c-bef3-479e-9696-b130871e7d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaf9f9c-c324-4d0a-81df-31386cda5940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f903d547-bbbd-4485-ab5f-18a26209b1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efaee96-dee7-4487-a434-7e709330ee70",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84306c82-b1ea-4d08-aa5a-8a9f3e195a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3edf070-e733-421b-bf63-993b235edaae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5903a4e0-122c-4400-a79f-7e3e983c5359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "731abe4d-e198-4979-b1b2-03540a305fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044058fe-fc00-4e9e-a121-666b79246255",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dcb959-d0f8-4f3a-ad10-26dc70719173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a99427-1669-4181-ba51-8695eecd0dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c80dff8-43ed-4699-8977-c77f3baa43e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c60202fc-e8c9-409a-8f1f-026724ded543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abd65b1-0a54-4dfe-b862-9dddcbeda404",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08f94f3-8434-479c-a0a9-6a9ff7862f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519479df-56fb-4ca1-93af-bab93199833a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bb66d6-dcfe-4047-977f-a4bac5b318c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bbbefe7-849f-41d9-b0bc-c2aa0e510ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f792198-9374-444f-a64f-415058be71c9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393b013e-c8ce-4448-a0df-e49096b3b978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50aeae1c-1e5a-44cb-b4fa-086edc67942f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5593f4b1-6ae8-4afc-a9f3-39f489a9bf9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6eb1eaa-a8ad-4420-9276-494df98004a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a538a9b5-379a-4304-9cf4-7cffcf930c7d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e24b266-1ec4-41ae-aaf0-df2bd496a2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d606e237-1221-45f9-a333-949de198bd8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c821d0ed-2ed8-4a4a-a3f7-469cdcd9b866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "590f0936-461f-4b0f-9970-3ed2b95549a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97740ab6-7ffc-4df1-b72a-57cac8b3ce4b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331da14d-0354-4db2-9066-fe639851812f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25071e28-763d-4baf-bea2-9871d861016b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4195b625-5da6-4e8c-bc4a-004307fe6f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5988bbce-5a1f-4511-a093-047116aca5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e393b57-8964-4b57-b16a-86961cf11420",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a88f1a-f4a8-4f2e-b0da-425fb1b62446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81903bb0-4e9c-4583-bf83-fde7d5184fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07072ca0-7934-40fe-a865-e684a145873c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42024d92-72cf-45ce-afa2-ba67171a3718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b29174d-15d7-4d63-a4c9-74bea58e7ba1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d5e3d0-9b1c-41c2-8387-c7a3890c7699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549f8667-2c3f-48ef-b552-452514df276f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e86d345-51f7-4ef5-b924-c4d2054aad87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3865c9-6efd-430e-8710-d54a981b018a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec7033c-4a92-4409-9179-bc504ba81635",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a9809f-e75b-4244-90d1-089831e6709b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0910df8-1e55-47e0-b5f7-77c8b9468dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef30a34b-b910-415b-aec8-f6f83dcb59bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb890a6-7827-4466-bce9-6698f3b0fdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad73c399-20f7-44ad-b93f-b0c7206b9e4f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "093fac4d-ccdc-4016-99d3-7cc0a567c455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec92564-d648-4e06-b3c6-4c92b7847f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e61af5-20b3-42d7-9828-cb504cf88293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d0ed1a-2ca5-44a3-8264-ed610c2bb22d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5700036d-198a-429b-8f93-5eeeb02cc56f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab93abc-02bd-4092-b720-a05acd8e806e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9155bfa-bb75-4937-9ec2-12f621f2139d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7241d954-0fb1-4fe7-af84-414d0b47963f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "534e9a2c-2927-4dd9-a41d-047227b5317f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb2f120-21d4-4cc5-8b6c-ed8b7754c0bf",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7f2cbf-e9b3-4110-8ab4-9ecfa3cdc692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf81df6f-a448-48a1-b983-203e2638c9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6847cd32-4470-49f2-8f50-3cfb5db3d315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8882cd12-8e08-4db3-8650-6cd42c5c1bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8384cad9-7aca-44ef-9992-7ef2f29909ed",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b810cb75-8ddc-4c2b-86bc-25180ff5ddd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26d3729-0bc6-417b-bbf5-2e90197bf600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982df61b-9bf3-4ea8-b671-c06c7e0e92d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3972dddc-f1fd-4137-a004-e95df1f9317f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e7abf7-02a0-4c4d-9895-a39bc2f542b6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ee81bb-5d4d-4cf0-9e6a-3cd7d62902f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285ace8a-f274-4065-8ab3-3a3399ee0db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a193df79-494e-4a39-9424-3334d9a01546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f20ddc-6043-49e8-b018-a6ab04c0f67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a94fc5-96da-423a-8ac2-4d263b0789a3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a261c634-504c-4819-b0a7-e1a0be78dbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a572432-fbc4-4711-8758-1602c8f9f912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c9dc2a-f1f3-4d07-a501-2c2583eb3511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "12fabf4d-61e0-4825-94d5-4b9f07658e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bed705c-b391-409b-b0a1-0c54a49800ad",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068de8b5-b298-476e-b101-5fdc3c4512f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57565c72-0648-4fa3-87d6-577e51c640a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bee5121-84ba-48c0-b67e-6ec35fe797e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bed4a34c-ec13-496e-b16e-034a4a5814ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceacea79-ef1e-459d-955e-6a700f065007",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8830f2-43c0-4b12-bdeb-cac47bf624fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0a3601-bb85-46a2-bb7d-13e9930eb152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3aab484-096b-4f72-8f91-5d728d4b5878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c713478c-9658-4cd5-adf4-9194ea88ec77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748f6fd2-55c7-4efd-8a2f-f1d06f2f4cbc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026a4da4-0b80-4910-bbd3-862d3d3cf53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b97e0e-cc34-454f-bb34-0a6866cfbf95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8b4cdb-1710-46c1-a616-3f1f800fc3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0146fa-10dd-416e-833d-f4a57f41fa40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4dc74a-3e46-488c-88d0-d5f3d3d05fd6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd8bde4-9b03-4638-ac85-1590baf29929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b3953c-31c3-4687-afbc-03baac597ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b42a2b-ede7-42c4-b076-84e39383cdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f414b41-2e9d-4872-9780-e3fe17ae86e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e2eef6-56da-4747-bb37-3b9c16a501f5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ad6d50-cfbf-4e11-a2e8-48f50244bddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2d737fa4-4a86-422a-bb7a-8252280684b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247bb78e-e1d8-40c1-b579-e5da7e7c1516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "209df87d-5059-4234-a756-530d24039814"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8a8171cf-34e4-4b30-b6e1-f29ff299d6d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3a6f697e-6536-47ad-9045-b9f2fae8dde7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa2ba42-e9ce-4b10-9f9b-a8fec0cfd2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa6ed811-198a-4b79-9513-6649bda5b0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90481f18-07f9-416c-a61e-17da141d105a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65509630-b3dc-48e6-8a8d-ce33c251b6e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34a303b8-d615-4009-b4dd-185465f4eebd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85590d50-7d00-48d5-918a-c2ae957eaf6d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7db88465-75af-48a1-8fcd-61759784ec48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca0c42c1-122b-4b9b-a8a9-6864b5259940"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8bbc5ccf-20ce-45ef-bacf-c631c6de6c80",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ecd84855-979f-451f-8fbc-1bea2c788a10"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bbc448a8-afa1-479a-99f3-388922e2a2e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af495a8a-5a86-4a51-8af5-5fbc718a4440"
                }
              }
            ]
          },
          {
            "id": "b3dfb70a-0b8d-4e36-822a-f5cefa519858",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5c49239d-57c2-4088-b695-9a7410de19e6",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "01c349d9-d7e1-4996-83af-1f3b6c7c69aa",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a0ccbc-bc8c-48a5-8127-54b6ed29a703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4003b8fd-8ea3-4709-bda2-462fbf785c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6bac5b-b1d0-4854-9330-1b4b34a6bf40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cedb4516-23b7-46ae-b407-9d5fbc338746"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7156d505-f660-4e10-a202-0b2e188f2492",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "963cfb53-c8d3-4cbb-bc54-1e13c3a81b1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dcb83928-0369-4121-b0ae-0cccf801c7a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "871f2eee-dabf-4881-a811-943c5248fad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b90ba1d2-0f22-47f0-b275-76632c771e99"
                    }
                  }
                ]
              },
              {
                "id": "59c52b77-0463-497d-a2c2-cf9d4522132d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "173b44c7-779b-4502-a1c2-d5e1d15e4b44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1eb144f-69bf-4611-a5a2-c1bfce79a1c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0579055b-e760-4f78-82ca-ce8c2c040e45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1b0d5a6a-410c-4e29-8db3-598954c9690f"
                    }
                  }
                ]
              },
              {
                "id": "1051ea60-7570-4cc4-8d7a-4c22ac00f8c9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e381282-0c61-4357-8c02-6e156a5c3626",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4a01aa3-8474-4b23-8785-18dbba39ae5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b91c6543-fdba-42a2-976d-c705a5171b11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2b4ee706-3fa5-42f6-94d7-728e52e35efd"
                    }
                  }
                ]
              },
              {
                "id": "4176876e-63e5-4e29-895a-4bf0b7fa7f91",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "932c45cc-bc2d-496e-b967-422a4cfd01e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a15759b6-866b-42c2-aa03-5e4ff715a0f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c90bde75-798f-4906-b563-5771d5f86489",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "30407f9f-ff78-4449-80c7-2e3e052469cb"
                    }
                  }
                ]
              },
              {
                "id": "2258a557-c6ed-4eee-8544-a0e2ba5b780a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03842afc-6b56-46e3-9802-952d2cf5b36d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c600596e-ea4a-40c7-a94d-b28e04b4a3a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b57bafaf-7de9-4359-94bc-9309e0a7090c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "093e7ca6-6aaf-4ec3-a64c-b598537ed1dc"
                    }
                  }
                ]
              },
              {
                "id": "8b7353a1-8fcc-4a06-84fe-097c03e93808",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b70821ab-cf92-4d83-ac90-ec9f25e85d3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4dae2559-3e91-4099-8ef3-6cc20145d29a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ee49d83-2d24-45ec-b8b5-5a44a46ce8b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ac1c6df5-c7c7-49be-850e-4595b75bb0ba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d87dd42a-64b1-4294-b62e-9dc88918559c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2a4df4a9-d43e-40f0-85b6-19727abe9e9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "77ee8269-affb-4672-ab7c-3838ca56894a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e931d010-f41c-447e-a139-d5ae415f3fe4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "227e0be3-7a44-48e4-8ac1-c2dc3a9282fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9b70de08-5620-4f2d-8bfb-fc5a2682fd3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b32982b6-08a9-47f9-b594-1e7a21de44f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c3ff155-19ab-4f01-92e9-cc18550bd742"
            }
          }
        ]
      },
      {
        "id": "7e0c9b2a-d048-4ee1-8805-a366a696ccda",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "509b60ea-f32d-4d58-a676-94332af7183f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "18214694-37a6-41ce-b186-ac4d86465757",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3697cebf-ff42-41ae-9b1d-2814f4e0f54d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88315417-2726-4908-8b59-8a71d3b09158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b027113-8df5-44af-80b8-6aa996a90828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b00b09-3277-4796-a2db-4305b6c3a32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b73252ea-4804-4b09-9695-d087d161d345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce81d444-29b0-43b2-afbe-ec2d9dc222eb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82302f2-ed6e-4860-a062-87e527bad408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7fd6fe-a4f7-48e2-af3e-befca618fdb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc54a09-45cd-47b7-b0f5-7ec820eaf419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "47c56486-0d6a-4c52-809c-f6b06cfc83f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53d9fff-ee87-472f-8a80-37f75293aa6e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a10c4b-9118-4522-9860-e166bae74f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693277a9-b178-4d2c-87bd-f79f0ebca795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60afeb4d-fe62-4a5e-ad89-383258b7c196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "275292bb-3a5d-40eb-8a61-a404b313a04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012f16f7-8dba-4643-a142-5f916530635f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d1ae95-07a0-47fc-a0c6-aa41c2478034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c5dc7a-d045-4ab8-b478-c7f8cbc604d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11cbc3a-ff3d-4361-908e-dc7d9c35c5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d07e4e-2291-4b3a-bcb8-3f03ed3352d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93afb5d-3aa4-4ae4-a75f-a2233b62d447",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327f7128-1434-48d3-91eb-3d93262d187f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065fa0f9-a6df-4e7b-bba4-67d700acb829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc99a4c-d61e-47a1-9885-7a625ea9e94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "608efeb1-3127-444e-97dc-d7b0d9092636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d160c853-d7c5-438a-a586-cf3e84bd5cc8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1bc9f2-57e5-433b-848d-1d2d3f37974a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8488b97-7cb2-433c-a976-9a93a18dea3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882ca4b2-a5d7-45d5-a2e6-1deff94f8874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b06e63be-0386-4e3d-8ded-b552557ea741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cedc4c-6700-4e40-99bc-fa6159f46b8b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c4d7a98-1eb8-420c-9edd-9b1dbe3c6c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174a6194-9693-420a-821d-b12fc1607cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce3eba5-8927-4233-ae11-1c42626f85cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "94c1e615-9142-4689-bafc-d35f815c6023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aeaa1d3-b857-4dfc-9621-cf5f0b9c2b19",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb69907-04b0-497a-b21b-5b5a9e59652b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e28a3c-6272-466a-9909-89b91b1efe9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad47a5c-f951-472e-ae75-f7578da28c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84c0054a-4a37-4bf6-b3a6-bd5176f5ff7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a199892-e4c8-4d1f-ad3a-f1b0fc345bf6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fb330f-a418-4fe1-ac35-2f60bfb58705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fba4c2a-bd0d-4028-9e41-728f960590e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178d95fb-701a-4e80-a825-3a6eabf5beb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4283ba7f-00b5-41a1-9ed8-b65b3323f9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccccc93-a281-4ee1-85d2-e83bb56a0f4b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cf573e-b1bf-4787-b899-dcf62be8d107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa55601a-7a12-4581-8648-c199ae748511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfcbd8f-d0a0-4f36-bdac-f396e5b848a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd1a810-2a95-49ff-a5da-70007ee111c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158ebaa3-fed6-4d92-b4b4-40402f5077f0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d5e2ef-7a52-44a1-aaea-9471e8b5affd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba91e1c-cdd3-49d7-ba04-f34001fc3adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8206c119-19ba-4226-ac18-e8c5d2a5d172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a28e7e-006f-4627-a5e5-ba1752f2ca0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07fff07-85c5-424e-b49f-5c40a1dbb1cb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f64471d-9edb-42f8-9258-a664d968fa3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f96c255-f416-4f92-a376-bc44caac4f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618e044e-f6bd-456c-9ed3-59b0618bd342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "636d1002-545b-47ea-8d1c-4efdf2124da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a2cd3a-66a0-4adc-95d9-c924f4b2714a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bbfe50-ce41-4bea-ad09-25c187aeff71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b643eb5-c730-4ac0-9b7e-403e861df7c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284dd812-e6b5-4f1c-ad0a-9f87baafb524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53189c1d-de94-4701-9f45-e03b4ecf2e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd2f129-639f-446d-bc7a-4eb6cbbc7f6c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acc067e-fd39-4a0e-99ca-7013984ec56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4680aefa-56a5-4954-8f7e-c080fc5ebc52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dcd4a6-d888-4ee6-8f11-c623b0515113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e45d30f-54df-42b9-8ef4-3a82e1cd7cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87305c5-78d2-4557-b53b-3159ab297755",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38541818-98d2-4e9c-84e9-a105df79639a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9437fc51-7bb5-4975-92f5-582939ad070e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4785e86-5cf8-40d4-b605-62ccab981a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "581ef038-6558-43e5-942f-8f40160e22f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f001c54c-b4cc-43e0-bab5-5a3c6acdc168",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b0be28-a3a8-4d24-a2fd-c1b08cb75458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aca22ca-8f0e-4cb6-beaf-768cce9358da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488fc4ec-047c-4994-9886-dc798bf7f91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ed688f-2cbb-4661-8ed6-8d394554f5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72289d19-0964-4eb6-8742-5192663c992f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754bcf42-9157-486c-9578-c6d44539e0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e21cef3-7664-4cb4-89e0-e742740871fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1e7690-6caa-4e2c-87f6-8f9e887ab69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca77ec68-93e0-4c39-876b-3e240f2be254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fba645-49ed-456c-a4a5-bd31c479cce5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10efc1af-a9d1-47f1-895c-2a2e5eaf93ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2492f33e-3f8a-4aef-8efa-60a0e861f52a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77285be-ce7b-4c17-bf57-9fdeaf48fb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "684b0ac7-fb14-4bcf-af6e-8750b7f8c89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a40761-ad88-47ff-a0ff-30db96a4e85a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71e2ca2-2f18-4d1b-bf7f-6d0f1b8b8e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6356143-a2dd-408d-beae-c761bf84faca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c10aa77-e251-4848-ae20-4949e4fdc827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c54f4073-3411-48df-9340-4d0590bf48e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f2bd03-0f1f-469c-9ecb-ccf625cb4d23",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3794cd-ceca-46a5-b13f-0d64d7f08be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa775892-f15b-4f64-8903-2f58365c3d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c546bbc5-6e1f-4e19-b969-1a158dfbb8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f793c6a9-98f9-41e2-a647-bac17a360b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4862457-e8a3-4698-b4e5-ee40e32e8d88",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803678a4-7c12-47b1-a688-699e370d69d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95aaf65-d571-463f-b28e-1629510e940b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15164e7-605f-4f07-a5dc-e3f542b6a055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd3e0f5-94cd-4a4d-8777-e56f4a8cc0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60e4459-c857-49e9-95f3-1dc62ad79a2b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3449d218-3b8e-4f3f-a008-411dab536725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79111ec-a2ba-4e97-b2ee-99cc1e55da1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e26944-90bc-4c8e-96cf-96485ace5fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3887b92d-fa97-4869-b6f0-b2b10adc2e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14001db0-75b1-41d0-aab6-5616dbe908b2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976470ac-14af-46fa-a201-401db5ba0225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c0a543-2c25-4744-ac17-9f501a31eb6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4f3441-173d-4e62-8a05-7ccb4557593e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec4c26b-f7be-4b57-aff7-d01fed2645ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018cb472-932c-480c-8e43-d50ae351dc32",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f12023-69c9-4198-a056-073e31d15b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c49868e-3bf3-4336-91a7-a635128b3bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a37885-c651-4b19-9287-b29db00e869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18e2c022-7a8e-4765-8743-4468da53c1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a037bcee-960e-415b-a9b3-a5ab39753110",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783ca817-140a-44e5-ac70-20104f687796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7856c4be-5ea7-4c09-bca7-c28253355660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c56d85-0031-424d-99fa-225f53597b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb590e6-6a34-43c8-a1fe-669a5d3e3b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33bfd85-fbf1-4e1f-a9e0-54e4ba0b181d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec978de7-e1d1-46f4-88b3-91f1cc950197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5897843d-c348-4c01-b5f1-186af84cb9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5d9842-fc29-4791-bc18-d9198d8ddc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c9700b-8534-48b5-8257-ace5254e0718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec268ef1-1616-461d-8e22-9e93ef0a4c28",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "015ad167-7592-4168-bf58-e073daeab262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d580eb04-fb1c-45c2-9827-4a404268081f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad1c3d6-27c8-4bb1-aebd-7aec69eadbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4fc29f-8bbe-49c2-a2e8-5b6f3ecc439f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012cb152-4575-48ab-84f4-ba8996708650",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2897340-7913-4106-9611-e6cba45cb965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff93c55-02f3-4786-aaf4-d9d6b2fbc637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178f7b15-eaee-4ed4-b6e3-b79e240ac214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be26fd6e-24e2-4e88-ab41-ee3343674727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30df6e3-58b2-4fd1-99e3-f5bc35842427",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d404b3-4a2e-4938-97fb-2cce996c3fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64250bc5-236e-4702-b8b3-69721c85b55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4002421a-8736-4f18-aca9-58e8980f8414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3214e5eb-f331-43dd-a921-a7680b1b1ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7134b3e6-7aaa-46b0-bbca-772b9ebf9f76",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8ec2b0-5c88-418d-b675-d82a958472d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6fcc26-f4c9-42dd-b9b8-78973e1b107d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d541902-668d-45a9-ae98-bf4bc9a2d93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b43d8ce-4566-44a0-8fd1-e454dc5dbf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b34a12f-99e8-4efa-978a-24c1ffbb1eb7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346a7ba7-5a9b-4684-8e0b-9bfd36fc2a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a3d14c-04d5-4548-b950-65d8ef324f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345c32b2-e785-4cf3-a63a-e6d613f9f37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd8b5e73-9947-49ca-8e43-30b457b289cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d5a2e8-b6af-4e4e-94bf-8395f4cbc42b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3b144a-e7e2-4680-a671-958b80edb501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7881496c-484f-45ab-a3ef-e0b8f9cf3d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c022f3a7-47d4-4ea9-8432-107b54064ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "894efbaa-6f66-4a7a-81b4-6388fd0b660a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "20c86cb0-0b89-480b-a127-22507252f270",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7855112e-9fc8-4019-8e56-9f4b0a0d100f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb1be42-f741-4acf-ab63-610d9ce30bb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2d43e614-83e5-4f1f-bfcc-1bfd67f9b643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5431f20-6b2a-4972-b9d0-5937f95a8449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4d6a762-f9ad-47a2-9ec0-19e36b0dcd49"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "453863df-d339-442d-b933-459a25a29807",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69d251b2-f3c5-42b4-931b-613a35a046fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e5bd896-81ca-4e0b-a6cc-c644142c62aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15662da7-460a-4e6f-971e-488b82fc261f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bafd5978-026c-4b52-b9ab-d5e50b24cd01",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4129c560-155f-4203-a34f-5738462f7edc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a002d38e-792a-41e2-bde8-05612d40b5c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "feb244da-5874-4dff-92c4-507f71efd743"
            }
          }
        ]
      },
      {
        "id": "a4a3c483-2937-4ee3-97e7-85924f69e28e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "38384628-9efe-4037-b930-90cb1b1a58fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e97a2e6b-b829-4869-9463-751bcf0fcafa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5582b45e-badf-4040-9a02-20536b4076d5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec0985a-4ba0-4a66-804f-fc76c0ef5b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa1e92b-8984-4f31-9e4d-4d8ac343901a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af40d8e-2d63-4488-aa1d-8f1c144c994c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc167d97-9e80-49d4-84fb-f14bab53188e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6ac5e1-a469-4aa5-a924-1c53f1e09586",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75c5417-7578-4b42-9b28-0ded7d71783d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784ab613-6c46-4116-ad86-185a01c5ae59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1a1703-dba2-46e7-bbc0-7b85e7adf697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8276c66-e674-4f98-a354-b674bd48b2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6723b4fd-b04d-450f-a644-78199c1d9a19",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321ddbaf-d1f7-4123-9872-d443f3de5443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe140eb-42ba-45f0-9c06-45451511aba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec756d80-392a-4e5f-aa8d-8fbf4881c7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e51ac4bd-cf85-4dab-a6da-5da98633f562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6d7381-ded0-4ab8-9cf8-3be98118ec24",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b8ac87-c4e4-4cd2-8762-6d2e5e51e83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99377773-e5fe-47c5-a6d8-8672d10fef06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bae810b-cff8-4501-95f3-7633142a232d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "893e46fa-d0fc-41df-8376-edde2d57a849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d5356c-f1f7-4181-9fb6-f3e6327c1f47",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28627b1c-f6d8-4351-99c8-85c1a909a556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb3ef1d-0bb2-44a9-b18a-380be5d6ff03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874b6c3c-c434-4934-9a00-a817ab5a9a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10521835-74de-4eb7-af24-54e2b75a3077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95b0786-84c4-4140-b070-1c500ce312d3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f283796e-5ce7-4173-965c-639cee563489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd423a1-a1bf-466c-afcc-83916af57466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ba89ce-665a-40c1-a5c6-c331c1b98db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "40326a19-c3d7-49d4-9f69-6727dccbc0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5dab0dd-9a96-4340-9cca-563fac99e1af",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6c3404-a631-46ae-bc82-1f1d3d2c500d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7739a7d4-717c-4fa8-8827-d094921e34b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abf4f64-1b38-4c21-acb6-9141953e43ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "19d0f0d4-d3ad-4371-ae27-61c67ffa2984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cca1582-8bc0-4f1d-8e99-ca2527a7bc75",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d6c9eb-ed53-4f6b-8a33-f80aa96c0de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d1d2ac-feed-4d0e-978c-3d5a0a4eaece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0119149b-ee91-42c0-a738-fef699c64c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe9bd6b-c760-42e0-aeb2-131d599c2af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a893a5-d9ee-4317-8b19-4d559275b136",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d13dd6-60a8-441e-8c7a-3758c0392728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f579c0-cb3a-4b46-bafa-b734751718cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2698ca4-d4a8-46fa-8cd3-7e0509175ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7742e8a2-631c-4cc8-9df7-a21714c5d277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3260395-f166-45b0-afea-9b2ce9aef778",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53418d5c-60b5-4ab2-8806-62adba6fa402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d1f508-f88f-468c-bf0e-a66a6a3952d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0b3496-b1d9-4bd3-b8e1-b65f79a16351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02387d56-3904-4a4c-b932-dd87814dfefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b02d39-8b92-4439-87b1-c903ef4b2a6a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7782b643-3157-41e0-8c71-be9be2a3a06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffabdd4-b0d3-4f6c-9fd3-a7c774d521f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5beee6fc-90f2-49c9-8e76-a3d0e2d98647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1a6fb2-eb4f-45c2-a184-5be160364015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc2cd7b-639e-4982-af82-f9d716ebd9ef",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba8ee3d-7498-4985-9878-cebe30d38c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc34a084-91fe-4f71-aca3-ad1a1c105904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a302b938-6466-4d80-be30-c8ab6bea8efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "562c988d-5d85-4cd5-bb5d-18448798c0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44db08fd-5b01-4c0a-9061-f3083fab7e7a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8248aa59-420f-4ac8-bc5f-efe17cbe4bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b1e297-9b67-4c51-b182-4dd911f74b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65361499-1fe2-4840-b2e1-cf5980f8e947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d42a550-8420-4349-af84-2b29fab0c1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda065ee-10dd-44de-868c-daa6aa7ff081",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d209325-22e6-4048-bfb8-3e5e08fdbf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1031dd96-42c1-4d2b-9923-40a4f76802d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886f393a-8fdf-4e25-b56a-598143875d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "78a4076c-8c13-4143-9c69-a1b382fe1b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe73b92-1eaa-433b-aa28-51ae9c79cc19",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e295e34-ddcc-44c8-9167-6c62b7b2966a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c24a5d-d1ba-4c96-b313-4ce2ea53c8e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37708842-e4fd-4ec1-9634-64108f0effbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "141dcd86-35ad-4147-a3dd-64b25f2afa06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f59046e-58bb-4ce1-9003-9bf28de43c49",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e436558-e11b-4c23-b614-51664334110b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5159d64-fb7d-4caf-ae4d-7f234d4cd4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9478b25a-5f38-4544-acd5-eecbc88cca1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "961376e1-e51e-45b9-adca-eb27f5867fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddbe7f8-95ae-41b1-8320-e3c7e9c54f57",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af1ad22-c72f-4507-8d15-f6c055b15ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84cbfaaf-97ee-48d7-9e56-44754ed3aa30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48486de-6c83-48e1-a94f-62ddc795bb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "28813eb6-2fd4-4378-9ed6-b8d6847c3a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8420804e-6da9-41cd-98d3-8aec6bf17a91",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40177b3-f536-46a5-9da0-13506b078984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f527de0-ee93-4365-ac97-7c9ae21c6f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a121d6-0519-40f4-a59c-c475bdde93bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6113c534-bbab-4f2b-853c-768190a3e492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e87d0ff-25f3-45d0-8a3e-9584c6b74f73",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4561824-0039-49e5-a1ad-f0c5257c49bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e0ed40-672f-4f2d-816a-0746077e412a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a29e1c0-25d4-425d-9c85-e10201ed318c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6263bf5b-9c95-4a2e-bb3e-3e4eceefd9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb1c5b8-7732-49c4-9218-da6ad94f0249",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94e998a-277e-4622-be2e-cc93d13219d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3505a9-6ff7-4d0e-894d-4967396e0b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7154dec1-f9cd-42a5-b20a-c7dd0d3a5a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "541e3205-4640-4d72-9865-b0e71727189e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec18df5-52f9-49dc-8277-39566e7f268f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe945a3-d1a6-4c13-8d6e-af70201eade9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144f0b3c-cc60-4201-a648-a8e1185bfd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501b9323-a056-4b1e-a26a-9f052280146b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46c06dbf-7c5e-4a1f-9cfe-0840607a251f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed77ed7c-0a72-4b57-92ff-f982f491ce1d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecf1205-8dde-47d6-86e0-f6a8f1454e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abfc0ec-e548-439a-a059-43cc1a00a3e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e6939e-7fcf-4078-b4fe-af6e0ae36381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40348799-4d88-4fab-9bb0-453ac14572bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d87479-3eb7-4db9-914a-c4c4e0986b2f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c321047-d8db-4467-b6c8-f3a09937ac97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6439b33a-9e59-49f6-b0be-b6c0dbcee08d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c739e830-1f8c-4e67-af65-c0cd553340bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "816bf023-1351-4d39-bc2b-73cc8f2f1ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8af4d0b-9f8b-4f7e-835b-4c626ac5cee0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800074da-3e2a-4397-bcbe-a2f275a498e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "938f80ce-b113-48ea-ab9d-e79f07915fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faec3fc3-9e99-467d-b33c-35fae4856d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d60766b9-f14a-42cf-bcd1-eca82abafb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807ab86a-4c4e-4d5b-9168-d88220d4e44f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6cf984-00a4-49ee-9926-31dcd58d7a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52953d5-ef91-44b0-a598-bf26f46f5d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd4391f-02fd-43bb-8d5d-891ba8f2ef1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0117eb6f-3ca9-4c43-9fc6-a7c42fd97f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485d1c87-1472-46b0-ba0c-676996043336",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14015550-6dcb-4a8b-8a2c-ecef2a7981cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b54ffc-1a8d-48ac-9dd0-cf935508d8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff46dc9-226d-455d-8943-5d4c3446b039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1648e40b-0600-4918-b98e-758574b8eb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab90d92a-39fd-4d26-8659-ba6ce2ecf2f2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae078ded-7a26-4a97-8408-c7dd96a2915d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e938537-a62c-48ef-94a3-c1cc65f7026a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de644900-101b-42da-9dd7-97e3f7d7f27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ae5fc3-76cd-48b1-b5bc-c88689178335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473d78b3-7234-485c-8390-3ce6f97a4f09",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c12d66-faab-4cf5-bf8b-9dd59b61d874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49cd7a4-a3e9-4955-b7f6-c86d254a7466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0f0f2c-c419-4341-b851-2a94d6078773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0c82aa-fd40-4640-b9ab-c06feb553438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a76045e-f0a1-4dbd-8734-6c600c104fc2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb4f686-3778-49a0-89b5-9305fbd72d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6177554-b705-4350-accc-a1142fd81632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9a80ea-7967-41d0-9afd-80fa3f63ac58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eb977ed-7d9c-4c16-8a6a-a6b8a54c3e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcac17ff-50dc-4602-9ba3-14035c4b4720",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b08768-57ee-4b9e-ba94-5d1cd8b1b1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93d18de-70fc-4ce4-aab5-215298ae0ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6730f9-5296-48e6-ad48-78742e3b5731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b495e700-5e00-4635-9b0f-1c37c7ff9879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3f865d-7fc9-4c15-a47c-c4ac6e145815",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1091e6ed-6380-4eeb-8779-b68da5c0560b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50706707-7216-4649-be48-1f994e263918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f8bb2a-f2d3-4bac-b616-5ec7685ed528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62d2defb-313d-4e46-9f22-147e17c15919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163fcd05-3949-450f-9400-1bbeac804193",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415b4a84-a265-49d9-ac43-9192e0f86c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f76589d-ff60-493f-8049-88f92f0f7374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e30dece-6844-40cf-be5e-42b8ca48abc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a77916-034a-407b-87da-1553187d24de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487a863d-786b-478d-8175-912a846ac39f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3d7e44-a3ae-4358-afdf-2bfee207775c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566a05f3-6e2b-4d46-9306-c7bd0510150f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987adda6-9ac0-471c-ab63-135da9f5f0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc2ddfa-2c93-4af6-9559-05156967127f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f0e835-c453-47b5-81d9-7a325649a8e1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e2867f-4eef-4ace-80f7-e4caf481d43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19cec3dd-e7e2-4343-8da0-c09692adeb72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b0aa0e-963a-4279-95f2-e0d9f24dc66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06097538-3b19-4adf-b21e-2d80c22715fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb347bc-fab5-4dea-9eb2-483b9e4aac89",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea379b69-8159-4929-aaae-6bc4d91c50f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472e49c8-ba55-4bfe-aae4-c1cd3575b004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1645eb26-1f61-47cd-adae-d519776a494a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f58477c-6647-4803-b85c-4e9ff5e75b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c0c458-79b3-428b-81cf-24e2c44a8cbb",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc44997-eea1-40c9-9ade-2dc0fe7155f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ce03d9-8a35-4f87-924b-adea26b5b3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf8bc2d-0e34-47bd-91c5-d076ccc33770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3977a0ce-d446-46be-8789-253473249a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53faa11-ed9f-4700-8085-44b63b88d12f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372f9ae8-b203-47a9-9733-fb92c70c6bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0119e70c-9f9d-4ca9-9181-0c3f3c24030f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad7c8b5-d197-4c5d-9e42-c6c820b75c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc26908a-a286-41a4-b74f-c0f019950223"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e5cc1db2-7773-4763-aa5f-76eb8849c669",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95c03e3a-e811-489b-bf4b-621ccba7bb3a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1260ddf2-d840-46d3-9ac2-104ef05fa9ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "75f8e68e-559f-46d4-bc00-5952fb2933ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f5e685-6a3f-4d62-a5cb-f15187335687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbaf978f-0346-4fec-b106-0f46e983fdf6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08c48c7c-ba53-4d74-ba94-196d3b332eff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1079279f-411b-43f5-b16e-24474364ba29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cb777c5-4669-480e-b1be-ccdc0c2b7e8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94d9bdec-8b18-4d70-8888-447bb13e825d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d0c7b5b-4a0c-46ca-a45f-4a504c9421bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "281f3fa1-ea34-40d0-a8ee-bd03f35b7a48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb62d4bf-ecf8-408c-973d-d52aab4dea17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb9317d6-c4b7-4e8f-a74f-a20dd66ce8b8"
            }
          }
        ]
      },
      {
        "id": "7f5d76ce-97b9-4241-b2d9-53f7f29230bb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2699eb8c-7b1f-4889-8ade-2189b3da832d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "889d59cf-b2c8-4789-8e87-bc0764ed41dc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe70c3fb-a894-4850-877c-aa1eb6145c44",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb35267e-dcb5-43c7-a142-ddf77945b64c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae7f5ed-98a8-4ba5-b910-78daf0ebb332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422acc2b-8f5e-46dc-ac70-b68f9dbb18ad",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f18f67-7568-41eb-9beb-3eeb1557625a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a42cd14-4b98-483c-8683-4c2d09efffd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd94c26a-60ad-4db4-a3e5-52ef4e05a589",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f693148a-7a2c-410a-bb30-6c685e9a4e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf6c924-5ba0-4bb6-aef7-e01805467c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e036b8c-311d-4e41-94e7-ba3015dcedf3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d9e150-da43-44ae-af43-9a9f35c1a00e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebb64ed-49f5-4ead-995b-a5daefc2249a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d25d0e-10cc-4577-bcad-62342fd5580f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e209f5-f60c-425a-9d0d-a0d0cb52f0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3162a2b8-3502-4fdd-a0b4-7f7f1a699968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f37a6ec-4621-464d-9032-fc89e9753cc7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d898851-bd90-44c8-b041-cea361de4cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5cdb332-da41-41db-a3b8-2c0c2ceefd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c792dc9-f1c2-498e-b1ef-49b759b77adc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc846430-adcf-4c7c-bf9a-5402c1c7e430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0fb74b3-121a-4375-9caf-0cf3f0748347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65f9e0d-7101-417c-b71b-51cdd947e6f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867c2fde-cf58-4d14-9a91-03c4694cf4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0165eb9-ea28-419c-8b42-6714e9d3a386",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16eb43a8-1c72-4567-9467-e895bf8df9d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44e2cbe-0e89-4f8f-8533-9af8c4f435a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd61ffe-834b-4c6e-bbab-d11a238354b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7e92ec-7a0f-4012-88aa-ad8666afb7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7e9d52-7d14-4330-a001-2d0b0fd4377f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd94d35-73f5-4d5a-8729-c33ca78ec865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbfd33f3-6daf-47ea-9202-3eb83667aabc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5642a45a-31bb-4092-8fda-9bec1b490658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c6e60d-0963-42f4-81d6-a3de16ad9674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bed6ab9-29fe-43d1-a9aa-d2ca07db6553",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26f4d84-5ce3-4065-a7a7-98322ef499e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14be8a8f-c87f-42b4-9a24-b7533a64cd57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30631a0-5c3d-4dbc-ba2c-9e0ca08b4576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5a3d06-ebe0-415b-ba70-c2d70709bf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c83ec59-c36a-4e8b-bda9-e70867e63fdb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f917aff-8205-4578-94b4-8666702b22b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd7dc230-3b6d-432a-a952-940b8d37e2ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e549a0-9622-458f-b946-3c396e307bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09757b3d-b865-4255-bdcf-4c793abffd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ca2624-27c0-4e38-9270-fbbfc26c32a1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9102caf8-125b-448f-bee2-88f46134940d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9be39e-07c9-4773-8501-2781d71218bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa509ca7-0e7b-40d9-91ae-ae8e70e163d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a571f9ac-6c37-484c-bc9f-6bfb1edecf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fcbb2df-bfbf-4c24-8a4d-a70681575d52",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6837875d-ae02-46ab-b251-49e1400debd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17207914-3062-4680-b8ea-03982dad88a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec17b88-8e50-4b14-8b5c-a3bde2f80054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0bd5fd7-6cc3-4491-8cf5-2e8851e69f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7e7f07-1567-4a28-b23e-62fcf938bc2e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dc060a-c8ed-4ac1-8831-67abf966b6ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae950d40-566e-4c3e-8cb8-5f3f35d87478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bc66c6-e1b4-49a9-a93b-08df22aa111f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21569aa9-c9c3-4b6a-955c-63726ac4ee49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb09b04-4e3b-4085-992b-9a4fae2b410b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8875874d-a326-458c-8a6c-e316b3b0721d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d43d8b44-e994-4478-a2ee-b081b59b817a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba14424b-123e-42f5-a434-8334822c9141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ae3536-0a94-447b-9480-aa30a7a7e0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c924f11-9cc0-4448-b3f9-e9451ae3d3c3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48464c8b-4d5b-43da-8f3f-7b19e65ef49e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2fa9f40-14de-405f-a2df-00a5796bfc20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9339b07-f3fb-477a-85fb-4b41b49bdaf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a783ff4a-7048-44ac-ae69-7d6791d99d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8709c7-7bdb-4d20-a22e-4d49dec834a0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f75a0eb-224b-40f2-a4c6-9cf449e0d7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d40cdb-f4d2-4efc-82ff-2b5bdf9e5f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f9cd00-0d1b-433d-b660-15b468b1a8b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4015ec-e943-4e3d-acab-49778f4624d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c26f061-6203-43e2-a754-d501a57cd2ba",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7913d13-9ae9-4a24-9252-53ac302cdb86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a9aa19-1aee-4f46-bfab-a1a500ec64fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7ed5b9-f80f-43bc-bca2-3f19879e4ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361aa6bf-23ae-4c54-991f-dbddb6fff883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c334e60c-5da7-417e-8ad0-0ab951b9e8c2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c35f25-296f-40af-a994-92bba0253fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed4261a-a600-4b33-b559-988ccbb8da22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b734e1-ad8d-485e-a7cc-9bc7278de800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53e62b0-9df4-4daf-8787-ac23340269bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a43255-b322-49fc-a0ca-c41ba30dc4db",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e4b819-a9f2-4900-9801-2a875fba9555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9165db0f-0881-4f3b-88c1-bcc2b0606f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48582ec-2473-44df-9d49-d49875d081f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c627ad6f-3071-4e24-9ec6-b9b3e7e505cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0ca6dc-e3a6-4e57-97c8-d97dd6f84b19",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ee500d-9982-467f-8c18-e2aceffaffb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2eb02a9-a0fd-4576-a29b-4f52888e9513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3528324-e1e5-4644-9327-ac490dddcd99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4723d4-4b60-4708-9e91-b8e6227163c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d637aaca-04c4-41df-9c94-bc7f3c85697d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781177e0-2ab1-42be-a83e-83158b7445c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4723e345-b1ca-4d32-b892-5085216f76c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f860f110-090b-43d4-822e-6d764ba7199d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f39a12-87a6-42e1-9729-a8366c6d0647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9adf65-8f12-4002-8377-a34f997c7b8e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198f00c0-0ed0-48eb-9a59-b12d6057521c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0baa4ff-27bd-4e1a-889e-7e5405879c23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469497c2-9f58-4dd6-b950-dbed1a8015ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79853f2-e37a-4fea-a1a2-733cf8c691cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dc24d4-dda2-4851-ab59-8962b10c0619",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991f9615-05e7-4e19-ac95-c6f574b5d096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe7fc0a2-7e1d-44a7-8917-aed132c9ae9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50482017-a2f1-4f7e-b052-103190478d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca830c35-62eb-45ff-9051-fa988c20259c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35796fe2-e502-4bf1-8a25-08f607ddf335",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a45983-b575-4d69-ac84-b0b5a85b6277",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f7aaa36-c533-4d7e-b59c-fa32db209bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee9d98b-94f2-4604-a106-56386f94b728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31bfa29a-bdd3-40a6-9d0b-62c8719859cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359ff483-3a37-477c-969e-4e6db96e5c59",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f424a1c-1355-4e84-8664-c13c64308bda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "902787fb-67c1-4bf1-a854-a5d9548619b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b0f28f-7fe8-415a-a922-5cc9adcdc114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4364e368-c53a-48ad-99b1-7a57995b7f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15d7182-0e2a-46bc-acaf-f211d4a42557",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15673f2b-148f-4227-ad5b-39a6876c2609",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48005bac-c8ea-4080-9e65-fd95b3372fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b5e953-e56b-4f79-8f00-096fdfe6d375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71b09e1-cc76-4faf-b7d3-3ee34620b81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8102606-71af-438e-afb3-ba92197e82a9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fd92e9-123b-432c-a2f1-b63a34c9b6b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a351f069-2116-4b4c-b701-77c23734376a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "581cdab9-e1ff-4661-9362-6bd8f570bf93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bed61c6-dfd9-4264-bae4-12fa199ddcd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b62ed4c-779b-48cf-bb75-937bc906d224",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed18748-c3b4-4d5a-979a-3e52c7fe96b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13395a27-4172-4d09-a187-8d543ee5ea94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d74cbe9-5462-4e21-9552-72f822f8b854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328eeea2-5dd7-4787-8eeb-31a7d4cf3af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc20da2c-67b0-4952-8748-f79fb8c87459",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992309a8-9c4b-4920-9fa3-437561681a8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48da3ac4-b9c0-400b-a7e8-bab274e1611e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29259445-8303-463b-b95a-37f495c17964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d4847bf-a681-4d3d-92b5-49b01d68016f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14f1391-5ff2-4231-a98c-5eb544d01157",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207d8582-4da8-437c-bad1-afaf34dd7e4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b67aa7c-35fa-43e4-b2c4-e1adc258e715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82479dcc-c383-4c1c-94d2-9196b67af4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "534e849e-7c8b-4592-b869-56c01337e01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e3774f-5f51-4105-9f8a-5a7e8d848eab",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ac290a-1291-49f7-a1ce-bd28561df272",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a900006-1e2f-4e46-985b-81919c90c278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0933542b-7dcc-4640-b959-3cfae0bebffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2044479-4b67-418f-83df-938e985161dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c245aed5-337d-422b-b876-26adc9ad3ebe",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d390226-a6bd-4b1e-a7ac-6c1f5f13e04d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e26704cb-5ba9-4c4f-b4e8-7373d44f6b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fdda30-3fd7-4b33-a87e-0fd8caa5fe58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751e4cf4-222f-4043-9328-83c8e53b0c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6000ca-f801-41ab-8416-c29f5ea0b138",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c2a366-519a-478d-bb28-9e094364e4e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c110cf8-6e54-4d46-953d-eec8421f4dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49c9a49-b1f2-457f-8a15-d2fb613ec854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0638fbdf-e813-4ebc-9c0b-23ae6dfc6c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4737d34-3039-4f18-a47c-a35cfce8b68a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be95006-4f1c-455c-8aac-d2871c38601b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709bda66-1e6e-4171-8af5-7a451f22c1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdee2091-4270-4a1b-9453-bb7b572cdb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efaf18d2-32f2-49ff-89e4-19c9a96ac38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0071e776-c6a3-4e02-9bfe-edfd2d551f4b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313b1100-d40b-4a5b-a546-bf8875311304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c34cf57-62b6-4127-960c-2f6bfb47785f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8cd173-d296-452b-b5af-61afbc471f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abc58c2-e077-415b-879b-477d7d7b101c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e6ba19-b334-4c07-abb9-ffeacbe17b56",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1181b1eb-3bf4-4826-ba59-42a6187b6d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7c4f77-69b6-4ca2-bb0a-cb618305770c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03eeafdc-bcee-40e4-8ac7-2f11ccd3dd01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afbb745c-9cb9-47dd-8de0-4a0f6bdbcbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e343603c-7b1e-4e60-a9fe-d3f87492ea13",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2d5296-b285-422b-961f-5c4044c50383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e99f76-6f0a-4d6f-a802-f1d54e37be13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "649fd247-39a7-4af6-8af6-fdd19f49449c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83619e95-4f6a-4ec4-92fc-e013b48ae4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cb90c2-89d9-4599-930a-0f1e65194544",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60bb654-5847-4430-94ab-9989f37a8a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e78a62-d1bf-4d1b-9b62-d35c2943370b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9d5007-ed46-40b2-b05f-b2f0b802bdff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885bed39-8a02-4fbc-b478-b60db342aac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f86855-0af7-44e1-98c1-52537ce880f3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2bb101-d422-4be3-91ce-a67f68b9c0a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfa4a1e-32cb-4ed1-a20a-a42cd9914430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe6469e-0146-49d7-b2fd-06e0566e539b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45695bb1-74cf-4bce-82e5-0405765ecd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61940a63-81a2-438c-b85a-204cb5cad863",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145f147f-484b-40ba-8f85-943f969f7898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3105dd97-71cf-4748-8c1c-b19d601fc49e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8308ef1-ed63-414f-af2e-6ec36181bb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ef473d-0854-4bec-acc8-ed24c9e61b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94900ed-3e16-4a70-9d6e-fa590de74ee1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5409e20c-ad67-4223-b905-081916efcedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e11fc75-b9f4-4fb5-a98b-2a75264402d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931fb358-b89e-4277-a309-07bfcbc086c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d606c511-b8bf-4092-a1ae-af1a1435be71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45451150-b18d-4dff-89ba-64abad3107ea",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9938cab-a971-4a38-8ea9-e7154c841990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7889599-f014-46e3-9592-3a8198656bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21be848b-ebf5-47d6-b70c-82da0d0b6b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a9bc7b-4b9f-4fa4-bd50-f0811c3c1770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57df932f-ec5e-41c3-b6ed-a26743f0fa45",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3dc6cd-90ec-403f-9034-6a6bced31813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cfb0b2d-0f5d-49df-ae6c-ee7a2721fe05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39391da9-b48f-4ee0-91ad-e8eae97958d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f25ead6-2de8-4aae-aec9-3e05a07895c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7636ce5d-ed8a-4be6-bf28-7d9410f64672",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9f5dc5-c4b6-4cdf-b927-1a68d81b0cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d286f711-db48-481e-aed1-ca8201c10281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d9bd36-1258-426b-9bf4-236c1c15afb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f45bdd-9ae3-464d-90a6-ff01cea45c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5e6817-eee8-4135-866e-76ad68f6b2e0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36150a89-2a9e-43a5-8456-018bc89d70af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68eef30-3949-4e40-8d31-6097299214c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b630737f-62b9-4fbe-b8ad-ce1679291298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97df198-56fc-40df-ba55-601b9093e400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00439a9-0959-4766-85d0-caaf7e1e573d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c4cf6e-1da3-4f91-a98c-775796f90f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1abe6b00-9a9a-4945-9ed7-7de96c2027ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "016c18c1-1568-4735-b55a-f376187aea8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a0a92e-cbc6-4e5e-8829-1ed7e234dd18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2432f927-cf0f-4b30-b628-b3156424b3ed",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6d60b5-ce5f-4bea-ae78-30b3c5ac8f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23c0f84-848d-4551-9d7f-83ce1cf0323b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cb39c9-0722-4143-8429-8cd0c737ece9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d850c9-9c4a-4bab-b7e8-7ea895fca723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9a68ed-4bca-462e-aa63-a1fab82815f2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a227fe89-ac41-47c1-a57b-ab0fb21e2a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd1adfa-879c-4b3b-ab51-957ef13365b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47ab56d-ca60-4c13-97b1-b031577ef7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42fab4b5-113c-4642-9676-180befbd0c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84683023-3882-44f3-94eb-244d7b745c04",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd56a52-e54d-411c-9772-aee0d4845c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f155f6b2-6213-4703-b99d-2cd565d69eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f11f598-01b0-4abe-bdcb-167837072281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e651b4ae-000d-42c5-bff9-a11ef7d2f415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a6d45c-5559-4252-90f6-2f87145e992e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3da5ec2-8d7d-4e8d-8b08-e5bbda88b271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a59da8-054d-4272-a0cd-6dff1e9f1757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deae0745-2b38-4825-bf8d-e72a4975e6ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db79df4-672b-47bd-8920-1c08f245fa0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c023606-6e72-4d3c-aa59-259ea3af35b7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74ddb97-561f-48a4-b536-2db1e551c6ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8daffc-f5fa-4094-8da0-e4775968cd38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd34d485-101d-4257-b8a9-d5175b71581e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523736e5-4cbc-45a0-b137-27c3f252cf75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f68c8fb-ff92-43b3-8c8a-293e8fb43c9d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16464d2e-8e16-4d90-84de-53d3e1c0065b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02b58f6-71cd-435b-8341-6e37cdfa45d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba54a68-f70e-4b51-abb5-7c99ecac7475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4225ea94-efee-4be1-8696-28220bebbb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fde742-cdc7-49f6-a7d3-4bf9541e2c8d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f310082b-aab3-42f1-b7ec-ee58beb2e6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c972b2-5081-487e-92e6-aecdf7910339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae99dfc-fb7b-45c4-a66c-a0232ae361b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e6ad0f-8029-4ed3-a400-1cf38df8102b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df836f15-e7ce-410f-be8a-630cffcf767d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048cdaa4-b61a-4f86-8233-c2d24fce68be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce770fd4-3e04-403c-b452-0d7691cac619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7246db6-4a05-4c44-9b59-4fff008cd28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecdd63d2-22f1-470a-bd32-d351f49725b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decc58be-252e-4be9-9804-a69648cee9ec",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003403cc-09d2-4326-9bcf-b6c822ad84ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aeb1aa9-63c9-40ea-95b6-e4688a69fedf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d651fd-965a-43d3-a681-23d32a46fa7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e5414c-d4f1-4dc4-a0a4-734876406e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87325249-75c5-4084-8438-325765054a66",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ead8aa4-0276-4009-85a1-f2057b43d32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68577d0-a489-455c-a672-764a0df85a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8af39c4-06c6-4efe-aa88-d0b907c35330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ede689e-41f1-422e-b5fe-5d23a8a94c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd2e515-eb7e-4201-acc3-13f35acd8b55",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29bc0c8-fc6d-444f-83e8-3afca8ae5c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69834171-4f37-45ac-99e4-a86690f2838d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e00c66a-ad01-4ca6-a6be-52e60def9b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf883146-c509-462f-8e19-e9345ee03d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16fcea3-b907-493a-83b0-05aa5574abe9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b58d1a-bacc-4167-92fc-e862da868271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b7860d-9778-458c-b297-894f77a26c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f8949c-89eb-4322-a38b-f2da2505438d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af48883a-2ee2-4c87-984e-38b6ed284567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfd3cfc-0204-4b3b-85b8-41faa1512f74",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68208b67-5de9-4ce1-9e03-4882573f36b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ce4fe4-8c7a-499b-9a2e-ea7dab9c6d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "464867a2-0323-46eb-ae28-18767475605d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc21879-896a-4d78-a5b9-b0bcc1e39d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12319f99-fb9a-4ad7-a84a-9c73140d8abd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046b0d4a-88e9-4ae7-a437-b317dd57c79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140e9413-4b6d-479f-8550-4a4fba5ab2a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bed471a-e62e-423e-814a-f5860d8110f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1000395c-987a-4554-99bf-19141ea3ecdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba3fe5b-c736-4fa0-9ed3-c436d7157b17",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f277e2ba-fe3b-4d2c-a29e-0c4945d1cc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74df74c7-db8f-41ca-a39b-377fa7b8063a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abffe56e-a921-4264-8f77-4510038abaf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8594e9e-c157-43c4-8e37-1951f4151b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6302953-b7a0-4fa9-a8fa-4cc9214da1f7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7beae257-1e0b-47b1-9291-8545b557e104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea23ebc2-9ae5-4529-8403-eacc5eef8df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5734829-9156-46b4-8211-45b34ae843f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b07874c-0271-4417-9b05-9a201046b64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64de8d48-9bc3-4633-91c5-96c0885d96ef",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722b8051-946d-4feb-bfef-29325522cabf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f85009a-3512-4fe1-befb-fc58f6bdb741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b918aba-246e-4d65-adcf-15028ce150b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8131d34a-4d49-4f49-96ee-fad474685d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe919709-6e31-4a16-9339-de8995155000",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7aee53-0063-4c93-bbbb-74ad72ca6357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce460a39-0840-4c01-a71f-58ac1419e00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3daeb31-1d20-4f93-b36a-c08c93c88394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4daa769b-ebc1-40a5-82aa-0e7c8c657d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c215419-2c82-434a-8710-859e1678b25e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b10cd49-2294-4589-a17e-10098d025352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccdf4da1-1b97-4867-899f-384e436c1693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b1010d-5ae4-4c3f-9815-0cc6e39c822d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7181a5dc-c3ba-4a1c-9bf5-fbc182094afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d952be34-a10a-4ed8-99ca-a352aefe844d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5e6f90-6e71-4afa-baa7-0ffa92f1dc41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8636a54b-1b2f-488c-8c53-02c2eff22c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "034840e4-f5df-4817-8576-7bd5188704f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbc1c29-a88b-4cec-ad66-b6be3dc5ccd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd84f73b-d3e5-4e9e-9864-fb128465a563",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba41d596-79c2-4d1e-aace-44d3f738e713",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "961e5542-a240-4be4-826e-b98cdaad2c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcb80b2-cc0c-442d-a552-9b686df9f99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb5b06f-71bc-4982-ba93-4f670e0e12ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21aa51b5-790d-4ac7-abe0-258b2127888c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91de7cf1-dd66-406d-aefe-d4905c022fcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dc9aa17-50bf-435c-b93a-ab8ae0dd1191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e2b812-dcc0-4c77-b44e-50693bc79076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df77a44-405f-4d37-b4eb-aea83bcd5de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef85d47-2c61-4f9b-ad22-817090b5fd3e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9f2b2e-2018-4377-97d4-685dc19591b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8056caf7-4b53-4cfe-96a5-7cf59b6baced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fd8c42-ef19-4d9d-b20a-683fe8a1bb50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b076971-8a33-42df-ae1e-b6bee8f15e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b20c75-c893-4419-a03f-3667d4cd81ea",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8def2d8d-f30d-4c42-b360-8e21cd92bbcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cdb50eb-0a3f-479e-a8b1-833a26c5746f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46723bb1-cdcb-4c5a-bc69-690e7021a5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd40524-067b-487c-9075-980f06a6a9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f183dcea-75a8-4acd-903a-81a6603eef59",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c058c185-accd-43ca-a2b9-a7b75762e666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4e51853-8c3b-4224-94ce-0ee948b0e34b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ba0552-2f3c-40b6-9794-b7b823c022d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a30c0154-fbba-4360-a9c0-cabb5619fb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae835a4-c35e-422f-9212-3f3e19b7bc20",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31dc4e6-98f4-4b22-985e-c50e2bfb35ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7571cccc-7d26-4259-9e60-6ca646df7ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54547df3-3c51-4c6a-8dd1-9c48c24dba2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a50d974-6a44-4636-8eb4-2a906107d974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6dce464-3419-41de-a393-bf0295f9ddf8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8155d9e6-7af3-4508-935e-0566e9cd7147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c65bce0c-620c-4834-837e-5e3eb952f187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4524723-bec1-479d-bf8e-505160ea4b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2959f801-677a-4042-93a6-2d33964be685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd61711-68eb-490d-a272-0a9349466662",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5c5100-5ffb-430a-a867-ff72cb86fb7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22070b58-b5db-4620-851a-5f4fa7deee29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0abd204-28e2-4221-a9ee-a97a4a28262f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526a390b-601a-4c6c-abbf-8531a3f056a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e646c48-fb6d-42f4-837c-9cb732298603",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbada43-bd49-4556-bee7-4102db725220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a93e811c-bee0-4a3e-841b-66dd2dfeb1ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e79639-6372-4138-b03b-d751ed8b311e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b4c5d7-2516-4e70-ac5e-dcc74f263a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4705530-e3f6-4ff8-b484-1015005c92db",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155f5bcf-490d-482b-8060-21f57dc20c3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "209fb927-db48-4c05-b684-79903e5340d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605124f3-ed38-4cad-ace8-0d958ed16c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f8627d-815f-4230-babb-4f49f5d8659a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2200396-0f04-4869-abb3-9cf362478e3d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f5e2c3-65ce-41f5-9701-0256ff8f04ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6faea89d-b77c-4964-a0a9-db2df7d5e4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd5cba9-d5a8-40ac-904d-160cc8b4c62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba43017-eaaa-492b-991a-645b6c281ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b7a346-ad2e-4b14-9b3c-a5e14320a07c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1043c1c3-2121-41c5-ad6f-37baa08a0baf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16982649-3baf-4625-996a-000d12a65326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a6970b-e45b-4251-8e37-cbe62039bdd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc307de-bc3c-4b28-963f-75922225a726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba7e6c5-55a6-4a69-b9c3-edbd71b41fa3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8169275-5a7f-40db-b8a6-5a59c95e413d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3587248-db8f-4d4f-b117-c6d9bcd06718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "474d6ba7-716b-406e-a67a-b0e336b39942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069e5091-12aa-46c3-ae25-fefa8fa7deb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac38520-2369-429a-8be6-b156a560477d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27540d7c-e2da-4afd-b866-c41f65e38dd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f810fd3a-8c50-40be-a109-eed939fe4145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "392416bc-4241-4121-9942-63b41ec12cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728a093a-c18f-43f2-8d01-3bbf03d9631b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd16d2a1-1d61-4f26-83b7-6a58716de2e3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c122d78-6b12-4211-a7cc-2a0bb53138f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "698a759a-0e9e-4f3e-a3fb-3d592329b8e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f15924-73f8-4d92-b61d-d0877a196c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1f6875-7fe5-45ab-aee9-7f664510e813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d768eb1f-4393-4a20-9573-4df5f955f088",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e188ec82-d206-4342-8a55-bb464b69a830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc8af9d3-98b7-4653-bc41-ef30a7e27805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85941737-ca78-4f10-827d-72e7e8ebd116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff96002-b9c2-48fb-b38a-6b2598e962ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f57aa2-94b6-4e58-8358-05648a8230a3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddd2a0a-2505-470b-9f29-2e7bc262ffab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fa5880a-cbe0-4654-a12a-1bc0df429e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6e4086-2535-4477-87d3-af1d5d475619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29979eff-3761-4c9e-88e8-0f28ddd65ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8241a689-28d5-4228-a97f-5370d51ddc86",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0c1996-385c-4f4d-a675-4a4f92f17559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c97efa0-ea6a-4ade-86e3-7d6f35fc296d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89c5d2d-58c4-4e58-b40c-da7367021b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9090b84c-5625-4087-bc34-e591fe7a4284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0045e9cf-f41a-42e6-bd07-3cfb13ba8789",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb701280-0615-4bcf-aad6-17ae935c714f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72b83da9-5c98-4cec-b975-de59bffca8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8b057a-9ef6-4390-add6-a6fbcae42917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f81d08b2-3277-4f5a-86e1-122722d00d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0184f9-e2ed-44ff-850d-43796890d60b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e63d2f8-86f2-4b14-a730-760b7cc7a7ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43071460-66aa-4aed-a960-8a95ed0d9002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5e9f3c-d84e-4cea-bf70-535ec9a26362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b965be5-b88a-4613-bbe2-9bf78d88b16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653abc34-6f1f-4449-a3af-c93df5ddba23",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6fd55a-fcd0-4dfe-b542-909d82a669fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d37263cf-33d6-4766-854d-1788d60fdda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9912e09e-d781-4f5c-9671-48491d0b1ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c014d50-02ca-4f5e-9036-9866868aabd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb563d0-1867-4fde-a6fc-4da97c8509a2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374e987b-f310-418d-a262-e8ad5f5cb530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf1e091-28ba-4db9-a7a1-dfcba3697ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00e60cc-5574-407f-bea2-5d93a0914e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620a644f-4d87-4a89-a14a-9b37a943cea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e96afb-c972-4a83-9cea-7ac9d4b5f054",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4f6808-1566-41b4-9274-8101410346dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3215bd6a-03b8-4198-876d-48d72b2ae468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6432fd71-65a4-4917-9dc9-4a4b3b5528e4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809b67e4-c272-40d7-9355-da56bebe8995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532048c7-af19-42e5-a8d8-e6ea47b0161b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6597b4e-212b-453f-a7f3-f93bfe0d5045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edb291c9-c835-44bf-967e-3e47cf83b064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d2233b-b064-4213-9ffc-427f6b1af9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67524c4-b6fc-4f23-929e-fd140bfecd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e6ec18-8212-4e48-9100-db0f98d544df",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2674aa-f84a-448e-860f-92e9a70ca8ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe0c13bd-e60f-4aab-a916-9caf19f97377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf96d87-2f6b-4b24-95c3-fa3327e9ee7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ad2b88-5962-470b-94c9-605126a93c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaad23a-2bba-4fbb-b16c-9d7996a8752e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf1c5e3-cf20-4a0d-846d-4befe3a5f0a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "455ab9b7-37a1-40ca-a6ae-4a9fc521e639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1749a126-013b-429c-8668-4ed223921fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe11f59-3027-4570-8cb5-8d38e7b0cc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3965a860-1905-4d24-b717-da3051f88f37",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1d077d-ba35-4a1d-9507-4b06bd153bfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d1426d6-c422-4d91-a628-a758e67c4087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48238f2-1363-4d77-a0cc-c7f955fe9eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed78c44f-3a39-4b4c-b75c-a3af667cf9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddf15ad-ae7d-4341-87f2-ad1fb57c1eee",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce591c2-ada8-488d-8200-ff255b1e3fc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b4f92cf-6c68-4734-95f2-2752695a6e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b83de55-0258-4597-9470-4f2e25cf7da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f27751d-82a7-4c9e-a756-73df4deebca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799f01de-f38c-4591-af1a-50fe219e6378",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33d12f7-ae44-4033-99f2-6843dec68561",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e656533-7681-4088-a950-09b6f5dc16c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dd947e-574f-4c4e-8244-40fce86af1e4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34d5660-96a0-458d-8d2c-d0176cedfd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fa31ac-06fc-4bd5-9864-54f45526547f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e83bcf-4db4-4022-b765-9506e404cd78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9956bb6-cb0e-4cca-86f8-8a804ce543d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e81f09a-b9d8-4f6d-9af6-4a5553a2364f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756a38e1-5c6b-464d-9593-d7223164bb01"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd40bd8e-0cd5-40c4-9f1e-e3f6d3ccd3a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9025411-778d-4d03-8bc3-53356b787e50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7431bd8a-435d-46cd-9c2b-3973c6165a35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb03adf8-6095-4b94-b7a5-7154befc9ff2"
                    }
                  }
                ]
              },
              {
                "id": "9b6ef532-7811-4938-8985-bc9f835040bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b47db9f9-44be-49ba-ac3c-8720ceb4ab46",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c67847e-18f3-4002-b7d4-7f92ec8182f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "81d55f92-a9a0-46f3-b262-9fa8e02965fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afc38ce-b8b2-4c1e-8b66-e0f17a9bc937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b9f0590-5f3f-4fa1-a4ea-4e0273a5bd86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8286891-d8ae-45a8-a921-9040617be861",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "122a9e98-70b5-4cba-88c1-a53fd2511b8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92aada20-75ee-4907-a212-5eba759c5ef5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2ab2942-2662-4e93-881b-24c927924904"
                    }
                  }
                ]
              },
              {
                "id": "f8b9196a-d7dd-4434-ae66-2f0035639a96",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "efd6b006-591c-4cc8-a296-931cb89ccca0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3f2e7c-9608-48dd-8132-ff9a7a0d4034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "01fd9c9e-8f44-4c23-bb08-5d4576512634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b13b0b5-d8f5-4c3f-9b98-182542b39fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc79a92-2001-4033-be09-3d3477d89e20"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e1b062e6-b686-4708-a555-e4e9cc383c4e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "10494d8a-c759-45b5-953a-0cf44405288e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a230e63f-a7ca-4cbc-a132-91aa0520d922",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cc550e5b-034e-4d1a-b260-93cb76281808"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a347e2af-08cd-48df-84ad-dc6e2c983ad0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d93aa77-3ea0-43fb-9434-d5e429d737ba"
                    }
                  }
                ]
              },
              {
                "id": "679a84b4-e2af-4164-bbe7-28c43ca87a07",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64d2cd26-307d-400d-83d3-1074e52b5331",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "32e8cdc2-4f8c-4cb4-8056-caec87109547"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d1c1230-4a0a-448f-a4fb-6cde09cff1b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "040cde85-935b-4204-ac23-522c03763e19"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7d21748-f8cf-4b88-91b0-d4ae2cca6d69",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9b991fc0-8713-48c2-bc6e-8b8ca9b70dcd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d50cf72b-97ca-4180-82e6-76676efe6213",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "258f4434-d1f0-4a3c-9f95-1012d98b9c81"
            }
          }
        ]
      },
      {
        "id": "5d013878-49d3-4ca4-b0a0-86b558f11a8a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f51fdfe8-65d5-4224-9935-7c39448ff557",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5344d8cd-40fe-4943-87ea-00fb181dd570",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1088978-960a-4411-96c1-c3e3d284cab3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82384ed-fbc9-42a4-912f-b30b56090f60",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "decb5d18-a1fe-46b3-91d1-7c8e62082ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89436408-6653-4d43-b404-4777757c4b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c983afb-456c-497b-9a0d-07b2a2b0144b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c345dac-e5c8-42d0-adc2-24ab6c532015",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "104ae7b7-f474-4ae7-a7e7-15b55b0e97d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ae9edb8-4739-4d40-a477-babbd188abe6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c347b93a-3485-446f-bed5-46ed7b77a6ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "500cbaeb-865a-4397-a7a7-630e1cf07208",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "57b60785-18c8-4ec1-acc2-9b5aa251e5ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f8fa709-d5d9-4cb3-af55-76a680ee8fad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26f8a4db-6603-4796-8526-66203cedffd5"
            }
          }
        ]
      },
      {
        "id": "2321e86a-9ed1-4479-ad9b-e92f5142cbf0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1954a8f2-d550-41b4-be2f-32be2eb2aff7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b81d7124-6951-424a-b265-2ea6817ff5ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a3135bd-1e33-4e3d-9aca-f061507af64e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b16c37f-68f0-42a9-9764-a99c00e1c95e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57bcb324-7f69-40f9-8a70-6278992c87e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44940293-ae35-451a-99ad-a8abec28613d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c8be23b-9adc-4ee0-a3d5-70eafdd2ca97"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6051398-ceed-4754-a965-43b7ece1c569",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "505d43d9-fad7-45d6-9ac6-b2a1fcf13140"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1945716-528d-4398-8462-3f3e770e3b26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65e0204c-8ecd-4d66-867e-1945374e8df3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00c26c61-6e37-4f2b-bd20-5bbcd4a74e55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "257f2dd7-f9fa-4525-8b98-e8621a643a6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87894e63-1318-4083-8190-9d3402171144",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de657b66-8762-4093-aa5f-1c457f02a331"
            }
          }
        ]
      },
      {
        "id": "bcc10d1a-fda5-4c22-b03f-26e79cb8c436",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "98a2d511-00ca-423d-ac0b-6a82a6fb0f16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "adb3dd4e-2750-4e74-8c58-3ef2eec18f90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80200ab1-4ad0-46ec-9123-433f68730443",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2e8ad1-af8d-4526-ba67-dc4d2cd3c5c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "033c897c-bd37-4115-82eb-09a29f59846b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3669f113-48ad-494a-a462-7261fa6dc0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ba664e5-4445-4753-9678-837078fc672f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6bc70f4-3cda-49f6-8027-0b1a2055a967",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc1b886a-f78c-4151-899f-439b8004564e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a224b768-ba0b-45cb-8c3e-25db15762c12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a4a291c-1e68-440d-a4e0-42e7ee6351a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "670a1674-7d6c-46eb-bb90-bb357c20ad8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8b3cee9b-2631-4afe-adaf-ff36cc518d75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5d8fa41-c394-4c4a-8132-22587fdb470b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49fb2347-a2f9-4cb6-bc64-4fb95d18d480"
            }
          }
        ]
      },
      {
        "id": "4c05dea1-e3a7-4955-86cf-9ac67b0da6ae",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5905d148-1422-4325-974b-918a2ebedf4e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f79a90ca-19bd-413d-a508-d81b0a2654da",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5b6eec3c-e3e7-4473-aca8-1c42ccdcf25b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3aa2ebe-117b-400c-8141-7c1922fdf112",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51f98f25-a40a-4432-912c-159a15c0f8d3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 4
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 563,
        "pending": 0,
        "failed": 561
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 573
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 4
      }
    },
    "timings": {
      "responseAverage": 61.5,
      "responseMin": 21,
      "responseMax": 102,
      "responseSd": 40.5,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1726705525064,
      "completed": 1726705533508
    },
    "executions": [
      {
        "id": "d80f0af9-f575-41c8-b51a-5d2aeca35048",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4a4d8f8d-0adc-46be-93a0-98d773604006",
          "httpRequestId": "b8368344-a8ee-457c-949b-571b6288de54"
        },
        "item": {
          "id": "d80f0af9-f575-41c8-b51a-5d2aeca35048",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b810f6c0-645c-4211-9e58-233922428cff",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 0
        }
      },
      {
        "id": "dadb664a-ea6e-422a-8812-dd4cabcabe72",
        "cursor": {
          "ref": "9036239a-38b7-4526-9c5c-0b248da57088",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f2e8ff3a-bedb-4643-b97a-b6972ab4e405"
        },
        "item": {
          "id": "dadb664a-ea6e-422a-8812-dd4cabcabe72",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c8506ce7-e702-4472-8fd3-45cb267465e0",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "d8791a28-2772-4f38-abb4-208998c87627",
        "cursor": {
          "ref": "b8304354-019a-43e1-8d3b-e6d22a97c17a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0efba963-4276-4ab7-9bca-defd59bd0fa1"
        },
        "item": {
          "id": "d8791a28-2772-4f38-abb4-208998c87627",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "3064f596-0a95-45f8-9072-b74be8d1ad93",
        "cursor": {
          "ref": "041598e4-7030-41db-8afb-5b2d24cbc9c5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "85318b2f-914b-45b7-92c6-fc66ceddf2e1"
        },
        "item": {
          "id": "3064f596-0a95-45f8-9072-b74be8d1ad93",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3064f596-0a95-45f8-9072-b74be8d1ad93",
        "cursor": {
          "ref": "041598e4-7030-41db-8afb-5b2d24cbc9c5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "85318b2f-914b-45b7-92c6-fc66ceddf2e1"
        },
        "item": {
          "id": "3064f596-0a95-45f8-9072-b74be8d1ad93",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "360a72fa-b158-4a4b-b6f2-db05868bcd02",
        "cursor": {
          "ref": "a58777d9-5445-4367-8001-fc72008c47e2",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "168507c2-de11-406a-a2db-c57e59cfe0ee"
        },
        "item": {
          "id": "360a72fa-b158-4a4b-b6f2-db05868bcd02",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "360a72fa-b158-4a4b-b6f2-db05868bcd02",
        "cursor": {
          "ref": "a58777d9-5445-4367-8001-fc72008c47e2",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "168507c2-de11-406a-a2db-c57e59cfe0ee"
        },
        "item": {
          "id": "360a72fa-b158-4a4b-b6f2-db05868bcd02",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "4c28c33f-a8af-4031-994c-04d289a9863a",
        "cursor": {
          "ref": "cf00fe83-1414-4cc0-9a8b-46aa21beb592",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bd2c2c60-1ec0-4ab9-8ecc-042ffc8e9a8c"
        },
        "item": {
          "id": "4c28c33f-a8af-4031-994c-04d289a9863a",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "4c28c33f-a8af-4031-994c-04d289a9863a",
        "cursor": {
          "ref": "cf00fe83-1414-4cc0-9a8b-46aa21beb592",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bd2c2c60-1ec0-4ab9-8ecc-042ffc8e9a8c"
        },
        "item": {
          "id": "4c28c33f-a8af-4031-994c-04d289a9863a",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "ed9c4a68-7de3-4854-8365-1e0976c54c15",
        "cursor": {
          "ref": "3ff6ab7d-195a-4b14-84c1-ae373e1036aa",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ea18d357-d240-440d-b69b-93795913249c"
        },
        "item": {
          "id": "ed9c4a68-7de3-4854-8365-1e0976c54c15",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ed9c4a68-7de3-4854-8365-1e0976c54c15",
        "cursor": {
          "ref": "3ff6ab7d-195a-4b14-84c1-ae373e1036aa",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ea18d357-d240-440d-b69b-93795913249c"
        },
        "item": {
          "id": "ed9c4a68-7de3-4854-8365-1e0976c54c15",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a1118092-5661-49e9-a102-f2da84e3ef1e",
        "cursor": {
          "ref": "68d0ee4a-b4b8-47fb-9fb0-6e1b3d054fa4",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "692ace4f-b6dc-492d-a97e-417d2b875e73"
        },
        "item": {
          "id": "a1118092-5661-49e9-a102-f2da84e3ef1e",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a1118092-5661-49e9-a102-f2da84e3ef1e",
        "cursor": {
          "ref": "68d0ee4a-b4b8-47fb-9fb0-6e1b3d054fa4",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "692ace4f-b6dc-492d-a97e-417d2b875e73"
        },
        "item": {
          "id": "a1118092-5661-49e9-a102-f2da84e3ef1e",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e8d0573e-4acc-4488-8f4d-1a12f79e04e5",
        "cursor": {
          "ref": "59879208-8bc2-40b7-87e2-c5004ef36bef",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6a2ffb49-3fc5-4041-afdc-7802f47ebeb1"
        },
        "item": {
          "id": "e8d0573e-4acc-4488-8f4d-1a12f79e04e5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "e8d0573e-4acc-4488-8f4d-1a12f79e04e5",
        "cursor": {
          "ref": "59879208-8bc2-40b7-87e2-c5004ef36bef",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6a2ffb49-3fc5-4041-afdc-7802f47ebeb1"
        },
        "item": {
          "id": "e8d0573e-4acc-4488-8f4d-1a12f79e04e5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "4f1f423d-d350-4b20-9295-f5892090a504",
        "cursor": {
          "ref": "fc7cf9af-5b57-4f65-a8c0-47d92d03e318",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ba1d31cd-44b1-498c-be37-f30a0ae9e36d"
        },
        "item": {
          "id": "4f1f423d-d350-4b20-9295-f5892090a504",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "4f1f423d-d350-4b20-9295-f5892090a504",
        "cursor": {
          "ref": "fc7cf9af-5b57-4f65-a8c0-47d92d03e318",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ba1d31cd-44b1-498c-be37-f30a0ae9e36d"
        },
        "item": {
          "id": "4f1f423d-d350-4b20-9295-f5892090a504",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e86826a1-408c-45e2-98c8-c9a092f8dc5f",
        "cursor": {
          "ref": "52a87e64-4968-49aa-9c6f-6d6d8aec2fa6",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8ade0fdf-a583-4b84-aa0c-74e07a1ec31e"
        },
        "item": {
          "id": "e86826a1-408c-45e2-98c8-c9a092f8dc5f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e86826a1-408c-45e2-98c8-c9a092f8dc5f",
        "cursor": {
          "ref": "52a87e64-4968-49aa-9c6f-6d6d8aec2fa6",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8ade0fdf-a583-4b84-aa0c-74e07a1ec31e"
        },
        "item": {
          "id": "e86826a1-408c-45e2-98c8-c9a092f8dc5f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "c770919b-5a96-4e3b-999e-fb82bf66124c",
        "cursor": {
          "ref": "db25723b-05ab-47ec-87e9-a9a4f15f2ec9",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5da2ae35-97a1-4633-81a7-f3c38f21244c"
        },
        "item": {
          "id": "c770919b-5a96-4e3b-999e-fb82bf66124c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "c770919b-5a96-4e3b-999e-fb82bf66124c",
        "cursor": {
          "ref": "db25723b-05ab-47ec-87e9-a9a4f15f2ec9",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5da2ae35-97a1-4633-81a7-f3c38f21244c"
        },
        "item": {
          "id": "c770919b-5a96-4e3b-999e-fb82bf66124c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d92e3fd9-06e7-4865-8a7b-40efe13e3ee3",
        "cursor": {
          "ref": "efeddbed-2f2d-41c8-877b-101c7b4e18a4",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b61bbb88-3bd7-413d-9d88-184dc6128b56"
        },
        "item": {
          "id": "d92e3fd9-06e7-4865-8a7b-40efe13e3ee3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "d92e3fd9-06e7-4865-8a7b-40efe13e3ee3",
        "cursor": {
          "ref": "efeddbed-2f2d-41c8-877b-101c7b4e18a4",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b61bbb88-3bd7-413d-9d88-184dc6128b56"
        },
        "item": {
          "id": "d92e3fd9-06e7-4865-8a7b-40efe13e3ee3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "b80a0a1a-7e98-4ed6-9197-6d9f7d2da7cd",
        "cursor": {
          "ref": "541a6cac-f39e-4032-9871-439929794b20",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "45cea982-a0fc-46ef-affb-aaa27620252b"
        },
        "item": {
          "id": "b80a0a1a-7e98-4ed6-9197-6d9f7d2da7cd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "b80a0a1a-7e98-4ed6-9197-6d9f7d2da7cd",
        "cursor": {
          "ref": "541a6cac-f39e-4032-9871-439929794b20",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "45cea982-a0fc-46ef-affb-aaa27620252b"
        },
        "item": {
          "id": "b80a0a1a-7e98-4ed6-9197-6d9f7d2da7cd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "f3ed89b7-b27b-40f7-9fa5-0c07bb0f7f5e",
        "cursor": {
          "ref": "9b550bc6-dc01-44bd-a9ad-98eb40378d27",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "94e96f56-f17d-4912-b1cc-45be8baf25ca"
        },
        "item": {
          "id": "f3ed89b7-b27b-40f7-9fa5-0c07bb0f7f5e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "f3ed89b7-b27b-40f7-9fa5-0c07bb0f7f5e",
        "cursor": {
          "ref": "9b550bc6-dc01-44bd-a9ad-98eb40378d27",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "94e96f56-f17d-4912-b1cc-45be8baf25ca"
        },
        "item": {
          "id": "f3ed89b7-b27b-40f7-9fa5-0c07bb0f7f5e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "dd6ba27a-0194-4756-a9b5-969ecfd9692f",
        "cursor": {
          "ref": "f0a406ed-2553-492d-af6f-8011e470e1a8",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "96465b06-9320-45e4-9998-7ac68a3e4b1d"
        },
        "item": {
          "id": "dd6ba27a-0194-4756-a9b5-969ecfd9692f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "dd6ba27a-0194-4756-a9b5-969ecfd9692f",
        "cursor": {
          "ref": "f0a406ed-2553-492d-af6f-8011e470e1a8",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "96465b06-9320-45e4-9998-7ac68a3e4b1d"
        },
        "item": {
          "id": "dd6ba27a-0194-4756-a9b5-969ecfd9692f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "55ee3842-519c-46ee-91b9-fa96e3c056ea",
        "cursor": {
          "ref": "b6b37c86-0605-4009-9db1-a58f32651689",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bca5a63e-57a8-4579-b2f2-a7652b645da4"
        },
        "item": {
          "id": "55ee3842-519c-46ee-91b9-fa96e3c056ea",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "55ee3842-519c-46ee-91b9-fa96e3c056ea",
        "cursor": {
          "ref": "b6b37c86-0605-4009-9db1-a58f32651689",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bca5a63e-57a8-4579-b2f2-a7652b645da4"
        },
        "item": {
          "id": "55ee3842-519c-46ee-91b9-fa96e3c056ea",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "9a22ace2-1749-4a95-809f-e0932ac75c22",
        "cursor": {
          "ref": "b56a121f-4786-407d-b7d6-f3dd47919171",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a72fe59f-0ff5-4833-b458-f6594430daeb"
        },
        "item": {
          "id": "9a22ace2-1749-4a95-809f-e0932ac75c22",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "9a22ace2-1749-4a95-809f-e0932ac75c22",
        "cursor": {
          "ref": "b56a121f-4786-407d-b7d6-f3dd47919171",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a72fe59f-0ff5-4833-b458-f6594430daeb"
        },
        "item": {
          "id": "9a22ace2-1749-4a95-809f-e0932ac75c22",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "abaad0f8-d02d-446d-b102-184e26b130b9",
        "cursor": {
          "ref": "11362fa5-d2f4-470d-b739-fd10a7200b20",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "03b6553c-0e1b-4250-bb5d-6ab19a590bfa"
        },
        "item": {
          "id": "abaad0f8-d02d-446d-b102-184e26b130b9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "abaad0f8-d02d-446d-b102-184e26b130b9",
        "cursor": {
          "ref": "11362fa5-d2f4-470d-b739-fd10a7200b20",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "03b6553c-0e1b-4250-bb5d-6ab19a590bfa"
        },
        "item": {
          "id": "abaad0f8-d02d-446d-b102-184e26b130b9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "32aacd90-1674-4f68-87ea-49d7d4355ab6",
        "cursor": {
          "ref": "ad734e8b-c2ad-4043-a0b1-8238896ae109",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "006b8266-ac3e-42f0-b538-8b2bf34045bc"
        },
        "item": {
          "id": "32aacd90-1674-4f68-87ea-49d7d4355ab6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "32aacd90-1674-4f68-87ea-49d7d4355ab6",
        "cursor": {
          "ref": "ad734e8b-c2ad-4043-a0b1-8238896ae109",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "006b8266-ac3e-42f0-b538-8b2bf34045bc"
        },
        "item": {
          "id": "32aacd90-1674-4f68-87ea-49d7d4355ab6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "693a75b8-f33f-4621-a13f-5fabd91397e0",
        "cursor": {
          "ref": "1ba4e48d-44ce-4bc4-9c7c-2f5142b82b00",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "15ffbe08-d477-42d0-aab1-20f78bccfa02"
        },
        "item": {
          "id": "693a75b8-f33f-4621-a13f-5fabd91397e0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "693a75b8-f33f-4621-a13f-5fabd91397e0",
        "cursor": {
          "ref": "1ba4e48d-44ce-4bc4-9c7c-2f5142b82b00",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "15ffbe08-d477-42d0-aab1-20f78bccfa02"
        },
        "item": {
          "id": "693a75b8-f33f-4621-a13f-5fabd91397e0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f87a3ad5-06fe-45cb-881a-84bf4dd957db",
        "cursor": {
          "ref": "89201d9e-ae63-4ac5-be36-fbfa58790e75",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "99de5715-f457-4a6f-85c6-653b49011990"
        },
        "item": {
          "id": "f87a3ad5-06fe-45cb-881a-84bf4dd957db",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f87a3ad5-06fe-45cb-881a-84bf4dd957db",
        "cursor": {
          "ref": "89201d9e-ae63-4ac5-be36-fbfa58790e75",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "99de5715-f457-4a6f-85c6-653b49011990"
        },
        "item": {
          "id": "f87a3ad5-06fe-45cb-881a-84bf4dd957db",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "76c0665a-0a3b-4bc1-a4cc-37026f890ccd",
        "cursor": {
          "ref": "4c113031-1b9b-4702-911b-cf0a792bb02c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "16677a6f-72a2-4c76-a0b6-a701427ae9f2"
        },
        "item": {
          "id": "76c0665a-0a3b-4bc1-a4cc-37026f890ccd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "76c0665a-0a3b-4bc1-a4cc-37026f890ccd",
        "cursor": {
          "ref": "4c113031-1b9b-4702-911b-cf0a792bb02c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "16677a6f-72a2-4c76-a0b6-a701427ae9f2"
        },
        "item": {
          "id": "76c0665a-0a3b-4bc1-a4cc-37026f890ccd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "35dc3f76-9f96-48ae-ba3d-b06283505cc0",
        "cursor": {
          "ref": "cc8773a0-6841-4fdb-8b50-8044a7887def",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "62649442-8037-4fc2-8ca6-18e0ffec9327"
        },
        "item": {
          "id": "35dc3f76-9f96-48ae-ba3d-b06283505cc0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "35dc3f76-9f96-48ae-ba3d-b06283505cc0",
        "cursor": {
          "ref": "cc8773a0-6841-4fdb-8b50-8044a7887def",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "62649442-8037-4fc2-8ca6-18e0ffec9327"
        },
        "item": {
          "id": "35dc3f76-9f96-48ae-ba3d-b06283505cc0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "195340a7-ce59-48ee-a2b9-8493cac9d410",
        "cursor": {
          "ref": "827c1bce-9d24-4a03-a4f1-0538e828e307",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ffd05afe-481c-41ba-9c93-b536167474a3"
        },
        "item": {
          "id": "195340a7-ce59-48ee-a2b9-8493cac9d410",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "195340a7-ce59-48ee-a2b9-8493cac9d410",
        "cursor": {
          "ref": "827c1bce-9d24-4a03-a4f1-0538e828e307",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ffd05afe-481c-41ba-9c93-b536167474a3"
        },
        "item": {
          "id": "195340a7-ce59-48ee-a2b9-8493cac9d410",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a2a71d91-3044-4dc1-9896-d6c71daa0591",
        "cursor": {
          "ref": "ab7ee3f0-9e6e-4cfb-899f-136db8615369",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "67fff7ce-f955-4db9-8c04-ab1774b76c23"
        },
        "item": {
          "id": "a2a71d91-3044-4dc1-9896-d6c71daa0591",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "a2a71d91-3044-4dc1-9896-d6c71daa0591",
        "cursor": {
          "ref": "ab7ee3f0-9e6e-4cfb-899f-136db8615369",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "67fff7ce-f955-4db9-8c04-ab1774b76c23"
        },
        "item": {
          "id": "a2a71d91-3044-4dc1-9896-d6c71daa0591",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "39d0ed9e-aba2-460a-b7db-ecacd41998e9",
        "cursor": {
          "ref": "1396f68a-83b5-4eff-9ab8-9fb416279007",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c03b73a4-7941-4e74-a76a-fff53c86ebb9"
        },
        "item": {
          "id": "39d0ed9e-aba2-460a-b7db-ecacd41998e9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "39d0ed9e-aba2-460a-b7db-ecacd41998e9",
        "cursor": {
          "ref": "1396f68a-83b5-4eff-9ab8-9fb416279007",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c03b73a4-7941-4e74-a76a-fff53c86ebb9"
        },
        "item": {
          "id": "39d0ed9e-aba2-460a-b7db-ecacd41998e9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "22e99687-6220-433f-b04c-a57a453ccf31",
        "cursor": {
          "ref": "cded24cb-5fdc-4f46-a53f-4663e7a37669",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "825a6e5d-4e2c-4746-906a-1799b92ed5bc"
        },
        "item": {
          "id": "22e99687-6220-433f-b04c-a57a453ccf31",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "22e99687-6220-433f-b04c-a57a453ccf31",
        "cursor": {
          "ref": "cded24cb-5fdc-4f46-a53f-4663e7a37669",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "825a6e5d-4e2c-4746-906a-1799b92ed5bc"
        },
        "item": {
          "id": "22e99687-6220-433f-b04c-a57a453ccf31",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "76cd5787-dcd4-4bf5-83e1-8acf204ddf7c",
        "cursor": {
          "ref": "04b15bc8-49b8-426b-8059-320bfce6ee4e",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e8b6b03c-1a2f-4d82-9745-b0745b38ce2f"
        },
        "item": {
          "id": "76cd5787-dcd4-4bf5-83e1-8acf204ddf7c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "76cd5787-dcd4-4bf5-83e1-8acf204ddf7c",
        "cursor": {
          "ref": "04b15bc8-49b8-426b-8059-320bfce6ee4e",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e8b6b03c-1a2f-4d82-9745-b0745b38ce2f"
        },
        "item": {
          "id": "76cd5787-dcd4-4bf5-83e1-8acf204ddf7c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "779ae3b2-1f61-42f3-b7f6-eff460063392",
        "cursor": {
          "ref": "3ee3ee52-f477-4bba-a00d-de5666082d33",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5488370c-81a2-4c21-9321-2cf284b35d91"
        },
        "item": {
          "id": "779ae3b2-1f61-42f3-b7f6-eff460063392",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "779ae3b2-1f61-42f3-b7f6-eff460063392",
        "cursor": {
          "ref": "3ee3ee52-f477-4bba-a00d-de5666082d33",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5488370c-81a2-4c21-9321-2cf284b35d91"
        },
        "item": {
          "id": "779ae3b2-1f61-42f3-b7f6-eff460063392",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "8254ac4c-1770-499b-89d4-8e29e0b1ac32",
        "cursor": {
          "ref": "6b3d51cd-818d-4c29-ac7f-f3b8a9c0a2ac",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f1636430-558e-4578-b2e3-7c32e6902f49"
        },
        "item": {
          "id": "8254ac4c-1770-499b-89d4-8e29e0b1ac32",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "8254ac4c-1770-499b-89d4-8e29e0b1ac32",
        "cursor": {
          "ref": "6b3d51cd-818d-4c29-ac7f-f3b8a9c0a2ac",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f1636430-558e-4578-b2e3-7c32e6902f49"
        },
        "item": {
          "id": "8254ac4c-1770-499b-89d4-8e29e0b1ac32",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "a385df25-4a73-40d9-8d75-2331d0d5127f",
        "cursor": {
          "ref": "29082a02-ae9d-416a-905c-45b53af29928",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f1d8d7ac-3554-4ec9-b44e-82ba0222848f"
        },
        "item": {
          "id": "a385df25-4a73-40d9-8d75-2331d0d5127f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a385df25-4a73-40d9-8d75-2331d0d5127f",
        "cursor": {
          "ref": "29082a02-ae9d-416a-905c-45b53af29928",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f1d8d7ac-3554-4ec9-b44e-82ba0222848f"
        },
        "item": {
          "id": "a385df25-4a73-40d9-8d75-2331d0d5127f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "c5296809-a9f3-43c3-b008-8444435d50bc",
        "cursor": {
          "ref": "4a7c5b2f-1708-4a48-b27e-432ed52d1f87",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b3f825aa-8530-495b-b11a-045409f19e62"
        },
        "item": {
          "id": "c5296809-a9f3-43c3-b008-8444435d50bc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "c5296809-a9f3-43c3-b008-8444435d50bc",
        "cursor": {
          "ref": "4a7c5b2f-1708-4a48-b27e-432ed52d1f87",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b3f825aa-8530-495b-b11a-045409f19e62"
        },
        "item": {
          "id": "c5296809-a9f3-43c3-b008-8444435d50bc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "c45a22f8-04a6-4654-be13-75a6ff00e65d",
        "cursor": {
          "ref": "d0885171-7262-48ff-bcee-b3c2695d65ed",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f2ea5f14-4057-47d3-a84e-0f6063eba695"
        },
        "item": {
          "id": "c45a22f8-04a6-4654-be13-75a6ff00e65d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "c45a22f8-04a6-4654-be13-75a6ff00e65d",
        "cursor": {
          "ref": "d0885171-7262-48ff-bcee-b3c2695d65ed",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f2ea5f14-4057-47d3-a84e-0f6063eba695"
        },
        "item": {
          "id": "c45a22f8-04a6-4654-be13-75a6ff00e65d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "145ca12c-c14e-494f-84e8-3e5266f4da89",
        "cursor": {
          "ref": "b1481aa0-44ea-41cc-bd15-704d28cd57cb",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "263581be-83aa-46b1-9cee-fd2118071a1c"
        },
        "item": {
          "id": "145ca12c-c14e-494f-84e8-3e5266f4da89",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "145ca12c-c14e-494f-84e8-3e5266f4da89",
        "cursor": {
          "ref": "b1481aa0-44ea-41cc-bd15-704d28cd57cb",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "263581be-83aa-46b1-9cee-fd2118071a1c"
        },
        "item": {
          "id": "145ca12c-c14e-494f-84e8-3e5266f4da89",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "fc6764e9-429a-4613-8d50-90f26950436e",
        "cursor": {
          "ref": "f7f18596-aa0e-4ea1-a928-fe7373a4c7c5",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "05782ef3-83c3-4ac6-9b37-1c9ab0608c5f"
        },
        "item": {
          "id": "fc6764e9-429a-4613-8d50-90f26950436e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "fc6764e9-429a-4613-8d50-90f26950436e",
        "cursor": {
          "ref": "f7f18596-aa0e-4ea1-a928-fe7373a4c7c5",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "05782ef3-83c3-4ac6-9b37-1c9ab0608c5f"
        },
        "item": {
          "id": "fc6764e9-429a-4613-8d50-90f26950436e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "92818a85-2109-4976-af40-50736ae78540",
        "cursor": {
          "ref": "5908ad99-341a-4aef-849d-a8f6469eff85",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a4ac3989-903d-4cbd-8f57-45c59d74a70a"
        },
        "item": {
          "id": "92818a85-2109-4976-af40-50736ae78540",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "92818a85-2109-4976-af40-50736ae78540",
        "cursor": {
          "ref": "5908ad99-341a-4aef-849d-a8f6469eff85",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a4ac3989-903d-4cbd-8f57-45c59d74a70a"
        },
        "item": {
          "id": "92818a85-2109-4976-af40-50736ae78540",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "bf1639f8-da76-4065-930f-fac7c14f2850",
        "cursor": {
          "ref": "28b891c5-5925-4226-a59c-607e2b363f62",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7b463513-67dc-4aa0-82cf-e2165a643f49"
        },
        "item": {
          "id": "bf1639f8-da76-4065-930f-fac7c14f2850",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "bf1639f8-da76-4065-930f-fac7c14f2850",
        "cursor": {
          "ref": "28b891c5-5925-4226-a59c-607e2b363f62",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7b463513-67dc-4aa0-82cf-e2165a643f49"
        },
        "item": {
          "id": "bf1639f8-da76-4065-930f-fac7c14f2850",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "dabc70a2-9db2-4a62-997c-e342614a5715",
        "cursor": {
          "ref": "83828658-c584-4c1b-9d7a-c02d8495b164",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "46bbc6a7-65a1-4aad-98c4-ecf38a954d5f"
        },
        "item": {
          "id": "dabc70a2-9db2-4a62-997c-e342614a5715",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "dabc70a2-9db2-4a62-997c-e342614a5715",
        "cursor": {
          "ref": "83828658-c584-4c1b-9d7a-c02d8495b164",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "46bbc6a7-65a1-4aad-98c4-ecf38a954d5f"
        },
        "item": {
          "id": "dabc70a2-9db2-4a62-997c-e342614a5715",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "0d14df31-f0aa-4cd6-bed8-608c4b532686",
        "cursor": {
          "ref": "58296424-b2ad-4a55-bd29-d83c5109a099",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "97c72362-6b98-45a8-96f9-ec32fa7636f1"
        },
        "item": {
          "id": "0d14df31-f0aa-4cd6-bed8-608c4b532686",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0d14df31-f0aa-4cd6-bed8-608c4b532686",
        "cursor": {
          "ref": "58296424-b2ad-4a55-bd29-d83c5109a099",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "97c72362-6b98-45a8-96f9-ec32fa7636f1"
        },
        "item": {
          "id": "0d14df31-f0aa-4cd6-bed8-608c4b532686",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b7fb4b04-0d59-4d8a-b1ee-6576581bedef",
        "cursor": {
          "ref": "be2b9459-a1b1-4cc3-8a41-ed53a0afca6e",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "28fc49f2-8e68-444e-bfc8-7a1d19028ad2"
        },
        "item": {
          "id": "b7fb4b04-0d59-4d8a-b1ee-6576581bedef",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b7fb4b04-0d59-4d8a-b1ee-6576581bedef",
        "cursor": {
          "ref": "be2b9459-a1b1-4cc3-8a41-ed53a0afca6e",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "28fc49f2-8e68-444e-bfc8-7a1d19028ad2"
        },
        "item": {
          "id": "b7fb4b04-0d59-4d8a-b1ee-6576581bedef",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "83358a17-9527-4b6e-a3b9-1f0f12c74751",
        "cursor": {
          "ref": "e64fe2ce-d5df-408c-bf1d-655dde9d723d",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8b625526-8070-4fb6-8384-80dcef41a770"
        },
        "item": {
          "id": "83358a17-9527-4b6e-a3b9-1f0f12c74751",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "83358a17-9527-4b6e-a3b9-1f0f12c74751",
        "cursor": {
          "ref": "e64fe2ce-d5df-408c-bf1d-655dde9d723d",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8b625526-8070-4fb6-8384-80dcef41a770"
        },
        "item": {
          "id": "83358a17-9527-4b6e-a3b9-1f0f12c74751",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "09a9f8ca-28c1-4ea4-b672-f50986d24a9b",
        "cursor": {
          "ref": "2c22277a-8fcf-4805-9a58-1a11125db222",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2ef952b2-cd3a-47da-9c28-47a94387f864"
        },
        "item": {
          "id": "09a9f8ca-28c1-4ea4-b672-f50986d24a9b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "09a9f8ca-28c1-4ea4-b672-f50986d24a9b",
        "cursor": {
          "ref": "2c22277a-8fcf-4805-9a58-1a11125db222",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2ef952b2-cd3a-47da-9c28-47a94387f864"
        },
        "item": {
          "id": "09a9f8ca-28c1-4ea4-b672-f50986d24a9b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "df9f15df-5d21-4d9b-92da-82453e9158b3",
        "cursor": {
          "ref": "86e6e8a7-8f72-4692-af2b-2a7309becf60",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "17a44dcd-9d47-4de6-a947-e09ab6d8cad4"
        },
        "item": {
          "id": "df9f15df-5d21-4d9b-92da-82453e9158b3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "df9f15df-5d21-4d9b-92da-82453e9158b3",
        "cursor": {
          "ref": "86e6e8a7-8f72-4692-af2b-2a7309becf60",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "17a44dcd-9d47-4de6-a947-e09ab6d8cad4"
        },
        "item": {
          "id": "df9f15df-5d21-4d9b-92da-82453e9158b3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d7bb040f-4456-49fb-ae51-4e425fb67182",
        "cursor": {
          "ref": "90b97bd6-4c15-45a7-b1f4-a55562390d1b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "00445738-71cb-4d79-991f-1451fadc8f2c"
        },
        "item": {
          "id": "d7bb040f-4456-49fb-ae51-4e425fb67182",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d7bb040f-4456-49fb-ae51-4e425fb67182",
        "cursor": {
          "ref": "90b97bd6-4c15-45a7-b1f4-a55562390d1b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "00445738-71cb-4d79-991f-1451fadc8f2c"
        },
        "item": {
          "id": "d7bb040f-4456-49fb-ae51-4e425fb67182",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e91016fe-8c21-4c3c-9bab-7d9ffd526fed",
        "cursor": {
          "ref": "bd8f33d6-c2cb-4752-89a6-e75a9da694dc",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9911a5cd-3d91-44f1-b9f1-284217c85b49"
        },
        "item": {
          "id": "e91016fe-8c21-4c3c-9bab-7d9ffd526fed",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e91016fe-8c21-4c3c-9bab-7d9ffd526fed",
        "cursor": {
          "ref": "bd8f33d6-c2cb-4752-89a6-e75a9da694dc",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9911a5cd-3d91-44f1-b9f1-284217c85b49"
        },
        "item": {
          "id": "e91016fe-8c21-4c3c-9bab-7d9ffd526fed",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "421e105b-e00e-4ce3-a0d6-312c639f73c7",
        "cursor": {
          "ref": "ec5fb86c-9310-47f9-b3a9-ef753dcc4adb",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "18a69609-80ee-4f63-8d18-ae25cf53350b"
        },
        "item": {
          "id": "421e105b-e00e-4ce3-a0d6-312c639f73c7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "421e105b-e00e-4ce3-a0d6-312c639f73c7",
        "cursor": {
          "ref": "ec5fb86c-9310-47f9-b3a9-ef753dcc4adb",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "18a69609-80ee-4f63-8d18-ae25cf53350b"
        },
        "item": {
          "id": "421e105b-e00e-4ce3-a0d6-312c639f73c7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "66bcbf77-4be0-432d-8a20-f149be71e78f",
        "cursor": {
          "ref": "5a15261b-01b1-471d-b7aa-63698793c08f",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "24b7b6b7-022d-4989-8c24-7c4f4b2090a9"
        },
        "item": {
          "id": "66bcbf77-4be0-432d-8a20-f149be71e78f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "66bcbf77-4be0-432d-8a20-f149be71e78f",
        "cursor": {
          "ref": "5a15261b-01b1-471d-b7aa-63698793c08f",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "24b7b6b7-022d-4989-8c24-7c4f4b2090a9"
        },
        "item": {
          "id": "66bcbf77-4be0-432d-8a20-f149be71e78f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "96d2362f-ce7b-4222-87c9-4e142493711d",
        "cursor": {
          "ref": "fb1136f3-a680-44a8-8e19-f8a43ae02042",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9fedda61-7608-43e1-9bc6-2aeacb1a0db5"
        },
        "item": {
          "id": "96d2362f-ce7b-4222-87c9-4e142493711d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "96d2362f-ce7b-4222-87c9-4e142493711d",
        "cursor": {
          "ref": "fb1136f3-a680-44a8-8e19-f8a43ae02042",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9fedda61-7608-43e1-9bc6-2aeacb1a0db5"
        },
        "item": {
          "id": "96d2362f-ce7b-4222-87c9-4e142493711d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "dc0dbc98-68dd-4480-80fc-c4740cfbf341",
        "cursor": {
          "ref": "7ca5f032-7fe1-4a30-8eaa-77fb6dc7132c",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1fe4f973-ff17-4046-89f4-64449cf6937e"
        },
        "item": {
          "id": "dc0dbc98-68dd-4480-80fc-c4740cfbf341",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "dc0dbc98-68dd-4480-80fc-c4740cfbf341",
        "cursor": {
          "ref": "7ca5f032-7fe1-4a30-8eaa-77fb6dc7132c",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1fe4f973-ff17-4046-89f4-64449cf6937e"
        },
        "item": {
          "id": "dc0dbc98-68dd-4480-80fc-c4740cfbf341",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "37a04d2b-f7a0-455e-a272-38ec6c8b8711",
        "cursor": {
          "ref": "c8d5bf60-f91c-4d21-88e1-7209807a3fb7",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "14646b06-c8e8-491e-bb87-1492c7f4a76c"
        },
        "item": {
          "id": "37a04d2b-f7a0-455e-a272-38ec6c8b8711",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "37a04d2b-f7a0-455e-a272-38ec6c8b8711",
        "cursor": {
          "ref": "c8d5bf60-f91c-4d21-88e1-7209807a3fb7",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "14646b06-c8e8-491e-bb87-1492c7f4a76c"
        },
        "item": {
          "id": "37a04d2b-f7a0-455e-a272-38ec6c8b8711",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8de9953f-6f06-4b02-8fcd-a74be9f31833",
        "cursor": {
          "ref": "56c55a11-d4d7-4c0b-974f-842f2c7912b6",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8ef59f2c-e712-4332-844c-2bc20fa32686"
        },
        "item": {
          "id": "8de9953f-6f06-4b02-8fcd-a74be9f31833",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8de9953f-6f06-4b02-8fcd-a74be9f31833",
        "cursor": {
          "ref": "56c55a11-d4d7-4c0b-974f-842f2c7912b6",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8ef59f2c-e712-4332-844c-2bc20fa32686"
        },
        "item": {
          "id": "8de9953f-6f06-4b02-8fcd-a74be9f31833",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1a66c102-77ae-46fa-870e-c9b0e35f1c22",
        "cursor": {
          "ref": "12f8772b-87f3-497a-a328-175608b04b18",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b239864a-dca7-4896-b4f6-7873cd6a51f1"
        },
        "item": {
          "id": "1a66c102-77ae-46fa-870e-c9b0e35f1c22",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1a66c102-77ae-46fa-870e-c9b0e35f1c22",
        "cursor": {
          "ref": "12f8772b-87f3-497a-a328-175608b04b18",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b239864a-dca7-4896-b4f6-7873cd6a51f1"
        },
        "item": {
          "id": "1a66c102-77ae-46fa-870e-c9b0e35f1c22",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "ab288854-b875-4cb2-8d30-552251aa93f3",
        "cursor": {
          "ref": "61f1f914-2283-4c93-a34c-e4de78837f1c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5602cf25-c0ed-4e48-a5bf-fe1ed3a47c12"
        },
        "item": {
          "id": "ab288854-b875-4cb2-8d30-552251aa93f3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "ab288854-b875-4cb2-8d30-552251aa93f3",
        "cursor": {
          "ref": "61f1f914-2283-4c93-a34c-e4de78837f1c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5602cf25-c0ed-4e48-a5bf-fe1ed3a47c12"
        },
        "item": {
          "id": "ab288854-b875-4cb2-8d30-552251aa93f3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "6ecc6470-d65e-4ea3-886b-cb52d66af6b2",
        "cursor": {
          "ref": "41bb9f75-674b-456e-a899-2137339daa68",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ff6d551e-150d-46ce-a1d6-abeef7b3f16c"
        },
        "item": {
          "id": "6ecc6470-d65e-4ea3-886b-cb52d66af6b2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "6ecc6470-d65e-4ea3-886b-cb52d66af6b2",
        "cursor": {
          "ref": "41bb9f75-674b-456e-a899-2137339daa68",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ff6d551e-150d-46ce-a1d6-abeef7b3f16c"
        },
        "item": {
          "id": "6ecc6470-d65e-4ea3-886b-cb52d66af6b2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "db3975cd-c42f-4c8d-928c-ce9b6841e7e8",
        "cursor": {
          "ref": "bf7cc9fd-978b-4a7e-9647-7e557523655b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "017ef4d0-c363-4d85-ab0c-828276567870"
        },
        "item": {
          "id": "db3975cd-c42f-4c8d-928c-ce9b6841e7e8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "db3975cd-c42f-4c8d-928c-ce9b6841e7e8",
        "cursor": {
          "ref": "bf7cc9fd-978b-4a7e-9647-7e557523655b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "017ef4d0-c363-4d85-ab0c-828276567870"
        },
        "item": {
          "id": "db3975cd-c42f-4c8d-928c-ce9b6841e7e8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "14a07f83-8707-454a-8fb1-e37b548a7a47",
        "cursor": {
          "ref": "501b2037-515e-4241-b69f-5fab8345a33b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a3265ae4-a84e-49c1-80a0-0357df8ab890"
        },
        "item": {
          "id": "14a07f83-8707-454a-8fb1-e37b548a7a47",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "14a07f83-8707-454a-8fb1-e37b548a7a47",
        "cursor": {
          "ref": "501b2037-515e-4241-b69f-5fab8345a33b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a3265ae4-a84e-49c1-80a0-0357df8ab890"
        },
        "item": {
          "id": "14a07f83-8707-454a-8fb1-e37b548a7a47",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "d85187f0-d381-4408-8a11-bef3776104fc",
        "cursor": {
          "ref": "c51b9d8c-ea13-4aef-832f-17f684736482",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f4be7b43-1da0-42f2-87e5-d8314e45491a"
        },
        "item": {
          "id": "d85187f0-d381-4408-8a11-bef3776104fc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "d85187f0-d381-4408-8a11-bef3776104fc",
        "cursor": {
          "ref": "c51b9d8c-ea13-4aef-832f-17f684736482",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f4be7b43-1da0-42f2-87e5-d8314e45491a"
        },
        "item": {
          "id": "d85187f0-d381-4408-8a11-bef3776104fc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "504e78ca-b26a-4769-865d-84d0f12554e7",
        "cursor": {
          "ref": "e6a2bcc2-5fc3-48f9-a637-c747b1b14bf2",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e1a55941-8361-4d41-8f31-15b0acf8b4d4"
        },
        "item": {
          "id": "504e78ca-b26a-4769-865d-84d0f12554e7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "504e78ca-b26a-4769-865d-84d0f12554e7",
        "cursor": {
          "ref": "e6a2bcc2-5fc3-48f9-a637-c747b1b14bf2",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e1a55941-8361-4d41-8f31-15b0acf8b4d4"
        },
        "item": {
          "id": "504e78ca-b26a-4769-865d-84d0f12554e7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "53fae216-1c90-4b21-890a-92659bafcddd",
        "cursor": {
          "ref": "7a19c99e-2a05-4853-8043-65edb52f09a1",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c975f88e-e6e2-4f98-b905-c4b530a83dc6"
        },
        "item": {
          "id": "53fae216-1c90-4b21-890a-92659bafcddd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "53fae216-1c90-4b21-890a-92659bafcddd",
        "cursor": {
          "ref": "7a19c99e-2a05-4853-8043-65edb52f09a1",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c975f88e-e6e2-4f98-b905-c4b530a83dc6"
        },
        "item": {
          "id": "53fae216-1c90-4b21-890a-92659bafcddd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "434236f2-ead2-456d-ad9e-7d638d3ed98f",
        "cursor": {
          "ref": "9b65c442-da67-4826-b7bf-ae233e316e42",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f181e92d-f0bb-4f01-90f9-8699e70c189d"
        },
        "item": {
          "id": "434236f2-ead2-456d-ad9e-7d638d3ed98f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "434236f2-ead2-456d-ad9e-7d638d3ed98f",
        "cursor": {
          "ref": "9b65c442-da67-4826-b7bf-ae233e316e42",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f181e92d-f0bb-4f01-90f9-8699e70c189d"
        },
        "item": {
          "id": "434236f2-ead2-456d-ad9e-7d638d3ed98f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "063d0de1-55c1-4858-b175-66426e19e899",
        "cursor": {
          "ref": "120aac76-abd6-4717-8236-5ca182908225",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "09537e22-2c23-4c99-9d1e-ac01d45a7ba9"
        },
        "item": {
          "id": "063d0de1-55c1-4858-b175-66426e19e899",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "063d0de1-55c1-4858-b175-66426e19e899",
        "cursor": {
          "ref": "120aac76-abd6-4717-8236-5ca182908225",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "09537e22-2c23-4c99-9d1e-ac01d45a7ba9"
        },
        "item": {
          "id": "063d0de1-55c1-4858-b175-66426e19e899",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "0e4dcf17-210c-49d1-8306-f04033d84913",
        "cursor": {
          "ref": "42cfddbe-6555-4047-8996-1b2692fa738c",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fba5d43f-c847-414d-ac41-c41315bf5ac8"
        },
        "item": {
          "id": "0e4dcf17-210c-49d1-8306-f04033d84913",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "0e4dcf17-210c-49d1-8306-f04033d84913",
        "cursor": {
          "ref": "42cfddbe-6555-4047-8996-1b2692fa738c",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fba5d43f-c847-414d-ac41-c41315bf5ac8"
        },
        "item": {
          "id": "0e4dcf17-210c-49d1-8306-f04033d84913",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "6e05b181-9ced-4235-8a2b-ce7ac2ce1e8f",
        "cursor": {
          "ref": "bc8bc4ac-6cc3-4dbf-8aed-dc233bf51e7d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6bf9c8c3-a8bc-4e67-a969-01cf2edf84c2"
        },
        "item": {
          "id": "6e05b181-9ced-4235-8a2b-ce7ac2ce1e8f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "6e05b181-9ced-4235-8a2b-ce7ac2ce1e8f",
        "cursor": {
          "ref": "bc8bc4ac-6cc3-4dbf-8aed-dc233bf51e7d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6bf9c8c3-a8bc-4e67-a969-01cf2edf84c2"
        },
        "item": {
          "id": "6e05b181-9ced-4235-8a2b-ce7ac2ce1e8f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "dfb530ce-e226-43b5-a1d9-4f5af367c914",
        "cursor": {
          "ref": "d61fa362-7252-4c44-a338-a2b7298097fa",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ab4b4f40-1b65-42ec-a8fc-4d7a22cca809"
        },
        "item": {
          "id": "dfb530ce-e226-43b5-a1d9-4f5af367c914",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "dfb530ce-e226-43b5-a1d9-4f5af367c914",
        "cursor": {
          "ref": "d61fa362-7252-4c44-a338-a2b7298097fa",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ab4b4f40-1b65-42ec-a8fc-4d7a22cca809"
        },
        "item": {
          "id": "dfb530ce-e226-43b5-a1d9-4f5af367c914",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "494183cd-285c-4806-9a4e-427c5690239e",
        "cursor": {
          "ref": "608165f0-055c-400c-898f-52854e9e2a1c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9c5be96a-aa5d-4a57-99ce-d7254284cdc2"
        },
        "item": {
          "id": "494183cd-285c-4806-9a4e-427c5690239e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "494183cd-285c-4806-9a4e-427c5690239e",
        "cursor": {
          "ref": "608165f0-055c-400c-898f-52854e9e2a1c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9c5be96a-aa5d-4a57-99ce-d7254284cdc2"
        },
        "item": {
          "id": "494183cd-285c-4806-9a4e-427c5690239e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "54039359-8a03-4c17-a1fe-c6efc043dea7",
        "cursor": {
          "ref": "f41cb8fd-73a6-4ff0-9fd5-be045c1aead9",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d254262e-ca2c-4d28-8923-0dfa3d719ea2"
        },
        "item": {
          "id": "54039359-8a03-4c17-a1fe-c6efc043dea7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "54039359-8a03-4c17-a1fe-c6efc043dea7",
        "cursor": {
          "ref": "f41cb8fd-73a6-4ff0-9fd5-be045c1aead9",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d254262e-ca2c-4d28-8923-0dfa3d719ea2"
        },
        "item": {
          "id": "54039359-8a03-4c17-a1fe-c6efc043dea7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "9604e731-0b16-4113-8bfc-266ba1924777",
        "cursor": {
          "ref": "3afe3817-099f-429a-9f10-0553d56cc234",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "759f227d-3c17-4fb7-b00b-12a45d22dca4"
        },
        "item": {
          "id": "9604e731-0b16-4113-8bfc-266ba1924777",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9604e731-0b16-4113-8bfc-266ba1924777",
        "cursor": {
          "ref": "3afe3817-099f-429a-9f10-0553d56cc234",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "759f227d-3c17-4fb7-b00b-12a45d22dca4"
        },
        "item": {
          "id": "9604e731-0b16-4113-8bfc-266ba1924777",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4d9fe793-54d8-4846-867b-9462f4aa9b3a",
        "cursor": {
          "ref": "83f8bd26-04cf-4957-8bb2-72e704dedcbb",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "45a577b4-1a5e-4bd6-9c30-508fab700bed"
        },
        "item": {
          "id": "4d9fe793-54d8-4846-867b-9462f4aa9b3a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4d9fe793-54d8-4846-867b-9462f4aa9b3a",
        "cursor": {
          "ref": "83f8bd26-04cf-4957-8bb2-72e704dedcbb",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "45a577b4-1a5e-4bd6-9c30-508fab700bed"
        },
        "item": {
          "id": "4d9fe793-54d8-4846-867b-9462f4aa9b3a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "13990ba1-01db-49d4-a287-39c58efeae75",
        "cursor": {
          "ref": "28e21a58-ed36-456e-a226-4b981e2787d9",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e1eebf2c-b5c6-4a33-b13f-f2ebab9753cf"
        },
        "item": {
          "id": "13990ba1-01db-49d4-a287-39c58efeae75",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "13990ba1-01db-49d4-a287-39c58efeae75",
        "cursor": {
          "ref": "28e21a58-ed36-456e-a226-4b981e2787d9",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e1eebf2c-b5c6-4a33-b13f-f2ebab9753cf"
        },
        "item": {
          "id": "13990ba1-01db-49d4-a287-39c58efeae75",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "d46c6eea-c4a9-4f34-abd3-fa2861b4f213",
        "cursor": {
          "ref": "4cd9b0c5-edef-4ef3-a150-33a7228798f8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "29f3f5a4-c304-4e20-8974-bc3e6e03bacd"
        },
        "item": {
          "id": "d46c6eea-c4a9-4f34-abd3-fa2861b4f213",
          "name": "credentials_issue:options:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "d46c6eea-c4a9-4f34-abd3-fa2861b4f213",
        "cursor": {
          "ref": "4cd9b0c5-edef-4ef3-a150-33a7228798f8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "29f3f5a4-c304-4e20-8974-bc3e6e03bacd"
        },
        "item": {
          "id": "d46c6eea-c4a9-4f34-abd3-fa2861b4f213",
          "name": "credentials_issue:options:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "e5e7b9c3-ae7f-4dea-a54f-90069a91ba82",
        "cursor": {
          "ref": "3f806749-28e8-4cc0-9f17-1a2316170d89",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "174f1c18-1a85-4ce8-a14c-9509683f4ecc"
        },
        "item": {
          "id": "e5e7b9c3-ae7f-4dea-a54f-90069a91ba82",
          "name": "credentials_issue:options:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "e5e7b9c3-ae7f-4dea-a54f-90069a91ba82",
        "cursor": {
          "ref": "3f806749-28e8-4cc0-9f17-1a2316170d89",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "174f1c18-1a85-4ce8-a14c-9509683f4ecc"
        },
        "item": {
          "id": "e5e7b9c3-ae7f-4dea-a54f-90069a91ba82",
          "name": "credentials_issue:options:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "65eb712d-dccd-4eac-a550-d92616fde087",
        "cursor": {
          "ref": "268272e4-549d-40f7-b71c-93b72e3bae7d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7a619e2e-e84e-4da4-95fa-70ecb480fc66"
        },
        "item": {
          "id": "65eb712d-dccd-4eac-a550-d92616fde087",
          "name": "credentials_issue:options:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "65eb712d-dccd-4eac-a550-d92616fde087",
        "cursor": {
          "ref": "268272e4-549d-40f7-b71c-93b72e3bae7d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7a619e2e-e84e-4da4-95fa-70ecb480fc66"
        },
        "item": {
          "id": "65eb712d-dccd-4eac-a550-d92616fde087",
          "name": "credentials_issue:options:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "298f19bd-1a59-4368-8a63-2b86d445f92b",
        "cursor": {
          "ref": "2fd18bbe-2ab3-4a0f-bb19-e11c20d79a93",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e273e6d7-7d99-4b5d-9463-33642b114804"
        },
        "item": {
          "id": "298f19bd-1a59-4368-8a63-2b86d445f92b",
          "name": "credentials_issue:options:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "298f19bd-1a59-4368-8a63-2b86d445f92b",
        "cursor": {
          "ref": "2fd18bbe-2ab3-4a0f-bb19-e11c20d79a93",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e273e6d7-7d99-4b5d-9463-33642b114804"
        },
        "item": {
          "id": "298f19bd-1a59-4368-8a63-2b86d445f92b",
          "name": "credentials_issue:options:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "3e341fb4-8301-4d07-b746-d0434df2aa21",
        "cursor": {
          "ref": "64f3bb42-ce61-43f2-8ca1-c2d8daf73e9e",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5230a373-7c44-46eb-9aa7-9faaac13a140"
        },
        "item": {
          "id": "3e341fb4-8301-4d07-b746-d0434df2aa21",
          "name": "credentials_issue:options:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "3e341fb4-8301-4d07-b746-d0434df2aa21",
        "cursor": {
          "ref": "64f3bb42-ce61-43f2-8ca1-c2d8daf73e9e",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5230a373-7c44-46eb-9aa7-9faaac13a140"
        },
        "item": {
          "id": "3e341fb4-8301-4d07-b746-d0434df2aa21",
          "name": "credentials_issue:options:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "1b79d74d-3ce8-4b67-8bdd-cdf842d41b6a",
        "cursor": {
          "ref": "516146e7-0629-4b3c-a9cd-96bf1667fc50",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "baafb5bb-18bd-49ae-b6ed-0eb44e1d42fc"
        },
        "item": {
          "id": "1b79d74d-3ce8-4b67-8bdd-cdf842d41b6a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "1b79d74d-3ce8-4b67-8bdd-cdf842d41b6a",
        "cursor": {
          "ref": "516146e7-0629-4b3c-a9cd-96bf1667fc50",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "baafb5bb-18bd-49ae-b6ed-0eb44e1d42fc"
        },
        "item": {
          "id": "1b79d74d-3ce8-4b67-8bdd-cdf842d41b6a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "d18b43f9-27df-4ce6-a93c-4a321235d5c3",
        "cursor": {
          "ref": "1b2bf297-77f8-41bf-816c-c170cacc4fff",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "aef2270e-2125-446c-83b9-cb7b0c1975a2"
        },
        "item": {
          "id": "d18b43f9-27df-4ce6-a93c-4a321235d5c3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "d18b43f9-27df-4ce6-a93c-4a321235d5c3",
        "cursor": {
          "ref": "1b2bf297-77f8-41bf-816c-c170cacc4fff",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "aef2270e-2125-446c-83b9-cb7b0c1975a2"
        },
        "item": {
          "id": "d18b43f9-27df-4ce6-a93c-4a321235d5c3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "960aa497-a817-416a-9ade-f7234c0c4dae",
        "cursor": {
          "ref": "74cfe684-ad92-463d-9f3e-9a201e1b6f0c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4772ab94-289b-4c56-bfa8-ac7208092185"
        },
        "item": {
          "id": "960aa497-a817-416a-9ade-f7234c0c4dae",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "960aa497-a817-416a-9ade-f7234c0c4dae",
        "cursor": {
          "ref": "74cfe684-ad92-463d-9f3e-9a201e1b6f0c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4772ab94-289b-4c56-bfa8-ac7208092185"
        },
        "item": {
          "id": "960aa497-a817-416a-9ade-f7234c0c4dae",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "8d86b412-e416-4800-86eb-fd61029a4540",
        "cursor": {
          "ref": "4041a86d-33e5-4945-8bc4-e5071e677b94",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fb6b0db1-c7d0-46ee-915b-05a7837e14bf"
        },
        "item": {
          "id": "8d86b412-e416-4800-86eb-fd61029a4540",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "8d86b412-e416-4800-86eb-fd61029a4540",
        "cursor": {
          "ref": "4041a86d-33e5-4945-8bc4-e5071e677b94",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fb6b0db1-c7d0-46ee-915b-05a7837e14bf"
        },
        "item": {
          "id": "8d86b412-e416-4800-86eb-fd61029a4540",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "ba61ef4d-7350-41eb-92b8-10ee56855bea",
        "cursor": {
          "ref": "3fbabe69-601f-4c77-a154-a473974633e4",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "deef234d-a1b2-403e-9165-47403f5a57c4"
        },
        "item": {
          "id": "ba61ef4d-7350-41eb-92b8-10ee56855bea",
          "name": "credentials_issue:options.type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "ba61ef4d-7350-41eb-92b8-10ee56855bea",
        "cursor": {
          "ref": "3fbabe69-601f-4c77-a154-a473974633e4",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "deef234d-a1b2-403e-9165-47403f5a57c4"
        },
        "item": {
          "id": "ba61ef4d-7350-41eb-92b8-10ee56855bea",
          "name": "credentials_issue:options.type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "6efaee96-dee7-4487-a434-7e709330ee70",
        "cursor": {
          "ref": "677d8cd8-5d19-41f8-9a2b-f2501bda7e37",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9b074e45-5cfb-447c-b618-6d040b46ce60"
        },
        "item": {
          "id": "6efaee96-dee7-4487-a434-7e709330ee70",
          "name": "credentials_issue:options.type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "6efaee96-dee7-4487-a434-7e709330ee70",
        "cursor": {
          "ref": "677d8cd8-5d19-41f8-9a2b-f2501bda7e37",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9b074e45-5cfb-447c-b618-6d040b46ce60"
        },
        "item": {
          "id": "6efaee96-dee7-4487-a434-7e709330ee70",
          "name": "credentials_issue:options.type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "044058fe-fc00-4e9e-a121-666b79246255",
        "cursor": {
          "ref": "e6e75d10-b2f3-4e35-849c-17fbfe704614",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7e64d06c-471c-48e3-af1c-bf2fb2eb1087"
        },
        "item": {
          "id": "044058fe-fc00-4e9e-a121-666b79246255",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "044058fe-fc00-4e9e-a121-666b79246255",
        "cursor": {
          "ref": "e6e75d10-b2f3-4e35-849c-17fbfe704614",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7e64d06c-471c-48e3-af1c-bf2fb2eb1087"
        },
        "item": {
          "id": "044058fe-fc00-4e9e-a121-666b79246255",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "1abd65b1-0a54-4dfe-b862-9dddcbeda404",
        "cursor": {
          "ref": "910325e5-c422-48de-8078-6fe74335ce80",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4b5292e3-88ac-4b81-a2dd-fc16322ab0cc"
        },
        "item": {
          "id": "1abd65b1-0a54-4dfe-b862-9dddcbeda404",
          "name": "credentials_issue:options.created:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "1abd65b1-0a54-4dfe-b862-9dddcbeda404",
        "cursor": {
          "ref": "910325e5-c422-48de-8078-6fe74335ce80",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4b5292e3-88ac-4b81-a2dd-fc16322ab0cc"
        },
        "item": {
          "id": "1abd65b1-0a54-4dfe-b862-9dddcbeda404",
          "name": "credentials_issue:options.created:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "0f792198-9374-444f-a64f-415058be71c9",
        "cursor": {
          "ref": "245fd548-e890-4eaa-a2f3-9b5895086d59",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f8949e35-7d3b-4265-8f06-1ec8a78b43d1"
        },
        "item": {
          "id": "0f792198-9374-444f-a64f-415058be71c9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "0f792198-9374-444f-a64f-415058be71c9",
        "cursor": {
          "ref": "245fd548-e890-4eaa-a2f3-9b5895086d59",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f8949e35-7d3b-4265-8f06-1ec8a78b43d1"
        },
        "item": {
          "id": "0f792198-9374-444f-a64f-415058be71c9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "a538a9b5-379a-4304-9cf4-7cffcf930c7d",
        "cursor": {
          "ref": "f8f8c9d2-303e-4c3f-9fe8-af18337a296b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "01bb2077-954c-4ddb-bb03-970fb59674d0"
        },
        "item": {
          "id": "a538a9b5-379a-4304-9cf4-7cffcf930c7d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "a538a9b5-379a-4304-9cf4-7cffcf930c7d",
        "cursor": {
          "ref": "f8f8c9d2-303e-4c3f-9fe8-af18337a296b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "01bb2077-954c-4ddb-bb03-970fb59674d0"
        },
        "item": {
          "id": "a538a9b5-379a-4304-9cf4-7cffcf930c7d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "97740ab6-7ffc-4df1-b72a-57cac8b3ce4b",
        "cursor": {
          "ref": "f68d137a-ae9c-4591-a63d-1f526bac8c6f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "17dc6455-f7a2-4b94-86ac-04ccc6bfb01d"
        },
        "item": {
          "id": "97740ab6-7ffc-4df1-b72a-57cac8b3ce4b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "97740ab6-7ffc-4df1-b72a-57cac8b3ce4b",
        "cursor": {
          "ref": "f68d137a-ae9c-4591-a63d-1f526bac8c6f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "17dc6455-f7a2-4b94-86ac-04ccc6bfb01d"
        },
        "item": {
          "id": "97740ab6-7ffc-4df1-b72a-57cac8b3ce4b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "0e393b57-8964-4b57-b16a-86961cf11420",
        "cursor": {
          "ref": "9bb9e481-8194-44e0-9a63-cc910ae2d2bb",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f74a8cf4-d966-4e76-bf68-4b9bda3808eb"
        },
        "item": {
          "id": "0e393b57-8964-4b57-b16a-86961cf11420",
          "name": "credentials_issue:options.created:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "0e393b57-8964-4b57-b16a-86961cf11420",
        "cursor": {
          "ref": "9bb9e481-8194-44e0-9a63-cc910ae2d2bb",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f74a8cf4-d966-4e76-bf68-4b9bda3808eb"
        },
        "item": {
          "id": "0e393b57-8964-4b57-b16a-86961cf11420",
          "name": "credentials_issue:options.created:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2b29174d-15d7-4d63-a4c9-74bea58e7ba1",
        "cursor": {
          "ref": "4cdf7ef6-1867-40fa-8f1a-7567d4e44c8f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "75f48a81-37a8-420a-82c3-5a919cd6b46e"
        },
        "item": {
          "id": "2b29174d-15d7-4d63-a4c9-74bea58e7ba1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "2b29174d-15d7-4d63-a4c9-74bea58e7ba1",
        "cursor": {
          "ref": "4cdf7ef6-1867-40fa-8f1a-7567d4e44c8f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "75f48a81-37a8-420a-82c3-5a919cd6b46e"
        },
        "item": {
          "id": "2b29174d-15d7-4d63-a4c9-74bea58e7ba1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "eec7033c-4a92-4409-9179-bc504ba81635",
        "cursor": {
          "ref": "29395c41-3572-48ae-a2b6-738b39bc74f5",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ed9ee72b-7065-41fc-a571-21183a4b0527"
        },
        "item": {
          "id": "eec7033c-4a92-4409-9179-bc504ba81635",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "eec7033c-4a92-4409-9179-bc504ba81635",
        "cursor": {
          "ref": "29395c41-3572-48ae-a2b6-738b39bc74f5",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ed9ee72b-7065-41fc-a571-21183a4b0527"
        },
        "item": {
          "id": "eec7033c-4a92-4409-9179-bc504ba81635",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "ad73c399-20f7-44ad-b93f-b0c7206b9e4f",
        "cursor": {
          "ref": "b538bf24-4b5a-4d29-b381-0b17a2da31f9",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8485f303-b938-4acf-bdc2-1e6263b465d1"
        },
        "item": {
          "id": "ad73c399-20f7-44ad-b93f-b0c7206b9e4f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "ad73c399-20f7-44ad-b93f-b0c7206b9e4f",
        "cursor": {
          "ref": "b538bf24-4b5a-4d29-b381-0b17a2da31f9",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8485f303-b938-4acf-bdc2-1e6263b465d1"
        },
        "item": {
          "id": "ad73c399-20f7-44ad-b93f-b0c7206b9e4f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "5700036d-198a-429b-8f93-5eeeb02cc56f",
        "cursor": {
          "ref": "228fa68e-5dff-42a6-9445-454781a04a64",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "33190680-411e-4852-9051-0ccbb33a9e97"
        },
        "item": {
          "id": "5700036d-198a-429b-8f93-5eeeb02cc56f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "5700036d-198a-429b-8f93-5eeeb02cc56f",
        "cursor": {
          "ref": "228fa68e-5dff-42a6-9445-454781a04a64",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "33190680-411e-4852-9051-0ccbb33a9e97"
        },
        "item": {
          "id": "5700036d-198a-429b-8f93-5eeeb02cc56f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "9eb2f120-21d4-4cc5-8b6c-ed8b7754c0bf",
        "cursor": {
          "ref": "8c610a03-0e3b-4dea-b6e0-8b1c92d6d652",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "08f2a8c4-d2dd-4807-bcda-1382277a2cea"
        },
        "item": {
          "id": "9eb2f120-21d4-4cc5-8b6c-ed8b7754c0bf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "9eb2f120-21d4-4cc5-8b6c-ed8b7754c0bf",
        "cursor": {
          "ref": "8c610a03-0e3b-4dea-b6e0-8b1c92d6d652",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "08f2a8c4-d2dd-4807-bcda-1382277a2cea"
        },
        "item": {
          "id": "9eb2f120-21d4-4cc5-8b6c-ed8b7754c0bf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "8384cad9-7aca-44ef-9992-7ef2f29909ed",
        "cursor": {
          "ref": "65438604-48ba-4cb9-b898-9125bc2715ee",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "97b2cce4-536a-4a53-966d-ad2fd5820818"
        },
        "item": {
          "id": "8384cad9-7aca-44ef-9992-7ef2f29909ed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "8384cad9-7aca-44ef-9992-7ef2f29909ed",
        "cursor": {
          "ref": "65438604-48ba-4cb9-b898-9125bc2715ee",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "97b2cce4-536a-4a53-966d-ad2fd5820818"
        },
        "item": {
          "id": "8384cad9-7aca-44ef-9992-7ef2f29909ed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "e3e7abf7-02a0-4c4d-9895-a39bc2f542b6",
        "cursor": {
          "ref": "91289d63-0fd5-43a0-87e6-ed8c4c8dbcee",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c691a25a-2359-442f-a8fd-c2d3c02a0585"
        },
        "item": {
          "id": "e3e7abf7-02a0-4c4d-9895-a39bc2f542b6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "e3e7abf7-02a0-4c4d-9895-a39bc2f542b6",
        "cursor": {
          "ref": "91289d63-0fd5-43a0-87e6-ed8c4c8dbcee",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c691a25a-2359-442f-a8fd-c2d3c02a0585"
        },
        "item": {
          "id": "e3e7abf7-02a0-4c4d-9895-a39bc2f542b6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "68a94fc5-96da-423a-8ac2-4d263b0789a3",
        "cursor": {
          "ref": "ddf6f196-51d3-4dc4-b1da-01e0d3166c2c",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8a072de9-ff76-4e68-94d1-f8b1c0d7b330"
        },
        "item": {
          "id": "68a94fc5-96da-423a-8ac2-4d263b0789a3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "68a94fc5-96da-423a-8ac2-4d263b0789a3",
        "cursor": {
          "ref": "ddf6f196-51d3-4dc4-b1da-01e0d3166c2c",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8a072de9-ff76-4e68-94d1-f8b1c0d7b330"
        },
        "item": {
          "id": "68a94fc5-96da-423a-8ac2-4d263b0789a3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "6bed705c-b391-409b-b0a1-0c54a49800ad",
        "cursor": {
          "ref": "50b42542-3ee5-4b67-b485-a0dff77a0fcc",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "df178140-96a0-4289-a839-a10e873f3bfb"
        },
        "item": {
          "id": "6bed705c-b391-409b-b0a1-0c54a49800ad",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "6bed705c-b391-409b-b0a1-0c54a49800ad",
        "cursor": {
          "ref": "50b42542-3ee5-4b67-b485-a0dff77a0fcc",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "df178140-96a0-4289-a839-a10e873f3bfb"
        },
        "item": {
          "id": "6bed705c-b391-409b-b0a1-0c54a49800ad",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "ceacea79-ef1e-459d-955e-6a700f065007",
        "cursor": {
          "ref": "9dd16848-789f-4f3a-9f9c-c6760665cc37",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "37dbb508-45e2-44e2-ab68-41398800f5fe"
        },
        "item": {
          "id": "ceacea79-ef1e-459d-955e-6a700f065007",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "ceacea79-ef1e-459d-955e-6a700f065007",
        "cursor": {
          "ref": "9dd16848-789f-4f3a-9f9c-c6760665cc37",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "37dbb508-45e2-44e2-ab68-41398800f5fe"
        },
        "item": {
          "id": "ceacea79-ef1e-459d-955e-6a700f065007",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "748f6fd2-55c7-4efd-8a2f-f1d06f2f4cbc",
        "cursor": {
          "ref": "4f3835e9-4adc-405c-96e4-21c8670b6037",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "cb59bb89-3fc5-4ffc-8871-1920c8a66837"
        },
        "item": {
          "id": "748f6fd2-55c7-4efd-8a2f-f1d06f2f4cbc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "748f6fd2-55c7-4efd-8a2f-f1d06f2f4cbc",
        "cursor": {
          "ref": "4f3835e9-4adc-405c-96e4-21c8670b6037",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "cb59bb89-3fc5-4ffc-8871-1920c8a66837"
        },
        "item": {
          "id": "748f6fd2-55c7-4efd-8a2f-f1d06f2f4cbc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "be4dc74a-3e46-488c-88d0-d5f3d3d05fd6",
        "cursor": {
          "ref": "3d752a96-c1a2-455b-901b-66a112023869",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7ac18864-8062-4779-b70f-685e40c04789"
        },
        "item": {
          "id": "be4dc74a-3e46-488c-88d0-d5f3d3d05fd6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "be4dc74a-3e46-488c-88d0-d5f3d3d05fd6",
        "cursor": {
          "ref": "3d752a96-c1a2-455b-901b-66a112023869",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7ac18864-8062-4779-b70f-685e40c04789"
        },
        "item": {
          "id": "be4dc74a-3e46-488c-88d0-d5f3d3d05fd6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "e1e2eef6-56da-4747-bb37-3b9c16a501f5",
        "cursor": {
          "ref": "20cb8646-654a-4e3d-a9b0-5e9a88725543",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3af33bea-db81-4fe6-a92e-c4dd3cfb63b1"
        },
        "item": {
          "id": "e1e2eef6-56da-4747-bb37-3b9c16a501f5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "e1e2eef6-56da-4747-bb37-3b9c16a501f5",
        "cursor": {
          "ref": "20cb8646-654a-4e3d-a9b0-5e9a88725543",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3af33bea-db81-4fe6-a92e-c4dd3cfb63b1"
        },
        "item": {
          "id": "e1e2eef6-56da-4747-bb37-3b9c16a501f5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "3a6f697e-6536-47ad-9045-b9f2fae8dde7",
        "cursor": {
          "ref": "a30d06f8-c824-45f6-bea3-6f19ec5fd28c",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b8fdc0a7-ddf8-41c4-8757-984f53d05cde"
        },
        "item": {
          "id": "3a6f697e-6536-47ad-9045-b9f2fae8dde7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "3a6f697e-6536-47ad-9045-b9f2fae8dde7",
        "cursor": {
          "ref": "a30d06f8-c824-45f6-bea3-6f19ec5fd28c",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b8fdc0a7-ddf8-41c4-8757-984f53d05cde"
        },
        "item": {
          "id": "3a6f697e-6536-47ad-9045-b9f2fae8dde7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "01c349d9-d7e1-4996-83af-1f3b6c7c69aa",
        "cursor": {
          "ref": "70a17787-25e6-4d47-ad95-7f9395bc5603",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e0f83268-6c89-4a88-81b6-4863a914b851"
        },
        "item": {
          "id": "01c349d9-d7e1-4996-83af-1f3b6c7c69aa",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "01c349d9-d7e1-4996-83af-1f3b6c7c69aa",
        "cursor": {
          "ref": "70a17787-25e6-4d47-ad95-7f9395bc5603",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e0f83268-6c89-4a88-81b6-4863a914b851"
        },
        "item": {
          "id": "01c349d9-d7e1-4996-83af-1f3b6c7c69aa",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "7156d505-f660-4e10-a202-0b2e188f2492",
        "cursor": {
          "ref": "5dcb5a39-b5e4-4a00-aeee-ceb61635ab63",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a574a0ff-8d84-45fc-9c07-b3af7c8626f7"
        },
        "item": {
          "id": "7156d505-f660-4e10-a202-0b2e188f2492",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "7156d505-f660-4e10-a202-0b2e188f2492",
        "cursor": {
          "ref": "5dcb5a39-b5e4-4a00-aeee-ceb61635ab63",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a574a0ff-8d84-45fc-9c07-b3af7c8626f7"
        },
        "item": {
          "id": "7156d505-f660-4e10-a202-0b2e188f2492",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "59c52b77-0463-497d-a2c2-cf9d4522132d",
        "cursor": {
          "ref": "3795e9cf-b473-4eca-b308-a303150a5096",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "97e5c5a6-fde1-452b-9023-501c91cff5c3"
        },
        "item": {
          "id": "59c52b77-0463-497d-a2c2-cf9d4522132d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "59c52b77-0463-497d-a2c2-cf9d4522132d",
        "cursor": {
          "ref": "3795e9cf-b473-4eca-b308-a303150a5096",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "97e5c5a6-fde1-452b-9023-501c91cff5c3"
        },
        "item": {
          "id": "59c52b77-0463-497d-a2c2-cf9d4522132d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "1051ea60-7570-4cc4-8d7a-4c22ac00f8c9",
        "cursor": {
          "ref": "d37c7e97-7e2a-439a-8740-5899b1bef523",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7c087a28-664b-484a-ba48-238d61b9fe2a"
        },
        "item": {
          "id": "1051ea60-7570-4cc4-8d7a-4c22ac00f8c9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "1051ea60-7570-4cc4-8d7a-4c22ac00f8c9",
        "cursor": {
          "ref": "d37c7e97-7e2a-439a-8740-5899b1bef523",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7c087a28-664b-484a-ba48-238d61b9fe2a"
        },
        "item": {
          "id": "1051ea60-7570-4cc4-8d7a-4c22ac00f8c9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "4176876e-63e5-4e29-895a-4bf0b7fa7f91",
        "cursor": {
          "ref": "700a1f4c-7fdc-4d44-84c0-54b6feb5037a",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "39289817-cc64-43b3-b93d-d3b8e97cb89e"
        },
        "item": {
          "id": "4176876e-63e5-4e29-895a-4bf0b7fa7f91",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "4176876e-63e5-4e29-895a-4bf0b7fa7f91",
        "cursor": {
          "ref": "700a1f4c-7fdc-4d44-84c0-54b6feb5037a",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "39289817-cc64-43b3-b93d-d3b8e97cb89e"
        },
        "item": {
          "id": "4176876e-63e5-4e29-895a-4bf0b7fa7f91",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "2258a557-c6ed-4eee-8544-a0e2ba5b780a",
        "cursor": {
          "ref": "06812da7-a153-46dd-be58-b44892ecaeb2",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "914c72c8-1c46-4f13-9ca9-9ddc6c61e902"
        },
        "item": {
          "id": "2258a557-c6ed-4eee-8544-a0e2ba5b780a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2258a557-c6ed-4eee-8544-a0e2ba5b780a",
        "cursor": {
          "ref": "06812da7-a153-46dd-be58-b44892ecaeb2",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "914c72c8-1c46-4f13-9ca9-9ddc6c61e902"
        },
        "item": {
          "id": "2258a557-c6ed-4eee-8544-a0e2ba5b780a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8b7353a1-8fcc-4a06-84fe-097c03e93808",
        "cursor": {
          "ref": "995705fd-028d-4e90-9d10-d3aa9aabf9b2",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "af5ed5dd-b82f-4d93-9318-c389ccedc349"
        },
        "item": {
          "id": "8b7353a1-8fcc-4a06-84fe-097c03e93808",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "8b7353a1-8fcc-4a06-84fe-097c03e93808",
        "cursor": {
          "ref": "995705fd-028d-4e90-9d10-d3aa9aabf9b2",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "af5ed5dd-b82f-4d93-9318-c389ccedc349"
        },
        "item": {
          "id": "8b7353a1-8fcc-4a06-84fe-097c03e93808",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "3697cebf-ff42-41ae-9b1d-2814f4e0f54d",
        "cursor": {
          "ref": "673565ec-e7a6-4828-a1c9-a79aa410d6fd",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0e1755ca-11df-4dfb-ae5b-4a2dd9468bf6"
        },
        "item": {
          "id": "3697cebf-ff42-41ae-9b1d-2814f4e0f54d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "3697cebf-ff42-41ae-9b1d-2814f4e0f54d",
        "cursor": {
          "ref": "673565ec-e7a6-4828-a1c9-a79aa410d6fd",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0e1755ca-11df-4dfb-ae5b-4a2dd9468bf6"
        },
        "item": {
          "id": "3697cebf-ff42-41ae-9b1d-2814f4e0f54d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "ce81d444-29b0-43b2-afbe-ec2d9dc222eb",
        "cursor": {
          "ref": "b9624f0b-e24e-48d3-a23d-e81cec5a0461",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fd04ecd7-5224-4fae-8fc6-a350da0baba5"
        },
        "item": {
          "id": "ce81d444-29b0-43b2-afbe-ec2d9dc222eb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "ce81d444-29b0-43b2-afbe-ec2d9dc222eb",
        "cursor": {
          "ref": "b9624f0b-e24e-48d3-a23d-e81cec5a0461",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fd04ecd7-5224-4fae-8fc6-a350da0baba5"
        },
        "item": {
          "id": "ce81d444-29b0-43b2-afbe-ec2d9dc222eb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f53d9fff-ee87-472f-8a80-37f75293aa6e",
        "cursor": {
          "ref": "351f060c-ee63-4f30-ab1d-15dc548bba3e",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "786f0527-ca5e-4059-9ca8-ea819f773f94"
        },
        "item": {
          "id": "f53d9fff-ee87-472f-8a80-37f75293aa6e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f53d9fff-ee87-472f-8a80-37f75293aa6e",
        "cursor": {
          "ref": "351f060c-ee63-4f30-ab1d-15dc548bba3e",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "786f0527-ca5e-4059-9ca8-ea819f773f94"
        },
        "item": {
          "id": "f53d9fff-ee87-472f-8a80-37f75293aa6e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "012f16f7-8dba-4643-a142-5f916530635f",
        "cursor": {
          "ref": "a70bc4df-9aee-4f30-bf97-c3ffebbfdd63",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2bfb2c25-e064-47ca-bea9-f3377f8e0611"
        },
        "item": {
          "id": "012f16f7-8dba-4643-a142-5f916530635f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "012f16f7-8dba-4643-a142-5f916530635f",
        "cursor": {
          "ref": "a70bc4df-9aee-4f30-bf97-c3ffebbfdd63",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2bfb2c25-e064-47ca-bea9-f3377f8e0611"
        },
        "item": {
          "id": "012f16f7-8dba-4643-a142-5f916530635f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a93afb5d-3aa4-4ae4-a75f-a2233b62d447",
        "cursor": {
          "ref": "ea18b001-2193-45e3-8fd9-8807d2a0fe68",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5d5d9fff-3eff-4ec2-b5b2-6157ba151712"
        },
        "item": {
          "id": "a93afb5d-3aa4-4ae4-a75f-a2233b62d447",
          "name": "credentials_status:credentialId:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a93afb5d-3aa4-4ae4-a75f-a2233b62d447",
        "cursor": {
          "ref": "ea18b001-2193-45e3-8fd9-8807d2a0fe68",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5d5d9fff-3eff-4ec2-b5b2-6157ba151712"
        },
        "item": {
          "id": "a93afb5d-3aa4-4ae4-a75f-a2233b62d447",
          "name": "credentials_status:credentialId:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "d160c853-d7c5-438a-a586-cf3e84bd5cc8",
        "cursor": {
          "ref": "af2c6cdf-7869-446b-b07b-0f6a55c3d905",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "adcd5e94-3f01-4359-b4d3-f4e6587497b2"
        },
        "item": {
          "id": "d160c853-d7c5-438a-a586-cf3e84bd5cc8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d160c853-d7c5-438a-a586-cf3e84bd5cc8",
        "cursor": {
          "ref": "af2c6cdf-7869-446b-b07b-0f6a55c3d905",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "adcd5e94-3f01-4359-b4d3-f4e6587497b2"
        },
        "item": {
          "id": "d160c853-d7c5-438a-a586-cf3e84bd5cc8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "47cedc4c-6700-4e40-99bc-fa6159f46b8b",
        "cursor": {
          "ref": "67319ae0-ef57-49ab-bb46-22e969604447",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "91231ad0-1943-46e7-8089-de275834b335"
        },
        "item": {
          "id": "47cedc4c-6700-4e40-99bc-fa6159f46b8b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "47cedc4c-6700-4e40-99bc-fa6159f46b8b",
        "cursor": {
          "ref": "67319ae0-ef57-49ab-bb46-22e969604447",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "91231ad0-1943-46e7-8089-de275834b335"
        },
        "item": {
          "id": "47cedc4c-6700-4e40-99bc-fa6159f46b8b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "8aeaa1d3-b857-4dfc-9621-cf5f0b9c2b19",
        "cursor": {
          "ref": "680d9900-3597-4dda-8286-0e156d1161fc",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "64e67029-0b74-4ec8-a590-beb9e1c6cc25"
        },
        "item": {
          "id": "8aeaa1d3-b857-4dfc-9621-cf5f0b9c2b19",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "8aeaa1d3-b857-4dfc-9621-cf5f0b9c2b19",
        "cursor": {
          "ref": "680d9900-3597-4dda-8286-0e156d1161fc",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "64e67029-0b74-4ec8-a590-beb9e1c6cc25"
        },
        "item": {
          "id": "8aeaa1d3-b857-4dfc-9621-cf5f0b9c2b19",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "7a199892-e4c8-4d1f-ad3a-f1b0fc345bf6",
        "cursor": {
          "ref": "e462597f-30b0-4cb9-9f6c-b8780482479e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "27a474f6-8f32-4425-9285-045b61c373e8"
        },
        "item": {
          "id": "7a199892-e4c8-4d1f-ad3a-f1b0fc345bf6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "7a199892-e4c8-4d1f-ad3a-f1b0fc345bf6",
        "cursor": {
          "ref": "e462597f-30b0-4cb9-9f6c-b8780482479e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "27a474f6-8f32-4425-9285-045b61c373e8"
        },
        "item": {
          "id": "7a199892-e4c8-4d1f-ad3a-f1b0fc345bf6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "3ccccc93-a281-4ee1-85d2-e83bb56a0f4b",
        "cursor": {
          "ref": "05194a32-5f89-497d-b219-40daee5e3e6c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ee200f92-24e3-4b95-9191-d1e7bbd7cf6b"
        },
        "item": {
          "id": "3ccccc93-a281-4ee1-85d2-e83bb56a0f4b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "3ccccc93-a281-4ee1-85d2-e83bb56a0f4b",
        "cursor": {
          "ref": "05194a32-5f89-497d-b219-40daee5e3e6c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ee200f92-24e3-4b95-9191-d1e7bbd7cf6b"
        },
        "item": {
          "id": "3ccccc93-a281-4ee1-85d2-e83bb56a0f4b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "158ebaa3-fed6-4d92-b4b4-40402f5077f0",
        "cursor": {
          "ref": "73a6adfc-e6c3-4dd7-92ec-733260a2d5ba",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d5f44887-9dc3-4f36-926b-6fbb12a01347"
        },
        "item": {
          "id": "158ebaa3-fed6-4d92-b4b4-40402f5077f0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "158ebaa3-fed6-4d92-b4b4-40402f5077f0",
        "cursor": {
          "ref": "73a6adfc-e6c3-4dd7-92ec-733260a2d5ba",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d5f44887-9dc3-4f36-926b-6fbb12a01347"
        },
        "item": {
          "id": "158ebaa3-fed6-4d92-b4b4-40402f5077f0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e07fff07-85c5-424e-b49f-5c40a1dbb1cb",
        "cursor": {
          "ref": "a157d2d9-e55a-4ea5-8386-b481cc6f15c5",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fc36ba0e-a64c-40b0-a71e-d99cf7300bfc"
        },
        "item": {
          "id": "e07fff07-85c5-424e-b49f-5c40a1dbb1cb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e07fff07-85c5-424e-b49f-5c40a1dbb1cb",
        "cursor": {
          "ref": "a157d2d9-e55a-4ea5-8386-b481cc6f15c5",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fc36ba0e-a64c-40b0-a71e-d99cf7300bfc"
        },
        "item": {
          "id": "e07fff07-85c5-424e-b49f-5c40a1dbb1cb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "b8a2cd3a-66a0-4adc-95d9-c924f4b2714a",
        "cursor": {
          "ref": "734c468c-5800-4cfd-a588-84440427e27e",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ca4152a4-830b-408e-8cb7-717916c9dd37"
        },
        "item": {
          "id": "b8a2cd3a-66a0-4adc-95d9-c924f4b2714a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "b8a2cd3a-66a0-4adc-95d9-c924f4b2714a",
        "cursor": {
          "ref": "734c468c-5800-4cfd-a588-84440427e27e",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ca4152a4-830b-408e-8cb7-717916c9dd37"
        },
        "item": {
          "id": "b8a2cd3a-66a0-4adc-95d9-c924f4b2714a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5fd2f129-639f-446d-bc7a-4eb6cbbc7f6c",
        "cursor": {
          "ref": "834b343b-8c53-4cc5-ac66-e4b0074763a2",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b12b57fa-669e-4980-b695-5ce329e0dcc6"
        },
        "item": {
          "id": "5fd2f129-639f-446d-bc7a-4eb6cbbc7f6c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5fd2f129-639f-446d-bc7a-4eb6cbbc7f6c",
        "cursor": {
          "ref": "834b343b-8c53-4cc5-ac66-e4b0074763a2",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b12b57fa-669e-4980-b695-5ce329e0dcc6"
        },
        "item": {
          "id": "5fd2f129-639f-446d-bc7a-4eb6cbbc7f6c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a87305c5-78d2-4557-b53b-3159ab297755",
        "cursor": {
          "ref": "ec3ab5d7-0c90-4b47-b531-05ef762a00e2",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5559280c-2ec2-4c89-be6d-fc68f2edb55d"
        },
        "item": {
          "id": "a87305c5-78d2-4557-b53b-3159ab297755",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a87305c5-78d2-4557-b53b-3159ab297755",
        "cursor": {
          "ref": "ec3ab5d7-0c90-4b47-b531-05ef762a00e2",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5559280c-2ec2-4c89-be6d-fc68f2edb55d"
        },
        "item": {
          "id": "a87305c5-78d2-4557-b53b-3159ab297755",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f001c54c-b4cc-43e0-bab5-5a3c6acdc168",
        "cursor": {
          "ref": "1f6cabcc-8c08-484d-9361-0abea87f570c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6565f3f3-f52f-4ba4-8ba6-d3380e077fa5"
        },
        "item": {
          "id": "f001c54c-b4cc-43e0-bab5-5a3c6acdc168",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f001c54c-b4cc-43e0-bab5-5a3c6acdc168",
        "cursor": {
          "ref": "1f6cabcc-8c08-484d-9361-0abea87f570c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6565f3f3-f52f-4ba4-8ba6-d3380e077fa5"
        },
        "item": {
          "id": "f001c54c-b4cc-43e0-bab5-5a3c6acdc168",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "72289d19-0964-4eb6-8742-5192663c992f",
        "cursor": {
          "ref": "1628655e-c169-4bb9-89d4-28465c8efde1",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cfbb8aea-b56a-485b-93ce-476558d2c5aa"
        },
        "item": {
          "id": "72289d19-0964-4eb6-8742-5192663c992f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "72289d19-0964-4eb6-8742-5192663c992f",
        "cursor": {
          "ref": "1628655e-c169-4bb9-89d4-28465c8efde1",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cfbb8aea-b56a-485b-93ce-476558d2c5aa"
        },
        "item": {
          "id": "72289d19-0964-4eb6-8742-5192663c992f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "00fba645-49ed-456c-a4a5-bd31c479cce5",
        "cursor": {
          "ref": "ababb7c1-9291-45de-a8ba-308db94a7f27",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b898fe0a-f9ce-4179-b484-47f8f6d1f07e"
        },
        "item": {
          "id": "00fba645-49ed-456c-a4a5-bd31c479cce5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "00fba645-49ed-456c-a4a5-bd31c479cce5",
        "cursor": {
          "ref": "ababb7c1-9291-45de-a8ba-308db94a7f27",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b898fe0a-f9ce-4179-b484-47f8f6d1f07e"
        },
        "item": {
          "id": "00fba645-49ed-456c-a4a5-bd31c479cce5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "24a40761-ad88-47ff-a0ff-30db96a4e85a",
        "cursor": {
          "ref": "f3eb17fa-35ad-42de-a25a-eaa8b3d5fa26",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c656a625-7caa-43a7-9eeb-a40a999deb07"
        },
        "item": {
          "id": "24a40761-ad88-47ff-a0ff-30db96a4e85a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "24a40761-ad88-47ff-a0ff-30db96a4e85a",
        "cursor": {
          "ref": "f3eb17fa-35ad-42de-a25a-eaa8b3d5fa26",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c656a625-7caa-43a7-9eeb-a40a999deb07"
        },
        "item": {
          "id": "24a40761-ad88-47ff-a0ff-30db96a4e85a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "11f2bd03-0f1f-469c-9ecb-ccf625cb4d23",
        "cursor": {
          "ref": "d78b8abf-a457-47ef-b402-ef07e84a5e21",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2699424d-8c1b-4286-ba62-d234213b7b15"
        },
        "item": {
          "id": "11f2bd03-0f1f-469c-9ecb-ccf625cb4d23",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "11f2bd03-0f1f-469c-9ecb-ccf625cb4d23",
        "cursor": {
          "ref": "d78b8abf-a457-47ef-b402-ef07e84a5e21",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2699424d-8c1b-4286-ba62-d234213b7b15"
        },
        "item": {
          "id": "11f2bd03-0f1f-469c-9ecb-ccf625cb4d23",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "c4862457-e8a3-4698-b4e5-ee40e32e8d88",
        "cursor": {
          "ref": "8aa011d4-733f-4c20-9457-d2082ce9891c",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "64f9950e-dc49-4e86-adc5-30a0003cc6e4"
        },
        "item": {
          "id": "c4862457-e8a3-4698-b4e5-ee40e32e8d88",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c4862457-e8a3-4698-b4e5-ee40e32e8d88",
        "cursor": {
          "ref": "8aa011d4-733f-4c20-9457-d2082ce9891c",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "64f9950e-dc49-4e86-adc5-30a0003cc6e4"
        },
        "item": {
          "id": "c4862457-e8a3-4698-b4e5-ee40e32e8d88",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c60e4459-c857-49e9-95f3-1dc62ad79a2b",
        "cursor": {
          "ref": "a9bea438-900b-4396-94b1-8a26352c7668",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e6875ab9-3134-4bd1-8ee2-e0c634f5146c"
        },
        "item": {
          "id": "c60e4459-c857-49e9-95f3-1dc62ad79a2b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c60e4459-c857-49e9-95f3-1dc62ad79a2b",
        "cursor": {
          "ref": "a9bea438-900b-4396-94b1-8a26352c7668",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e6875ab9-3134-4bd1-8ee2-e0c634f5146c"
        },
        "item": {
          "id": "c60e4459-c857-49e9-95f3-1dc62ad79a2b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "14001db0-75b1-41d0-aab6-5616dbe908b2",
        "cursor": {
          "ref": "3db0e7f2-13db-406a-bc1d-a2fd291c0457",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7e7872bd-25b4-4cb1-8dff-a64581803543"
        },
        "item": {
          "id": "14001db0-75b1-41d0-aab6-5616dbe908b2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "14001db0-75b1-41d0-aab6-5616dbe908b2",
        "cursor": {
          "ref": "3db0e7f2-13db-406a-bc1d-a2fd291c0457",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7e7872bd-25b4-4cb1-8dff-a64581803543"
        },
        "item": {
          "id": "14001db0-75b1-41d0-aab6-5616dbe908b2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "018cb472-932c-480c-8e43-d50ae351dc32",
        "cursor": {
          "ref": "3871ee80-0f1d-4aa9-af1e-131e5c6abd68",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1ca801a5-60ea-480f-a51a-bf1ddef896d5"
        },
        "item": {
          "id": "018cb472-932c-480c-8e43-d50ae351dc32",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "018cb472-932c-480c-8e43-d50ae351dc32",
        "cursor": {
          "ref": "3871ee80-0f1d-4aa9-af1e-131e5c6abd68",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1ca801a5-60ea-480f-a51a-bf1ddef896d5"
        },
        "item": {
          "id": "018cb472-932c-480c-8e43-d50ae351dc32",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "a037bcee-960e-415b-a9b3-a5ab39753110",
        "cursor": {
          "ref": "6dcf87b8-1f12-4350-8981-d93dec61db0c",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9e72f54c-2c2a-41d9-a499-2f9c41031210"
        },
        "item": {
          "id": "a037bcee-960e-415b-a9b3-a5ab39753110",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a037bcee-960e-415b-a9b3-a5ab39753110",
        "cursor": {
          "ref": "6dcf87b8-1f12-4350-8981-d93dec61db0c",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9e72f54c-2c2a-41d9-a499-2f9c41031210"
        },
        "item": {
          "id": "a037bcee-960e-415b-a9b3-a5ab39753110",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "f33bfd85-fbf1-4e1f-a9e0-54e4ba0b181d",
        "cursor": {
          "ref": "5aa9ab84-ab91-42f8-8cdf-c0fb68bc1182",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "05e59bd1-e669-4c40-a75b-7a70642d3df3"
        },
        "item": {
          "id": "f33bfd85-fbf1-4e1f-a9e0-54e4ba0b181d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f33bfd85-fbf1-4e1f-a9e0-54e4ba0b181d",
        "cursor": {
          "ref": "5aa9ab84-ab91-42f8-8cdf-c0fb68bc1182",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "05e59bd1-e669-4c40-a75b-7a70642d3df3"
        },
        "item": {
          "id": "f33bfd85-fbf1-4e1f-a9e0-54e4ba0b181d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ec268ef1-1616-461d-8e22-9e93ef0a4c28",
        "cursor": {
          "ref": "f126f38a-53ed-4c9f-9617-518579932918",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b3475b1c-94cc-47d5-9b1d-3510a1f858bb"
        },
        "item": {
          "id": "ec268ef1-1616-461d-8e22-9e93ef0a4c28",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ec268ef1-1616-461d-8e22-9e93ef0a4c28",
        "cursor": {
          "ref": "f126f38a-53ed-4c9f-9617-518579932918",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b3475b1c-94cc-47d5-9b1d-3510a1f858bb"
        },
        "item": {
          "id": "ec268ef1-1616-461d-8e22-9e93ef0a4c28",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "012cb152-4575-48ab-84f4-ba8996708650",
        "cursor": {
          "ref": "89a68c75-220f-46fb-afbf-2970bc51e5f3",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "eb55d127-e1b7-4956-94f4-05a70640c8d9"
        },
        "item": {
          "id": "012cb152-4575-48ab-84f4-ba8996708650",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "012cb152-4575-48ab-84f4-ba8996708650",
        "cursor": {
          "ref": "89a68c75-220f-46fb-afbf-2970bc51e5f3",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "eb55d127-e1b7-4956-94f4-05a70640c8d9"
        },
        "item": {
          "id": "012cb152-4575-48ab-84f4-ba8996708650",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "f30df6e3-58b2-4fd1-99e3-f5bc35842427",
        "cursor": {
          "ref": "63bdc416-6562-4485-abf1-1c5fa54f5c43",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8185f5ac-2c03-48ee-bc85-1d2c2979297f"
        },
        "item": {
          "id": "f30df6e3-58b2-4fd1-99e3-f5bc35842427",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "f30df6e3-58b2-4fd1-99e3-f5bc35842427",
        "cursor": {
          "ref": "63bdc416-6562-4485-abf1-1c5fa54f5c43",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8185f5ac-2c03-48ee-bc85-1d2c2979297f"
        },
        "item": {
          "id": "f30df6e3-58b2-4fd1-99e3-f5bc35842427",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "7134b3e6-7aaa-46b0-bbca-772b9ebf9f76",
        "cursor": {
          "ref": "c6c39097-f7f9-4ce9-bc1b-5a9ee85517ae",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4943d2fb-68b2-4325-be48-7fa0f2c47642"
        },
        "item": {
          "id": "7134b3e6-7aaa-46b0-bbca-772b9ebf9f76",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "7134b3e6-7aaa-46b0-bbca-772b9ebf9f76",
        "cursor": {
          "ref": "c6c39097-f7f9-4ce9-bc1b-5a9ee85517ae",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4943d2fb-68b2-4325-be48-7fa0f2c47642"
        },
        "item": {
          "id": "7134b3e6-7aaa-46b0-bbca-772b9ebf9f76",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "8b34a12f-99e8-4efa-978a-24c1ffbb1eb7",
        "cursor": {
          "ref": "1727af7a-525b-4f58-84e3-7c79f109b261",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6ee65652-b7d5-4073-be4d-efe3865db148"
        },
        "item": {
          "id": "8b34a12f-99e8-4efa-978a-24c1ffbb1eb7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "8b34a12f-99e8-4efa-978a-24c1ffbb1eb7",
        "cursor": {
          "ref": "1727af7a-525b-4f58-84e3-7c79f109b261",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6ee65652-b7d5-4073-be4d-efe3865db148"
        },
        "item": {
          "id": "8b34a12f-99e8-4efa-978a-24c1ffbb1eb7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e5d5a2e8-b6af-4e4e-94bf-8395f4cbc42b",
        "cursor": {
          "ref": "407da1b9-31ac-4007-8660-b7c3c162bc52",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8c3222fc-2b17-46ba-8df0-fe70f9946091"
        },
        "item": {
          "id": "e5d5a2e8-b6af-4e4e-94bf-8395f4cbc42b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e5d5a2e8-b6af-4e4e-94bf-8395f4cbc42b",
        "cursor": {
          "ref": "407da1b9-31ac-4007-8660-b7c3c162bc52",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8c3222fc-2b17-46ba-8df0-fe70f9946091"
        },
        "item": {
          "id": "e5d5a2e8-b6af-4e4e-94bf-8395f4cbc42b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7855112e-9fc8-4019-8e56-9f4b0a0d100f",
        "cursor": {
          "ref": "83711939-77e6-498b-a92c-80bdb6eea8ba",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dfed01a1-bba1-449e-95a7-0bab49772303"
        },
        "item": {
          "id": "7855112e-9fc8-4019-8e56-9f4b0a0d100f",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "7855112e-9fc8-4019-8e56-9f4b0a0d100f",
        "cursor": {
          "ref": "83711939-77e6-498b-a92c-80bdb6eea8ba",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dfed01a1-bba1-449e-95a7-0bab49772303"
        },
        "item": {
          "id": "7855112e-9fc8-4019-8e56-9f4b0a0d100f",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5582b45e-badf-4040-9a02-20536b4076d5",
        "cursor": {
          "ref": "34fc1407-a848-48b8-aad2-05106354e000",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "65777a19-2432-49f8-a3d4-d57b1195a232"
        },
        "item": {
          "id": "5582b45e-badf-4040-9a02-20536b4076d5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5582b45e-badf-4040-9a02-20536b4076d5",
        "cursor": {
          "ref": "34fc1407-a848-48b8-aad2-05106354e000",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "65777a19-2432-49f8-a3d4-d57b1195a232"
        },
        "item": {
          "id": "5582b45e-badf-4040-9a02-20536b4076d5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5d6ac5e1-a469-4aa5-a924-1c53f1e09586",
        "cursor": {
          "ref": "f88929dd-a0a0-4a91-8a66-17bcadb17cea",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6f747758-062d-4a3e-bf82-02f63bc158d7"
        },
        "item": {
          "id": "5d6ac5e1-a469-4aa5-a924-1c53f1e09586",
          "name": "credentials_status:credentialId:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "5d6ac5e1-a469-4aa5-a924-1c53f1e09586",
        "cursor": {
          "ref": "f88929dd-a0a0-4a91-8a66-17bcadb17cea",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6f747758-062d-4a3e-bf82-02f63bc158d7"
        },
        "item": {
          "id": "5d6ac5e1-a469-4aa5-a924-1c53f1e09586",
          "name": "credentials_status:credentialId:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6723b4fd-b04d-450f-a644-78199c1d9a19",
        "cursor": {
          "ref": "4ddeb30f-be88-4b45-9411-223693bdf528",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8a8efaa0-1409-4f25-8de3-0ffa92b80b9c"
        },
        "item": {
          "id": "6723b4fd-b04d-450f-a644-78199c1d9a19",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "6723b4fd-b04d-450f-a644-78199c1d9a19",
        "cursor": {
          "ref": "4ddeb30f-be88-4b45-9411-223693bdf528",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8a8efaa0-1409-4f25-8de3-0ffa92b80b9c"
        },
        "item": {
          "id": "6723b4fd-b04d-450f-a644-78199c1d9a19",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "6f6d7381-ded0-4ab8-9cf8-3be98118ec24",
        "cursor": {
          "ref": "43f4393b-a918-4a59-863b-8723f91e8769",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a571e1dc-df78-4066-9f24-2d9103cb7d63"
        },
        "item": {
          "id": "6f6d7381-ded0-4ab8-9cf8-3be98118ec24",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "6f6d7381-ded0-4ab8-9cf8-3be98118ec24",
        "cursor": {
          "ref": "43f4393b-a918-4a59-863b-8723f91e8769",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a571e1dc-df78-4066-9f24-2d9103cb7d63"
        },
        "item": {
          "id": "6f6d7381-ded0-4ab8-9cf8-3be98118ec24",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "09d5356c-f1f7-4181-9fb6-f3e6327c1f47",
        "cursor": {
          "ref": "81b013c8-3a02-4369-98b9-927ba9263221",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "65533544-df69-43fc-9bbb-eacc7561b715"
        },
        "item": {
          "id": "09d5356c-f1f7-4181-9fb6-f3e6327c1f47",
          "name": "credentials_status:credentialId:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "09d5356c-f1f7-4181-9fb6-f3e6327c1f47",
        "cursor": {
          "ref": "81b013c8-3a02-4369-98b9-927ba9263221",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "65533544-df69-43fc-9bbb-eacc7561b715"
        },
        "item": {
          "id": "09d5356c-f1f7-4181-9fb6-f3e6327c1f47",
          "name": "credentials_status:credentialId:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "e95b0786-84c4-4140-b070-1c500ce312d3",
        "cursor": {
          "ref": "d2638fed-08d2-49c2-b3e7-8ba5141e6d5f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "683d76e1-975a-4442-8491-a514bd768c98"
        },
        "item": {
          "id": "e95b0786-84c4-4140-b070-1c500ce312d3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "e95b0786-84c4-4140-b070-1c500ce312d3",
        "cursor": {
          "ref": "d2638fed-08d2-49c2-b3e7-8ba5141e6d5f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "683d76e1-975a-4442-8491-a514bd768c98"
        },
        "item": {
          "id": "e95b0786-84c4-4140-b070-1c500ce312d3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "a5dab0dd-9a96-4340-9cca-563fac99e1af",
        "cursor": {
          "ref": "289fe217-4929-473b-85c5-1318af2c621a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "af05bacd-a9d3-4eeb-aeeb-6d312489528e"
        },
        "item": {
          "id": "a5dab0dd-9a96-4340-9cca-563fac99e1af",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "a5dab0dd-9a96-4340-9cca-563fac99e1af",
        "cursor": {
          "ref": "289fe217-4929-473b-85c5-1318af2c621a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "af05bacd-a9d3-4eeb-aeeb-6d312489528e"
        },
        "item": {
          "id": "a5dab0dd-9a96-4340-9cca-563fac99e1af",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "2cca1582-8bc0-4f1d-8e99-ca2527a7bc75",
        "cursor": {
          "ref": "efac9e97-2746-4230-831e-2494cb732832",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "13a1754e-f187-4c9d-8a75-9c5ee1804676"
        },
        "item": {
          "id": "2cca1582-8bc0-4f1d-8e99-ca2527a7bc75",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "2cca1582-8bc0-4f1d-8e99-ca2527a7bc75",
        "cursor": {
          "ref": "efac9e97-2746-4230-831e-2494cb732832",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "13a1754e-f187-4c9d-8a75-9c5ee1804676"
        },
        "item": {
          "id": "2cca1582-8bc0-4f1d-8e99-ca2527a7bc75",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "52a893a5-d9ee-4317-8b19-4d559275b136",
        "cursor": {
          "ref": "aca245ca-8611-45c6-a890-3d21fabed8a6",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e3c48295-a4cf-4400-9554-40ddde5b34cb"
        },
        "item": {
          "id": "52a893a5-d9ee-4317-8b19-4d559275b136",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "52a893a5-d9ee-4317-8b19-4d559275b136",
        "cursor": {
          "ref": "aca245ca-8611-45c6-a890-3d21fabed8a6",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e3c48295-a4cf-4400-9554-40ddde5b34cb"
        },
        "item": {
          "id": "52a893a5-d9ee-4317-8b19-4d559275b136",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "d3260395-f166-45b0-afea-9b2ce9aef778",
        "cursor": {
          "ref": "b43c99b2-00fe-48f6-a870-56794ba21dc2",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3931158a-f1c9-4f75-8a34-691144c958ee"
        },
        "item": {
          "id": "d3260395-f166-45b0-afea-9b2ce9aef778",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "d3260395-f166-45b0-afea-9b2ce9aef778",
        "cursor": {
          "ref": "b43c99b2-00fe-48f6-a870-56794ba21dc2",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3931158a-f1c9-4f75-8a34-691144c958ee"
        },
        "item": {
          "id": "d3260395-f166-45b0-afea-9b2ce9aef778",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "29b02d39-8b92-4439-87b1-c903ef4b2a6a",
        "cursor": {
          "ref": "ceb1ffe7-6d72-4e56-89ea-9f4332819bc1",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "84a2228a-fc44-4a32-8d93-ef879b37e5a4"
        },
        "item": {
          "id": "29b02d39-8b92-4439-87b1-c903ef4b2a6a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "29b02d39-8b92-4439-87b1-c903ef4b2a6a",
        "cursor": {
          "ref": "ceb1ffe7-6d72-4e56-89ea-9f4332819bc1",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "84a2228a-fc44-4a32-8d93-ef879b37e5a4"
        },
        "item": {
          "id": "29b02d39-8b92-4439-87b1-c903ef4b2a6a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "bcc2cd7b-639e-4982-af82-f9d716ebd9ef",
        "cursor": {
          "ref": "b5b2d7e2-e2f3-4d28-8b91-96b7832c959e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1f5a9e0c-fa9c-4b11-8e17-b46e97548eae"
        },
        "item": {
          "id": "bcc2cd7b-639e-4982-af82-f9d716ebd9ef",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "bcc2cd7b-639e-4982-af82-f9d716ebd9ef",
        "cursor": {
          "ref": "b5b2d7e2-e2f3-4d28-8b91-96b7832c959e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1f5a9e0c-fa9c-4b11-8e17-b46e97548eae"
        },
        "item": {
          "id": "bcc2cd7b-639e-4982-af82-f9d716ebd9ef",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "44db08fd-5b01-4c0a-9061-f3083fab7e7a",
        "cursor": {
          "ref": "3c72c045-d635-45de-910d-6714b1dea4ac",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f6beecb9-8498-4739-8674-1aba0c6cbc0a"
        },
        "item": {
          "id": "44db08fd-5b01-4c0a-9061-f3083fab7e7a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "44db08fd-5b01-4c0a-9061-f3083fab7e7a",
        "cursor": {
          "ref": "3c72c045-d635-45de-910d-6714b1dea4ac",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f6beecb9-8498-4739-8674-1aba0c6cbc0a"
        },
        "item": {
          "id": "44db08fd-5b01-4c0a-9061-f3083fab7e7a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "fda065ee-10dd-44de-868c-daa6aa7ff081",
        "cursor": {
          "ref": "3934824f-55ea-498b-8b4d-317a5eaaf2e1",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d97e7382-62de-4129-9916-7bb72473e6c4"
        },
        "item": {
          "id": "fda065ee-10dd-44de-868c-daa6aa7ff081",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "fda065ee-10dd-44de-868c-daa6aa7ff081",
        "cursor": {
          "ref": "3934824f-55ea-498b-8b4d-317a5eaaf2e1",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d97e7382-62de-4129-9916-7bb72473e6c4"
        },
        "item": {
          "id": "fda065ee-10dd-44de-868c-daa6aa7ff081",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "5fe73b92-1eaa-433b-aa28-51ae9c79cc19",
        "cursor": {
          "ref": "9c5fbae8-6556-47d1-8ce6-8f12de631699",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ca36734b-e836-4bae-addc-3f1129fc0386"
        },
        "item": {
          "id": "5fe73b92-1eaa-433b-aa28-51ae9c79cc19",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "5fe73b92-1eaa-433b-aa28-51ae9c79cc19",
        "cursor": {
          "ref": "9c5fbae8-6556-47d1-8ce6-8f12de631699",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ca36734b-e836-4bae-addc-3f1129fc0386"
        },
        "item": {
          "id": "5fe73b92-1eaa-433b-aa28-51ae9c79cc19",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "4f59046e-58bb-4ce1-9003-9bf28de43c49",
        "cursor": {
          "ref": "97c01d0b-3b16-4923-a4ba-129bf3be20b5",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fbf584e6-f0de-431d-bbdb-ca0ad40dd821"
        },
        "item": {
          "id": "4f59046e-58bb-4ce1-9003-9bf28de43c49",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "4f59046e-58bb-4ce1-9003-9bf28de43c49",
        "cursor": {
          "ref": "97c01d0b-3b16-4923-a4ba-129bf3be20b5",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fbf584e6-f0de-431d-bbdb-ca0ad40dd821"
        },
        "item": {
          "id": "4f59046e-58bb-4ce1-9003-9bf28de43c49",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "1ddbe7f8-95ae-41b1-8320-e3c7e9c54f57",
        "cursor": {
          "ref": "6147bade-99ad-4732-967d-37ecc794eb3b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fae1b546-9a38-471c-8f9a-415a798871a5"
        },
        "item": {
          "id": "1ddbe7f8-95ae-41b1-8320-e3c7e9c54f57",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "1ddbe7f8-95ae-41b1-8320-e3c7e9c54f57",
        "cursor": {
          "ref": "6147bade-99ad-4732-967d-37ecc794eb3b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fae1b546-9a38-471c-8f9a-415a798871a5"
        },
        "item": {
          "id": "1ddbe7f8-95ae-41b1-8320-e3c7e9c54f57",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "8420804e-6da9-41cd-98d3-8aec6bf17a91",
        "cursor": {
          "ref": "dbed9bdf-01a2-42cd-925c-5553d73950b2",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1413ef72-6274-4878-9722-a383271ba8ff"
        },
        "item": {
          "id": "8420804e-6da9-41cd-98d3-8aec6bf17a91",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "8420804e-6da9-41cd-98d3-8aec6bf17a91",
        "cursor": {
          "ref": "dbed9bdf-01a2-42cd-925c-5553d73950b2",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1413ef72-6274-4878-9722-a383271ba8ff"
        },
        "item": {
          "id": "8420804e-6da9-41cd-98d3-8aec6bf17a91",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "4e87d0ff-25f3-45d0-8a3e-9584c6b74f73",
        "cursor": {
          "ref": "9a3c6b08-17ed-45c1-832e-755a9867535f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b280df06-d52c-457b-9a7e-159fd8304a7b"
        },
        "item": {
          "id": "4e87d0ff-25f3-45d0-8a3e-9584c6b74f73",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "4e87d0ff-25f3-45d0-8a3e-9584c6b74f73",
        "cursor": {
          "ref": "9a3c6b08-17ed-45c1-832e-755a9867535f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b280df06-d52c-457b-9a7e-159fd8304a7b"
        },
        "item": {
          "id": "4e87d0ff-25f3-45d0-8a3e-9584c6b74f73",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "1cb1c5b8-7732-49c4-9218-da6ad94f0249",
        "cursor": {
          "ref": "3c47335e-fa55-4b9c-86e3-4b164bbb8286",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f7038a4d-c7d2-489b-93a2-43e64560f841"
        },
        "item": {
          "id": "1cb1c5b8-7732-49c4-9218-da6ad94f0249",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "1cb1c5b8-7732-49c4-9218-da6ad94f0249",
        "cursor": {
          "ref": "3c47335e-fa55-4b9c-86e3-4b164bbb8286",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f7038a4d-c7d2-489b-93a2-43e64560f841"
        },
        "item": {
          "id": "1cb1c5b8-7732-49c4-9218-da6ad94f0249",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "9ec18df5-52f9-49dc-8277-39566e7f268f",
        "cursor": {
          "ref": "184e920d-dec2-4e82-b957-ecfd522cbaf8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1da49fb7-7def-4565-865b-2c26814bee88"
        },
        "item": {
          "id": "9ec18df5-52f9-49dc-8277-39566e7f268f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "9ec18df5-52f9-49dc-8277-39566e7f268f",
        "cursor": {
          "ref": "184e920d-dec2-4e82-b957-ecfd522cbaf8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1da49fb7-7def-4565-865b-2c26814bee88"
        },
        "item": {
          "id": "9ec18df5-52f9-49dc-8277-39566e7f268f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "ed77ed7c-0a72-4b57-92ff-f982f491ce1d",
        "cursor": {
          "ref": "cea4bce3-72c4-4d2e-a36f-548321ec5e2b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dee46dcc-65f0-4d98-ae6a-74333c06c5ef"
        },
        "item": {
          "id": "ed77ed7c-0a72-4b57-92ff-f982f491ce1d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "ed77ed7c-0a72-4b57-92ff-f982f491ce1d",
        "cursor": {
          "ref": "cea4bce3-72c4-4d2e-a36f-548321ec5e2b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dee46dcc-65f0-4d98-ae6a-74333c06c5ef"
        },
        "item": {
          "id": "ed77ed7c-0a72-4b57-92ff-f982f491ce1d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "82d87479-3eb7-4db9-914a-c4c4e0986b2f",
        "cursor": {
          "ref": "f51d34e9-cb9f-490f-af49-c63c0fd2ded2",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3f20a607-2f30-4f0e-8ef1-f4b7201203f5"
        },
        "item": {
          "id": "82d87479-3eb7-4db9-914a-c4c4e0986b2f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "82d87479-3eb7-4db9-914a-c4c4e0986b2f",
        "cursor": {
          "ref": "f51d34e9-cb9f-490f-af49-c63c0fd2ded2",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3f20a607-2f30-4f0e-8ef1-f4b7201203f5"
        },
        "item": {
          "id": "82d87479-3eb7-4db9-914a-c4c4e0986b2f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "f8af4d0b-9f8b-4f7e-835b-4c626ac5cee0",
        "cursor": {
          "ref": "2141d3f6-0e99-45b1-bed1-9235a82fc222",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "61f41915-8963-4cb4-a311-6ac4cc9fb4a6"
        },
        "item": {
          "id": "f8af4d0b-9f8b-4f7e-835b-4c626ac5cee0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "f8af4d0b-9f8b-4f7e-835b-4c626ac5cee0",
        "cursor": {
          "ref": "2141d3f6-0e99-45b1-bed1-9235a82fc222",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "61f41915-8963-4cb4-a311-6ac4cc9fb4a6"
        },
        "item": {
          "id": "f8af4d0b-9f8b-4f7e-835b-4c626ac5cee0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "807ab86a-4c4e-4d5b-9168-d88220d4e44f",
        "cursor": {
          "ref": "61550f44-b099-41e1-b0e6-ca15256293b5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "424319c3-7051-4cfb-afe3-1497809a78f9"
        },
        "item": {
          "id": "807ab86a-4c4e-4d5b-9168-d88220d4e44f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "807ab86a-4c4e-4d5b-9168-d88220d4e44f",
        "cursor": {
          "ref": "61550f44-b099-41e1-b0e6-ca15256293b5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "424319c3-7051-4cfb-afe3-1497809a78f9"
        },
        "item": {
          "id": "807ab86a-4c4e-4d5b-9168-d88220d4e44f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "485d1c87-1472-46b0-ba0c-676996043336",
        "cursor": {
          "ref": "f90e0778-5d4f-4361-a0da-6c908f1726f0",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "12e2d4e6-893d-415d-8619-8240864a6479"
        },
        "item": {
          "id": "485d1c87-1472-46b0-ba0c-676996043336",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "485d1c87-1472-46b0-ba0c-676996043336",
        "cursor": {
          "ref": "f90e0778-5d4f-4361-a0da-6c908f1726f0",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "12e2d4e6-893d-415d-8619-8240864a6479"
        },
        "item": {
          "id": "485d1c87-1472-46b0-ba0c-676996043336",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "ab90d92a-39fd-4d26-8659-ba6ce2ecf2f2",
        "cursor": {
          "ref": "e80b43be-ce00-4681-bd4f-8e497b4bea33",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "961d1be7-116c-4110-8056-96ebe9fc58b7"
        },
        "item": {
          "id": "ab90d92a-39fd-4d26-8659-ba6ce2ecf2f2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "ab90d92a-39fd-4d26-8659-ba6ce2ecf2f2",
        "cursor": {
          "ref": "e80b43be-ce00-4681-bd4f-8e497b4bea33",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "961d1be7-116c-4110-8056-96ebe9fc58b7"
        },
        "item": {
          "id": "ab90d92a-39fd-4d26-8659-ba6ce2ecf2f2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "473d78b3-7234-485c-8390-3ce6f97a4f09",
        "cursor": {
          "ref": "947c4555-72b1-48af-a1dc-80d66e169cd1",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3950016b-6fb9-444a-b731-f11a61d06e7f"
        },
        "item": {
          "id": "473d78b3-7234-485c-8390-3ce6f97a4f09",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "473d78b3-7234-485c-8390-3ce6f97a4f09",
        "cursor": {
          "ref": "947c4555-72b1-48af-a1dc-80d66e169cd1",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3950016b-6fb9-444a-b731-f11a61d06e7f"
        },
        "item": {
          "id": "473d78b3-7234-485c-8390-3ce6f97a4f09",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "2a76045e-f0a1-4dbd-8734-6c600c104fc2",
        "cursor": {
          "ref": "099ded38-900a-41cf-9a7a-c15598e9edbf",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2e495efa-53b4-43a7-8386-90af8c786dd2"
        },
        "item": {
          "id": "2a76045e-f0a1-4dbd-8734-6c600c104fc2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "2a76045e-f0a1-4dbd-8734-6c600c104fc2",
        "cursor": {
          "ref": "099ded38-900a-41cf-9a7a-c15598e9edbf",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2e495efa-53b4-43a7-8386-90af8c786dd2"
        },
        "item": {
          "id": "2a76045e-f0a1-4dbd-8734-6c600c104fc2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "bcac17ff-50dc-4602-9ba3-14035c4b4720",
        "cursor": {
          "ref": "f6dcdff7-48c3-45d4-becb-56054e0cf438",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e60286e2-ee5f-4ce7-a3bd-aff09df55682"
        },
        "item": {
          "id": "bcac17ff-50dc-4602-9ba3-14035c4b4720",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "bcac17ff-50dc-4602-9ba3-14035c4b4720",
        "cursor": {
          "ref": "f6dcdff7-48c3-45d4-becb-56054e0cf438",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e60286e2-ee5f-4ce7-a3bd-aff09df55682"
        },
        "item": {
          "id": "bcac17ff-50dc-4602-9ba3-14035c4b4720",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "3b3f865d-7fc9-4c15-a47c-c4ac6e145815",
        "cursor": {
          "ref": "8f841eb6-8c28-43ac-9475-49528d7e6acd",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "739ee6ba-cf59-4451-a6c5-a0ec44584e90"
        },
        "item": {
          "id": "3b3f865d-7fc9-4c15-a47c-c4ac6e145815",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "3b3f865d-7fc9-4c15-a47c-c4ac6e145815",
        "cursor": {
          "ref": "8f841eb6-8c28-43ac-9475-49528d7e6acd",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "739ee6ba-cf59-4451-a6c5-a0ec44584e90"
        },
        "item": {
          "id": "3b3f865d-7fc9-4c15-a47c-c4ac6e145815",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "163fcd05-3949-450f-9400-1bbeac804193",
        "cursor": {
          "ref": "e611ccf5-931e-40ce-ba4b-26535e59a538",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b3f3ba5a-a52b-4334-a7e8-115704e43c7e"
        },
        "item": {
          "id": "163fcd05-3949-450f-9400-1bbeac804193",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "163fcd05-3949-450f-9400-1bbeac804193",
        "cursor": {
          "ref": "e611ccf5-931e-40ce-ba4b-26535e59a538",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b3f3ba5a-a52b-4334-a7e8-115704e43c7e"
        },
        "item": {
          "id": "163fcd05-3949-450f-9400-1bbeac804193",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "487a863d-786b-478d-8175-912a846ac39f",
        "cursor": {
          "ref": "30e7dfda-2e7d-48b0-a670-2942f0db1c3c",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "67aec836-3d99-4675-b2cf-06e24222fa68"
        },
        "item": {
          "id": "487a863d-786b-478d-8175-912a846ac39f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "487a863d-786b-478d-8175-912a846ac39f",
        "cursor": {
          "ref": "30e7dfda-2e7d-48b0-a670-2942f0db1c3c",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "67aec836-3d99-4675-b2cf-06e24222fa68"
        },
        "item": {
          "id": "487a863d-786b-478d-8175-912a846ac39f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "07f0e835-c453-47b5-81d9-7a325649a8e1",
        "cursor": {
          "ref": "9dda3fe2-9b4c-4483-8924-c497ed38e7ba",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9198edcf-bb68-4910-80a5-2f7669c6ec6a"
        },
        "item": {
          "id": "07f0e835-c453-47b5-81d9-7a325649a8e1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "07f0e835-c453-47b5-81d9-7a325649a8e1",
        "cursor": {
          "ref": "9dda3fe2-9b4c-4483-8924-c497ed38e7ba",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9198edcf-bb68-4910-80a5-2f7669c6ec6a"
        },
        "item": {
          "id": "07f0e835-c453-47b5-81d9-7a325649a8e1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "4fb347bc-fab5-4dea-9eb2-483b9e4aac89",
        "cursor": {
          "ref": "548641e6-36a8-4e3f-b8f9-a02b9d2c073e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "224501e1-e516-42c3-938b-2fc9b70440fc"
        },
        "item": {
          "id": "4fb347bc-fab5-4dea-9eb2-483b9e4aac89",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "4fb347bc-fab5-4dea-9eb2-483b9e4aac89",
        "cursor": {
          "ref": "548641e6-36a8-4e3f-b8f9-a02b9d2c073e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "224501e1-e516-42c3-938b-2fc9b70440fc"
        },
        "item": {
          "id": "4fb347bc-fab5-4dea-9eb2-483b9e4aac89",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "84c0c458-79b3-428b-81cf-24e2c44a8cbb",
        "cursor": {
          "ref": "b1bec453-17ab-4dc4-804f-343bc9c128a3",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3dcf04c3-ff11-4116-a47f-94b0259e8555"
        },
        "item": {
          "id": "84c0c458-79b3-428b-81cf-24e2c44a8cbb",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "84c0c458-79b3-428b-81cf-24e2c44a8cbb",
        "cursor": {
          "ref": "b1bec453-17ab-4dc4-804f-343bc9c128a3",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3dcf04c3-ff11-4116-a47f-94b0259e8555"
        },
        "item": {
          "id": "84c0c458-79b3-428b-81cf-24e2c44a8cbb",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "e53faa11-ed9f-4700-8085-44b63b88d12f",
        "cursor": {
          "ref": "d980f8b5-2e02-405d-afac-9c86d14ba7f6",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e9af302b-2480-48be-9e2e-cf50d906dcee"
        },
        "item": {
          "id": "e53faa11-ed9f-4700-8085-44b63b88d12f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "e53faa11-ed9f-4700-8085-44b63b88d12f",
        "cursor": {
          "ref": "d980f8b5-2e02-405d-afac-9c86d14ba7f6",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e9af302b-2480-48be-9e2e-cf50d906dcee"
        },
        "item": {
          "id": "e53faa11-ed9f-4700-8085-44b63b88d12f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "95c03e3a-e811-489b-bf4b-621ccba7bb3a",
        "cursor": {
          "ref": "64ef8840-2344-4ed7-90a0-85745d498737",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f876eacd-091e-4e17-9a37-7fbdf38b0eb5"
        },
        "item": {
          "id": "95c03e3a-e811-489b-bf4b-621ccba7bb3a",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "95c03e3a-e811-489b-bf4b-621ccba7bb3a",
        "cursor": {
          "ref": "64ef8840-2344-4ed7-90a0-85745d498737",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f876eacd-091e-4e17-9a37-7fbdf38b0eb5"
        },
        "item": {
          "id": "95c03e3a-e811-489b-bf4b-621ccba7bb3a",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "fe70c3fb-a894-4850-877c-aa1eb6145c44",
        "cursor": {
          "ref": "8a145082-4733-4db8-ae8f-8fedb829bc16",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "55fea125-ce1c-4bdf-8184-e285dd16f5d9"
        },
        "item": {
          "id": "fe70c3fb-a894-4850-877c-aa1eb6145c44",
          "name": "credentials_verify:vc:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "fe70c3fb-a894-4850-877c-aa1eb6145c44",
        "cursor": {
          "ref": "8a145082-4733-4db8-ae8f-8fedb829bc16",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "55fea125-ce1c-4bdf-8184-e285dd16f5d9"
        },
        "item": {
          "id": "fe70c3fb-a894-4850-877c-aa1eb6145c44",
          "name": "credentials_verify:vc:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "422acc2b-8f5e-46dc-ac70-b68f9dbb18ad",
        "cursor": {
          "ref": "23425376-1cd4-4131-9540-9cbbd2fdfee8",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "da2f00aa-0852-4e6c-830e-7e48e5e30dde"
        },
        "item": {
          "id": "422acc2b-8f5e-46dc-ac70-b68f9dbb18ad",
          "name": "credentials_verify:vc:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "422acc2b-8f5e-46dc-ac70-b68f9dbb18ad",
        "cursor": {
          "ref": "23425376-1cd4-4131-9540-9cbbd2fdfee8",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "da2f00aa-0852-4e6c-830e-7e48e5e30dde"
        },
        "item": {
          "id": "422acc2b-8f5e-46dc-ac70-b68f9dbb18ad",
          "name": "credentials_verify:vc:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "cd94c26a-60ad-4db4-a3e5-52ef4e05a589",
        "cursor": {
          "ref": "5548ae88-fe99-4ad3-b525-cf6cfa91fed3",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0ff10c38-4ed2-4d30-b9aa-2abf092070ed"
        },
        "item": {
          "id": "cd94c26a-60ad-4db4-a3e5-52ef4e05a589",
          "name": "credentials_verify:vc:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "cd94c26a-60ad-4db4-a3e5-52ef4e05a589",
        "cursor": {
          "ref": "5548ae88-fe99-4ad3-b525-cf6cfa91fed3",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0ff10c38-4ed2-4d30-b9aa-2abf092070ed"
        },
        "item": {
          "id": "cd94c26a-60ad-4db4-a3e5-52ef4e05a589",
          "name": "credentials_verify:vc:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4e036b8c-311d-4e41-94e7-ba3015dcedf3",
        "cursor": {
          "ref": "221041bb-208d-4fe6-95d1-be88dba35733",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5876e2b0-73ef-4f19-a1c2-8da47fff7a22"
        },
        "item": {
          "id": "4e036b8c-311d-4e41-94e7-ba3015dcedf3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4e036b8c-311d-4e41-94e7-ba3015dcedf3",
        "cursor": {
          "ref": "221041bb-208d-4fe6-95d1-be88dba35733",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5876e2b0-73ef-4f19-a1c2-8da47fff7a22"
        },
        "item": {
          "id": "4e036b8c-311d-4e41-94e7-ba3015dcedf3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "82d25d0e-10cc-4577-bcad-62342fd5580f",
        "cursor": {
          "ref": "f0aa847c-5822-4b9e-8cbe-4df0b93e3b61",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9506a8cc-952d-4c87-a43f-c9ce9432d76e"
        },
        "item": {
          "id": "82d25d0e-10cc-4577-bcad-62342fd5580f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "82d25d0e-10cc-4577-bcad-62342fd5580f",
        "cursor": {
          "ref": "f0aa847c-5822-4b9e-8cbe-4df0b93e3b61",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9506a8cc-952d-4c87-a43f-c9ce9432d76e"
        },
        "item": {
          "id": "82d25d0e-10cc-4577-bcad-62342fd5580f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4f37a6ec-4621-464d-9032-fc89e9753cc7",
        "cursor": {
          "ref": "fee7f3c0-ed93-4bc1-adb2-fada09bb9045",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "aa10fd7e-0a3b-4c7b-861c-7965b0334ca4"
        },
        "item": {
          "id": "4f37a6ec-4621-464d-9032-fc89e9753cc7",
          "name": "credentials_verify:vc:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "4f37a6ec-4621-464d-9032-fc89e9753cc7",
        "cursor": {
          "ref": "fee7f3c0-ed93-4bc1-adb2-fada09bb9045",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "aa10fd7e-0a3b-4c7b-861c-7965b0334ca4"
        },
        "item": {
          "id": "4f37a6ec-4621-464d-9032-fc89e9753cc7",
          "name": "credentials_verify:vc:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "4c792dc9-f1c2-498e-b1ef-49b759b77adc",
        "cursor": {
          "ref": "9aeb901c-0159-4698-b64a-6af29758da7c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "53396263-2708-4fe6-9108-06265752cc42"
        },
        "item": {
          "id": "4c792dc9-f1c2-498e-b1ef-49b759b77adc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "4c792dc9-f1c2-498e-b1ef-49b759b77adc",
        "cursor": {
          "ref": "9aeb901c-0159-4698-b64a-6af29758da7c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "53396263-2708-4fe6-9108-06265752cc42"
        },
        "item": {
          "id": "4c792dc9-f1c2-498e-b1ef-49b759b77adc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "e0165eb9-ea28-419c-8b42-6714e9d3a386",
        "cursor": {
          "ref": "403e627f-d069-4467-864a-e04973a444b5",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ab915738-87b0-4347-acd6-9aa73ed97770"
        },
        "item": {
          "id": "e0165eb9-ea28-419c-8b42-6714e9d3a386",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "e0165eb9-ea28-419c-8b42-6714e9d3a386",
        "cursor": {
          "ref": "403e627f-d069-4467-864a-e04973a444b5",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ab915738-87b0-4347-acd6-9aa73ed97770"
        },
        "item": {
          "id": "e0165eb9-ea28-419c-8b42-6714e9d3a386",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "cd7e9d52-7d14-4330-a001-2d0b0fd4377f",
        "cursor": {
          "ref": "20aad3a9-4b98-43bb-87ae-fdd3cf3ce87f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "87fd450d-fb9b-4ae9-a1b3-eddd6923d672"
        },
        "item": {
          "id": "cd7e9d52-7d14-4330-a001-2d0b0fd4377f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "cd7e9d52-7d14-4330-a001-2d0b0fd4377f",
        "cursor": {
          "ref": "20aad3a9-4b98-43bb-87ae-fdd3cf3ce87f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "87fd450d-fb9b-4ae9-a1b3-eddd6923d672"
        },
        "item": {
          "id": "cd7e9d52-7d14-4330-a001-2d0b0fd4377f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9bed6ab9-29fe-43d1-a9aa-d2ca07db6553",
        "cursor": {
          "ref": "1fb72233-3585-401a-a603-46e8f401dc07",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4cc049f9-a1a8-4beb-bd79-63af161f7505"
        },
        "item": {
          "id": "9bed6ab9-29fe-43d1-a9aa-d2ca07db6553",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "9bed6ab9-29fe-43d1-a9aa-d2ca07db6553",
        "cursor": {
          "ref": "1fb72233-3585-401a-a603-46e8f401dc07",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4cc049f9-a1a8-4beb-bd79-63af161f7505"
        },
        "item": {
          "id": "9bed6ab9-29fe-43d1-a9aa-d2ca07db6553",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "5c83ec59-c36a-4e8b-bda9-e70867e63fdb",
        "cursor": {
          "ref": "ba3543c7-ea1f-4477-8dec-f879bc783979",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "34efefa0-3e1e-4b8f-9979-a2f8fe1388bd"
        },
        "item": {
          "id": "5c83ec59-c36a-4e8b-bda9-e70867e63fdb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5c83ec59-c36a-4e8b-bda9-e70867e63fdb",
        "cursor": {
          "ref": "ba3543c7-ea1f-4477-8dec-f879bc783979",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "34efefa0-3e1e-4b8f-9979-a2f8fe1388bd"
        },
        "item": {
          "id": "5c83ec59-c36a-4e8b-bda9-e70867e63fdb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "34ca2624-27c0-4e38-9270-fbbfc26c32a1",
        "cursor": {
          "ref": "db8be0bb-786a-4b1b-a99e-f526b96aea6a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6ad714a5-3c4c-4014-8a1a-501503de134f"
        },
        "item": {
          "id": "34ca2624-27c0-4e38-9270-fbbfc26c32a1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "34ca2624-27c0-4e38-9270-fbbfc26c32a1",
        "cursor": {
          "ref": "db8be0bb-786a-4b1b-a99e-f526b96aea6a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6ad714a5-3c4c-4014-8a1a-501503de134f"
        },
        "item": {
          "id": "34ca2624-27c0-4e38-9270-fbbfc26c32a1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "2fcbb2df-bfbf-4c24-8a4d-a70681575d52",
        "cursor": {
          "ref": "000d08a6-60a9-4694-971e-22158af3637e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52c3b925-3539-4347-9471-cba32d14a146"
        },
        "item": {
          "id": "2fcbb2df-bfbf-4c24-8a4d-a70681575d52",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "2fcbb2df-bfbf-4c24-8a4d-a70681575d52",
        "cursor": {
          "ref": "000d08a6-60a9-4694-971e-22158af3637e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52c3b925-3539-4347-9471-cba32d14a146"
        },
        "item": {
          "id": "2fcbb2df-bfbf-4c24-8a4d-a70681575d52",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "8c7e7f07-1567-4a28-b23e-62fcf938bc2e",
        "cursor": {
          "ref": "0a6694f9-d8c3-4bd1-ab76-a40e8b103ebf",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1083805b-bbaf-4545-9177-8f64610eb78f"
        },
        "item": {
          "id": "8c7e7f07-1567-4a28-b23e-62fcf938bc2e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "8c7e7f07-1567-4a28-b23e-62fcf938bc2e",
        "cursor": {
          "ref": "0a6694f9-d8c3-4bd1-ab76-a40e8b103ebf",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1083805b-bbaf-4545-9177-8f64610eb78f"
        },
        "item": {
          "id": "8c7e7f07-1567-4a28-b23e-62fcf938bc2e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "9eb09b04-4e3b-4085-992b-9a4fae2b410b",
        "cursor": {
          "ref": "3f662543-9c4b-44ed-9711-dd2ef483c26d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "124f5d7e-49cd-46bc-b2df-6007d9beb5db"
        },
        "item": {
          "id": "9eb09b04-4e3b-4085-992b-9a4fae2b410b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "9eb09b04-4e3b-4085-992b-9a4fae2b410b",
        "cursor": {
          "ref": "3f662543-9c4b-44ed-9711-dd2ef483c26d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "124f5d7e-49cd-46bc-b2df-6007d9beb5db"
        },
        "item": {
          "id": "9eb09b04-4e3b-4085-992b-9a4fae2b410b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "6c924f11-9cc0-4448-b3f9-e9451ae3d3c3",
        "cursor": {
          "ref": "443fdc9e-3033-484b-8d8c-fc4f9d6d9f73",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2f0be864-b1b8-4054-a5f6-9ba3df60b659"
        },
        "item": {
          "id": "6c924f11-9cc0-4448-b3f9-e9451ae3d3c3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "6c924f11-9cc0-4448-b3f9-e9451ae3d3c3",
        "cursor": {
          "ref": "443fdc9e-3033-484b-8d8c-fc4f9d6d9f73",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2f0be864-b1b8-4054-a5f6-9ba3df60b659"
        },
        "item": {
          "id": "6c924f11-9cc0-4448-b3f9-e9451ae3d3c3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "4e8709c7-7bdb-4d20-a22e-4d49dec834a0",
        "cursor": {
          "ref": "0c73d1ad-c849-4b37-8a42-8c5e45418952",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1da8a264-6b08-4714-a129-eaeb6232b62b"
        },
        "item": {
          "id": "4e8709c7-7bdb-4d20-a22e-4d49dec834a0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "4e8709c7-7bdb-4d20-a22e-4d49dec834a0",
        "cursor": {
          "ref": "0c73d1ad-c849-4b37-8a42-8c5e45418952",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1da8a264-6b08-4714-a129-eaeb6232b62b"
        },
        "item": {
          "id": "4e8709c7-7bdb-4d20-a22e-4d49dec834a0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "8c26f061-6203-43e2-a754-d501a57cd2ba",
        "cursor": {
          "ref": "c3ff6c1b-4d2b-4af9-9707-d48663bf8ec5",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "56083b6c-b8ea-4917-918e-c1fc1f4eee1c"
        },
        "item": {
          "id": "8c26f061-6203-43e2-a754-d501a57cd2ba",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "8c26f061-6203-43e2-a754-d501a57cd2ba",
        "cursor": {
          "ref": "c3ff6c1b-4d2b-4af9-9707-d48663bf8ec5",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "56083b6c-b8ea-4917-918e-c1fc1f4eee1c"
        },
        "item": {
          "id": "8c26f061-6203-43e2-a754-d501a57cd2ba",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "c334e60c-5da7-417e-8ad0-0ab951b9e8c2",
        "cursor": {
          "ref": "e1a60a97-10c8-4f43-8b51-4af858aa9e16",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a50dfcaf-1fae-44cd-8062-5db98eb379e7"
        },
        "item": {
          "id": "c334e60c-5da7-417e-8ad0-0ab951b9e8c2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "c334e60c-5da7-417e-8ad0-0ab951b9e8c2",
        "cursor": {
          "ref": "e1a60a97-10c8-4f43-8b51-4af858aa9e16",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a50dfcaf-1fae-44cd-8062-5db98eb379e7"
        },
        "item": {
          "id": "c334e60c-5da7-417e-8ad0-0ab951b9e8c2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "99a43255-b322-49fc-a0ca-c41ba30dc4db",
        "cursor": {
          "ref": "df17d5c9-4268-4ef0-a5a7-7ab3505de292",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "03e9043d-6b7c-46e5-accd-c95d747923ec"
        },
        "item": {
          "id": "99a43255-b322-49fc-a0ca-c41ba30dc4db",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "99a43255-b322-49fc-a0ca-c41ba30dc4db",
        "cursor": {
          "ref": "df17d5c9-4268-4ef0-a5a7-7ab3505de292",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "03e9043d-6b7c-46e5-accd-c95d747923ec"
        },
        "item": {
          "id": "99a43255-b322-49fc-a0ca-c41ba30dc4db",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "ae0ca6dc-e3a6-4e57-97c8-d97dd6f84b19",
        "cursor": {
          "ref": "0d3b80e9-bf03-4e94-8d67-dd601c260839",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fbb3d519-776f-4e88-830e-8b221beed55b"
        },
        "item": {
          "id": "ae0ca6dc-e3a6-4e57-97c8-d97dd6f84b19",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "ae0ca6dc-e3a6-4e57-97c8-d97dd6f84b19",
        "cursor": {
          "ref": "0d3b80e9-bf03-4e94-8d67-dd601c260839",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fbb3d519-776f-4e88-830e-8b221beed55b"
        },
        "item": {
          "id": "ae0ca6dc-e3a6-4e57-97c8-d97dd6f84b19",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "d637aaca-04c4-41df-9c94-bc7f3c85697d",
        "cursor": {
          "ref": "cd620c5d-1744-4c19-84b7-e49d979a4ed3",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8f24eeaa-aa99-4535-866a-5eb620db966e"
        },
        "item": {
          "id": "d637aaca-04c4-41df-9c94-bc7f3c85697d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "d637aaca-04c4-41df-9c94-bc7f3c85697d",
        "cursor": {
          "ref": "cd620c5d-1744-4c19-84b7-e49d979a4ed3",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8f24eeaa-aa99-4535-866a-5eb620db966e"
        },
        "item": {
          "id": "d637aaca-04c4-41df-9c94-bc7f3c85697d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "bd9adf65-8f12-4002-8377-a34f997c7b8e",
        "cursor": {
          "ref": "0de57ca5-d18c-47de-b54f-e6abe72492a5",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cec39e89-e389-4db5-89ab-5dfe55449939"
        },
        "item": {
          "id": "bd9adf65-8f12-4002-8377-a34f997c7b8e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "bd9adf65-8f12-4002-8377-a34f997c7b8e",
        "cursor": {
          "ref": "0de57ca5-d18c-47de-b54f-e6abe72492a5",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cec39e89-e389-4db5-89ab-5dfe55449939"
        },
        "item": {
          "id": "bd9adf65-8f12-4002-8377-a34f997c7b8e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "51dc24d4-dda2-4851-ab59-8962b10c0619",
        "cursor": {
          "ref": "99fbcadd-40de-4787-8e33-827edb8c0839",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4163b81b-0a09-4dba-9b88-615433c8b81b"
        },
        "item": {
          "id": "51dc24d4-dda2-4851-ab59-8962b10c0619",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "51dc24d4-dda2-4851-ab59-8962b10c0619",
        "cursor": {
          "ref": "99fbcadd-40de-4787-8e33-827edb8c0839",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4163b81b-0a09-4dba-9b88-615433c8b81b"
        },
        "item": {
          "id": "51dc24d4-dda2-4851-ab59-8962b10c0619",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "35796fe2-e502-4bf1-8a25-08f607ddf335",
        "cursor": {
          "ref": "727da2e5-f6ac-41cb-8a73-af40c30ebd20",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6edc36e5-0824-4e3e-b7fe-6443a14b4d9b"
        },
        "item": {
          "id": "35796fe2-e502-4bf1-8a25-08f607ddf335",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "35796fe2-e502-4bf1-8a25-08f607ddf335",
        "cursor": {
          "ref": "727da2e5-f6ac-41cb-8a73-af40c30ebd20",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6edc36e5-0824-4e3e-b7fe-6443a14b4d9b"
        },
        "item": {
          "id": "35796fe2-e502-4bf1-8a25-08f607ddf335",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "359ff483-3a37-477c-969e-4e6db96e5c59",
        "cursor": {
          "ref": "f6da516d-95d9-4cfe-9a24-84859e8f1f01",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "15dfda37-832b-4fc0-85ef-2808790326af"
        },
        "item": {
          "id": "359ff483-3a37-477c-969e-4e6db96e5c59",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "359ff483-3a37-477c-969e-4e6db96e5c59",
        "cursor": {
          "ref": "f6da516d-95d9-4cfe-9a24-84859e8f1f01",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "15dfda37-832b-4fc0-85ef-2808790326af"
        },
        "item": {
          "id": "359ff483-3a37-477c-969e-4e6db96e5c59",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a15d7182-0e2a-46bc-acaf-f211d4a42557",
        "cursor": {
          "ref": "01ec7192-9489-4532-93db-6b37fe020d4f",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7b3e9d69-f10a-46f3-835f-dd7c90067857"
        },
        "item": {
          "id": "a15d7182-0e2a-46bc-acaf-f211d4a42557",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a15d7182-0e2a-46bc-acaf-f211d4a42557",
        "cursor": {
          "ref": "01ec7192-9489-4532-93db-6b37fe020d4f",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7b3e9d69-f10a-46f3-835f-dd7c90067857"
        },
        "item": {
          "id": "a15d7182-0e2a-46bc-acaf-f211d4a42557",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b8102606-71af-438e-afb3-ba92197e82a9",
        "cursor": {
          "ref": "97308782-1b50-4976-bf79-d830951c2812",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8e40dc20-03cd-486c-a816-692a21615d04"
        },
        "item": {
          "id": "b8102606-71af-438e-afb3-ba92197e82a9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b8102606-71af-438e-afb3-ba92197e82a9",
        "cursor": {
          "ref": "97308782-1b50-4976-bf79-d830951c2812",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8e40dc20-03cd-486c-a816-692a21615d04"
        },
        "item": {
          "id": "b8102606-71af-438e-afb3-ba92197e82a9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "0b62ed4c-779b-48cf-bb75-937bc906d224",
        "cursor": {
          "ref": "a12ff79b-2f16-4976-bd96-4aa85a6d65b8",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6cdcf574-58a6-4a16-ac8d-ebd3c7267c8e"
        },
        "item": {
          "id": "0b62ed4c-779b-48cf-bb75-937bc906d224",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "0b62ed4c-779b-48cf-bb75-937bc906d224",
        "cursor": {
          "ref": "a12ff79b-2f16-4976-bd96-4aa85a6d65b8",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6cdcf574-58a6-4a16-ac8d-ebd3c7267c8e"
        },
        "item": {
          "id": "0b62ed4c-779b-48cf-bb75-937bc906d224",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fc20da2c-67b0-4952-8748-f79fb8c87459",
        "cursor": {
          "ref": "104145ab-8c96-4ec6-9ee7-2adafd1cda2a",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b7e44f68-99ea-41f1-a253-94c1096328a0"
        },
        "item": {
          "id": "fc20da2c-67b0-4952-8748-f79fb8c87459",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "fc20da2c-67b0-4952-8748-f79fb8c87459",
        "cursor": {
          "ref": "104145ab-8c96-4ec6-9ee7-2adafd1cda2a",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b7e44f68-99ea-41f1-a253-94c1096328a0"
        },
        "item": {
          "id": "fc20da2c-67b0-4952-8748-f79fb8c87459",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a14f1391-5ff2-4231-a98c-5eb544d01157",
        "cursor": {
          "ref": "e09bdb65-19ed-4e05-9298-1e1f7a3050c5",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "641eedf7-e368-4bd9-964a-a7ad3490f5e4"
        },
        "item": {
          "id": "a14f1391-5ff2-4231-a98c-5eb544d01157",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "a14f1391-5ff2-4231-a98c-5eb544d01157",
        "cursor": {
          "ref": "e09bdb65-19ed-4e05-9298-1e1f7a3050c5",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "641eedf7-e368-4bd9-964a-a7ad3490f5e4"
        },
        "item": {
          "id": "a14f1391-5ff2-4231-a98c-5eb544d01157",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "76e3774f-5f51-4105-9f8a-5a7e8d848eab",
        "cursor": {
          "ref": "0efd56e3-6bd6-452d-aac5-ea3e23301619",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "93198772-04eb-46fd-b9bb-46da76f82281"
        },
        "item": {
          "id": "76e3774f-5f51-4105-9f8a-5a7e8d848eab",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "76e3774f-5f51-4105-9f8a-5a7e8d848eab",
        "cursor": {
          "ref": "0efd56e3-6bd6-452d-aac5-ea3e23301619",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "93198772-04eb-46fd-b9bb-46da76f82281"
        },
        "item": {
          "id": "76e3774f-5f51-4105-9f8a-5a7e8d848eab",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "c245aed5-337d-422b-b876-26adc9ad3ebe",
        "cursor": {
          "ref": "f6c73057-3ec5-46b3-aa0b-1d7655706eb1",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3fcec2c0-adfb-41ed-aaf9-c25e40463f89"
        },
        "item": {
          "id": "c245aed5-337d-422b-b876-26adc9ad3ebe",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "c245aed5-337d-422b-b876-26adc9ad3ebe",
        "cursor": {
          "ref": "f6c73057-3ec5-46b3-aa0b-1d7655706eb1",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3fcec2c0-adfb-41ed-aaf9-c25e40463f89"
        },
        "item": {
          "id": "c245aed5-337d-422b-b876-26adc9ad3ebe",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "fd6000ca-f801-41ab-8416-c29f5ea0b138",
        "cursor": {
          "ref": "e6d49d49-3761-4056-a11d-5a429c787c53",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f9520b38-6af9-4313-8553-252dff6f9165"
        },
        "item": {
          "id": "fd6000ca-f801-41ab-8416-c29f5ea0b138",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "fd6000ca-f801-41ab-8416-c29f5ea0b138",
        "cursor": {
          "ref": "e6d49d49-3761-4056-a11d-5a429c787c53",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f9520b38-6af9-4313-8553-252dff6f9165"
        },
        "item": {
          "id": "fd6000ca-f801-41ab-8416-c29f5ea0b138",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "f4737d34-3039-4f18-a47c-a35cfce8b68a",
        "cursor": {
          "ref": "ee055cf8-f9c6-400a-88a1-9b4214f993de",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b573c1ec-7779-4942-94d4-9df5e45d960b"
        },
        "item": {
          "id": "f4737d34-3039-4f18-a47c-a35cfce8b68a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "f4737d34-3039-4f18-a47c-a35cfce8b68a",
        "cursor": {
          "ref": "ee055cf8-f9c6-400a-88a1-9b4214f993de",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b573c1ec-7779-4942-94d4-9df5e45d960b"
        },
        "item": {
          "id": "f4737d34-3039-4f18-a47c-a35cfce8b68a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "0071e776-c6a3-4e02-9bfe-edfd2d551f4b",
        "cursor": {
          "ref": "ed771330-4fd0-4437-948b-99fb26b20cae",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "adb65cef-81a9-4df7-98ba-fe058980095f"
        },
        "item": {
          "id": "0071e776-c6a3-4e02-9bfe-edfd2d551f4b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0071e776-c6a3-4e02-9bfe-edfd2d551f4b",
        "cursor": {
          "ref": "ed771330-4fd0-4437-948b-99fb26b20cae",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "adb65cef-81a9-4df7-98ba-fe058980095f"
        },
        "item": {
          "id": "0071e776-c6a3-4e02-9bfe-edfd2d551f4b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "17e6ba19-b334-4c07-abb9-ffeacbe17b56",
        "cursor": {
          "ref": "490ca599-0411-42e5-aa2d-4dcd462e201c",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "76562082-d91e-46fb-a1c9-a327504a3f30"
        },
        "item": {
          "id": "17e6ba19-b334-4c07-abb9-ffeacbe17b56",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "17e6ba19-b334-4c07-abb9-ffeacbe17b56",
        "cursor": {
          "ref": "490ca599-0411-42e5-aa2d-4dcd462e201c",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "76562082-d91e-46fb-a1c9-a327504a3f30"
        },
        "item": {
          "id": "17e6ba19-b334-4c07-abb9-ffeacbe17b56",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e343603c-7b1e-4e60-a9fe-d3f87492ea13",
        "cursor": {
          "ref": "6e21c8a9-1170-4b52-adae-77fd32f35213",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0865a848-f269-48a5-8564-afbaab5d8568"
        },
        "item": {
          "id": "e343603c-7b1e-4e60-a9fe-d3f87492ea13",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e343603c-7b1e-4e60-a9fe-d3f87492ea13",
        "cursor": {
          "ref": "6e21c8a9-1170-4b52-adae-77fd32f35213",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0865a848-f269-48a5-8564-afbaab5d8568"
        },
        "item": {
          "id": "e343603c-7b1e-4e60-a9fe-d3f87492ea13",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "12cb90c2-89d9-4599-930a-0f1e65194544",
        "cursor": {
          "ref": "4891a972-8fc3-4405-8388-ca678b00af74",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4c496b31-599e-4cb0-bc8d-3d4b80cde7f7"
        },
        "item": {
          "id": "12cb90c2-89d9-4599-930a-0f1e65194544",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "12cb90c2-89d9-4599-930a-0f1e65194544",
        "cursor": {
          "ref": "4891a972-8fc3-4405-8388-ca678b00af74",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4c496b31-599e-4cb0-bc8d-3d4b80cde7f7"
        },
        "item": {
          "id": "12cb90c2-89d9-4599-930a-0f1e65194544",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "91f86855-0af7-44e1-98c1-52537ce880f3",
        "cursor": {
          "ref": "da25c9d8-2637-44f4-9dd8-4bde7756fd4c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "73133b24-9475-4f23-8058-26e1fc4fafd3"
        },
        "item": {
          "id": "91f86855-0af7-44e1-98c1-52537ce880f3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "91f86855-0af7-44e1-98c1-52537ce880f3",
        "cursor": {
          "ref": "da25c9d8-2637-44f4-9dd8-4bde7756fd4c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "73133b24-9475-4f23-8058-26e1fc4fafd3"
        },
        "item": {
          "id": "91f86855-0af7-44e1-98c1-52537ce880f3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "61940a63-81a2-438c-b85a-204cb5cad863",
        "cursor": {
          "ref": "9bff2fb4-2f2d-4685-a87a-8d3a94c4c3a2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9fb0b953-6247-4d7b-9e2f-c0b07b45cc28"
        },
        "item": {
          "id": "61940a63-81a2-438c-b85a-204cb5cad863",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "61940a63-81a2-438c-b85a-204cb5cad863",
        "cursor": {
          "ref": "9bff2fb4-2f2d-4685-a87a-8d3a94c4c3a2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9fb0b953-6247-4d7b-9e2f-c0b07b45cc28"
        },
        "item": {
          "id": "61940a63-81a2-438c-b85a-204cb5cad863",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f94900ed-3e16-4a70-9d6e-fa590de74ee1",
        "cursor": {
          "ref": "81612922-5f50-43c9-b2a2-a0631819ae6a",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f74d0c6c-0bef-4058-ad3b-f241afced412"
        },
        "item": {
          "id": "f94900ed-3e16-4a70-9d6e-fa590de74ee1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f94900ed-3e16-4a70-9d6e-fa590de74ee1",
        "cursor": {
          "ref": "81612922-5f50-43c9-b2a2-a0631819ae6a",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f74d0c6c-0bef-4058-ad3b-f241afced412"
        },
        "item": {
          "id": "f94900ed-3e16-4a70-9d6e-fa590de74ee1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "45451150-b18d-4dff-89ba-64abad3107ea",
        "cursor": {
          "ref": "4282b0cf-b050-47b1-83a3-7d312df803c0",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d202f7f0-8efc-498e-9990-36694bf66d8b"
        },
        "item": {
          "id": "45451150-b18d-4dff-89ba-64abad3107ea",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "45451150-b18d-4dff-89ba-64abad3107ea",
        "cursor": {
          "ref": "4282b0cf-b050-47b1-83a3-7d312df803c0",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d202f7f0-8efc-498e-9990-36694bf66d8b"
        },
        "item": {
          "id": "45451150-b18d-4dff-89ba-64abad3107ea",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "57df932f-ec5e-41c3-b6ed-a26743f0fa45",
        "cursor": {
          "ref": "a7fc1219-0bdf-4dd2-a9dd-935d899fe1fd",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d5f2a80b-cfaa-4c3d-ab73-c364d40fabd3"
        },
        "item": {
          "id": "57df932f-ec5e-41c3-b6ed-a26743f0fa45",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "57df932f-ec5e-41c3-b6ed-a26743f0fa45",
        "cursor": {
          "ref": "a7fc1219-0bdf-4dd2-a9dd-935d899fe1fd",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d5f2a80b-cfaa-4c3d-ab73-c364d40fabd3"
        },
        "item": {
          "id": "57df932f-ec5e-41c3-b6ed-a26743f0fa45",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7636ce5d-ed8a-4be6-bf28-7d9410f64672",
        "cursor": {
          "ref": "6f7173b8-2d95-4512-bf69-f77506eb795d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e6ca1768-a6ab-4eb8-87d9-b9cbf28b2c02"
        },
        "item": {
          "id": "7636ce5d-ed8a-4be6-bf28-7d9410f64672",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "7636ce5d-ed8a-4be6-bf28-7d9410f64672",
        "cursor": {
          "ref": "6f7173b8-2d95-4512-bf69-f77506eb795d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e6ca1768-a6ab-4eb8-87d9-b9cbf28b2c02"
        },
        "item": {
          "id": "7636ce5d-ed8a-4be6-bf28-7d9410f64672",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5e5e6817-eee8-4135-866e-76ad68f6b2e0",
        "cursor": {
          "ref": "8be14766-a8e9-44d5-8bc3-1971d4f83a41",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "04c8813b-b9ad-4104-86b8-bed07e46289a"
        },
        "item": {
          "id": "5e5e6817-eee8-4135-866e-76ad68f6b2e0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "5e5e6817-eee8-4135-866e-76ad68f6b2e0",
        "cursor": {
          "ref": "8be14766-a8e9-44d5-8bc3-1971d4f83a41",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "04c8813b-b9ad-4104-86b8-bed07e46289a"
        },
        "item": {
          "id": "5e5e6817-eee8-4135-866e-76ad68f6b2e0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "e00439a9-0959-4766-85d0-caaf7e1e573d",
        "cursor": {
          "ref": "a8501c63-4c24-4bcf-aea8-9270b262bada",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "778fa98b-f2b0-45c5-9a22-8950cf50f323"
        },
        "item": {
          "id": "e00439a9-0959-4766-85d0-caaf7e1e573d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "e00439a9-0959-4766-85d0-caaf7e1e573d",
        "cursor": {
          "ref": "a8501c63-4c24-4bcf-aea8-9270b262bada",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "778fa98b-f2b0-45c5-9a22-8950cf50f323"
        },
        "item": {
          "id": "e00439a9-0959-4766-85d0-caaf7e1e573d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "2432f927-cf0f-4b30-b628-b3156424b3ed",
        "cursor": {
          "ref": "000012d4-4939-4b8b-bdbe-5582d3781ffa",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "438cd8ba-ac26-4f97-9622-bfaab7766cf2"
        },
        "item": {
          "id": "2432f927-cf0f-4b30-b628-b3156424b3ed",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "2432f927-cf0f-4b30-b628-b3156424b3ed",
        "cursor": {
          "ref": "000012d4-4939-4b8b-bdbe-5582d3781ffa",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "438cd8ba-ac26-4f97-9622-bfaab7766cf2"
        },
        "item": {
          "id": "2432f927-cf0f-4b30-b628-b3156424b3ed",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "ed9a68ed-4bca-462e-aa63-a1fab82815f2",
        "cursor": {
          "ref": "8dcfe9d0-f5c2-4612-a0ba-99a61d3c3f15",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7391ac39-63b7-44a1-85f9-d723145d4c19"
        },
        "item": {
          "id": "ed9a68ed-4bca-462e-aa63-a1fab82815f2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "ed9a68ed-4bca-462e-aa63-a1fab82815f2",
        "cursor": {
          "ref": "8dcfe9d0-f5c2-4612-a0ba-99a61d3c3f15",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7391ac39-63b7-44a1-85f9-d723145d4c19"
        },
        "item": {
          "id": "ed9a68ed-4bca-462e-aa63-a1fab82815f2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "84683023-3882-44f3-94eb-244d7b745c04",
        "cursor": {
          "ref": "1bf4fac5-20f7-4dba-9853-dc97f63acb85",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "34e62d79-55da-4867-9ec4-cb9dbbefda50"
        },
        "item": {
          "id": "84683023-3882-44f3-94eb-244d7b745c04",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "84683023-3882-44f3-94eb-244d7b745c04",
        "cursor": {
          "ref": "1bf4fac5-20f7-4dba-9853-dc97f63acb85",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "34e62d79-55da-4867-9ec4-cb9dbbefda50"
        },
        "item": {
          "id": "84683023-3882-44f3-94eb-244d7b745c04",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "43a6d45c-5559-4252-90f6-2f87145e992e",
        "cursor": {
          "ref": "feb5bba3-c89f-4005-96c8-d296c6e0d631",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5e08c0c7-1ec6-458a-b180-52fe72e57b26"
        },
        "item": {
          "id": "43a6d45c-5559-4252-90f6-2f87145e992e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "43a6d45c-5559-4252-90f6-2f87145e992e",
        "cursor": {
          "ref": "feb5bba3-c89f-4005-96c8-d296c6e0d631",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5e08c0c7-1ec6-458a-b180-52fe72e57b26"
        },
        "item": {
          "id": "43a6d45c-5559-4252-90f6-2f87145e992e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "0c023606-6e72-4d3c-aa59-259ea3af35b7",
        "cursor": {
          "ref": "7e4051a7-4b57-4a51-86e0-2786435e5789",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2bc12603-a989-4e13-9f6d-4e782412092f"
        },
        "item": {
          "id": "0c023606-6e72-4d3c-aa59-259ea3af35b7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "0c023606-6e72-4d3c-aa59-259ea3af35b7",
        "cursor": {
          "ref": "7e4051a7-4b57-4a51-86e0-2786435e5789",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2bc12603-a989-4e13-9f6d-4e782412092f"
        },
        "item": {
          "id": "0c023606-6e72-4d3c-aa59-259ea3af35b7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "0f68c8fb-ff92-43b3-8c8a-293e8fb43c9d",
        "cursor": {
          "ref": "0e53ea15-2532-475d-97fa-ebe5e4293530",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "61c137e1-a18e-4bac-9802-dc1c89d23f6f"
        },
        "item": {
          "id": "0f68c8fb-ff92-43b3-8c8a-293e8fb43c9d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "0f68c8fb-ff92-43b3-8c8a-293e8fb43c9d",
        "cursor": {
          "ref": "0e53ea15-2532-475d-97fa-ebe5e4293530",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "61c137e1-a18e-4bac-9802-dc1c89d23f6f"
        },
        "item": {
          "id": "0f68c8fb-ff92-43b3-8c8a-293e8fb43c9d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "92fde742-cdc7-49f6-a7d3-4bf9541e2c8d",
        "cursor": {
          "ref": "2a9d5b50-5eb0-46c7-9b01-5b765c21dcbb",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7374ff47-1dd7-4be1-8923-8ce91a943daa"
        },
        "item": {
          "id": "92fde742-cdc7-49f6-a7d3-4bf9541e2c8d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "92fde742-cdc7-49f6-a7d3-4bf9541e2c8d",
        "cursor": {
          "ref": "2a9d5b50-5eb0-46c7-9b01-5b765c21dcbb",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7374ff47-1dd7-4be1-8923-8ce91a943daa"
        },
        "item": {
          "id": "92fde742-cdc7-49f6-a7d3-4bf9541e2c8d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "df836f15-e7ce-410f-be8a-630cffcf767d",
        "cursor": {
          "ref": "416dd4da-20d3-433f-b712-9558fdfd6152",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "726b7756-04f7-46c8-983c-d00a593e7159"
        },
        "item": {
          "id": "df836f15-e7ce-410f-be8a-630cffcf767d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "df836f15-e7ce-410f-be8a-630cffcf767d",
        "cursor": {
          "ref": "416dd4da-20d3-433f-b712-9558fdfd6152",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "726b7756-04f7-46c8-983c-d00a593e7159"
        },
        "item": {
          "id": "df836f15-e7ce-410f-be8a-630cffcf767d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "decc58be-252e-4be9-9804-a69648cee9ec",
        "cursor": {
          "ref": "173bb5f9-441e-402d-bcbe-c38db3a6da1b",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "702daafc-09c7-47d2-9fc1-074ddf27ad11"
        },
        "item": {
          "id": "decc58be-252e-4be9-9804-a69648cee9ec",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "decc58be-252e-4be9-9804-a69648cee9ec",
        "cursor": {
          "ref": "173bb5f9-441e-402d-bcbe-c38db3a6da1b",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "702daafc-09c7-47d2-9fc1-074ddf27ad11"
        },
        "item": {
          "id": "decc58be-252e-4be9-9804-a69648cee9ec",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "87325249-75c5-4084-8438-325765054a66",
        "cursor": {
          "ref": "d680c8fe-62fb-4006-8ffa-395e6e71a0ef",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "709f55b9-e12e-425a-9ace-75bd1ae5dd89"
        },
        "item": {
          "id": "87325249-75c5-4084-8438-325765054a66",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "87325249-75c5-4084-8438-325765054a66",
        "cursor": {
          "ref": "d680c8fe-62fb-4006-8ffa-395e6e71a0ef",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "709f55b9-e12e-425a-9ace-75bd1ae5dd89"
        },
        "item": {
          "id": "87325249-75c5-4084-8438-325765054a66",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "abd2e515-eb7e-4201-acc3-13f35acd8b55",
        "cursor": {
          "ref": "730ce9db-6d93-422c-be52-8645298a4c3f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2e32e320-718d-45ce-85b4-935d9342cd20"
        },
        "item": {
          "id": "abd2e515-eb7e-4201-acc3-13f35acd8b55",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "abd2e515-eb7e-4201-acc3-13f35acd8b55",
        "cursor": {
          "ref": "730ce9db-6d93-422c-be52-8645298a4c3f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2e32e320-718d-45ce-85b4-935d9342cd20"
        },
        "item": {
          "id": "abd2e515-eb7e-4201-acc3-13f35acd8b55",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "c16fcea3-b907-493a-83b0-05aa5574abe9",
        "cursor": {
          "ref": "94200af0-b630-4f73-8a56-6d2e04197bd1",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3684de24-b4cc-46d4-bdd8-e23b35a8bebc"
        },
        "item": {
          "id": "c16fcea3-b907-493a-83b0-05aa5574abe9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c16fcea3-b907-493a-83b0-05aa5574abe9",
        "cursor": {
          "ref": "94200af0-b630-4f73-8a56-6d2e04197bd1",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3684de24-b4cc-46d4-bdd8-e23b35a8bebc"
        },
        "item": {
          "id": "c16fcea3-b907-493a-83b0-05aa5574abe9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7bfd3cfc-0204-4b3b-85b8-41faa1512f74",
        "cursor": {
          "ref": "dc5d1120-d30b-4724-9bff-6b33122b71ee",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5c007b05-c29a-4611-8401-cfb86eedcf41"
        },
        "item": {
          "id": "7bfd3cfc-0204-4b3b-85b8-41faa1512f74",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "7bfd3cfc-0204-4b3b-85b8-41faa1512f74",
        "cursor": {
          "ref": "dc5d1120-d30b-4724-9bff-6b33122b71ee",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5c007b05-c29a-4611-8401-cfb86eedcf41"
        },
        "item": {
          "id": "7bfd3cfc-0204-4b3b-85b8-41faa1512f74",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "12319f99-fb9a-4ad7-a84a-9c73140d8abd",
        "cursor": {
          "ref": "8163b3e1-4db0-4d96-9df8-c38df8d3d9aa",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8217e016-0bc8-4731-b310-461bc1f85296"
        },
        "item": {
          "id": "12319f99-fb9a-4ad7-a84a-9c73140d8abd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "12319f99-fb9a-4ad7-a84a-9c73140d8abd",
        "cursor": {
          "ref": "8163b3e1-4db0-4d96-9df8-c38df8d3d9aa",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8217e016-0bc8-4731-b310-461bc1f85296"
        },
        "item": {
          "id": "12319f99-fb9a-4ad7-a84a-9c73140d8abd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fba3fe5b-c736-4fa0-9ed3-c436d7157b17",
        "cursor": {
          "ref": "2e3acae3-5222-4f21-a7d2-64085297460e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "267c4e76-32a3-4e0d-940b-790b40072310"
        },
        "item": {
          "id": "fba3fe5b-c736-4fa0-9ed3-c436d7157b17",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "fba3fe5b-c736-4fa0-9ed3-c436d7157b17",
        "cursor": {
          "ref": "2e3acae3-5222-4f21-a7d2-64085297460e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "267c4e76-32a3-4e0d-940b-790b40072310"
        },
        "item": {
          "id": "fba3fe5b-c736-4fa0-9ed3-c436d7157b17",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c6302953-b7a0-4fa9-a8fa-4cc9214da1f7",
        "cursor": {
          "ref": "55ff2b15-b8b4-43a3-96f5-3ca2cd2f705f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "42bbf6f8-06ab-4be9-8c0f-f42b57ccd7fb"
        },
        "item": {
          "id": "c6302953-b7a0-4fa9-a8fa-4cc9214da1f7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c6302953-b7a0-4fa9-a8fa-4cc9214da1f7",
        "cursor": {
          "ref": "55ff2b15-b8b4-43a3-96f5-3ca2cd2f705f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "42bbf6f8-06ab-4be9-8c0f-f42b57ccd7fb"
        },
        "item": {
          "id": "c6302953-b7a0-4fa9-a8fa-4cc9214da1f7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "64de8d48-9bc3-4633-91c5-96c0885d96ef",
        "cursor": {
          "ref": "7d6a9469-b78f-47e4-a396-2723dedfd628",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "40ecabf4-95c7-4e40-b66b-71edbf80aa35"
        },
        "item": {
          "id": "64de8d48-9bc3-4633-91c5-96c0885d96ef",
          "name": "credentials_verify:proof:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "64de8d48-9bc3-4633-91c5-96c0885d96ef",
        "cursor": {
          "ref": "7d6a9469-b78f-47e4-a396-2723dedfd628",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "40ecabf4-95c7-4e40-b66b-71edbf80aa35"
        },
        "item": {
          "id": "64de8d48-9bc3-4633-91c5-96c0885d96ef",
          "name": "credentials_verify:proof:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "fe919709-6e31-4a16-9339-de8995155000",
        "cursor": {
          "ref": "0a5bc30c-1cb9-4353-b021-e28879547480",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6a5cbd5e-51a8-4199-a8aa-ebe703c924ed"
        },
        "item": {
          "id": "fe919709-6e31-4a16-9339-de8995155000",
          "name": "credentials_verify:proof:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "fe919709-6e31-4a16-9339-de8995155000",
        "cursor": {
          "ref": "0a5bc30c-1cb9-4353-b021-e28879547480",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6a5cbd5e-51a8-4199-a8aa-ebe703c924ed"
        },
        "item": {
          "id": "fe919709-6e31-4a16-9339-de8995155000",
          "name": "credentials_verify:proof:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "2c215419-2c82-434a-8710-859e1678b25e",
        "cursor": {
          "ref": "23cd251f-d4cc-4218-a717-0b52d7651fda",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "43bdf393-c7d9-4364-b3d6-677e81127bd9"
        },
        "item": {
          "id": "2c215419-2c82-434a-8710-859e1678b25e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "2c215419-2c82-434a-8710-859e1678b25e",
        "cursor": {
          "ref": "23cd251f-d4cc-4218-a717-0b52d7651fda",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "43bdf393-c7d9-4364-b3d6-677e81127bd9"
        },
        "item": {
          "id": "2c215419-2c82-434a-8710-859e1678b25e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "d952be34-a10a-4ed8-99ca-a352aefe844d",
        "cursor": {
          "ref": "be5fbdd5-4032-4016-a5c3-81b3d38e9e1c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ac5c5379-ff1e-40c6-8709-51921cf741d5"
        },
        "item": {
          "id": "d952be34-a10a-4ed8-99ca-a352aefe844d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d952be34-a10a-4ed8-99ca-a352aefe844d",
        "cursor": {
          "ref": "be5fbdd5-4032-4016-a5c3-81b3d38e9e1c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ac5c5379-ff1e-40c6-8709-51921cf741d5"
        },
        "item": {
          "id": "d952be34-a10a-4ed8-99ca-a352aefe844d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "dd84f73b-d3e5-4e9e-9864-fb128465a563",
        "cursor": {
          "ref": "52e315cf-6feb-4181-8c20-f231b311b64e",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f782f950-dedd-437a-b535-5256bf4a0002"
        },
        "item": {
          "id": "dd84f73b-d3e5-4e9e-9864-fb128465a563",
          "name": "credentials_verify:proof:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "dd84f73b-d3e5-4e9e-9864-fb128465a563",
        "cursor": {
          "ref": "52e315cf-6feb-4181-8c20-f231b311b64e",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f782f950-dedd-437a-b535-5256bf4a0002"
        },
        "item": {
          "id": "dd84f73b-d3e5-4e9e-9864-fb128465a563",
          "name": "credentials_verify:proof:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "21aa51b5-790d-4ac7-abe0-258b2127888c",
        "cursor": {
          "ref": "1516875e-a7f6-4e67-9565-f4f27b3ccad1",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5ec9fc76-922d-4869-a2aa-c6330331a523"
        },
        "item": {
          "id": "21aa51b5-790d-4ac7-abe0-258b2127888c",
          "name": "credentials_verify:proof:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "21aa51b5-790d-4ac7-abe0-258b2127888c",
        "cursor": {
          "ref": "1516875e-a7f6-4e67-9565-f4f27b3ccad1",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5ec9fc76-922d-4869-a2aa-c6330331a523"
        },
        "item": {
          "id": "21aa51b5-790d-4ac7-abe0-258b2127888c",
          "name": "credentials_verify:proof:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9ef85d47-2c61-4f9b-ad22-817090b5fd3e",
        "cursor": {
          "ref": "0da1a0ce-ff8c-47ec-b2a5-984b222d6676",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aa1e0ef9-f75f-4ee2-91a5-d0befab599c8"
        },
        "item": {
          "id": "9ef85d47-2c61-4f9b-ad22-817090b5fd3e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "9ef85d47-2c61-4f9b-ad22-817090b5fd3e",
        "cursor": {
          "ref": "0da1a0ce-ff8c-47ec-b2a5-984b222d6676",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aa1e0ef9-f75f-4ee2-91a5-d0befab599c8"
        },
        "item": {
          "id": "9ef85d47-2c61-4f9b-ad22-817090b5fd3e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "55b20c75-c893-4419-a03f-3667d4cd81ea",
        "cursor": {
          "ref": "7c96693c-4fdc-4425-8731-eda88291d7ab",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0936d1f0-3a44-4da1-8a3c-495efb88d03d"
        },
        "item": {
          "id": "55b20c75-c893-4419-a03f-3667d4cd81ea",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "55b20c75-c893-4419-a03f-3667d4cd81ea",
        "cursor": {
          "ref": "7c96693c-4fdc-4425-8731-eda88291d7ab",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0936d1f0-3a44-4da1-8a3c-495efb88d03d"
        },
        "item": {
          "id": "55b20c75-c893-4419-a03f-3667d4cd81ea",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f183dcea-75a8-4acd-903a-81a6603eef59",
        "cursor": {
          "ref": "bc8c35fc-4115-4af6-a93d-62a2b8a470f9",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3a8c2e95-5a45-422b-997d-a1924a8b10cf"
        },
        "item": {
          "id": "f183dcea-75a8-4acd-903a-81a6603eef59",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "f183dcea-75a8-4acd-903a-81a6603eef59",
        "cursor": {
          "ref": "bc8c35fc-4115-4af6-a93d-62a2b8a470f9",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3a8c2e95-5a45-422b-997d-a1924a8b10cf"
        },
        "item": {
          "id": "f183dcea-75a8-4acd-903a-81a6603eef59",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "dae835a4-c35e-422f-9212-3f3e19b7bc20",
        "cursor": {
          "ref": "3f65c082-1038-4580-9367-56ac6644ecce",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "748a179b-800e-4984-a10b-5671e31245ce"
        },
        "item": {
          "id": "dae835a4-c35e-422f-9212-3f3e19b7bc20",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "dae835a4-c35e-422f-9212-3f3e19b7bc20",
        "cursor": {
          "ref": "3f65c082-1038-4580-9367-56ac6644ecce",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "748a179b-800e-4984-a10b-5671e31245ce"
        },
        "item": {
          "id": "dae835a4-c35e-422f-9212-3f3e19b7bc20",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "c6dce464-3419-41de-a393-bf0295f9ddf8",
        "cursor": {
          "ref": "2a13dd46-2439-4a54-a7c0-0bab2abccafd",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "915eadd2-c8ff-4204-9e3d-2236bafeb0b1"
        },
        "item": {
          "id": "c6dce464-3419-41de-a393-bf0295f9ddf8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "c6dce464-3419-41de-a393-bf0295f9ddf8",
        "cursor": {
          "ref": "2a13dd46-2439-4a54-a7c0-0bab2abccafd",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "915eadd2-c8ff-4204-9e3d-2236bafeb0b1"
        },
        "item": {
          "id": "c6dce464-3419-41de-a393-bf0295f9ddf8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "4dd61711-68eb-490d-a272-0a9349466662",
        "cursor": {
          "ref": "f330e02d-110e-4d87-a159-a014106b1252",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "fa7d26b0-638a-4c2f-913a-fcb819940d72"
        },
        "item": {
          "id": "4dd61711-68eb-490d-a272-0a9349466662",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "4dd61711-68eb-490d-a272-0a9349466662",
        "cursor": {
          "ref": "f330e02d-110e-4d87-a159-a014106b1252",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "fa7d26b0-638a-4c2f-913a-fcb819940d72"
        },
        "item": {
          "id": "4dd61711-68eb-490d-a272-0a9349466662",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "3e646c48-fb6d-42f4-837c-9cb732298603",
        "cursor": {
          "ref": "629d05e1-8c85-4daa-be57-4460c1ada231",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6ce4343e-852b-45d9-9ee6-fda0a7327741"
        },
        "item": {
          "id": "3e646c48-fb6d-42f4-837c-9cb732298603",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "3e646c48-fb6d-42f4-837c-9cb732298603",
        "cursor": {
          "ref": "629d05e1-8c85-4daa-be57-4460c1ada231",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6ce4343e-852b-45d9-9ee6-fda0a7327741"
        },
        "item": {
          "id": "3e646c48-fb6d-42f4-837c-9cb732298603",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "a4705530-e3f6-4ff8-b484-1015005c92db",
        "cursor": {
          "ref": "65e32dfe-8715-4835-bfc6-01952d8f69ee",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "54be29a0-8acf-4ebd-9c59-9063058a38eb"
        },
        "item": {
          "id": "a4705530-e3f6-4ff8-b484-1015005c92db",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "a4705530-e3f6-4ff8-b484-1015005c92db",
        "cursor": {
          "ref": "65e32dfe-8715-4835-bfc6-01952d8f69ee",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "54be29a0-8acf-4ebd-9c59-9063058a38eb"
        },
        "item": {
          "id": "a4705530-e3f6-4ff8-b484-1015005c92db",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "b2200396-0f04-4869-abb3-9cf362478e3d",
        "cursor": {
          "ref": "1feade81-e13d-4bf1-8eb8-8496e3b5aef5",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "98e177d7-e6c2-4bed-b7fc-bd35d0899adc"
        },
        "item": {
          "id": "b2200396-0f04-4869-abb3-9cf362478e3d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "b2200396-0f04-4869-abb3-9cf362478e3d",
        "cursor": {
          "ref": "1feade81-e13d-4bf1-8eb8-8496e3b5aef5",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "98e177d7-e6c2-4bed-b7fc-bd35d0899adc"
        },
        "item": {
          "id": "b2200396-0f04-4869-abb3-9cf362478e3d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "04b7a346-ad2e-4b14-9b3c-a5e14320a07c",
        "cursor": {
          "ref": "ddd76028-f00f-4be9-80b5-e9b5b5fce08d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8cbb35d9-eeb0-409d-abbd-55672ad3031c"
        },
        "item": {
          "id": "04b7a346-ad2e-4b14-9b3c-a5e14320a07c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "04b7a346-ad2e-4b14-9b3c-a5e14320a07c",
        "cursor": {
          "ref": "ddd76028-f00f-4be9-80b5-e9b5b5fce08d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8cbb35d9-eeb0-409d-abbd-55672ad3031c"
        },
        "item": {
          "id": "04b7a346-ad2e-4b14-9b3c-a5e14320a07c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "3ba7e6c5-55a6-4a69-b9c3-edbd71b41fa3",
        "cursor": {
          "ref": "a2a82212-2d44-4662-8500-9cc7b6059b63",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b90fc2ce-0d1d-4404-ba29-d9b92cb449d2"
        },
        "item": {
          "id": "3ba7e6c5-55a6-4a69-b9c3-edbd71b41fa3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "3ba7e6c5-55a6-4a69-b9c3-edbd71b41fa3",
        "cursor": {
          "ref": "a2a82212-2d44-4662-8500-9cc7b6059b63",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b90fc2ce-0d1d-4404-ba29-d9b92cb449d2"
        },
        "item": {
          "id": "3ba7e6c5-55a6-4a69-b9c3-edbd71b41fa3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "5ac38520-2369-429a-8be6-b156a560477d",
        "cursor": {
          "ref": "0982fe4f-a631-49d5-85f6-5de54b56aa44",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3e37a121-b0d1-402b-8b3a-cf7dd1771496"
        },
        "item": {
          "id": "5ac38520-2369-429a-8be6-b156a560477d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "5ac38520-2369-429a-8be6-b156a560477d",
        "cursor": {
          "ref": "0982fe4f-a631-49d5-85f6-5de54b56aa44",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3e37a121-b0d1-402b-8b3a-cf7dd1771496"
        },
        "item": {
          "id": "5ac38520-2369-429a-8be6-b156a560477d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "bd16d2a1-1d61-4f26-83b7-6a58716de2e3",
        "cursor": {
          "ref": "ba7b3d77-c85a-4ed2-afce-6fa4140e84ef",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "898415f7-0780-4278-9298-efd2baff6b89"
        },
        "item": {
          "id": "bd16d2a1-1d61-4f26-83b7-6a58716de2e3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "bd16d2a1-1d61-4f26-83b7-6a58716de2e3",
        "cursor": {
          "ref": "ba7b3d77-c85a-4ed2-afce-6fa4140e84ef",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "898415f7-0780-4278-9298-efd2baff6b89"
        },
        "item": {
          "id": "bd16d2a1-1d61-4f26-83b7-6a58716de2e3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "d768eb1f-4393-4a20-9573-4df5f955f088",
        "cursor": {
          "ref": "7924e5dd-e8c9-41b0-9b67-87f1bc70aab7",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4ac56ee1-76e6-4d0e-a1ba-a2b1a2f89987"
        },
        "item": {
          "id": "d768eb1f-4393-4a20-9573-4df5f955f088",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "d768eb1f-4393-4a20-9573-4df5f955f088",
        "cursor": {
          "ref": "7924e5dd-e8c9-41b0-9b67-87f1bc70aab7",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4ac56ee1-76e6-4d0e-a1ba-a2b1a2f89987"
        },
        "item": {
          "id": "d768eb1f-4393-4a20-9573-4df5f955f088",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "68f57aa2-94b6-4e58-8358-05648a8230a3",
        "cursor": {
          "ref": "53539dd8-9386-40fd-b790-83bc3a02e969",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b7778ce8-018b-46cd-a1ef-e89d52d4a07d"
        },
        "item": {
          "id": "68f57aa2-94b6-4e58-8358-05648a8230a3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "68f57aa2-94b6-4e58-8358-05648a8230a3",
        "cursor": {
          "ref": "53539dd8-9386-40fd-b790-83bc3a02e969",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b7778ce8-018b-46cd-a1ef-e89d52d4a07d"
        },
        "item": {
          "id": "68f57aa2-94b6-4e58-8358-05648a8230a3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "8241a689-28d5-4228-a97f-5370d51ddc86",
        "cursor": {
          "ref": "5be086fa-38c5-4473-b82e-abf6ec324f30",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "426058e2-0d46-477b-becd-419958757272"
        },
        "item": {
          "id": "8241a689-28d5-4228-a97f-5370d51ddc86",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "8241a689-28d5-4228-a97f-5370d51ddc86",
        "cursor": {
          "ref": "5be086fa-38c5-4473-b82e-abf6ec324f30",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "426058e2-0d46-477b-becd-419958757272"
        },
        "item": {
          "id": "8241a689-28d5-4228-a97f-5370d51ddc86",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "0045e9cf-f41a-42e6-bd07-3cfb13ba8789",
        "cursor": {
          "ref": "6da4a47b-a053-4d08-8c0f-61dc5d8434c2",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6e25f137-f569-4ba5-af4e-05069b6f9eda"
        },
        "item": {
          "id": "0045e9cf-f41a-42e6-bd07-3cfb13ba8789",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "0045e9cf-f41a-42e6-bd07-3cfb13ba8789",
        "cursor": {
          "ref": "6da4a47b-a053-4d08-8c0f-61dc5d8434c2",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6e25f137-f569-4ba5-af4e-05069b6f9eda"
        },
        "item": {
          "id": "0045e9cf-f41a-42e6-bd07-3cfb13ba8789",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "ad0184f9-e2ed-44ff-850d-43796890d60b",
        "cursor": {
          "ref": "44eb1e22-503b-4c2a-bcd4-09b4efdd1bbd",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3b351b03-f065-40e8-aa04-e93fb6ad5146"
        },
        "item": {
          "id": "ad0184f9-e2ed-44ff-850d-43796890d60b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "ad0184f9-e2ed-44ff-850d-43796890d60b",
        "cursor": {
          "ref": "44eb1e22-503b-4c2a-bcd4-09b4efdd1bbd",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3b351b03-f065-40e8-aa04-e93fb6ad5146"
        },
        "item": {
          "id": "ad0184f9-e2ed-44ff-850d-43796890d60b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "653abc34-6f1f-4449-a3af-c93df5ddba23",
        "cursor": {
          "ref": "0c60a26a-e19e-40d7-be87-bf232b565ada",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "318c92ba-628c-44c1-9b92-c03873e6d181"
        },
        "item": {
          "id": "653abc34-6f1f-4449-a3af-c93df5ddba23",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "653abc34-6f1f-4449-a3af-c93df5ddba23",
        "cursor": {
          "ref": "0c60a26a-e19e-40d7-be87-bf232b565ada",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "318c92ba-628c-44c1-9b92-c03873e6d181"
        },
        "item": {
          "id": "653abc34-6f1f-4449-a3af-c93df5ddba23",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "8bb563d0-1867-4fde-a6fc-4da97c8509a2",
        "cursor": {
          "ref": "e42bf376-532f-4428-b44c-e4ca1d9c7375",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4dc99949-fcda-49c7-b789-b6bcb2593cb2"
        },
        "item": {
          "id": "8bb563d0-1867-4fde-a6fc-4da97c8509a2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "8bb563d0-1867-4fde-a6fc-4da97c8509a2",
        "cursor": {
          "ref": "e42bf376-532f-4428-b44c-e4ca1d9c7375",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4dc99949-fcda-49c7-b789-b6bcb2593cb2"
        },
        "item": {
          "id": "8bb563d0-1867-4fde-a6fc-4da97c8509a2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "f2e96afb-c972-4a83-9cea-7ac9d4b5f054",
        "cursor": {
          "ref": "5226dcbb-a6b4-455f-9838-99ecd44feea0",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a6cff0ca-6bda-4fe9-b1fd-9002e0aba249"
        },
        "item": {
          "id": "f2e96afb-c972-4a83-9cea-7ac9d4b5f054",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "f2e96afb-c972-4a83-9cea-7ac9d4b5f054",
        "cursor": {
          "ref": "5226dcbb-a6b4-455f-9838-99ecd44feea0",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a6cff0ca-6bda-4fe9-b1fd-9002e0aba249"
        },
        "item": {
          "id": "f2e96afb-c972-4a83-9cea-7ac9d4b5f054",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "532048c7-af19-42e5-a8d8-e6ea47b0161b",
        "cursor": {
          "ref": "ada68d24-21de-4226-b3ca-26d5bdf58dc6",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "42dce751-9379-47aa-b23a-aff072fc56ff"
        },
        "item": {
          "id": "532048c7-af19-42e5-a8d8-e6ea47b0161b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "532048c7-af19-42e5-a8d8-e6ea47b0161b",
        "cursor": {
          "ref": "ada68d24-21de-4226-b3ca-26d5bdf58dc6",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "42dce751-9379-47aa-b23a-aff072fc56ff"
        },
        "item": {
          "id": "532048c7-af19-42e5-a8d8-e6ea47b0161b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "33e6ec18-8212-4e48-9100-db0f98d544df",
        "cursor": {
          "ref": "0f75d386-5a51-4368-bb4a-691fa0f03c29",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0f024812-8e08-4f4f-abe5-decac2256858"
        },
        "item": {
          "id": "33e6ec18-8212-4e48-9100-db0f98d544df",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "33e6ec18-8212-4e48-9100-db0f98d544df",
        "cursor": {
          "ref": "0f75d386-5a51-4368-bb4a-691fa0f03c29",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0f024812-8e08-4f4f-abe5-decac2256858"
        },
        "item": {
          "id": "33e6ec18-8212-4e48-9100-db0f98d544df",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "abaad23a-2bba-4fbb-b16c-9d7996a8752e",
        "cursor": {
          "ref": "f99f61b0-d7e6-4214-a9e1-dd48fa3a1bec",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "0ccfa173-537f-40cd-92e5-7eb013c4f283"
        },
        "item": {
          "id": "abaad23a-2bba-4fbb-b16c-9d7996a8752e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "abaad23a-2bba-4fbb-b16c-9d7996a8752e",
        "cursor": {
          "ref": "f99f61b0-d7e6-4214-a9e1-dd48fa3a1bec",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "0ccfa173-537f-40cd-92e5-7eb013c4f283"
        },
        "item": {
          "id": "abaad23a-2bba-4fbb-b16c-9d7996a8752e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "3965a860-1905-4d24-b717-da3051f88f37",
        "cursor": {
          "ref": "8ec80312-6b56-4c87-9b5f-e8c957c9b31e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7f15f2b0-9ef1-4095-beee-513e1e18fbf7"
        },
        "item": {
          "id": "3965a860-1905-4d24-b717-da3051f88f37",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "3965a860-1905-4d24-b717-da3051f88f37",
        "cursor": {
          "ref": "8ec80312-6b56-4c87-9b5f-e8c957c9b31e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7f15f2b0-9ef1-4095-beee-513e1e18fbf7"
        },
        "item": {
          "id": "3965a860-1905-4d24-b717-da3051f88f37",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "cddf15ad-ae7d-4341-87f2-ad1fb57c1eee",
        "cursor": {
          "ref": "ab522b2c-cc3d-49f0-a27c-cca4ded06d7d",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7453de78-2b0a-4a05-8c0d-5e1e21d4954f"
        },
        "item": {
          "id": "cddf15ad-ae7d-4341-87f2-ad1fb57c1eee",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "cddf15ad-ae7d-4341-87f2-ad1fb57c1eee",
        "cursor": {
          "ref": "ab522b2c-cc3d-49f0-a27c-cca4ded06d7d",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7453de78-2b0a-4a05-8c0d-5e1e21d4954f"
        },
        "item": {
          "id": "cddf15ad-ae7d-4341-87f2-ad1fb57c1eee",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "799f01de-f38c-4591-af1a-50fe219e6378",
        "cursor": {
          "ref": "81342d90-e1ff-4863-b7a8-8f00764c4535",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "94448d4e-7449-402c-8eda-f38546cf2551"
        },
        "item": {
          "id": "799f01de-f38c-4591-af1a-50fe219e6378",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "799f01de-f38c-4591-af1a-50fe219e6378",
        "cursor": {
          "ref": "81342d90-e1ff-4863-b7a8-8f00764c4535",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "94448d4e-7449-402c-8eda-f38546cf2551"
        },
        "item": {
          "id": "799f01de-f38c-4591-af1a-50fe219e6378",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "a5fa31ac-06fc-4bd5-9864-54f45526547f",
        "cursor": {
          "ref": "f4f69c9b-becb-481b-b9fe-bda22d5a7a26",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3d00f4ac-8a35-48e7-8cc4-01923cdf5367"
        },
        "item": {
          "id": "a5fa31ac-06fc-4bd5-9864-54f45526547f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "a5fa31ac-06fc-4bd5-9864-54f45526547f",
        "cursor": {
          "ref": "f4f69c9b-becb-481b-b9fe-bda22d5a7a26",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3d00f4ac-8a35-48e7-8cc4-01923cdf5367"
        },
        "item": {
          "id": "a5fa31ac-06fc-4bd5-9864-54f45526547f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "b47db9f9-44be-49ba-ac3c-8720ceb4ab46",
        "cursor": {
          "ref": "1e98f9f0-c91b-4aca-b6fd-0123224e128b",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "01faaab1-d038-4dc0-b027-427aee0e9725"
        },
        "item": {
          "id": "b47db9f9-44be-49ba-ac3c-8720ceb4ab46",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:277)"
            }
          }
        ]
      },
      {
        "id": "b47db9f9-44be-49ba-ac3c-8720ceb4ab46",
        "cursor": {
          "ref": "1e98f9f0-c91b-4aca-b6fd-0123224e128b",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "01faaab1-d038-4dc0-b027-427aee0e9725"
        },
        "item": {
          "id": "b47db9f9-44be-49ba-ac3c-8720ceb4ab46",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:277)"
            }
          }
        ]
      },
      {
        "id": "efd6b006-591c-4cc8-a296-931cb89ccca0",
        "cursor": {
          "ref": "392777c7-828c-436c-94be-2c50addd478f",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0658666a-6837-4f8f-a561-697609f3bf23"
        },
        "item": {
          "id": "efd6b006-591c-4cc8-a296-931cb89ccca0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "efd6b006-591c-4cc8-a296-931cb89ccca0",
        "cursor": {
          "ref": "392777c7-828c-436c-94be-2c50addd478f",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0658666a-6837-4f8f-a561-697609f3bf23"
        },
        "item": {
          "id": "efd6b006-591c-4cc8-a296-931cb89ccca0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "10494d8a-c759-45b5-953a-0cf44405288e",
        "cursor": {
          "ref": "357bc958-2652-4c7f-9329-31afda9c2001",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "57dce8ac-26c6-43ef-bc4f-541971196f92"
        },
        "item": {
          "id": "10494d8a-c759-45b5-953a-0cf44405288e",
          "name": "credentials_verify"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "10494d8a-c759-45b5-953a-0cf44405288e",
        "cursor": {
          "ref": "357bc958-2652-4c7f-9329-31afda9c2001",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "57dce8ac-26c6-43ef-bc4f-541971196f92"
        },
        "item": {
          "id": "10494d8a-c759-45b5-953a-0cf44405288e",
          "name": "credentials_verify"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "679a84b4-e2af-4164-bbe7-28c43ca87a07",
        "cursor": {
          "ref": "41a2ae40-fe87-4fc9-abce-79a940a3425d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b90b4c5a-527a-497b-aaca-d97b235a9e7d"
        },
        "item": {
          "id": "679a84b4-e2af-4164-bbe7-28c43ca87a07",
          "name": "credentials_verify:issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "679a84b4-e2af-4164-bbe7-28c43ca87a07",
        "cursor": {
          "ref": "41a2ae40-fe87-4fc9-abce-79a940a3425d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b90b4c5a-527a-497b-aaca-d97b235a9e7d"
        },
        "item": {
          "id": "679a84b4-e2af-4164-bbe7-28c43ca87a07",
          "name": "credentials_verify:issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "d1088978-960a-4411-96c1-c3e3d284cab3",
        "cursor": {
          "ref": "487cf26c-8adf-46fe-9061-170ff35c3cd5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8c2d6a0c-5490-454f-b28e-9a78c20f2894"
        },
        "item": {
          "id": "d1088978-960a-4411-96c1-c3e3d284cab3",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "d1088978-960a-4411-96c1-c3e3d284cab3",
        "cursor": {
          "ref": "487cf26c-8adf-46fe-9061-170ff35c3cd5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8c2d6a0c-5490-454f-b28e-9a78c20f2894"
        },
        "item": {
          "id": "d1088978-960a-4411-96c1-c3e3d284cab3",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "6a3135bd-1e33-4e3d-9aca-f061507af64e",
        "cursor": {
          "ref": "aff1961f-bc06-4e06-bd1c-dda0349a0fea",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c34b386f-370d-4ab9-ad99-a4dfe9eff2c5"
        },
        "item": {
          "id": "6a3135bd-1e33-4e3d-9aca-f061507af64e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      },
      {
        "id": "6a3135bd-1e33-4e3d-9aca-f061507af64e",
        "cursor": {
          "ref": "aff1961f-bc06-4e06-bd1c-dda0349a0fea",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c34b386f-370d-4ab9-ad99-a4dfe9eff2c5"
        },
        "item": {
          "id": "6a3135bd-1e33-4e3d-9aca-f061507af64e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      },
      {
        "id": "80200ab1-4ad0-46ec-9123-433f68730443",
        "cursor": {
          "ref": "9625feaf-700e-4caa-9b50-251c6aec1640",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "6bd68541-c643-468e-b679-b21321c6c31c"
        },
        "item": {
          "id": "80200ab1-4ad0-46ec-9123-433f68730443",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:283)"
            }
          }
        ]
      },
      {
        "id": "80200ab1-4ad0-46ec-9123-433f68730443",
        "cursor": {
          "ref": "9625feaf-700e-4caa-9b50-251c6aec1640",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "6bd68541-c643-468e-b679-b21321c6c31c"
        },
        "item": {
          "id": "80200ab1-4ad0-46ec-9123-433f68730443",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:283)"
            }
          }
        ]
      }
    ]
  }
}