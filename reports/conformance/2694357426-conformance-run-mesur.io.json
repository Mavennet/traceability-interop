{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6dc08bcc-55ca-4ac9-97b8-4fa3a41d6daf",
        "name": "Issue Credential",
        "item": [
          {
            "id": "c19b88bc-067d-436e-b637-acc4faec7a2a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bb02d82-2522-468b-91f9-f9833c8cd5f9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7640872c-4ced-4e6e-accf-83a565eadf23",
                    "name": "credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6bca7e-c6b2-404a-abd7-242f186a98a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7633b3-df6c-4de8-a1ef-54abd1b99c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09282667-63ec-41bc-ab2e-491ae465bf23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb40e1e2-7b26-4509-ab5d-44b750fe3828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224ecc12-4f48-473d-aeac-b079c4a0969f",
                    "name": "credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573a78df-8d6b-4aff-ba9d-0425c5828f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb349ce-e5c0-42b0-95a7-6410b5863c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a64db6-929e-44d2-9ded-403a52515717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd8020d1-5e48-45e2-b892-bb1a27b0974d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48a5e39-563a-4b66-953b-18009f2d8be3",
                    "name": "credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93240026-ef79-4a9c-ba66-bfacbfdb3748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cfeb13d-41de-44b6-92ac-351af97a5992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3804ab8-f8b0-48ba-8cc9-f6a5a370d8a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f3dcacb-fe32-42e1-b88e-60ecc7036a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40a1814-c26f-42d9-b945-28425db3cabb",
                    "name": "credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5f05e7-57e6-45c3-940d-2412a24e1f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea03bc9-91ef-4e2b-bd0e-aa7455e5f71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5047762b-b52e-4826-aa94-63b846a50171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ba8f4dc-7ac7-45bc-a6b3-4e13a47af309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1956e51-5ee3-4fdc-832c-115601adf4ee",
                    "name": "credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b171c0-19fd-4425-90a5-42812ceb49fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbda02f5-b36b-469a-a760-953b3479233f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3be2502-caa6-4477-affb-beb1c310dd35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55464a8e-b6e4-44bc-978b-c5292565af6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d375fd27-1e2f-4b68-a32b-1b70b02c885f",
                    "name": "credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76095813-6c03-429a-805f-e935eb693db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d721c22-2d69-4d1b-9475-090523878ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d79be3c-67fc-4829-88e4-2d8abffb6f52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc8616c6-7d9d-4967-8e61-dc2f770a39b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef83effb-0cc8-402c-95d1-27b6b7cb4368",
                    "name": "credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849c9e0a-1ba6-46a3-9129-124ca4e974c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce0d8ccc-36c6-4d06-acd4-08b340692a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23bea31-d7bf-4992-9c3e-8b9a0939065f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2b80b35-8a25-4203-a5ae-d791b987bcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ada2a3c-7273-4402-a6b8-83f7e9de5ca9",
                    "name": "credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d001c6b-35cc-4487-9609-e9a35f15d676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df50aa30-adbe-482b-95fd-0d4b20297ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2879fdc0-2747-4202-827c-380bf0da3ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "462edaed-9c68-47d1-b8ac-7af007afa5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdf05b5-6f5b-415d-9468-c3717661ff05",
                    "name": "credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5ada5a-6671-4788-af4a-3e611c89a283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a82c4d8-71db-4780-a9ee-f4b3b7d5da40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc5df00-831c-4ba1-9281-e0f2c7e13322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1ae9dd2-c2c0-4030-9a67-8bad8dd3dce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5d5ff4-bf98-4ef7-ab33-2648c48c82b6",
                    "name": "credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dfb934-ffd5-432e-84bd-4033d6b318f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a290d47b-08d4-497c-b440-24d3f5a1f61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb156ab9-7521-4d39-85ac-be5df232678a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f70ad5a-aee7-46af-ac82-6bb96946ab28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f744950b-410b-426e-8879-bd049e62bf6b",
                    "name": "credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc278b5e-21bf-47e9-8eef-7aae7e8f75f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff36c82-887b-4aba-abf7-4a0471ff5fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a006c9-ad66-48bb-a9d1-3e9f9021704b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db5c549f-6a3b-4dad-8ab6-024352e04338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101369c1-db53-4e63-9b9d-a4401677c044",
                    "name": "credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d0be33-f714-4f6c-9329-7a30c1d11334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7112055-5464-4aa3-a530-0cf0768ac1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067baabb-ebf4-4479-b1bd-f0175d6c57ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c659b82-c61f-483b-b5a8-bb7435711032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2254f0f8-cacb-4c8d-8c41-f44e93795558",
                    "name": "credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95614173-dbba-4ca9-bcb5-6637f4dd4c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1188d19-4e43-4901-89a1-5bdfb54c4115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ad51f5-b1e2-4a7e-87c3-5814f1a834cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc3c7ace-bdfa-4843-ad0c-57e8080eaecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc21c0ea-69b8-4462-840a-6f290c36981a",
                    "name": "credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538bb3e5-2df0-479e-b134-77065eacdd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6471d1d6-a98b-4da6-b0ef-d1774acb739a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be14165-b4cb-4c45-852b-cc4f0c5e86ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18f9a028-565b-4e91-a230-0b959ea6105e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51f8b20-63b9-4623-8881-0f0a30bdddea",
                    "name": "credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22ea4d3-0e4e-4a4c-b648-bc8d039c2c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b6b39b-64cd-4f3c-959f-0975ccde147e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f596e25d-7282-4b7f-a7f4-204cb6b94f8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f17fcd3-a0f0-4fb9-8216-a39230e57119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ccfeb5-ae6a-4f1d-979f-ebfd18efc667",
                    "name": "credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b69570-f00c-4cee-a60d-242eb26546b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7a10cf-b26b-43c5-9415-2bb11f50b022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08616470-7e29-4610-b85d-17cd108ddbc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f592fabc-ae50-4512-b123-84e4cbb8eb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2771a38c-6aa7-4c43-9847-8764ebd40784",
                    "name": "credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38207e7f-986d-4ea7-a49a-e0f22cd9eabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1840ed35-4fe4-438f-978d-14020b991c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c725fb-a232-409a-849c-d8adbd5a3f6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cbc62e7-577e-4bd7-ab6c-e491266677b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4fa12e-1e0c-4a49-a7f1-0016b2c65f72",
                    "name": "options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e25969a-5f06-46af-8d2a-8c328e97ecfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a11f48-41ea-44f4-8e01-25b44238dda4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a25457d-984b-4bf9-8f43-5ae268ed8829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa03fad6-042c-47c0-ac10-3e2ef18f524e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e493ddf1-113e-4dc5-9ad3-dcc0384cebf0",
                    "name": "options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc700dc7-3cc5-4d9b-903b-4abfd1772c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790c04db-abab-4799-a6d5-72975fdd8c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a1141b-4217-4333-bfa3-98815f3da106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7862e7a-c863-4be3-9cfb-c7515f1cd7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e056d58-eb05-409e-97d5-7162d5ca9a96",
                    "name": "options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37acff35-868d-44fb-ae90-68323a20e67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1537525-694c-46a3-afc6-6f768480735c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ca346e-79d1-43e2-86b4-421827ae8860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e0c8251-daa6-4a4a-91e6-440b1eba4af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2031920-5cf8-4dc3-aab3-4176968edfa9",
                    "name": "options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41dc7d3c-3bc4-40e2-b598-5741bdc524c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15273d47-681b-41d2-a17e-abfb1d919378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e734c0-7b52-40e0-953b-3a059d6108c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7308ac9-c88e-4f80-bd56-5450b6c92747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523fd5f6-f026-422d-9e36-1fdacfe792ef",
                    "name": "options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfd1cdf-407e-4e92-810d-605c1206509d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10229391-b804-4cb9-abe5-8c8d797a4283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9bca42-eecd-4fff-8afa-67ed0321f553",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3bd4cdf-b0d8-4643-9eda-0800f3367f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7e891a-b8ea-4e5e-8364-5ba439fafa13",
                    "name": "options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7e2d4e-e214-4ec8-b762-66d5aae34816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4276c4b4-7956-41af-9b2c-dacb2308c032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed01b863-4dc0-4f8b-9602-0ef37c2d2adf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f601887-8e34-49b8-a2df-213d59bb75fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce84533-bb9f-4f40-916c-d38969275652",
                    "name": "options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579103e7-f08b-4c6e-9d0a-fb741c307110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b783b93-2dc3-498a-a7a2-7c294c2aa1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fb1a02-2e12-4067-b87c-69290dc183ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8aa45a8-91ba-4151-865b-47cfe8f3e09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cade130d-4240-41c4-a5ff-3d4610f6c40d",
                    "name": "options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9dc4cc1-2575-43ca-ba62-39e13cba5a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da14a776-a1e0-4689-b6d7-5e178a268c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c805ed65-4177-451a-9fee-b594c8a4542f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "091ca8c6-c338-408b-a923-b7694c431097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ed2568-6ae6-4696-8bbd-d28eaa71d91c",
                    "name": "options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c534a30-06a5-4011-8c56-6df6a598e59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "39950aef-149b-460e-8cd1-087c1a4c5faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee9b1bb-4ea8-4774-8a56-198a774f3178",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be3a5db4-1263-43da-9b7b-6dc53ac4b4d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b6b39a4-3cf5-429e-9953-47d9e66fc591",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c945777f-38a0-41d5-a911-6e823d8d549f",
                    "name": "missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3aad76-f3e7-465c-9d33-688ea7b83b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d50401c-7e1e-495f-8bdb-01a23e5b6420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659dc65d-2462-4394-bc99-c57cd8fa5676",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "d2286865-4d0a-49a3-bf3d-798c656edf01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b56787f-16ce-4acd-8231-10ece6f07fc5",
                    "name": "missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee77a3f2-02f0-4a71-8406-77015da87a38",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f547b22c-c959-406f-b436-4a21789362c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49115c11-1ff4-4fe5-a001-66eb010f9d53",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "1d0f803c-40ca-4653-9e84-2702147ecec2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d135549e-1d23-4d90-9308-4cc93ea25a5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2322380a-28ab-41bc-8611-fc9e30da420b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be8a4c79-0d4e-4f6a-bcf3-e6688a641717",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9a01a9b-f0e6-4bf2-9ef1-2617bf751550"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f36cdb83-c534-4f47-9b2e-7819477a7a6d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "178bf72a-790e-4563-897d-2b02a32fa229"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "04e5e067-36c1-4f9c-b2fd-18a8e9003e01",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c8ae2aa-7e3f-4222-b47b-51264a868c98"
                }
              }
            ]
          },
          {
            "id": "37fed91a-ba79-49a8-88ab-c8b51296507d",
            "name": "Happy Path",
            "item": [
              {
                "id": "76c1d8f3-cc90-426b-b988-68f8fbfda5d3",
                "name": "base",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aee253b8-b9de-4c3a-97bb-0d0ad640ceea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb470184-562c-4e45-a99a-2f5d623f6731"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "905f8614-691c-45b7-a49c-de7af69a0cb3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "0cd5607f-c539-43ca-8197-2c97cf3924f1"
                    }
                  }
                ]
              },
              {
                "id": "2cb3981b-031c-4055-ae04-67499cb98d86",
                "name": "credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2af370d-bc48-48ac-adb4-b340bedcc1be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc0f8804-bb55-4f60-91ec-0ab66691ee4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82033275-0501-4368-8785-da16ee11e1a3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "ec2b0775-d6d1-4121-93e6-7143d71979f0"
                    }
                  }
                ]
              },
              {
                "id": "1bcdf9f1-0415-4ba4-8cbb-d53e939c8558",
                "name": "credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c70a096-997e-4fcb-b973-af0c73d654a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74206b4f-4e79-4f9f-ac6e-f4676cffc924"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d06742b2-c5e7-4d20-9252-98a53be96df5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "4e694722-ae01-4ae7-9d9b-685e6b589817"
                    }
                  }
                ]
              },
              {
                "id": "e761806b-817e-4c68-be75-2cc19a72ca5a",
                "name": "credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "383af0fc-a26a-4e4f-90bd-cc06aa464e5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc08ee01-b074-4625-9784-8016699f9149"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1587680-9827-40ea-ad04-15a79dd2bacd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "7d6ceaba-61cb-4115-b0ce-5c4f021e0427"
                    }
                  }
                ]
              },
              {
                "id": "1e7f1d45-c100-487a-8461-2cf9c4b7894c",
                "name": "credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6db35687-e86d-4beb-a666-4175b84bc96f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08315b7c-e445-4195-9869-10da8d4d2df1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfcb0785-2f47-4347-9a3b-a563fcbd983c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "d72ff8a1-0720-4551-8822-ce111dccbdba"
                    }
                  }
                ]
              },
              {
                "id": "1d13ba16-32db-4e27-ae76-2d083a570ee1",
                "name": "credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60ecb8aa-a1ce-47ba-b1bc-8c5a466eaa25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6db4f20f-a79b-4ced-9437-24a69f39d86d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01f46bab-2772-406e-aac9-76875f238fdb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "3a952a8b-64b2-4e1a-bad0-654e60641cd6"
                    }
                  }
                ]
              },
              {
                "id": "d278dcf9-a7b0-4fca-a124-7f9463f8a81f",
                "name": "options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dea12b02-322b-46b6-a4c3-bd74acf6a708",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "121cde0c-d700-4ebe-80fe-ff1188ec083c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cb924c2-7a57-4beb-aaf4-83a2ec3f74bf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "5e231a83-0117-42c1-ba87-f6c22aa965dc"
                    }
                  }
                ]
              },
              {
                "id": "c70f9764-05a4-4b94-bf5f-d86e3e7b262c",
                "name": "options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dea45248-ed06-4c58-8fd3-3aec3403d0b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d0a2eba-2ffa-4255-b245-b5dee92e185d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39071cb2-c9a8-4a70-a618-f4e6dcceee27",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "f4561edb-20da-4469-a197-f4ca79f4b0b2"
                    }
                  }
                ]
              },
              {
                "id": "5e34f76f-21ba-4b47-8ebb-b821e79e5a48",
                "name": "options:opt.credentialStatus Copy",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1058c4e-c1d1-4717-944a-0ad5d288a33d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74318671-174c-41b6-bf08-06603dda9abb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f4a8d1f-8cbf-49ae-9178-aec018cfbf09",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "a503e611-8423-468e-ace2-3784743c2fd3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7be5d755-1f50-4ca6-b236-e1871115b7f5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d10c7fd-788d-453e-8457-2bc6f1fe384d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "33cb27ab-04f8-4b74-8835-b21eb58f1028",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bc3600d-866d-49ed-98a6-f7fd86a41e01"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ab93e3c-6f61-4d14-aa54-4cf3c8fbecf7",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "f55e06a1-0b4f-4e13-8ab9-754db9d1ecc6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2845d8bc-7538-4201-afb4-f52883f0d9e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fce3e2aa-b30b-4b7c-bc28-7979098fbbcd"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 300,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 75,
        "pending": 0,
        "failed": 75
      },
      "tests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 74,
        "pending": 0,
        "failed": 72
      },
      "testScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1658190418667,
      "completed": 1658190420750
    },
    "executions": [
      {
        "id": "7640872c-4ced-4e6e-accf-83a565eadf23",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "622c95ac-5f1f-424a-b907-0cb881f74f2a",
          "httpRequestId": "e8ff6e3b-c211-4b34-a0b1-5889779fcc00"
        },
        "item": {
          "id": "7640872c-4ced-4e6e-accf-83a565eadf23",
          "name": "credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "7640872c-4ced-4e6e-accf-83a565eadf23",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "622c95ac-5f1f-424a-b907-0cb881f74f2a",
          "httpRequestId": "e8ff6e3b-c211-4b34-a0b1-5889779fcc00"
        },
        "item": {
          "id": "7640872c-4ced-4e6e-accf-83a565eadf23",
          "name": "credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "224ecc12-4f48-473d-aeac-b079c4a0969f",
        "cursor": {
          "ref": "ed887f57-100f-4c6a-bbec-cbe3acf8c7b2",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3cd9fc7e-728c-4ca1-a88c-657b426cb4f4"
        },
        "item": {
          "id": "224ecc12-4f48-473d-aeac-b079c4a0969f",
          "name": "credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "224ecc12-4f48-473d-aeac-b079c4a0969f",
        "cursor": {
          "ref": "ed887f57-100f-4c6a-bbec-cbe3acf8c7b2",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3cd9fc7e-728c-4ca1-a88c-657b426cb4f4"
        },
        "item": {
          "id": "224ecc12-4f48-473d-aeac-b079c4a0969f",
          "name": "credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "b48a5e39-563a-4b66-953b-18009f2d8be3",
        "cursor": {
          "ref": "bfc67e47-57fd-41d5-b2fb-a5d70b85b0ab",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "da2f2373-ff02-4cd5-b338-82245d6bf97d"
        },
        "item": {
          "id": "b48a5e39-563a-4b66-953b-18009f2d8be3",
          "name": "credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "b48a5e39-563a-4b66-953b-18009f2d8be3",
        "cursor": {
          "ref": "bfc67e47-57fd-41d5-b2fb-a5d70b85b0ab",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "da2f2373-ff02-4cd5-b338-82245d6bf97d"
        },
        "item": {
          "id": "b48a5e39-563a-4b66-953b-18009f2d8be3",
          "name": "credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "c40a1814-c26f-42d9-b945-28425db3cabb",
        "cursor": {
          "ref": "f0dd3cd8-9019-4795-be09-80df1064756a",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e4530a56-7140-4f7b-b25e-c743798c789d"
        },
        "item": {
          "id": "c40a1814-c26f-42d9-b945-28425db3cabb",
          "name": "credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c40a1814-c26f-42d9-b945-28425db3cabb",
        "cursor": {
          "ref": "f0dd3cd8-9019-4795-be09-80df1064756a",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e4530a56-7140-4f7b-b25e-c743798c789d"
        },
        "item": {
          "id": "c40a1814-c26f-42d9-b945-28425db3cabb",
          "name": "credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f1956e51-5ee3-4fdc-832c-115601adf4ee",
        "cursor": {
          "ref": "be74730c-1607-49c7-8e37-fc784388f376",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cea2225e-13da-4477-bf46-78698923843a"
        },
        "item": {
          "id": "f1956e51-5ee3-4fdc-832c-115601adf4ee",
          "name": "credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "f1956e51-5ee3-4fdc-832c-115601adf4ee",
        "cursor": {
          "ref": "be74730c-1607-49c7-8e37-fc784388f376",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cea2225e-13da-4477-bf46-78698923843a"
        },
        "item": {
          "id": "f1956e51-5ee3-4fdc-832c-115601adf4ee",
          "name": "credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "d375fd27-1e2f-4b68-a32b-1b70b02c885f",
        "cursor": {
          "ref": "c8176040-78fe-4563-9752-4a0520b827d0",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8504db94-9477-4193-9df2-c8ca01a2fa01"
        },
        "item": {
          "id": "d375fd27-1e2f-4b68-a32b-1b70b02c885f",
          "name": "credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "d375fd27-1e2f-4b68-a32b-1b70b02c885f",
        "cursor": {
          "ref": "c8176040-78fe-4563-9752-4a0520b827d0",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8504db94-9477-4193-9df2-c8ca01a2fa01"
        },
        "item": {
          "id": "d375fd27-1e2f-4b68-a32b-1b70b02c885f",
          "name": "credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "ef83effb-0cc8-402c-95d1-27b6b7cb4368",
        "cursor": {
          "ref": "5a4bb3a4-fdaf-4d35-872d-cc9805d265d6",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f0f0ee88-101d-444c-94bb-34f710f3a943"
        },
        "item": {
          "id": "ef83effb-0cc8-402c-95d1-27b6b7cb4368",
          "name": "credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ef83effb-0cc8-402c-95d1-27b6b7cb4368",
        "cursor": {
          "ref": "5a4bb3a4-fdaf-4d35-872d-cc9805d265d6",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f0f0ee88-101d-444c-94bb-34f710f3a943"
        },
        "item": {
          "id": "ef83effb-0cc8-402c-95d1-27b6b7cb4368",
          "name": "credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "7ada2a3c-7273-4402-a6b8-83f7e9de5ca9",
        "cursor": {
          "ref": "d20f05a7-e162-45eb-98b9-ea582f594646",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "821d3144-581c-4786-b502-e2681623ae41"
        },
        "item": {
          "id": "7ada2a3c-7273-4402-a6b8-83f7e9de5ca9",
          "name": "credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7ada2a3c-7273-4402-a6b8-83f7e9de5ca9",
        "cursor": {
          "ref": "d20f05a7-e162-45eb-98b9-ea582f594646",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "821d3144-581c-4786-b502-e2681623ae41"
        },
        "item": {
          "id": "7ada2a3c-7273-4402-a6b8-83f7e9de5ca9",
          "name": "credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ecdf05b5-6f5b-415d-9468-c3717661ff05",
        "cursor": {
          "ref": "93d79050-0090-4c93-bc0f-dcbbd169f78e",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3c916270-b38f-48f3-b2bc-f779cf13446f"
        },
        "item": {
          "id": "ecdf05b5-6f5b-415d-9468-c3717661ff05",
          "name": "credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "ecdf05b5-6f5b-415d-9468-c3717661ff05",
        "cursor": {
          "ref": "93d79050-0090-4c93-bc0f-dcbbd169f78e",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3c916270-b38f-48f3-b2bc-f779cf13446f"
        },
        "item": {
          "id": "ecdf05b5-6f5b-415d-9468-c3717661ff05",
          "name": "credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "3f5d5ff4-bf98-4ef7-ab33-2648c48c82b6",
        "cursor": {
          "ref": "c38d5ff5-0bf6-4d29-b32e-939bb646eb0e",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4a85cc37-781e-4d4c-8db6-e7fd465ca9cd"
        },
        "item": {
          "id": "3f5d5ff4-bf98-4ef7-ab33-2648c48c82b6",
          "name": "credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3f5d5ff4-bf98-4ef7-ab33-2648c48c82b6",
        "cursor": {
          "ref": "c38d5ff5-0bf6-4d29-b32e-939bb646eb0e",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4a85cc37-781e-4d4c-8db6-e7fd465ca9cd"
        },
        "item": {
          "id": "3f5d5ff4-bf98-4ef7-ab33-2648c48c82b6",
          "name": "credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f744950b-410b-426e-8879-bd049e62bf6b",
        "cursor": {
          "ref": "e18ff765-c679-4af8-a130-054790fae3c9",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e75f9e78-ece2-4b07-84ab-e2d9bc205e3b"
        },
        "item": {
          "id": "f744950b-410b-426e-8879-bd049e62bf6b",
          "name": "credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "f744950b-410b-426e-8879-bd049e62bf6b",
        "cursor": {
          "ref": "e18ff765-c679-4af8-a130-054790fae3c9",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e75f9e78-ece2-4b07-84ab-e2d9bc205e3b"
        },
        "item": {
          "id": "f744950b-410b-426e-8879-bd049e62bf6b",
          "name": "credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "101369c1-db53-4e63-9b9d-a4401677c044",
        "cursor": {
          "ref": "53774f82-0bb8-4ee5-902b-6397b3d79676",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a7bb1edd-633b-430b-88f4-7ab35d55b417"
        },
        "item": {
          "id": "101369c1-db53-4e63-9b9d-a4401677c044",
          "name": "credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "101369c1-db53-4e63-9b9d-a4401677c044",
        "cursor": {
          "ref": "53774f82-0bb8-4ee5-902b-6397b3d79676",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a7bb1edd-633b-430b-88f4-7ab35d55b417"
        },
        "item": {
          "id": "101369c1-db53-4e63-9b9d-a4401677c044",
          "name": "credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "2254f0f8-cacb-4c8d-8c41-f44e93795558",
        "cursor": {
          "ref": "3f212525-e497-401a-91e3-c9bd8ec5aab4",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4be97eff-7831-442d-a788-e1927f015d73"
        },
        "item": {
          "id": "2254f0f8-cacb-4c8d-8c41-f44e93795558",
          "name": "credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2254f0f8-cacb-4c8d-8c41-f44e93795558",
        "cursor": {
          "ref": "3f212525-e497-401a-91e3-c9bd8ec5aab4",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4be97eff-7831-442d-a788-e1927f015d73"
        },
        "item": {
          "id": "2254f0f8-cacb-4c8d-8c41-f44e93795558",
          "name": "credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "bc21c0ea-69b8-4462-840a-6f290c36981a",
        "cursor": {
          "ref": "0879d131-ed61-4218-ac25-6ee91eb6d2c3",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "df87be4c-1063-4b44-bce4-c57ed7f0b909"
        },
        "item": {
          "id": "bc21c0ea-69b8-4462-840a-6f290c36981a",
          "name": "credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "bc21c0ea-69b8-4462-840a-6f290c36981a",
        "cursor": {
          "ref": "0879d131-ed61-4218-ac25-6ee91eb6d2c3",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "df87be4c-1063-4b44-bce4-c57ed7f0b909"
        },
        "item": {
          "id": "bc21c0ea-69b8-4462-840a-6f290c36981a",
          "name": "credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "e51f8b20-63b9-4623-8881-0f0a30bdddea",
        "cursor": {
          "ref": "234bde8a-376e-4166-b19c-58c8bea81c81",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "50bed880-b375-4f47-84ab-df04d5c002d9"
        },
        "item": {
          "id": "e51f8b20-63b9-4623-8881-0f0a30bdddea",
          "name": "credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "e51f8b20-63b9-4623-8881-0f0a30bdddea",
        "cursor": {
          "ref": "234bde8a-376e-4166-b19c-58c8bea81c81",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "50bed880-b375-4f47-84ab-df04d5c002d9"
        },
        "item": {
          "id": "e51f8b20-63b9-4623-8881-0f0a30bdddea",
          "name": "credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "08ccfeb5-ae6a-4f1d-979f-ebfd18efc667",
        "cursor": {
          "ref": "859898e4-a831-47f4-9bda-f3ef2cc1fcf8",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "51366767-9b94-4ad5-97b9-65bc2b66fa92"
        },
        "item": {
          "id": "08ccfeb5-ae6a-4f1d-979f-ebfd18efc667",
          "name": "credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "08ccfeb5-ae6a-4f1d-979f-ebfd18efc667",
        "cursor": {
          "ref": "859898e4-a831-47f4-9bda-f3ef2cc1fcf8",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "51366767-9b94-4ad5-97b9-65bc2b66fa92"
        },
        "item": {
          "id": "08ccfeb5-ae6a-4f1d-979f-ebfd18efc667",
          "name": "credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2771a38c-6aa7-4c43-9847-8764ebd40784",
        "cursor": {
          "ref": "0ea8c6d2-24bc-4dec-9e4a-38d1c834d620",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ccea16f2-38de-4f25-a828-976f4ff80e45"
        },
        "item": {
          "id": "2771a38c-6aa7-4c43-9847-8764ebd40784",
          "name": "credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "2771a38c-6aa7-4c43-9847-8764ebd40784",
        "cursor": {
          "ref": "0ea8c6d2-24bc-4dec-9e4a-38d1c834d620",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ccea16f2-38de-4f25-a828-976f4ff80e45"
        },
        "item": {
          "id": "2771a38c-6aa7-4c43-9847-8764ebd40784",
          "name": "credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "fb4fa12e-1e0c-4a49-a7f1-0016b2c65f72",
        "cursor": {
          "ref": "a5c98c0c-527f-4132-aa21-f4d18ee5ae8a",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "826b72c4-8d95-41d6-b14c-b2f4cb5e28e8"
        },
        "item": {
          "id": "fb4fa12e-1e0c-4a49-a7f1-0016b2c65f72",
          "name": "options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "fb4fa12e-1e0c-4a49-a7f1-0016b2c65f72",
        "cursor": {
          "ref": "a5c98c0c-527f-4132-aa21-f4d18ee5ae8a",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "826b72c4-8d95-41d6-b14c-b2f4cb5e28e8"
        },
        "item": {
          "id": "fb4fa12e-1e0c-4a49-a7f1-0016b2c65f72",
          "name": "options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "e493ddf1-113e-4dc5-9ad3-dcc0384cebf0",
        "cursor": {
          "ref": "261e6dd5-6b92-4e8d-8464-86d2eec4fcbe",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "25d8985a-1d75-429c-8463-130ad3d44a7b"
        },
        "item": {
          "id": "e493ddf1-113e-4dc5-9ad3-dcc0384cebf0",
          "name": "options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "e493ddf1-113e-4dc5-9ad3-dcc0384cebf0",
        "cursor": {
          "ref": "261e6dd5-6b92-4e8d-8464-86d2eec4fcbe",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "25d8985a-1d75-429c-8463-130ad3d44a7b"
        },
        "item": {
          "id": "e493ddf1-113e-4dc5-9ad3-dcc0384cebf0",
          "name": "options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "6e056d58-eb05-409e-97d5-7162d5ca9a96",
        "cursor": {
          "ref": "880cb6d0-ce5e-45c4-b672-4102cea445ff",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "06bb7395-6ae5-41a2-bfb6-24f7128088e0"
        },
        "item": {
          "id": "6e056d58-eb05-409e-97d5-7162d5ca9a96",
          "name": "options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6e056d58-eb05-409e-97d5-7162d5ca9a96",
        "cursor": {
          "ref": "880cb6d0-ce5e-45c4-b672-4102cea445ff",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "06bb7395-6ae5-41a2-bfb6-24f7128088e0"
        },
        "item": {
          "id": "6e056d58-eb05-409e-97d5-7162d5ca9a96",
          "name": "options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e2031920-5cf8-4dc3-aab3-4176968edfa9",
        "cursor": {
          "ref": "14ab2b40-e522-4c64-9ecb-68cd24897554",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4c26cbce-7641-4e0f-bb9d-8f744bd0bcd1"
        },
        "item": {
          "id": "e2031920-5cf8-4dc3-aab3-4176968edfa9",
          "name": "options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e2031920-5cf8-4dc3-aab3-4176968edfa9",
        "cursor": {
          "ref": "14ab2b40-e522-4c64-9ecb-68cd24897554",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4c26cbce-7641-4e0f-bb9d-8f744bd0bcd1"
        },
        "item": {
          "id": "e2031920-5cf8-4dc3-aab3-4176968edfa9",
          "name": "options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "523fd5f6-f026-422d-9e36-1fdacfe792ef",
        "cursor": {
          "ref": "6c4934eb-f8ab-48ac-9970-a374297b795e",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "db41330d-244c-45a4-b2dd-6a5c0a8ea06c"
        },
        "item": {
          "id": "523fd5f6-f026-422d-9e36-1fdacfe792ef",
          "name": "options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "523fd5f6-f026-422d-9e36-1fdacfe792ef",
        "cursor": {
          "ref": "6c4934eb-f8ab-48ac-9970-a374297b795e",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "db41330d-244c-45a4-b2dd-6a5c0a8ea06c"
        },
        "item": {
          "id": "523fd5f6-f026-422d-9e36-1fdacfe792ef",
          "name": "options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7a7e891a-b8ea-4e5e-8364-5ba439fafa13",
        "cursor": {
          "ref": "7a0556be-f25c-4e66-be52-95defb0a1cec",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "89626f86-53d2-479b-9b16-06424a8ca319"
        },
        "item": {
          "id": "7a7e891a-b8ea-4e5e-8364-5ba439fafa13",
          "name": "options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "7a7e891a-b8ea-4e5e-8364-5ba439fafa13",
        "cursor": {
          "ref": "7a0556be-f25c-4e66-be52-95defb0a1cec",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "89626f86-53d2-479b-9b16-06424a8ca319"
        },
        "item": {
          "id": "7a7e891a-b8ea-4e5e-8364-5ba439fafa13",
          "name": "options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "4ce84533-bb9f-4f40-916c-d38969275652",
        "cursor": {
          "ref": "32e9217c-3e74-45fc-8e4b-24d35c073188",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1a059bd5-ef6f-40d2-95f3-5e28bac4b50f"
        },
        "item": {
          "id": "4ce84533-bb9f-4f40-916c-d38969275652",
          "name": "options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4ce84533-bb9f-4f40-916c-d38969275652",
        "cursor": {
          "ref": "32e9217c-3e74-45fc-8e4b-24d35c073188",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1a059bd5-ef6f-40d2-95f3-5e28bac4b50f"
        },
        "item": {
          "id": "4ce84533-bb9f-4f40-916c-d38969275652",
          "name": "options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "cade130d-4240-41c4-a5ff-3d4610f6c40d",
        "cursor": {
          "ref": "1db278ae-2a89-4dbb-8130-550add42248f",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "35bfba45-b50e-434f-954c-b2c82dc4d0b8"
        },
        "item": {
          "id": "cade130d-4240-41c4-a5ff-3d4610f6c40d",
          "name": "options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "cade130d-4240-41c4-a5ff-3d4610f6c40d",
        "cursor": {
          "ref": "1db278ae-2a89-4dbb-8130-550add42248f",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "35bfba45-b50e-434f-954c-b2c82dc4d0b8"
        },
        "item": {
          "id": "cade130d-4240-41c4-a5ff-3d4610f6c40d",
          "name": "options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "54ed2568-6ae6-4696-8bbd-d28eaa71d91c",
        "cursor": {
          "ref": "f28f1aab-d7ea-4e5e-9c53-fc4f937a9036",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b6eaa83a-0a84-40b2-9639-a1ee7a3768e8"
        },
        "item": {
          "id": "54ed2568-6ae6-4696-8bbd-d28eaa71d91c",
          "name": "options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "54ed2568-6ae6-4696-8bbd-d28eaa71d91c",
        "cursor": {
          "ref": "f28f1aab-d7ea-4e5e-9c53-fc4f937a9036",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b6eaa83a-0a84-40b2-9639-a1ee7a3768e8"
        },
        "item": {
          "id": "54ed2568-6ae6-4696-8bbd-d28eaa71d91c",
          "name": "options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c945777f-38a0-41d5-a911-6e823d8d549f",
        "cursor": {
          "ref": "a485dcfa-391b-4141-9754-f8226eb3decb",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ebbe3787-f20c-492d-abc0-4a097e5a532e"
        },
        "item": {
          "id": "c945777f-38a0-41d5-a911-6e823d8d549f",
          "name": "missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "c945777f-38a0-41d5-a911-6e823d8d549f",
        "cursor": {
          "ref": "a485dcfa-391b-4141-9754-f8226eb3decb",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ebbe3787-f20c-492d-abc0-4a097e5a532e"
        },
        "item": {
          "id": "c945777f-38a0-41d5-a911-6e823d8d549f",
          "name": "missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "1b56787f-16ce-4acd-8231-10ece6f07fc5",
        "cursor": {
          "ref": "58c40961-3dc3-40f0-a2b8-456f66f7874b",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f55f7309-9719-45aa-bfee-b0224ce32283"
        },
        "item": {
          "id": "1b56787f-16ce-4acd-8231-10ece6f07fc5",
          "name": "missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "1b56787f-16ce-4acd-8231-10ece6f07fc5",
        "cursor": {
          "ref": "58c40961-3dc3-40f0-a2b8-456f66f7874b",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f55f7309-9719-45aa-bfee-b0224ce32283"
        },
        "item": {
          "id": "1b56787f-16ce-4acd-8231-10ece6f07fc5",
          "name": "missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "1b56787f-16ce-4acd-8231-10ece6f07fc5",
        "cursor": {
          "ref": "58c40961-3dc3-40f0-a2b8-456f66f7874b",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f55f7309-9719-45aa-bfee-b0224ce32283"
        },
        "item": {
          "id": "1b56787f-16ce-4acd-8231-10ece6f07fc5",
          "name": "missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "76c1d8f3-cc90-426b-b988-68f8fbfda5d3",
        "cursor": {
          "ref": "1a0a23e0-6e95-4836-a6ae-dd056152504b",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "efe365e0-87e5-4888-957f-c71ac102f32f"
        },
        "item": {
          "id": "76c1d8f3-cc90-426b-b988-68f8fbfda5d3",
          "name": "base"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "76c1d8f3-cc90-426b-b988-68f8fbfda5d3",
        "cursor": {
          "ref": "1a0a23e0-6e95-4836-a6ae-dd056152504b",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "efe365e0-87e5-4888-957f-c71ac102f32f"
        },
        "item": {
          "id": "76c1d8f3-cc90-426b-b988-68f8fbfda5d3",
          "name": "base"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "2cb3981b-031c-4055-ae04-67499cb98d86",
        "cursor": {
          "ref": "e0187965-a2ee-43c0-b8a1-f630e509e86e",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1781115e-6fa5-482d-84fd-208c4b4bae2e"
        },
        "item": {
          "id": "2cb3981b-031c-4055-ae04-67499cb98d86",
          "name": "credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "2cb3981b-031c-4055-ae04-67499cb98d86",
        "cursor": {
          "ref": "e0187965-a2ee-43c0-b8a1-f630e509e86e",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1781115e-6fa5-482d-84fd-208c4b4bae2e"
        },
        "item": {
          "id": "2cb3981b-031c-4055-ae04-67499cb98d86",
          "name": "credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "1bcdf9f1-0415-4ba4-8cbb-d53e939c8558",
        "cursor": {
          "ref": "b12b5959-3a21-4142-b18d-7aa7bcac0179",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d4125952-b759-4f5c-9b15-7d05e967ad2f"
        },
        "item": {
          "id": "1bcdf9f1-0415-4ba4-8cbb-d53e939c8558",
          "name": "credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1bcdf9f1-0415-4ba4-8cbb-d53e939c8558",
        "cursor": {
          "ref": "b12b5959-3a21-4142-b18d-7aa7bcac0179",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d4125952-b759-4f5c-9b15-7d05e967ad2f"
        },
        "item": {
          "id": "1bcdf9f1-0415-4ba4-8cbb-d53e939c8558",
          "name": "credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "e761806b-817e-4c68-be75-2cc19a72ca5a",
        "cursor": {
          "ref": "d1678e56-ba50-4b7f-bc11-82031d8a0131",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "29938e90-1e39-4be8-a856-22e75591954f"
        },
        "item": {
          "id": "e761806b-817e-4c68-be75-2cc19a72ca5a",
          "name": "credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "e761806b-817e-4c68-be75-2cc19a72ca5a",
        "cursor": {
          "ref": "d1678e56-ba50-4b7f-bc11-82031d8a0131",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "29938e90-1e39-4be8-a856-22e75591954f"
        },
        "item": {
          "id": "e761806b-817e-4c68-be75-2cc19a72ca5a",
          "name": "credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1e7f1d45-c100-487a-8461-2cf9c4b7894c",
        "cursor": {
          "ref": "67fdd2b8-82ed-4368-91d2-f90c2ae85053",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f3332c6e-86c2-4fad-9e4a-7ce7284050f0"
        },
        "item": {
          "id": "1e7f1d45-c100-487a-8461-2cf9c4b7894c",
          "name": "credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "1e7f1d45-c100-487a-8461-2cf9c4b7894c",
        "cursor": {
          "ref": "67fdd2b8-82ed-4368-91d2-f90c2ae85053",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f3332c6e-86c2-4fad-9e4a-7ce7284050f0"
        },
        "item": {
          "id": "1e7f1d45-c100-487a-8461-2cf9c4b7894c",
          "name": "credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "1d13ba16-32db-4e27-ae76-2d083a570ee1",
        "cursor": {
          "ref": "8f11cf81-2489-40be-8d99-2b60bad44de2",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "389deaab-74b0-4ff8-a1dd-3d3d6dbe471d"
        },
        "item": {
          "id": "1d13ba16-32db-4e27-ae76-2d083a570ee1",
          "name": "credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "1d13ba16-32db-4e27-ae76-2d083a570ee1",
        "cursor": {
          "ref": "8f11cf81-2489-40be-8d99-2b60bad44de2",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "389deaab-74b0-4ff8-a1dd-3d3d6dbe471d"
        },
        "item": {
          "id": "1d13ba16-32db-4e27-ae76-2d083a570ee1",
          "name": "credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d278dcf9-a7b0-4fca-a124-7f9463f8a81f",
        "cursor": {
          "ref": "36a3adf4-7be1-4298-9f2e-46a4c434c381",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1a115523-fbbc-46d4-9b44-3efd43987c1b"
        },
        "item": {
          "id": "d278dcf9-a7b0-4fca-a124-7f9463f8a81f",
          "name": "options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d278dcf9-a7b0-4fca-a124-7f9463f8a81f",
        "cursor": {
          "ref": "36a3adf4-7be1-4298-9f2e-46a4c434c381",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1a115523-fbbc-46d4-9b44-3efd43987c1b"
        },
        "item": {
          "id": "d278dcf9-a7b0-4fca-a124-7f9463f8a81f",
          "name": "options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c70f9764-05a4-4b94-bf5f-d86e3e7b262c",
        "cursor": {
          "ref": "b800aed3-e102-481f-8dce-6029e3e8b136",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d8ff3781-8dbc-46d4-b410-0cafd3c94e75"
        },
        "item": {
          "id": "c70f9764-05a4-4b94-bf5f-d86e3e7b262c",
          "name": "options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "c70f9764-05a4-4b94-bf5f-d86e3e7b262c",
        "cursor": {
          "ref": "b800aed3-e102-481f-8dce-6029e3e8b136",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d8ff3781-8dbc-46d4-b410-0cafd3c94e75"
        },
        "item": {
          "id": "c70f9764-05a4-4b94-bf5f-d86e3e7b262c",
          "name": "options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "5e34f76f-21ba-4b47-8ebb-b821e79e5a48",
        "cursor": {
          "ref": "8f4a9d93-c5f8-4cdb-b281-fcc88eefa185",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3c083f1c-2ba0-4173-b051-2f904b1182e5"
        },
        "item": {
          "id": "5e34f76f-21ba-4b47-8ebb-b821e79e5a48",
          "name": "options:opt.credentialStatus Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "5e34f76f-21ba-4b47-8ebb-b821e79e5a48",
        "cursor": {
          "ref": "8f4a9d93-c5f8-4cdb-b281-fcc88eefa185",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3c083f1c-2ba0-4173-b051-2f904b1182e5"
        },
        "item": {
          "id": "5e34f76f-21ba-4b47-8ebb-b821e79e5a48",
          "name": "options:opt.credentialStatus Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      }
    ]
  }
}