{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ae1c5103-8045-4a12-8ca6-93a5ee49b54a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9ee618de-0d1b-48fc-ab95-d299733212ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "842efd16-dd6c-4f3b-b91b-1423a181dfd6",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ecf6aea2-d738-45cc-a4de-5eea6f1f21bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71850e0c-314e-490c-822f-50bae28c0503"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "b3660a9e-9f13-45a9-8f26-a43b614f67a7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7fa91bbc-ac17-40f4-bb89-c98f25759e99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5cf78bc5-273a-490a-b8f6-637c6fa8d351",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0cda1461-a233-480f-b87d-cf340bba990c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046f40dd-f11a-40e0-9ebf-a213436f805c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccc961da-66ff-4906-a7a2-ef63002d46d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7124837f-18d6-4502-82e6-98b16b51f351",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09aa0f7b-ff27-4a2f-a2b5-7e7c08022cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c51a384-e418-48e5-a641-4f745c61431d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74012a9d-0a79-4860-beb2-660531018b35",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc0a299-67df-4248-859b-8849f9de965f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "205b3c8e-c1b6-4eed-bcd9-4b5355dbe476"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f2f494ee-2164-4b3e-b3b2-df1bd310a139",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d2e0ad6-4919-409f-a710-7da4965ac76a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efd0bd5-f20a-455c-963c-e17ded8d3719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8ff0f01-c7b6-4ff9-87ea-b1fa61723f88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bdf1cf1-a5bb-47af-97c7-ae950b327b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febaba23-7440-4ceb-b5eb-7c4b7a8b4040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d2ee70-d9e8-4188-8d4d-6f42fbb43819",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34350d9c-977a-4e65-9289-19792b5bb166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d2a5cfa-e4fe-4f24-b7a2-2c20c5bac4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83210671-8a68-47c0-939f-84e3c9fface8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ea8ff877-ed52-4325-a8e3-85aa4693c82d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8fe96f6b-2abf-446b-9df8-c2c9ff816c03",
            "name": "Positive Testing",
            "item": [
              {
                "id": "621ab65f-5835-4729-8117-ad749d536172",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c026b3e-1ec4-41a2-ba30-97b703dc834a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0ec4dd60-46b4-4074-b866-437a20bae3ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7efdcb5c-1ed3-4fff-bd98-b4ecb5b5771e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "03aa3931-8f4a-409f-84fc-2835c78ec7c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1012c9f5-722e-47bc-83b6-675c31e9f80c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2bb780c8-ddba-49b3-9b9f-95dd2742fedd"
            }
          }
        ]
      },
      {
        "id": "3f2cfb80-1744-4d70-8a9c-92363e3d3511",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "efa0eff0-ddb8-432d-a6f5-e2173dfc8bab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76c4bd70-49a9-4167-a5d7-0087e33a97e2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "19cdff22-7e08-4eb3-9cca-df31249fe227",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a270cd-0cf5-4617-98a3-52c634178438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204c7644-e7f0-4712-9ad2-6cb5a09d4188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443508a6-aa8f-469c-b280-e06cc004bb8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7ecd762-c6f0-4f0d-88f2-8c8e4554996f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24413ce6-23bb-4d78-acae-08364fa6e0cb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3507ad1-5bb5-42dd-9ced-fd7579262722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785f0275-d1cd-4cc4-8cc8-25f467b91d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2f1e68-fa94-4eb1-aa79-b3beb589dc98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0636abf-03a9-4aa7-8387-3c152804ff99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950fbe24-71b3-4747-a2f3-6cf656eb6e1e",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc15460-01ec-446b-95fc-74b715330d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d3d928-f4ef-4e33-9ffe-0cd09addcd47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d40b2f9-0a4c-4f6d-a4f5-85247e87218a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c444c9d-7009-484c-a203-98e785b028a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f09c723-8a14-4d6c-a53c-f5d75b8379ce",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5a24a9-fcd2-43c2-a6d5-09cfed10b594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5019766b-df33-4577-a14a-6de9a4e5b6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96d9b82-bbe0-4a60-b9d6-c58d28ae9e7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e47e795-5361-46be-8e6e-0dcbf1c9fdbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28654f4-c823-410d-9cda-57eb137ad947",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7785693-7551-45ad-946f-455d51172f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35620ac2-195a-43e7-b824-6069fc32e691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633ea504-831e-4940-9290-eaec4f02251c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a2711f9-a589-4873-8f11-642576d7515c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa3f857-a105-4d99-b4d2-13e5476b2158",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88879c7-747e-4ff8-9d83-4f453ca143d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb7ec46-399d-4174-b874-9b46bc2c14e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660e6bb0-30eb-4f46-bb3f-4848c1e93db8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b84a168-6fca-4a3e-9dd5-63c164b08856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d11507c-93f8-480c-ac88-d17ba0c31189",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fe257c-6ebd-4912-94fd-b7df6fa70c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82176a1-628c-44e2-bbd6-455c3a0426c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e865ac-3855-42ef-8cfa-f9bcbb16bb60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb13d473-ede1-49ad-aa8f-28f9b092457a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775cac18-96d0-4d45-a61a-321bf3d8fd73",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38e9bea-e935-4195-b866-de0b980fddd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b38400-3792-4a59-acff-f76c0e1ad4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148a4d8c-e530-41e7-9a24-9f2d4a906897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05c6ae14-4f25-4fb0-907d-edefefcd3389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce31c722-4e34-4ebd-b973-964d08a67771",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901d2dd4-214b-4f22-9f74-a84bc7622e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3052353-1ef8-4030-9c1b-34ca8580b2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9783667-921c-4a67-95a0-2c8cf25be283",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2476310c-91d7-469e-8008-4072db554d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c301f4-5c7c-4bf8-ae5c-7e8988c9f326",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cdad20-1ea0-456f-bf27-abb8bac3cd0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487470bb-58a9-4714-a238-a882dc1d5dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2821350-987e-42b9-afea-bc27b62a6dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a736e574-fd69-4256-bf59-3c618cb8c854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba25b85-3449-44ae-be83-8b718ed782a7",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859cb02b-5039-4416-9c69-99e853aa3541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d94aab-9c0c-422c-acb0-d3ca5835a89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a190c8-16eb-40e7-8aa3-ff18e939807d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "245d41c8-abd5-4734-ac97-c31034088aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cea0d0-5a88-4261-9b21-6683cafe203e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4107c934-bf42-4839-aef9-9b6145983ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba712bad-8f83-44fd-b0ab-2e07807c2977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24de9662-ace5-4f0b-9ae1-6b74e17540a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a64ce01d-a84a-4e3c-b274-d1a0e6c76c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab495a1-54bb-41a6-96b6-72f8e6efc7b7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93bb43cf-d6d5-49ba-a5ba-b10ee347fc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444a7712-23a2-44b0-9430-42a151b1c87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a772b807-ca9c-4418-881c-ae130be4fa79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4341d73d-a8c5-4cc9-a222-4f4beaf15d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f32f94-2609-4d49-b44c-e9cfc78f2891",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1ec244-f73f-4c9c-9c2c-e8e004abad62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65271995-b616-4d6b-9ca2-12ec3a209462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e76e5d-1278-4d62-943f-9b7b8b6702f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95879268-318f-4e11-b926-5e75dde7a1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda19533-e26a-44fc-ae79-9b79e944c9b4",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458e1282-145e-4f74-a262-64c787066698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224f6269-90d3-4b9d-a5f8-1512491c5ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d80cd08-4cde-45d7-bbaf-77ffd0dd2cfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "c77b88c2-2290-4c43-9674-cd5a2ee51208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559871ed-fa4f-4a6d-b4e2-032970beceeb",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da8540f-76c1-4427-b986-3947f60a78b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d08dba-09a5-4e96-afbc-12cd35e270e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de19c8c-5a51-4ee9-8479-e35ef8b3bfba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ed5dfa03-8078-482f-9a1a-39f173d0e841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20547d9c-3617-4627-a182-c1cf9bc9123b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328011f4-e287-4a1a-82e2-8c219412a599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2203fe93-c2c4-48b9-82d7-fbd5eaaa7f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f309a6a-27ac-4a97-a27d-8348c16056ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67423bf1-a4d8-4f37-9e89-7eba993ef2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fccce6-efee-4cfb-9f61-6e0b467efee5",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c810d9e-db3e-45ea-bf34-8e096176d7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e9211e-0e62-4c62-96b0-8ad0e913d9bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ba5a0a-cbe9-4fb7-ba8b-ee55ddf73749",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e9daa0-defe-4776-9be2-c54fcc42d10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb21537-ecba-44df-85e0-290760ee48ba",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24abcb96-3b59-4e03-9196-c18bf4376f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bfc6ca6-2609-406b-af95-bfac54f2fda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b14e21-dc4d-4bfa-97fe-8ee68a06113b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2f9ad3f-a6a1-4571-9783-cb06c7682fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92756cf2-5117-4a5f-a2af-d0a1c4f4ae54",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04ad261-ba1f-41d1-bc18-127d45cc50f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d17d9d3-7d56-4c33-9fbf-f60164c8c886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ee12f3-26a4-4541-8582-aefe311fb28d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45ef58e8-7d9b-4e40-8308-a0eccddf924d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3b224e-66de-4a6b-8d1b-2781d584ef24",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0118a4-c1cb-4156-9ad4-f0144cef7ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7efddd-5a8f-40bf-813e-2beaa4abd2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d19ba0-36da-4f60-86fc-4636760e262f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd1e584d-7300-4d9b-9acc-b00e5a4a0d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b29355-fd33-4c7a-9b52-a595b66b773c",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554c4c97-8fea-44d9-9852-0ca58cb97f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db25c691-6f89-4268-b74c-4d506363c44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412170bd-5de5-45ae-9864-1e2792c6a263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa36f7a3-1aba-4ff9-94f5-950299100120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75eb4c3-4ce3-48bd-85b5-345952fd61be",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87b176a-ab29-4539-92e8-a1ff55515071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236e6dcd-fa41-42c3-8ed4-5b1b133e311f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea2616a-0a66-4c70-98e7-93991cadffdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e615e1b-2f8d-46bd-ba91-10a7ec0e048e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcabbc4a-92f3-4c6d-9c5a-a747f6f1b403",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c1a097-4d46-47b0-8879-0c9ab5ac7d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1386ff6-aad4-47a7-93d2-1720fe95f55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a88b19-bef9-4af1-b245-86d204c70e99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c797275-f158-4a6a-84ba-5bd5d6a3b183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3dfbd3-7ce7-4484-8d7c-3b723563f18b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4c2b7a-8b7c-4158-8956-ee1276c0e5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7611c18-6f85-4c00-b5b9-d49dbf0f7e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85dfdbf8-16ae-495d-8c9d-20be19b18ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "319830c2-f85b-4f01-a0f4-8d08bfe5ddd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f95f3ca-6067-43cc-9691-f614d719e07d",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2aeb1a-8bac-4b7f-a15e-add21ec916a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48416b5-5af9-42d1-b455-bf0043a4798a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb5d392-62e1-49bb-adb3-4da3580b143f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "840f0820-615a-4635-9bdb-f77c922ca726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64a3d68-03f3-48b6-a446-2e45f1efead9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b589aa1b-5124-496f-bc28-68b14c222e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be19687-676c-45e4-bc5a-efb80cbe5ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958fc122-1a67-475a-8c4c-4b3b12870ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4f03ca8-297c-44d1-bd24-2f15abe4fdba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79bb473-8679-41cd-8127-edb508e149c3",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2955cd-1392-4de3-b245-f1a4d5e21d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d90eeae-cb9a-4d01-a228-350bfbd8b073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29b11ee-19cb-428d-9fd7-85731c646990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0111d15e-e2db-4297-be26-2f5ea3755cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e731f8a-609a-4ef3-b9d0-14b5b3bc11a4",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd49dae5-c6b8-4882-985e-0e40ade5570a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055d9d25-9340-40ed-a476-9e023323ca36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3163a2f3-4f01-4cfd-bd43-2ee0712c7d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63649981-2479-4511-928b-61ecc487e40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1641a061-1743-4998-97b0-ac4ee6cb28e8",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d39ba8-243d-43a4-85cf-4f45887e46eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5da8a2-83c3-4aa2-b2c6-abdb45ec2eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d219e265-6af1-4242-b272-1d038323c150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adfe65ff-edef-43f4-9f50-72a801585dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e16907-cdfa-476a-b328-1da87f35acdb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2028fdb-3e17-4c20-a097-64da436df85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c1e5f975-c388-4a43-a4b9-487cc7784efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62fa65e-629d-4479-9dda-559de52aa0f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccb18ca9-36a7-4d09-86bf-33b414d14759"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d30ac0e9-1bd5-4e65-9c2e-6b0b0dc0fbd5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "442d3031-fdb2-4d81-863e-00c6e0849fb0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b64e571-01c0-4bf3-8c7b-09387cd8b627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7d15e03-0a3b-40e6-9108-06ff27ef10b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae14e228-bf12-41b9-83b9-b7a10bf73dfb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "aa3d85f2-b17f-4068-b381-a7c84358b7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a1c7bd-e40f-4426-8dae-96fed65c30cb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df873dde-ca68-4c73-8661-a6e34f1ad683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0f298f1-9f18-49fb-8d6f-758d9fc1f08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151d29ee-c4e1-49eb-b072-5db57cc9d376",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4ded1d5b-f4f1-4d88-8de3-8b259dcba7dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16ee5d79-fee8-4008-a424-d0e2decdb971",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e7595d3-c169-4bfe-8c81-3ed2b6051b63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7198a9db-49ba-4e06-a94b-8389f03ca43a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "126841d5-1904-4062-be71-f5e0c439767a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1901be7-54f2-470f-9251-d9bc5cff7506",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4fc0726-8a78-4823-a40c-f982ec60ebd2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c4c7d2ef-ee11-4501-bc93-3e02475a4b17",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9b6b9b9-cded-461a-b0ad-f72bf5007b29"
                }
              }
            ]
          },
          {
            "id": "1e8a99f8-25cf-497a-9735-6974af80e254",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d2cbdab1-3040-48b5-b005-b029ccbb555b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01769807-e2e8-4c0c-9479-cc05e3cea203",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "348258bb-95f4-4c54-9bd8-946e2cff2ee5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69a5398e-60c5-4256-bb5f-aa4f990e6968",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "42c5b95e-a00f-4e3e-802c-0f9d4ae4e48d"
                    }
                  }
                ]
              },
              {
                "id": "5c2375b2-444d-42b4-8b42-ec4f6c95d77f",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6cc1f19-7416-4c44-8ebf-71da873e5a47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9841635e-c00e-494a-9bfb-86f7a7dcd7de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "373b53b2-6319-4a2c-ba77-7387757622f9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "625c49f3-632b-424b-8abc-ff91404afe05"
                    }
                  }
                ]
              },
              {
                "id": "67d1fa23-c0d6-44b3-829e-3c36605b308d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "837ac0fd-dac9-4dec-bebb-e6747e5468e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20ac0ff1-89dc-4ba6-b054-8811b6b54d6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f6a4fd9-b68a-4cb2-b489-26b4beba804f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "16bc4418-8c7b-43a5-bd1a-1795f294a012"
                    }
                  }
                ]
              },
              {
                "id": "37313584-e5d0-4f79-8f48-e7c9b0e058b1",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8adbe0a9-7832-43ec-933d-4773cca4819e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef999a0e-fa82-4186-9413-097ed1f11ff2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4b60a9b-0918-47ce-b1c2-4be9e19d98df",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a4bd326d-051f-45b3-8cd9-3ea07850e438"
                    }
                  }
                ]
              },
              {
                "id": "4f134462-95b8-4274-9016-48ad739f68cc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23c41c46-d9d3-41ad-9d9a-24df98cf911b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "39cbb4ac-8b0f-4cfd-9492-dd8320dfd07b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f66cc037-8ae8-47e5-9497-7167888eb031",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e2a77110-7d34-4960-8a91-b6d2d606cf9f"
                    }
                  }
                ]
              },
              {
                "id": "784b8f76-9f05-4d9a-872e-3b33ae6b8ee5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "455042f1-deb5-4b55-9464-daefe82131da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b058dc4-cbf5-457e-be84-f498fc60b7a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5edb73fb-0bde-4655-8c2d-0f84265f26ec",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "70cc1d6d-8fa9-473e-96c9-eafe6417020f"
                    }
                  }
                ]
              },
              {
                "id": "f9f9718d-493b-4a24-b395-2a55df3e5de5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a281a01c-e632-4bc2-8855-a145a582919e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5bdebfd-44b5-43de-b705-4bbb4cd149d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6cf7b59-2a37-4548-b4a1-1b65567421ff",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5f7c34f7-87f1-450b-998e-3128b9bc5d0f"
                    }
                  }
                ]
              },
              {
                "id": "48fa7f21-60d1-4e21-ae17-42673b68edff",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b19e2dd-ef33-41ad-bf81-872382f832e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cd683cf-b43f-49e9-81f4-195e4a427b5a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e725f460-58df-4c5f-8403-89ef5c855919",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a438b66b-ac9b-432d-a1af-c494697d0b02"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "873926de-18ac-44a7-b51a-f3f64d91a9bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "491132c5-fe18-4702-be18-1cba78f7876b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5551e7ad-8481-4b64-a81f-cd4c852e72cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "63425391-18a9-4182-b32f-dcbc946226d2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "643164c9-605f-4204-8849-099002d7e04c",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "f1cc1e51-3e51-4ce1-850a-4aa799885fea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "268edeb6-d43e-46b1-b955-50b75aa5b281",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2946f0ce-09f7-494a-b2f6-a4ca413910bc"
            }
          }
        ]
      },
      {
        "id": "d1829ac5-ac97-4f93-b1bb-d5d9e56da16a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "443b52b8-dab5-47e9-8492-2e9b3250d92a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "353466ea-eaa1-417f-b438-7f90345bd4b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "653dc8d8-3cb7-495e-bd5a-6e2478c8a7d4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b43d4a1-4e13-420c-bff0-ec224a684596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f63a33-236d-4f75-8344-0a411b5e07b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a3d985-9d75-421d-af43-fdb19532c93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51c66694-1838-4e4a-b265-bb1770ae2526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775c0231-9467-45d6-b662-bd2cb00f2e27",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb58ecb9-bcb8-4a7f-8888-b24cc0b3de8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d0421d81-aea6-4fa6-80d7-d5c622979169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad92dac-00aa-4a0f-a364-32ef68c25723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bd4474b-ba50-4100-a155-f9e322136734"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85371019-8fd6-42f5-b000-c9948f9c3be2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f8be4e8-a56f-4b91-b02b-22c04520baa6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70d8c63b-088f-458a-af7d-faea59dea289",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c2e1786-e339-4520-aba3-c3033a78dcba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b06c2a1-b9ab-495c-a648-6c4f1f7e5521",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "2da57613-e056-432d-8d94-5349e0400f68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31faf06c-cfff-46f8-9ef5-a7157fd33b09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c9af577-590f-4423-a687-8ff3ba03572c"
            }
          }
        ]
      },
      {
        "id": "b907b724-8a02-4e3b-8595-cae825770761",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bf0fb006-dc73-4086-a39d-9d0b5067adca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2c2f6ef-30a1-41b2-9590-c71014912eac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5da73b9a-890f-4467-a831-5918e4900a22",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110ecad5-31e8-402f-aa1d-111dcd6180af",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "1a32bb22-a6ab-4fa7-88e3-bccce21ede17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9808cc5f-4f0e-43d0-9f47-027d28b05a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b900747a-16d5-4ec2-ae00-17ecfe2cc122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0154e2-54c5-4d3a-9ce5-fde94fc646f1",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e3599f-ddc2-4de8-b8c8-09d3c10af0b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "554aa827-f689-474d-8719-82e7840abcb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61939615-e0ca-415a-9e57-2dea987831f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06d0b6e7-9852-4d48-888b-fe09da203e85"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1b3f23c-d2a1-48dd-a8b0-f06cc7f33fc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a822077e-25dd-47ac-aa5e-20e91914931e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37b01776-23bd-4a18-9e0f-d1ba62b65b20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc1cb9fc-7eb5-403b-bfff-7ee0f40552d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3eaf91e-64ca-4c47-af52-a9f31384ba38",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "79457b49-2906-4ca9-9c85-e8984179baa8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2fb2c454-c5b4-46e6-8f08-15ce27bb3fc5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e09e1d3-783f-4036-853a-ea876c41a223"
            }
          }
        ]
      },
      {
        "id": "12b41793-d650-452b-8d2d-03e3e11cc343",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4b5f8834-b50c-4e50-80d4-a09cc870cedb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3396c6a-533f-4d26-9e15-88f9c39e6af3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8b923b7-62c5-4226-96a6-eb6798a1e251",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6f61c0-80f4-4343-a7ae-340caa30630f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1598f59-432b-4b26-9999-47a7d784cdbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa4dc68-8273-4184-86d9-197418b4d1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "844988c6-0484-4370-820b-209e76394218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1369f086-fbba-4abf-a0a0-3bd3f6604391",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346922e6-b411-4453-91d0-58095b31343e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1fd84038-bce3-4468-8bd0-cc5880775fa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10cca40-f97a-4da6-b10d-5ff725b6a103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7d56519-7b86-4436-803b-75092976009f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a61215c-a0f0-458c-bf14-36bf121c76d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9adf2f2a-a615-4d36-981f-d6b06ff005a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "967bcccf-464b-4e50-8564-ce334bb9d854",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f23c954a-fafb-4a7f-8a47-a07c6587b1d0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a0ea378-f857-4149-9700-02d6401ef62d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "1738290a-ec23-4375-a080-1174ca59e912"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c5486ad-4e0c-40cf-b316-9208bb68819e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8692e86a-7c9a-4831-a389-e2e5ea672ecc"
            }
          }
        ]
      },
      {
        "id": "c1eb15e8-c9c0-41ab-9592-301572f5b386",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c8deaccd-9ba4-4acc-882a-371995b13c66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "79723d58-d213-447c-97a1-ca6f2f9a1d5e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4c42dca-493f-4190-8879-004bf4068a0c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578e97e8-e0eb-4aa0-a44d-5a9c3519bbbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a57b5bd1-6fdb-4e3b-90bc-3cab29e0e302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3d0364-4995-42ac-9390-65220895e627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8927fc95-3cf7-41e2-a2e4-70e4a4fcc662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53675664-79c8-408c-957e-135c833cc3f5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f963fde-3f3f-4c4d-8ec8-97dd1dd46419",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8b0f26a6-284c-4425-9153-778d086a0009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cb0e3c-80dc-443e-8c9b-c6bf7dc9d3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6278e51-14f1-4436-a971-7874a387d3ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8559dd45-a0a1-4171-a469-f5b82f87626a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce88088b-d57c-462e-978e-97d0e2e511e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84e621eb-e5cf-4a59-ad1f-129ee6433a24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6f531d7-c184-4a2f-9a9b-bdb562e184e3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "885c2812-5f4d-409f-8335-6fd06c68ff10",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "14b6ad1a-2eb6-4efd-b3fb-08fc79ea2914"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18dc3f08-9d27-4c4e-8fcc-38b1aaf1295e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1abd2b8-9cbc-40cd-aa5f-8e45e630f19e"
            }
          }
        ]
      },
      {
        "id": "551a6aef-b470-428c-8f75-08228d545f32",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "19c4ffdb-66f4-4a61-a1ec-2570caffb444",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a68046b3-5f14-4e11-aaf6-591740287964",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3257300e-5437-449b-b8fd-bab4d44d92c1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c866258-f212-43f4-9102-ff91d30f57e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b52f9fe-7561-4337-8de6-89085ddbb031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ee47b9-37dd-4ed0-948b-ccc3617fd20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d39b29a-7d6f-4fa4-8b9a-0fc605bca669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4aca68-bdd4-45c2-bf1b-244ccabcef8b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfeec08-9ac2-46ae-b675-b4988c4c3118",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e88a24f5-dcae-4ecc-9d24-964bae0abf07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b30387-2aee-4c9e-9b25-85c8ed635f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d33d943e-e600-41a6-ae34-17881a3bbed6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bf67c66-cb78-4304-8f47-dd9b892606d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bab5401a-5bf2-4cad-b8db-01cdeb77883b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5fb71b3-6eca-4a81-ad05-503fe4d70efe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd6e16e2-eb45-455b-b7f1-98dc0c67259e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20cb1073-3e87-400d-85d8-41c6e5360435",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "56d4f8b8-3280-4256-8f76-a3dbe5dad8fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2691fdf6-2068-41c2-84a4-67cb1c006c8f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "376fcf5c-8fcf-4d92-b2f9-9182376ba971"
            }
          }
        ]
      },
      {
        "id": "59db70af-b56e-41b3-928d-de35c7032488",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "93193113-8498-4775-9e80-b23d5ee975ab",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 163,
        "pending": 0,
        "failed": 163
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 121
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1689380772903,
      "completed": 1689380776252
    },
    "executions": [
      {
        "id": "842efd16-dd6c-4f3b-b91b-1423a181dfd6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "31b0069b-45c9-43dd-bc96-9812a2487a78",
          "httpRequestId": "237fd750-deaa-43d4-aed7-dca35486396e"
        },
        "item": {
          "id": "842efd16-dd6c-4f3b-b91b-1423a181dfd6",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "0cda1461-a233-480f-b87d-cf340bba990c",
        "cursor": {
          "ref": "446f8fb8-e1ab-4898-8b99-ac5934f9c4d3",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8014721c-42f9-4884-b122-a6c8eeea1511"
        },
        "item": {
          "id": "0cda1461-a233-480f-b87d-cf340bba990c",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "0cda1461-a233-480f-b87d-cf340bba990c",
        "cursor": {
          "ref": "446f8fb8-e1ab-4898-8b99-ac5934f9c4d3",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8014721c-42f9-4884-b122-a6c8eeea1511"
        },
        "item": {
          "id": "0cda1461-a233-480f-b87d-cf340bba990c",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "7124837f-18d6-4502-82e6-98b16b51f351",
        "cursor": {
          "ref": "855862e9-d107-44fd-bce5-0432e0dd2d44",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d533049e-b60c-4b67-8e1c-b04cfa038e68"
        },
        "item": {
          "id": "7124837f-18d6-4502-82e6-98b16b51f351",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "7124837f-18d6-4502-82e6-98b16b51f351",
        "cursor": {
          "ref": "855862e9-d107-44fd-bce5-0432e0dd2d44",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d533049e-b60c-4b67-8e1c-b04cfa038e68"
        },
        "item": {
          "id": "7124837f-18d6-4502-82e6-98b16b51f351",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "74012a9d-0a79-4860-beb2-660531018b35",
        "cursor": {
          "ref": "9042174e-22da-4a8b-a47e-d1f99c21cab8",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8b7ae446-559d-4ec8-9e3b-21dc4a54816e"
        },
        "item": {
          "id": "74012a9d-0a79-4860-beb2-660531018b35",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "74012a9d-0a79-4860-beb2-660531018b35",
        "cursor": {
          "ref": "9042174e-22da-4a8b-a47e-d1f99c21cab8",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8b7ae446-559d-4ec8-9e3b-21dc4a54816e"
        },
        "item": {
          "id": "74012a9d-0a79-4860-beb2-660531018b35",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3d2e0ad6-4919-409f-a710-7da4965ac76a",
        "cursor": {
          "ref": "f861d575-233b-4829-a7e4-00fd3b2ba5df",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "556aa133-b860-48a2-a4fd-1459ace8504b"
        },
        "item": {
          "id": "3d2e0ad6-4919-409f-a710-7da4965ac76a",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "3d2e0ad6-4919-409f-a710-7da4965ac76a",
        "cursor": {
          "ref": "f861d575-233b-4829-a7e4-00fd3b2ba5df",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "556aa133-b860-48a2-a4fd-1459ace8504b"
        },
        "item": {
          "id": "3d2e0ad6-4919-409f-a710-7da4965ac76a",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "77d2ee70-d9e8-4188-8d4d-6f42fbb43819",
        "cursor": {
          "ref": "062f5399-c661-4ff8-b256-600d97045cea",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4741a5cc-6027-4d62-b92d-505a4f349089"
        },
        "item": {
          "id": "77d2ee70-d9e8-4188-8d4d-6f42fbb43819",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "77d2ee70-d9e8-4188-8d4d-6f42fbb43819",
        "cursor": {
          "ref": "062f5399-c661-4ff8-b256-600d97045cea",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4741a5cc-6027-4d62-b92d-505a4f349089"
        },
        "item": {
          "id": "77d2ee70-d9e8-4188-8d4d-6f42fbb43819",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "77d2ee70-d9e8-4188-8d4d-6f42fbb43819",
        "cursor": {
          "ref": "062f5399-c661-4ff8-b256-600d97045cea",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4741a5cc-6027-4d62-b92d-505a4f349089"
        },
        "item": {
          "id": "77d2ee70-d9e8-4188-8d4d-6f42fbb43819",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "621ab65f-5835-4729-8117-ad749d536172",
        "cursor": {
          "ref": "e500dd77-be34-4108-8456-3e29e222128d",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fd39908f-b194-487b-9fe7-7939c7e8ded7"
        },
        "item": {
          "id": "621ab65f-5835-4729-8117-ad749d536172",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "621ab65f-5835-4729-8117-ad749d536172",
        "cursor": {
          "ref": "e500dd77-be34-4108-8456-3e29e222128d",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fd39908f-b194-487b-9fe7-7939c7e8ded7"
        },
        "item": {
          "id": "621ab65f-5835-4729-8117-ad749d536172",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "19cdff22-7e08-4eb3-9cca-df31249fe227",
        "cursor": {
          "ref": "5e7b9498-2304-4d70-a86a-e07fafaeb09b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0e3d7fa7-6365-4737-aca0-6ac79d1c7df5"
        },
        "item": {
          "id": "19cdff22-7e08-4eb3-9cca-df31249fe227",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "19cdff22-7e08-4eb3-9cca-df31249fe227",
        "cursor": {
          "ref": "5e7b9498-2304-4d70-a86a-e07fafaeb09b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0e3d7fa7-6365-4737-aca0-6ac79d1c7df5"
        },
        "item": {
          "id": "19cdff22-7e08-4eb3-9cca-df31249fe227",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "19cdff22-7e08-4eb3-9cca-df31249fe227",
        "cursor": {
          "ref": "5e7b9498-2304-4d70-a86a-e07fafaeb09b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0e3d7fa7-6365-4737-aca0-6ac79d1c7df5"
        },
        "item": {
          "id": "19cdff22-7e08-4eb3-9cca-df31249fe227",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "24413ce6-23bb-4d78-acae-08364fa6e0cb",
        "cursor": {
          "ref": "828de7cb-2d48-4b43-971c-803258f13ff0",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2c3bfb36-7622-4dcb-961c-0f7c27657bb2"
        },
        "item": {
          "id": "24413ce6-23bb-4d78-acae-08364fa6e0cb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "24413ce6-23bb-4d78-acae-08364fa6e0cb",
        "cursor": {
          "ref": "828de7cb-2d48-4b43-971c-803258f13ff0",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2c3bfb36-7622-4dcb-961c-0f7c27657bb2"
        },
        "item": {
          "id": "24413ce6-23bb-4d78-acae-08364fa6e0cb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "24413ce6-23bb-4d78-acae-08364fa6e0cb",
        "cursor": {
          "ref": "828de7cb-2d48-4b43-971c-803258f13ff0",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2c3bfb36-7622-4dcb-961c-0f7c27657bb2"
        },
        "item": {
          "id": "24413ce6-23bb-4d78-acae-08364fa6e0cb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "950fbe24-71b3-4747-a2f3-6cf656eb6e1e",
        "cursor": {
          "ref": "4440d610-d93c-4bd2-8a67-51753286fcc0",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "da981ff3-b653-4f79-8e68-387062347410"
        },
        "item": {
          "id": "950fbe24-71b3-4747-a2f3-6cf656eb6e1e",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "950fbe24-71b3-4747-a2f3-6cf656eb6e1e",
        "cursor": {
          "ref": "4440d610-d93c-4bd2-8a67-51753286fcc0",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "da981ff3-b653-4f79-8e68-387062347410"
        },
        "item": {
          "id": "950fbe24-71b3-4747-a2f3-6cf656eb6e1e",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "950fbe24-71b3-4747-a2f3-6cf656eb6e1e",
        "cursor": {
          "ref": "4440d610-d93c-4bd2-8a67-51753286fcc0",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "da981ff3-b653-4f79-8e68-387062347410"
        },
        "item": {
          "id": "950fbe24-71b3-4747-a2f3-6cf656eb6e1e",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3f09c723-8a14-4d6c-a53c-f5d75b8379ce",
        "cursor": {
          "ref": "d03d0c92-3b5f-4a05-97cc-d54aea51f97d",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3dc4ecfd-d4bf-4da8-a5f9-045867c74656"
        },
        "item": {
          "id": "3f09c723-8a14-4d6c-a53c-f5d75b8379ce",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "3f09c723-8a14-4d6c-a53c-f5d75b8379ce",
        "cursor": {
          "ref": "d03d0c92-3b5f-4a05-97cc-d54aea51f97d",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3dc4ecfd-d4bf-4da8-a5f9-045867c74656"
        },
        "item": {
          "id": "3f09c723-8a14-4d6c-a53c-f5d75b8379ce",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "3f09c723-8a14-4d6c-a53c-f5d75b8379ce",
        "cursor": {
          "ref": "d03d0c92-3b5f-4a05-97cc-d54aea51f97d",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3dc4ecfd-d4bf-4da8-a5f9-045867c74656"
        },
        "item": {
          "id": "3f09c723-8a14-4d6c-a53c-f5d75b8379ce",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b28654f4-c823-410d-9cda-57eb137ad947",
        "cursor": {
          "ref": "d5846aa5-1875-427a-801a-239291b4596e",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68fbe9aa-bcd9-4520-9836-3a25cbce5fba"
        },
        "item": {
          "id": "b28654f4-c823-410d-9cda-57eb137ad947",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b28654f4-c823-410d-9cda-57eb137ad947",
        "cursor": {
          "ref": "d5846aa5-1875-427a-801a-239291b4596e",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68fbe9aa-bcd9-4520-9836-3a25cbce5fba"
        },
        "item": {
          "id": "b28654f4-c823-410d-9cda-57eb137ad947",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b28654f4-c823-410d-9cda-57eb137ad947",
        "cursor": {
          "ref": "d5846aa5-1875-427a-801a-239291b4596e",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68fbe9aa-bcd9-4520-9836-3a25cbce5fba"
        },
        "item": {
          "id": "b28654f4-c823-410d-9cda-57eb137ad947",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "0fa3f857-a105-4d99-b4d2-13e5476b2158",
        "cursor": {
          "ref": "6fe4330d-351c-4c88-9bec-57f8840a1a37",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "809f3fb8-46c8-4a0d-bbba-cd9cac9671ab"
        },
        "item": {
          "id": "0fa3f857-a105-4d99-b4d2-13e5476b2158",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "0fa3f857-a105-4d99-b4d2-13e5476b2158",
        "cursor": {
          "ref": "6fe4330d-351c-4c88-9bec-57f8840a1a37",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "809f3fb8-46c8-4a0d-bbba-cd9cac9671ab"
        },
        "item": {
          "id": "0fa3f857-a105-4d99-b4d2-13e5476b2158",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "0fa3f857-a105-4d99-b4d2-13e5476b2158",
        "cursor": {
          "ref": "6fe4330d-351c-4c88-9bec-57f8840a1a37",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "809f3fb8-46c8-4a0d-bbba-cd9cac9671ab"
        },
        "item": {
          "id": "0fa3f857-a105-4d99-b4d2-13e5476b2158",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3d11507c-93f8-480c-ac88-d17ba0c31189",
        "cursor": {
          "ref": "1ba44b19-a68c-4c7d-b438-9de3554f74c5",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "27946fef-888b-448a-b365-6d64e4b24957"
        },
        "item": {
          "id": "3d11507c-93f8-480c-ac88-d17ba0c31189",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "3d11507c-93f8-480c-ac88-d17ba0c31189",
        "cursor": {
          "ref": "1ba44b19-a68c-4c7d-b438-9de3554f74c5",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "27946fef-888b-448a-b365-6d64e4b24957"
        },
        "item": {
          "id": "3d11507c-93f8-480c-ac88-d17ba0c31189",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "3d11507c-93f8-480c-ac88-d17ba0c31189",
        "cursor": {
          "ref": "1ba44b19-a68c-4c7d-b438-9de3554f74c5",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "27946fef-888b-448a-b365-6d64e4b24957"
        },
        "item": {
          "id": "3d11507c-93f8-480c-ac88-d17ba0c31189",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "775cac18-96d0-4d45-a61a-321bf3d8fd73",
        "cursor": {
          "ref": "c7935fc3-8cb2-4305-9698-0a0ac7956560",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3bf9b431-5390-416d-a780-582d7cbcda78"
        },
        "item": {
          "id": "775cac18-96d0-4d45-a61a-321bf3d8fd73",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "775cac18-96d0-4d45-a61a-321bf3d8fd73",
        "cursor": {
          "ref": "c7935fc3-8cb2-4305-9698-0a0ac7956560",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3bf9b431-5390-416d-a780-582d7cbcda78"
        },
        "item": {
          "id": "775cac18-96d0-4d45-a61a-321bf3d8fd73",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "775cac18-96d0-4d45-a61a-321bf3d8fd73",
        "cursor": {
          "ref": "c7935fc3-8cb2-4305-9698-0a0ac7956560",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3bf9b431-5390-416d-a780-582d7cbcda78"
        },
        "item": {
          "id": "775cac18-96d0-4d45-a61a-321bf3d8fd73",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "ce31c722-4e34-4ebd-b973-964d08a67771",
        "cursor": {
          "ref": "cb835c8e-0a8f-4ff7-bfea-f60a1719e5b6",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7c49e831-a0f8-4ee4-af04-29b09d92f1e1"
        },
        "item": {
          "id": "ce31c722-4e34-4ebd-b973-964d08a67771",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ce31c722-4e34-4ebd-b973-964d08a67771",
        "cursor": {
          "ref": "cb835c8e-0a8f-4ff7-bfea-f60a1719e5b6",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7c49e831-a0f8-4ee4-af04-29b09d92f1e1"
        },
        "item": {
          "id": "ce31c722-4e34-4ebd-b973-964d08a67771",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ce31c722-4e34-4ebd-b973-964d08a67771",
        "cursor": {
          "ref": "cb835c8e-0a8f-4ff7-bfea-f60a1719e5b6",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7c49e831-a0f8-4ee4-af04-29b09d92f1e1"
        },
        "item": {
          "id": "ce31c722-4e34-4ebd-b973-964d08a67771",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d2c301f4-5c7c-4bf8-ae5c-7e8988c9f326",
        "cursor": {
          "ref": "e2665f23-f421-4c18-9af9-9ce097347171",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "656503e8-3c3a-4544-8af8-151d086c1185"
        },
        "item": {
          "id": "d2c301f4-5c7c-4bf8-ae5c-7e8988c9f326",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d2c301f4-5c7c-4bf8-ae5c-7e8988c9f326",
        "cursor": {
          "ref": "e2665f23-f421-4c18-9af9-9ce097347171",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "656503e8-3c3a-4544-8af8-151d086c1185"
        },
        "item": {
          "id": "d2c301f4-5c7c-4bf8-ae5c-7e8988c9f326",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d2c301f4-5c7c-4bf8-ae5c-7e8988c9f326",
        "cursor": {
          "ref": "e2665f23-f421-4c18-9af9-9ce097347171",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "656503e8-3c3a-4544-8af8-151d086c1185"
        },
        "item": {
          "id": "d2c301f4-5c7c-4bf8-ae5c-7e8988c9f326",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "2ba25b85-3449-44ae-be83-8b718ed782a7",
        "cursor": {
          "ref": "c8334891-c609-430c-bdef-f5209d28ed1d",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "51010fa0-7dcd-4c4e-960f-1cc56fc9a3d3"
        },
        "item": {
          "id": "2ba25b85-3449-44ae-be83-8b718ed782a7",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2ba25b85-3449-44ae-be83-8b718ed782a7",
        "cursor": {
          "ref": "c8334891-c609-430c-bdef-f5209d28ed1d",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "51010fa0-7dcd-4c4e-960f-1cc56fc9a3d3"
        },
        "item": {
          "id": "2ba25b85-3449-44ae-be83-8b718ed782a7",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2ba25b85-3449-44ae-be83-8b718ed782a7",
        "cursor": {
          "ref": "c8334891-c609-430c-bdef-f5209d28ed1d",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "51010fa0-7dcd-4c4e-960f-1cc56fc9a3d3"
        },
        "item": {
          "id": "2ba25b85-3449-44ae-be83-8b718ed782a7",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "39cea0d0-5a88-4261-9b21-6683cafe203e",
        "cursor": {
          "ref": "c06019f3-5c65-4dc3-b8d5-d56864013d0b",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e9eebbd5-cd0d-456a-af84-2c2383eab421"
        },
        "item": {
          "id": "39cea0d0-5a88-4261-9b21-6683cafe203e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "39cea0d0-5a88-4261-9b21-6683cafe203e",
        "cursor": {
          "ref": "c06019f3-5c65-4dc3-b8d5-d56864013d0b",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e9eebbd5-cd0d-456a-af84-2c2383eab421"
        },
        "item": {
          "id": "39cea0d0-5a88-4261-9b21-6683cafe203e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "39cea0d0-5a88-4261-9b21-6683cafe203e",
        "cursor": {
          "ref": "c06019f3-5c65-4dc3-b8d5-d56864013d0b",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e9eebbd5-cd0d-456a-af84-2c2383eab421"
        },
        "item": {
          "id": "39cea0d0-5a88-4261-9b21-6683cafe203e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "6ab495a1-54bb-41a6-96b6-72f8e6efc7b7",
        "cursor": {
          "ref": "2d2318c2-fa92-41a2-a49a-7bff94bda45b",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cca0d309-d6ed-44d0-9a1a-6563f7e55462"
        },
        "item": {
          "id": "6ab495a1-54bb-41a6-96b6-72f8e6efc7b7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6ab495a1-54bb-41a6-96b6-72f8e6efc7b7",
        "cursor": {
          "ref": "2d2318c2-fa92-41a2-a49a-7bff94bda45b",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cca0d309-d6ed-44d0-9a1a-6563f7e55462"
        },
        "item": {
          "id": "6ab495a1-54bb-41a6-96b6-72f8e6efc7b7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6ab495a1-54bb-41a6-96b6-72f8e6efc7b7",
        "cursor": {
          "ref": "2d2318c2-fa92-41a2-a49a-7bff94bda45b",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cca0d309-d6ed-44d0-9a1a-6563f7e55462"
        },
        "item": {
          "id": "6ab495a1-54bb-41a6-96b6-72f8e6efc7b7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "d2f32f94-2609-4d49-b44c-e9cfc78f2891",
        "cursor": {
          "ref": "5bede3c6-0b85-4ff0-975c-46c8c1576349",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "65c6fdea-704c-4af6-97c7-27ceb540a616"
        },
        "item": {
          "id": "d2f32f94-2609-4d49-b44c-e9cfc78f2891",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d2f32f94-2609-4d49-b44c-e9cfc78f2891",
        "cursor": {
          "ref": "5bede3c6-0b85-4ff0-975c-46c8c1576349",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "65c6fdea-704c-4af6-97c7-27ceb540a616"
        },
        "item": {
          "id": "d2f32f94-2609-4d49-b44c-e9cfc78f2891",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d2f32f94-2609-4d49-b44c-e9cfc78f2891",
        "cursor": {
          "ref": "5bede3c6-0b85-4ff0-975c-46c8c1576349",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "65c6fdea-704c-4af6-97c7-27ceb540a616"
        },
        "item": {
          "id": "d2f32f94-2609-4d49-b44c-e9cfc78f2891",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "cda19533-e26a-44fc-ae79-9b79e944c9b4",
        "cursor": {
          "ref": "1395a82a-758a-443c-ab79-3617107a985a",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "174b0d98-a9c6-4780-83d7-6e6a2a80a27a"
        },
        "item": {
          "id": "cda19533-e26a-44fc-ae79-9b79e944c9b4",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "cda19533-e26a-44fc-ae79-9b79e944c9b4",
        "cursor": {
          "ref": "1395a82a-758a-443c-ab79-3617107a985a",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "174b0d98-a9c6-4780-83d7-6e6a2a80a27a"
        },
        "item": {
          "id": "cda19533-e26a-44fc-ae79-9b79e944c9b4",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "cda19533-e26a-44fc-ae79-9b79e944c9b4",
        "cursor": {
          "ref": "1395a82a-758a-443c-ab79-3617107a985a",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "174b0d98-a9c6-4780-83d7-6e6a2a80a27a"
        },
        "item": {
          "id": "cda19533-e26a-44fc-ae79-9b79e944c9b4",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "559871ed-fa4f-4a6d-b4e2-032970beceeb",
        "cursor": {
          "ref": "a30ce648-c1a1-42d6-9a68-374c075b5cda",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b50139f1-4051-43e5-9e22-fd15c6a84352"
        },
        "item": {
          "id": "559871ed-fa4f-4a6d-b4e2-032970beceeb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "559871ed-fa4f-4a6d-b4e2-032970beceeb",
        "cursor": {
          "ref": "a30ce648-c1a1-42d6-9a68-374c075b5cda",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b50139f1-4051-43e5-9e22-fd15c6a84352"
        },
        "item": {
          "id": "559871ed-fa4f-4a6d-b4e2-032970beceeb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "559871ed-fa4f-4a6d-b4e2-032970beceeb",
        "cursor": {
          "ref": "a30ce648-c1a1-42d6-9a68-374c075b5cda",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b50139f1-4051-43e5-9e22-fd15c6a84352"
        },
        "item": {
          "id": "559871ed-fa4f-4a6d-b4e2-032970beceeb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "20547d9c-3617-4627-a182-c1cf9bc9123b",
        "cursor": {
          "ref": "f2773904-224a-473d-8380-c3141f66728c",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fb115bb7-726f-450f-86de-9f794b2f2693"
        },
        "item": {
          "id": "20547d9c-3617-4627-a182-c1cf9bc9123b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "20547d9c-3617-4627-a182-c1cf9bc9123b",
        "cursor": {
          "ref": "f2773904-224a-473d-8380-c3141f66728c",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fb115bb7-726f-450f-86de-9f794b2f2693"
        },
        "item": {
          "id": "20547d9c-3617-4627-a182-c1cf9bc9123b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "20547d9c-3617-4627-a182-c1cf9bc9123b",
        "cursor": {
          "ref": "f2773904-224a-473d-8380-c3141f66728c",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fb115bb7-726f-450f-86de-9f794b2f2693"
        },
        "item": {
          "id": "20547d9c-3617-4627-a182-c1cf9bc9123b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "23fccce6-efee-4cfb-9f61-6e0b467efee5",
        "cursor": {
          "ref": "7c89a891-2306-4b0e-ae72-88ace9db068b",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "812b2c14-6045-4aac-9594-08039a58f654"
        },
        "item": {
          "id": "23fccce6-efee-4cfb-9f61-6e0b467efee5",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "23fccce6-efee-4cfb-9f61-6e0b467efee5",
        "cursor": {
          "ref": "7c89a891-2306-4b0e-ae72-88ace9db068b",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "812b2c14-6045-4aac-9594-08039a58f654"
        },
        "item": {
          "id": "23fccce6-efee-4cfb-9f61-6e0b467efee5",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "23fccce6-efee-4cfb-9f61-6e0b467efee5",
        "cursor": {
          "ref": "7c89a891-2306-4b0e-ae72-88ace9db068b",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "812b2c14-6045-4aac-9594-08039a58f654"
        },
        "item": {
          "id": "23fccce6-efee-4cfb-9f61-6e0b467efee5",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "abb21537-ecba-44df-85e0-290760ee48ba",
        "cursor": {
          "ref": "9b5c2f7c-0ef0-473a-a7ce-b16f213c4318",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bfae45b2-6507-4b4e-ba9b-b5213438d03d"
        },
        "item": {
          "id": "abb21537-ecba-44df-85e0-290760ee48ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "abb21537-ecba-44df-85e0-290760ee48ba",
        "cursor": {
          "ref": "9b5c2f7c-0ef0-473a-a7ce-b16f213c4318",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bfae45b2-6507-4b4e-ba9b-b5213438d03d"
        },
        "item": {
          "id": "abb21537-ecba-44df-85e0-290760ee48ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "abb21537-ecba-44df-85e0-290760ee48ba",
        "cursor": {
          "ref": "9b5c2f7c-0ef0-473a-a7ce-b16f213c4318",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bfae45b2-6507-4b4e-ba9b-b5213438d03d"
        },
        "item": {
          "id": "abb21537-ecba-44df-85e0-290760ee48ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "92756cf2-5117-4a5f-a2af-d0a1c4f4ae54",
        "cursor": {
          "ref": "4a7f0afc-47b2-4fc8-b75f-9d8940fdf3b9",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "85aa6e0e-3e26-4407-a815-fc547e6b34c1"
        },
        "item": {
          "id": "92756cf2-5117-4a5f-a2af-d0a1c4f4ae54",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "92756cf2-5117-4a5f-a2af-d0a1c4f4ae54",
        "cursor": {
          "ref": "4a7f0afc-47b2-4fc8-b75f-9d8940fdf3b9",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "85aa6e0e-3e26-4407-a815-fc547e6b34c1"
        },
        "item": {
          "id": "92756cf2-5117-4a5f-a2af-d0a1c4f4ae54",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "92756cf2-5117-4a5f-a2af-d0a1c4f4ae54",
        "cursor": {
          "ref": "4a7f0afc-47b2-4fc8-b75f-9d8940fdf3b9",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "85aa6e0e-3e26-4407-a815-fc547e6b34c1"
        },
        "item": {
          "id": "92756cf2-5117-4a5f-a2af-d0a1c4f4ae54",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "1e3b224e-66de-4a6b-8d1b-2781d584ef24",
        "cursor": {
          "ref": "25eda299-e151-4f6e-ba7b-cd23680cf743",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c8db7f0e-7811-4446-9bf1-a961d85dac52"
        },
        "item": {
          "id": "1e3b224e-66de-4a6b-8d1b-2781d584ef24",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "1e3b224e-66de-4a6b-8d1b-2781d584ef24",
        "cursor": {
          "ref": "25eda299-e151-4f6e-ba7b-cd23680cf743",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c8db7f0e-7811-4446-9bf1-a961d85dac52"
        },
        "item": {
          "id": "1e3b224e-66de-4a6b-8d1b-2781d584ef24",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "1e3b224e-66de-4a6b-8d1b-2781d584ef24",
        "cursor": {
          "ref": "25eda299-e151-4f6e-ba7b-cd23680cf743",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c8db7f0e-7811-4446-9bf1-a961d85dac52"
        },
        "item": {
          "id": "1e3b224e-66de-4a6b-8d1b-2781d584ef24",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "67b29355-fd33-4c7a-9b52-a595b66b773c",
        "cursor": {
          "ref": "0ea2810c-963a-4bb6-a089-34363a6d93f1",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0b565c9a-4513-4b92-baef-4f797355d095"
        },
        "item": {
          "id": "67b29355-fd33-4c7a-9b52-a595b66b773c",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "67b29355-fd33-4c7a-9b52-a595b66b773c",
        "cursor": {
          "ref": "0ea2810c-963a-4bb6-a089-34363a6d93f1",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0b565c9a-4513-4b92-baef-4f797355d095"
        },
        "item": {
          "id": "67b29355-fd33-4c7a-9b52-a595b66b773c",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "67b29355-fd33-4c7a-9b52-a595b66b773c",
        "cursor": {
          "ref": "0ea2810c-963a-4bb6-a089-34363a6d93f1",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0b565c9a-4513-4b92-baef-4f797355d095"
        },
        "item": {
          "id": "67b29355-fd33-4c7a-9b52-a595b66b773c",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "c75eb4c3-4ce3-48bd-85b5-345952fd61be",
        "cursor": {
          "ref": "a101d752-2c0c-43de-86ed-850f7b625f6e",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "55b1647c-5137-4df0-a387-6f052d379193"
        },
        "item": {
          "id": "c75eb4c3-4ce3-48bd-85b5-345952fd61be",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c75eb4c3-4ce3-48bd-85b5-345952fd61be",
        "cursor": {
          "ref": "a101d752-2c0c-43de-86ed-850f7b625f6e",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "55b1647c-5137-4df0-a387-6f052d379193"
        },
        "item": {
          "id": "c75eb4c3-4ce3-48bd-85b5-345952fd61be",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c75eb4c3-4ce3-48bd-85b5-345952fd61be",
        "cursor": {
          "ref": "a101d752-2c0c-43de-86ed-850f7b625f6e",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "55b1647c-5137-4df0-a387-6f052d379193"
        },
        "item": {
          "id": "c75eb4c3-4ce3-48bd-85b5-345952fd61be",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "bcabbc4a-92f3-4c6d-9c5a-a747f6f1b403",
        "cursor": {
          "ref": "5c1d8658-613f-4338-8726-826b8f740cfa",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8c3272e9-0bdf-49c4-b15b-4b3e1017abbe"
        },
        "item": {
          "id": "bcabbc4a-92f3-4c6d-9c5a-a747f6f1b403",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "bcabbc4a-92f3-4c6d-9c5a-a747f6f1b403",
        "cursor": {
          "ref": "5c1d8658-613f-4338-8726-826b8f740cfa",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8c3272e9-0bdf-49c4-b15b-4b3e1017abbe"
        },
        "item": {
          "id": "bcabbc4a-92f3-4c6d-9c5a-a747f6f1b403",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "bcabbc4a-92f3-4c6d-9c5a-a747f6f1b403",
        "cursor": {
          "ref": "5c1d8658-613f-4338-8726-826b8f740cfa",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8c3272e9-0bdf-49c4-b15b-4b3e1017abbe"
        },
        "item": {
          "id": "bcabbc4a-92f3-4c6d-9c5a-a747f6f1b403",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "5a3dfbd3-7ce7-4484-8d7c-3b723563f18b",
        "cursor": {
          "ref": "2252982d-1902-44f8-b7eb-d9eb92b524fe",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "84d59637-50a9-48d3-b5bd-b9055358c8f2"
        },
        "item": {
          "id": "5a3dfbd3-7ce7-4484-8d7c-3b723563f18b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5a3dfbd3-7ce7-4484-8d7c-3b723563f18b",
        "cursor": {
          "ref": "2252982d-1902-44f8-b7eb-d9eb92b524fe",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "84d59637-50a9-48d3-b5bd-b9055358c8f2"
        },
        "item": {
          "id": "5a3dfbd3-7ce7-4484-8d7c-3b723563f18b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5a3dfbd3-7ce7-4484-8d7c-3b723563f18b",
        "cursor": {
          "ref": "2252982d-1902-44f8-b7eb-d9eb92b524fe",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "84d59637-50a9-48d3-b5bd-b9055358c8f2"
        },
        "item": {
          "id": "5a3dfbd3-7ce7-4484-8d7c-3b723563f18b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "9f95f3ca-6067-43cc-9691-f614d719e07d",
        "cursor": {
          "ref": "8a76c1d6-d347-4937-99e8-f769983c1c03",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c56f9ae2-84fe-4126-96a9-e6d175e2e522"
        },
        "item": {
          "id": "9f95f3ca-6067-43cc-9691-f614d719e07d",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "9f95f3ca-6067-43cc-9691-f614d719e07d",
        "cursor": {
          "ref": "8a76c1d6-d347-4937-99e8-f769983c1c03",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c56f9ae2-84fe-4126-96a9-e6d175e2e522"
        },
        "item": {
          "id": "9f95f3ca-6067-43cc-9691-f614d719e07d",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "9f95f3ca-6067-43cc-9691-f614d719e07d",
        "cursor": {
          "ref": "8a76c1d6-d347-4937-99e8-f769983c1c03",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c56f9ae2-84fe-4126-96a9-e6d175e2e522"
        },
        "item": {
          "id": "9f95f3ca-6067-43cc-9691-f614d719e07d",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "a64a3d68-03f3-48b6-a446-2e45f1efead9",
        "cursor": {
          "ref": "5c4f7a34-4fe1-4bb3-9ca8-b9349f383090",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "73c4e174-4a47-42d9-8ec0-fa6ce4cc029c"
        },
        "item": {
          "id": "a64a3d68-03f3-48b6-a446-2e45f1efead9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a64a3d68-03f3-48b6-a446-2e45f1efead9",
        "cursor": {
          "ref": "5c4f7a34-4fe1-4bb3-9ca8-b9349f383090",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "73c4e174-4a47-42d9-8ec0-fa6ce4cc029c"
        },
        "item": {
          "id": "a64a3d68-03f3-48b6-a446-2e45f1efead9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a64a3d68-03f3-48b6-a446-2e45f1efead9",
        "cursor": {
          "ref": "5c4f7a34-4fe1-4bb3-9ca8-b9349f383090",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "73c4e174-4a47-42d9-8ec0-fa6ce4cc029c"
        },
        "item": {
          "id": "a64a3d68-03f3-48b6-a446-2e45f1efead9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d79bb473-8679-41cd-8127-edb508e149c3",
        "cursor": {
          "ref": "21a85e7f-89d4-407f-947d-342afba5b6f1",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d2627c8c-cb6c-4883-b93a-94d708bdde69"
        },
        "item": {
          "id": "d79bb473-8679-41cd-8127-edb508e149c3",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d79bb473-8679-41cd-8127-edb508e149c3",
        "cursor": {
          "ref": "21a85e7f-89d4-407f-947d-342afba5b6f1",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d2627c8c-cb6c-4883-b93a-94d708bdde69"
        },
        "item": {
          "id": "d79bb473-8679-41cd-8127-edb508e149c3",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d79bb473-8679-41cd-8127-edb508e149c3",
        "cursor": {
          "ref": "21a85e7f-89d4-407f-947d-342afba5b6f1",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d2627c8c-cb6c-4883-b93a-94d708bdde69"
        },
        "item": {
          "id": "d79bb473-8679-41cd-8127-edb508e149c3",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1e731f8a-609a-4ef3-b9d0-14b5b3bc11a4",
        "cursor": {
          "ref": "d4435ca9-d36e-47e9-bca8-23b34badf5d3",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8f5cbe08-12a2-4199-b700-48b968b6dc4d"
        },
        "item": {
          "id": "1e731f8a-609a-4ef3-b9d0-14b5b3bc11a4",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1e731f8a-609a-4ef3-b9d0-14b5b3bc11a4",
        "cursor": {
          "ref": "d4435ca9-d36e-47e9-bca8-23b34badf5d3",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8f5cbe08-12a2-4199-b700-48b968b6dc4d"
        },
        "item": {
          "id": "1e731f8a-609a-4ef3-b9d0-14b5b3bc11a4",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1e731f8a-609a-4ef3-b9d0-14b5b3bc11a4",
        "cursor": {
          "ref": "d4435ca9-d36e-47e9-bca8-23b34badf5d3",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8f5cbe08-12a2-4199-b700-48b968b6dc4d"
        },
        "item": {
          "id": "1e731f8a-609a-4ef3-b9d0-14b5b3bc11a4",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1641a061-1743-4998-97b0-ac4ee6cb28e8",
        "cursor": {
          "ref": "4e3562ea-a45b-416f-b418-efdb8b273bc0",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cbbccf7e-a494-4930-a7fa-fa14bc3eb72c"
        },
        "item": {
          "id": "1641a061-1743-4998-97b0-ac4ee6cb28e8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "1641a061-1743-4998-97b0-ac4ee6cb28e8",
        "cursor": {
          "ref": "4e3562ea-a45b-416f-b418-efdb8b273bc0",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cbbccf7e-a494-4930-a7fa-fa14bc3eb72c"
        },
        "item": {
          "id": "1641a061-1743-4998-97b0-ac4ee6cb28e8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "1641a061-1743-4998-97b0-ac4ee6cb28e8",
        "cursor": {
          "ref": "4e3562ea-a45b-416f-b418-efdb8b273bc0",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cbbccf7e-a494-4930-a7fa-fa14bc3eb72c"
        },
        "item": {
          "id": "1641a061-1743-4998-97b0-ac4ee6cb28e8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "d3e16907-cdfa-476a-b328-1da87f35acdb",
        "cursor": {
          "ref": "d1d9306f-5292-4294-ad05-a82591b9894e",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cd84acf4-820d-42af-b2c8-40058b297262"
        },
        "item": {
          "id": "d3e16907-cdfa-476a-b328-1da87f35acdb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "d3e16907-cdfa-476a-b328-1da87f35acdb",
        "cursor": {
          "ref": "d1d9306f-5292-4294-ad05-a82591b9894e",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cd84acf4-820d-42af-b2c8-40058b297262"
        },
        "item": {
          "id": "d3e16907-cdfa-476a-b328-1da87f35acdb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "d3e16907-cdfa-476a-b328-1da87f35acdb",
        "cursor": {
          "ref": "d1d9306f-5292-4294-ad05-a82591b9894e",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cd84acf4-820d-42af-b2c8-40058b297262"
        },
        "item": {
          "id": "d3e16907-cdfa-476a-b328-1da87f35acdb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "442d3031-fdb2-4d81-863e-00c6e0849fb0",
        "cursor": {
          "ref": "cf9a4f67-279d-4b25-81ee-aede81c67d1f",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d4826788-2b28-4f18-b845-fdcf8ef7a761"
        },
        "item": {
          "id": "442d3031-fdb2-4d81-863e-00c6e0849fb0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "442d3031-fdb2-4d81-863e-00c6e0849fb0",
        "cursor": {
          "ref": "cf9a4f67-279d-4b25-81ee-aede81c67d1f",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d4826788-2b28-4f18-b845-fdcf8ef7a761"
        },
        "item": {
          "id": "442d3031-fdb2-4d81-863e-00c6e0849fb0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "442d3031-fdb2-4d81-863e-00c6e0849fb0",
        "cursor": {
          "ref": "cf9a4f67-279d-4b25-81ee-aede81c67d1f",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d4826788-2b28-4f18-b845-fdcf8ef7a761"
        },
        "item": {
          "id": "442d3031-fdb2-4d81-863e-00c6e0849fb0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b1a1c7bd-e40f-4426-8dae-96fed65c30cb",
        "cursor": {
          "ref": "32bb87ab-966a-42b1-9cfe-903342e6311a",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "837862e1-f22d-45ef-b90e-24c89f16461f"
        },
        "item": {
          "id": "b1a1c7bd-e40f-4426-8dae-96fed65c30cb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b1a1c7bd-e40f-4426-8dae-96fed65c30cb",
        "cursor": {
          "ref": "32bb87ab-966a-42b1-9cfe-903342e6311a",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "837862e1-f22d-45ef-b90e-24c89f16461f"
        },
        "item": {
          "id": "b1a1c7bd-e40f-4426-8dae-96fed65c30cb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b1a1c7bd-e40f-4426-8dae-96fed65c30cb",
        "cursor": {
          "ref": "32bb87ab-966a-42b1-9cfe-903342e6311a",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "837862e1-f22d-45ef-b90e-24c89f16461f"
        },
        "item": {
          "id": "b1a1c7bd-e40f-4426-8dae-96fed65c30cb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b1a1c7bd-e40f-4426-8dae-96fed65c30cb",
        "cursor": {
          "ref": "32bb87ab-966a-42b1-9cfe-903342e6311a",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "837862e1-f22d-45ef-b90e-24c89f16461f"
        },
        "item": {
          "id": "b1a1c7bd-e40f-4426-8dae-96fed65c30cb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d2cbdab1-3040-48b5-b005-b029ccbb555b",
        "cursor": {
          "ref": "c1a7c109-c0da-44b9-b249-96db20af9900",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fe651051-8bd6-41eb-8184-c68ee6e62174"
        },
        "item": {
          "id": "d2cbdab1-3040-48b5-b005-b029ccbb555b",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "d2cbdab1-3040-48b5-b005-b029ccbb555b",
        "cursor": {
          "ref": "c1a7c109-c0da-44b9-b249-96db20af9900",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fe651051-8bd6-41eb-8184-c68ee6e62174"
        },
        "item": {
          "id": "d2cbdab1-3040-48b5-b005-b029ccbb555b",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "d2cbdab1-3040-48b5-b005-b029ccbb555b",
        "cursor": {
          "ref": "c1a7c109-c0da-44b9-b249-96db20af9900",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fe651051-8bd6-41eb-8184-c68ee6e62174"
        },
        "item": {
          "id": "d2cbdab1-3040-48b5-b005-b029ccbb555b",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "5c2375b2-444d-42b4-8b42-ec4f6c95d77f",
        "cursor": {
          "ref": "2c9b39e5-45ca-4fc7-ae12-5cba1a9848d3",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "212a296a-d6f7-43c9-b4a6-eb57b3f05e46"
        },
        "item": {
          "id": "5c2375b2-444d-42b4-8b42-ec4f6c95d77f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "5c2375b2-444d-42b4-8b42-ec4f6c95d77f",
        "cursor": {
          "ref": "2c9b39e5-45ca-4fc7-ae12-5cba1a9848d3",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "212a296a-d6f7-43c9-b4a6-eb57b3f05e46"
        },
        "item": {
          "id": "5c2375b2-444d-42b4-8b42-ec4f6c95d77f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "5c2375b2-444d-42b4-8b42-ec4f6c95d77f",
        "cursor": {
          "ref": "2c9b39e5-45ca-4fc7-ae12-5cba1a9848d3",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "212a296a-d6f7-43c9-b4a6-eb57b3f05e46"
        },
        "item": {
          "id": "5c2375b2-444d-42b4-8b42-ec4f6c95d77f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "67d1fa23-c0d6-44b3-829e-3c36605b308d",
        "cursor": {
          "ref": "67164d87-bf18-404c-909c-5b77b79d409d",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a62e1806-ebbb-412c-9520-3a2588d9b824"
        },
        "item": {
          "id": "67d1fa23-c0d6-44b3-829e-3c36605b308d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "67d1fa23-c0d6-44b3-829e-3c36605b308d",
        "cursor": {
          "ref": "67164d87-bf18-404c-909c-5b77b79d409d",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a62e1806-ebbb-412c-9520-3a2588d9b824"
        },
        "item": {
          "id": "67d1fa23-c0d6-44b3-829e-3c36605b308d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "67d1fa23-c0d6-44b3-829e-3c36605b308d",
        "cursor": {
          "ref": "67164d87-bf18-404c-909c-5b77b79d409d",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a62e1806-ebbb-412c-9520-3a2588d9b824"
        },
        "item": {
          "id": "67d1fa23-c0d6-44b3-829e-3c36605b308d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "37313584-e5d0-4f79-8f48-e7c9b0e058b1",
        "cursor": {
          "ref": "dd9c5b44-1332-4f9d-b28f-a1fff257039c",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "10baf665-8d20-4a0c-ab4d-970a4b2c61ab"
        },
        "item": {
          "id": "37313584-e5d0-4f79-8f48-e7c9b0e058b1",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "37313584-e5d0-4f79-8f48-e7c9b0e058b1",
        "cursor": {
          "ref": "dd9c5b44-1332-4f9d-b28f-a1fff257039c",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "10baf665-8d20-4a0c-ab4d-970a4b2c61ab"
        },
        "item": {
          "id": "37313584-e5d0-4f79-8f48-e7c9b0e058b1",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "37313584-e5d0-4f79-8f48-e7c9b0e058b1",
        "cursor": {
          "ref": "dd9c5b44-1332-4f9d-b28f-a1fff257039c",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "10baf665-8d20-4a0c-ab4d-970a4b2c61ab"
        },
        "item": {
          "id": "37313584-e5d0-4f79-8f48-e7c9b0e058b1",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4f134462-95b8-4274-9016-48ad739f68cc",
        "cursor": {
          "ref": "a99f7eec-3b5c-4a68-9ae7-162b2a03224d",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d5007108-9980-4458-a709-d203a34f47ab"
        },
        "item": {
          "id": "4f134462-95b8-4274-9016-48ad739f68cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "4f134462-95b8-4274-9016-48ad739f68cc",
        "cursor": {
          "ref": "a99f7eec-3b5c-4a68-9ae7-162b2a03224d",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d5007108-9980-4458-a709-d203a34f47ab"
        },
        "item": {
          "id": "4f134462-95b8-4274-9016-48ad739f68cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "4f134462-95b8-4274-9016-48ad739f68cc",
        "cursor": {
          "ref": "a99f7eec-3b5c-4a68-9ae7-162b2a03224d",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d5007108-9980-4458-a709-d203a34f47ab"
        },
        "item": {
          "id": "4f134462-95b8-4274-9016-48ad739f68cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "784b8f76-9f05-4d9a-872e-3b33ae6b8ee5",
        "cursor": {
          "ref": "a2f11509-24ca-4cd4-8ccd-09804306722b",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "80e15d04-1d05-4310-a75b-575bb0c425e5"
        },
        "item": {
          "id": "784b8f76-9f05-4d9a-872e-3b33ae6b8ee5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "784b8f76-9f05-4d9a-872e-3b33ae6b8ee5",
        "cursor": {
          "ref": "a2f11509-24ca-4cd4-8ccd-09804306722b",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "80e15d04-1d05-4310-a75b-575bb0c425e5"
        },
        "item": {
          "id": "784b8f76-9f05-4d9a-872e-3b33ae6b8ee5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "784b8f76-9f05-4d9a-872e-3b33ae6b8ee5",
        "cursor": {
          "ref": "a2f11509-24ca-4cd4-8ccd-09804306722b",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "80e15d04-1d05-4310-a75b-575bb0c425e5"
        },
        "item": {
          "id": "784b8f76-9f05-4d9a-872e-3b33ae6b8ee5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f9f9718d-493b-4a24-b395-2a55df3e5de5",
        "cursor": {
          "ref": "60d137a0-ee4a-4f49-9426-f279088fc12e",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5cbdd843-0a69-4dba-be48-098a7c095e69"
        },
        "item": {
          "id": "f9f9718d-493b-4a24-b395-2a55df3e5de5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f9f9718d-493b-4a24-b395-2a55df3e5de5",
        "cursor": {
          "ref": "60d137a0-ee4a-4f49-9426-f279088fc12e",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5cbdd843-0a69-4dba-be48-098a7c095e69"
        },
        "item": {
          "id": "f9f9718d-493b-4a24-b395-2a55df3e5de5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f9f9718d-493b-4a24-b395-2a55df3e5de5",
        "cursor": {
          "ref": "60d137a0-ee4a-4f49-9426-f279088fc12e",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5cbdd843-0a69-4dba-be48-098a7c095e69"
        },
        "item": {
          "id": "f9f9718d-493b-4a24-b395-2a55df3e5de5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "48fa7f21-60d1-4e21-ae17-42673b68edff",
        "cursor": {
          "ref": "88e1b360-4247-43eb-96d9-16e4d444a183",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2bf14357-f200-4f6d-9b70-dc376e9f3a51"
        },
        "item": {
          "id": "48fa7f21-60d1-4e21-ae17-42673b68edff",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "48fa7f21-60d1-4e21-ae17-42673b68edff",
        "cursor": {
          "ref": "88e1b360-4247-43eb-96d9-16e4d444a183",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2bf14357-f200-4f6d-9b70-dc376e9f3a51"
        },
        "item": {
          "id": "48fa7f21-60d1-4e21-ae17-42673b68edff",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "48fa7f21-60d1-4e21-ae17-42673b68edff",
        "cursor": {
          "ref": "88e1b360-4247-43eb-96d9-16e4d444a183",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2bf14357-f200-4f6d-9b70-dc376e9f3a51"
        },
        "item": {
          "id": "48fa7f21-60d1-4e21-ae17-42673b68edff",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "653dc8d8-3cb7-495e-bd5a-6e2478c8a7d4",
        "cursor": {
          "ref": "ca773ae3-2108-4ef4-817e-6f4175ceb6a7",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dcb116f7-2534-4a81-8500-a9af87c3dde3"
        },
        "item": {
          "id": "653dc8d8-3cb7-495e-bd5a-6e2478c8a7d4",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "653dc8d8-3cb7-495e-bd5a-6e2478c8a7d4",
        "cursor": {
          "ref": "ca773ae3-2108-4ef4-817e-6f4175ceb6a7",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dcb116f7-2534-4a81-8500-a9af87c3dde3"
        },
        "item": {
          "id": "653dc8d8-3cb7-495e-bd5a-6e2478c8a7d4",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "775c0231-9467-45d6-b662-bd2cb00f2e27",
        "cursor": {
          "ref": "01d2bf37-6255-44bf-bd9a-beb536855118",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bf5d9e8c-ed4b-488e-8b22-27aaecf60e52"
        },
        "item": {
          "id": "775c0231-9467-45d6-b662-bd2cb00f2e27",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "775c0231-9467-45d6-b662-bd2cb00f2e27",
        "cursor": {
          "ref": "01d2bf37-6255-44bf-bd9a-beb536855118",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bf5d9e8c-ed4b-488e-8b22-27aaecf60e52"
        },
        "item": {
          "id": "775c0231-9467-45d6-b662-bd2cb00f2e27",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "775c0231-9467-45d6-b662-bd2cb00f2e27",
        "cursor": {
          "ref": "01d2bf37-6255-44bf-bd9a-beb536855118",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bf5d9e8c-ed4b-488e-8b22-27aaecf60e52"
        },
        "item": {
          "id": "775c0231-9467-45d6-b662-bd2cb00f2e27",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5da73b9a-890f-4467-a831-5918e4900a22",
        "cursor": {
          "ref": "9fcf6332-f25b-4f54-9193-9e24f8dd1f60",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "230dc971-7b15-4048-b8f3-11d01729d379"
        },
        "item": {
          "id": "5da73b9a-890f-4467-a831-5918e4900a22",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5da73b9a-890f-4467-a831-5918e4900a22",
        "cursor": {
          "ref": "9fcf6332-f25b-4f54-9193-9e24f8dd1f60",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "230dc971-7b15-4048-b8f3-11d01729d379"
        },
        "item": {
          "id": "5da73b9a-890f-4467-a831-5918e4900a22",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ef0154e2-54c5-4d3a-9ce5-fde94fc646f1",
        "cursor": {
          "ref": "a31777cc-cc11-468d-9847-6677104b30a0",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "15d94d1e-dfde-4e6e-8bdc-9af406db155d"
        },
        "item": {
          "id": "ef0154e2-54c5-4d3a-9ce5-fde94fc646f1",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ef0154e2-54c5-4d3a-9ce5-fde94fc646f1",
        "cursor": {
          "ref": "a31777cc-cc11-468d-9847-6677104b30a0",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "15d94d1e-dfde-4e6e-8bdc-9af406db155d"
        },
        "item": {
          "id": "ef0154e2-54c5-4d3a-9ce5-fde94fc646f1",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ef0154e2-54c5-4d3a-9ce5-fde94fc646f1",
        "cursor": {
          "ref": "a31777cc-cc11-468d-9847-6677104b30a0",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "15d94d1e-dfde-4e6e-8bdc-9af406db155d"
        },
        "item": {
          "id": "ef0154e2-54c5-4d3a-9ce5-fde94fc646f1",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f8b923b7-62c5-4226-96a6-eb6798a1e251",
        "cursor": {
          "ref": "e438454a-a282-4610-987b-57b096d5d4e0",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9093103c-0ce1-4547-b962-b436021e90bb"
        },
        "item": {
          "id": "f8b923b7-62c5-4226-96a6-eb6798a1e251",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f8b923b7-62c5-4226-96a6-eb6798a1e251",
        "cursor": {
          "ref": "e438454a-a282-4610-987b-57b096d5d4e0",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9093103c-0ce1-4547-b962-b436021e90bb"
        },
        "item": {
          "id": "f8b923b7-62c5-4226-96a6-eb6798a1e251",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1369f086-fbba-4abf-a0a0-3bd3f6604391",
        "cursor": {
          "ref": "e8d4e44b-7df4-4366-8fe2-d35eef082bd1",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8ee04a6b-e35b-4b1a-9ffb-4a21e6d85eff"
        },
        "item": {
          "id": "1369f086-fbba-4abf-a0a0-3bd3f6604391",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "1369f086-fbba-4abf-a0a0-3bd3f6604391",
        "cursor": {
          "ref": "e8d4e44b-7df4-4366-8fe2-d35eef082bd1",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8ee04a6b-e35b-4b1a-9ffb-4a21e6d85eff"
        },
        "item": {
          "id": "1369f086-fbba-4abf-a0a0-3bd3f6604391",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "1369f086-fbba-4abf-a0a0-3bd3f6604391",
        "cursor": {
          "ref": "e8d4e44b-7df4-4366-8fe2-d35eef082bd1",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8ee04a6b-e35b-4b1a-9ffb-4a21e6d85eff"
        },
        "item": {
          "id": "1369f086-fbba-4abf-a0a0-3bd3f6604391",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "f4c42dca-493f-4190-8879-004bf4068a0c",
        "cursor": {
          "ref": "9030a2a3-9b36-4db1-b685-b733f7c4c595",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "dd2ce178-4bdc-4499-9ecd-a68ec95b457e"
        },
        "item": {
          "id": "f4c42dca-493f-4190-8879-004bf4068a0c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f4c42dca-493f-4190-8879-004bf4068a0c",
        "cursor": {
          "ref": "9030a2a3-9b36-4db1-b685-b733f7c4c595",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "dd2ce178-4bdc-4499-9ecd-a68ec95b457e"
        },
        "item": {
          "id": "f4c42dca-493f-4190-8879-004bf4068a0c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "53675664-79c8-408c-957e-135c833cc3f5",
        "cursor": {
          "ref": "317c20f5-d538-4356-8fc1-c8871525d542",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a377fb7c-88c4-415e-9250-d6ec98c94dd0"
        },
        "item": {
          "id": "53675664-79c8-408c-957e-135c833cc3f5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "53675664-79c8-408c-957e-135c833cc3f5",
        "cursor": {
          "ref": "317c20f5-d538-4356-8fc1-c8871525d542",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a377fb7c-88c4-415e-9250-d6ec98c94dd0"
        },
        "item": {
          "id": "53675664-79c8-408c-957e-135c833cc3f5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "53675664-79c8-408c-957e-135c833cc3f5",
        "cursor": {
          "ref": "317c20f5-d538-4356-8fc1-c8871525d542",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a377fb7c-88c4-415e-9250-d6ec98c94dd0"
        },
        "item": {
          "id": "53675664-79c8-408c-957e-135c833cc3f5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "3257300e-5437-449b-b8fd-bab4d44d92c1",
        "cursor": {
          "ref": "7e1466e8-60ec-4918-916c-07507a09b6a3",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dac65b4b-ed90-4634-a8f3-2b84c429e7c1"
        },
        "item": {
          "id": "3257300e-5437-449b-b8fd-bab4d44d92c1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "3257300e-5437-449b-b8fd-bab4d44d92c1",
        "cursor": {
          "ref": "7e1466e8-60ec-4918-916c-07507a09b6a3",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dac65b4b-ed90-4634-a8f3-2b84c429e7c1"
        },
        "item": {
          "id": "3257300e-5437-449b-b8fd-bab4d44d92c1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "3a4aca68-bdd4-45c2-bf1b-244ccabcef8b",
        "cursor": {
          "ref": "af65ad10-e915-43fc-b80f-cfd98f015a0d",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fe1604f0-2a04-4cac-b7da-2c7992d4e760"
        },
        "item": {
          "id": "3a4aca68-bdd4-45c2-bf1b-244ccabcef8b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "3a4aca68-bdd4-45c2-bf1b-244ccabcef8b",
        "cursor": {
          "ref": "af65ad10-e915-43fc-b80f-cfd98f015a0d",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fe1604f0-2a04-4cac-b7da-2c7992d4e760"
        },
        "item": {
          "id": "3a4aca68-bdd4-45c2-bf1b-244ccabcef8b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "3a4aca68-bdd4-45c2-bf1b-244ccabcef8b",
        "cursor": {
          "ref": "af65ad10-e915-43fc-b80f-cfd98f015a0d",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fe1604f0-2a04-4cac-b7da-2c7992d4e760"
        },
        "item": {
          "id": "3a4aca68-bdd4-45c2-bf1b-244ccabcef8b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}