{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b2695a0f-c5da-4c3f-8c98-179f96f88727",
        "name": "API Configuration",
        "item": [
          {
            "id": "a497376e-ebac-438e-a546-0897a5c6c7af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e53ecdc5-b19e-4a28-9704-e1f510435e84",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0b7742e-13b5-4aba-b0dd-4101e6fc5eb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "846a3658-d84b-465a-b686-b6271e3115d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "40aab25f-8d8e-4570-87bd-fbedb883d76a",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "723fe0d1-ff94-45a1-b06d-ca6df4bfbc31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "050f742e-38f9-4080-8fdd-6ecdd6f9f6c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55ef3796-a374-4636-a580-78d7244a0af2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4275ee-0c7e-4bb5-b5e6-f67766546fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5b13136-0a31-4115-a8ce-8923a15527ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3d085a-4e9b-4687-afc3-e7c708690124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ae5cbd-ed92-44fd-ab87-89ab2d31ac57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6895c36-fde4-48f1-8a57-886115a85195",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c4d052-078b-4c89-b38a-ce4572baa04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a60e1a6-d3c7-4ad4-90ae-2aee5066bc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7583187-c9fd-4dd2-8037-2a734c1eb8f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "478fcd67-db5d-49b3-ada3-1492c6e874b2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4e0bf0ae-3972-41ca-b4b5-9bbbf2cee53d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e2ead0b1-baaa-4ed0-b9c0-7232707af550",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ad1e4c7-867b-40e5-932c-d523045f1029",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dc2edba6-c751-47a4-afc6-d479169d7310"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4239ad38-822a-4bb3-a496-aa606ab4c2e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "497614c4-d122-454b-bfc7-3953946e1f53"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c86d04b-1a83-4552-9c63-7ab2987b3049",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "023b7f62-dc07-43a2-b627-fb48c5a56783"
            }
          }
        ]
      },
      {
        "id": "e0bc60c6-0e59-46f7-a75c-e81cc91f0bce",
        "name": "Issue Credential",
        "item": [
          {
            "id": "e960fd09-59ba-4475-b354-1b6c15d55abd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "01f438c9-d638-4f9d-b88f-7f8f39f459e6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8f97a9c1-7cf5-4732-950d-b766a4d56fc5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a200b3cb-db1e-4373-b03d-56499aee4729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9648db26-f204-4d6d-8341-f73a4146ce86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c861a2b9-253b-4577-8c5c-22e7d859d8e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c7e33e-fa23-441a-abc2-7932b21b7c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdc32ca-348f-4c12-869b-4b6bd044f496",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7be5881-a1e5-4fa1-9d17-6a814e57cd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b3c9928-6efe-4a38-829e-d25874ff1362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6e645b-7df2-44be-a06a-b0b7a52978ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e7251fa-f19b-44fe-9957-d5103f126512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608399f3-dad4-4175-905a-90e75e631108",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0abdaff-c6c3-43a3-a8a0-8728bdf012f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "177223d1-6c02-4e4e-8c73-124226855ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acab4c24-697d-43d8-8f6f-4b6e35821e51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ce66896-5fcd-472f-9df9-40fb197fcb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664db875-e334-45c8-acb2-fdccd9682e33",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81047958-aaf3-4314-a147-19627d7613b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8051bcf-8172-49d9-a613-addd7235da4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38812fd-0a91-42a4-9432-c6218e917575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02de1f67-b6e8-440f-b61d-2952b14e41eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad25692a-0259-46ac-9a3a-ef01acfa8e25",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac53b85e-6a6a-45e8-967c-c11d9776bbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471dab6e-7b92-48bc-b67b-6198fbec3e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37918071-cd43-42b8-85f5-faaf8151c845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f128dce-910e-4108-8268-c0e868213747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c072df19-07c6-4121-b73f-2ec69cf409c5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d769aca-ee6a-4e5b-9684-a7f957c7ba4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7be314-2e38-4f4b-9c39-ea88a8ca94ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f479617-23e3-4931-b4de-46e05d44cc96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e7a3aed-948c-499a-b614-6f0e0ee1aa17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d898a5b-159c-4e5e-b8fe-5fb426089df7",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe3de98-edd4-4b8a-95d6-bcef592e97a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022c7dbe-0edf-4de9-8675-ccace33f986c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f578261-164f-45d1-863e-bdb80b870e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b592390e-1f26-4705-b934-a1a7131e0655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d983a300-6a29-4b8c-ae4e-d5576e9ee7f0",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba76fe52-0f37-4bf8-bc4d-77742d2cb9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb9b9fe1-2e73-4383-a028-1e6b821062a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef266084-f2cf-4794-a16b-9c41f52a8d35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad79135e-212c-4016-9b7d-c99f5437f072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1dbcb1-0bc1-4929-95ce-9d20372c9e18",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da899d6-69b4-4189-89c7-791454483e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ce59a9-ae53-4caf-941e-a31aa3f86583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c91cba8-1a1b-4a91-9482-2157bb5b5c5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef1256ee-faa9-4405-9e83-6be0281bfcab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a672f6c-2a2f-4f35-ac26-4a4e2105a9e5",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e075cd-626f-4a6e-9d65-8cadbf72ee02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce0eddb-8f1b-47d7-bc34-30387f6df265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d777d49f-3ee3-47c6-b337-986afea8b495",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1ea6d69-c3f5-4aa8-a453-f7fed031b705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a124d80-66c7-4509-a9dd-0827d6402426",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5faa9899-4447-45a4-9ffb-c20ee4e38d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5c454e-007c-4c57-9c61-700d4b460645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42010d1-4f91-4d2d-93a8-6755659e0fe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "5f2e06e3-12f1-4c07-8a34-9b8312ac12c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ceb5b23-ff1d-4498-8359-7e8c7719403d",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4609ad44-6385-4433-96d2-bf34cd93fb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d38750-4730-4b01-94d1-0e32d9c3bfb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf2c80b-ea4a-4847-a713-76f4006cea94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59f280ca-0478-497e-a7a4-2788b6544e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61fadc4-149b-493a-91d2-254338c59a8d",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c9b2d2-96c8-4720-9002-6aa2b473f296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d563dd53-30e5-4282-b123-6ea0fd486d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9daa9dca-03bd-4510-a4aa-82c282e549e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "5bce34a9-dfe6-4850-9deb-a2006758f47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198250c5-c216-46f7-ac9d-8f12b0061d36",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa79f11-2445-4fcd-998e-a61ae3998cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e07d798a-5f9f-4bed-abcf-b537a17df548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f331e2d-80c4-4cd6-b2a8-791fd43294a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a256d4-8405-49c6-b96b-b2668b79e8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d594ecee-f196-44de-b9e4-e5da8ae3fbdc",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9764028-0b2c-478e-b93b-20526338a2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b6751c2-e258-439d-ba54-8b21d327ed18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11fc652-874f-40b3-a940-a46452fd8c43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "318013c2-b595-4f82-a049-a1caf5488571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ff2fa6-4679-45a3-99ac-8c33b9974acf",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5516f346-2b7d-47ae-85ee-e5caa756c9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf06f7db-33dd-4d8b-bd36-6bb6125b6945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2710b7-6290-4cd6-a78c-c4c175b3c5b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27bda55e-a1b9-4e0c-81bc-77a0525e3026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be40046-2fba-4c57-a21d-d4c807a66485",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c759854e-15d1-4aa7-9e38-c1e05421e6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7588072-5d55-4593-858d-44d52b8b4c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69c9c18-372d-4551-8cbd-c69c2389c9c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a61b55c7-2962-4fbb-b1c0-6b6f417da6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15aa375c-ebf7-48c7-b82a-3a4ac6d31c28",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "245f5737-ebfd-47c1-924d-01eae0ce94fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de6c074-403b-4bab-8565-afa5f84cbc2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b78897-f829-4469-bece-745c20c216c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af86e9f7-81c2-43e8-b1c5-445a02243190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac2f28e-fa7c-4281-b5d5-c55800c7d756",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ac40d9-7364-4f54-a722-e56497d42e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7226c971-854b-44f4-a16b-2eca940c5a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e202e0e-5e0b-4033-9ebb-bd4e481fe370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a950a3b-ed85-44a1-83e0-210457cf751f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42df266-1a24-4eed-91da-ddd08df78f6f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a93b89-e2ab-4038-a7f8-f8b144fa1f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b28a5a-d0cc-43c9-9ecf-d7d94615fb8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f777618-b101-42f3-9257-14456598dc2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff3f859-cedf-4292-8eb1-83c9866dcc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e95e4f-90b4-467f-ae88-6b0f46e7ffac",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27be72b3-4446-435f-9c8a-c0a1f20de4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d856de-aed7-4537-89f4-da10760d5595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06516398-bb70-4add-b61e-bfc192e8bbe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41b5b79a-c4cf-4c7d-bfa7-85f8641050ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f996782-c7b7-441d-8dbc-355aac6aaa5e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd34c3bc-88dd-41ed-859b-8d604878142d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7aee2c9-3461-4e9d-9a9b-126fa1d3f458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b6589e-d60c-4572-ba79-a68601a5b98c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bba39bf-b9d2-43f6-90a1-2aeb75f3c282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1832cf1-5d3b-4fe6-bdf7-af8cc3f392f0",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7cf909-a3fd-402f-bc64-b8ec6dcf364a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951ee012-302a-425b-921e-cb0f3cf3d0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439a0e6a-4ba1-488a-be8c-6218d1b7e40f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e7365be-aa98-4c34-b93d-e1b356f40dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b97fdd0-40e6-43f4-9090-65a1fb00c7b3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fc3ab4-0846-4069-b132-c1cf52fcde50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b9ecea-e7e6-499b-857c-a7b8f3ecdbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812a841d-2b3a-4c65-b89d-2fbe2d3bd3c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "196d480f-74c3-4e14-88fb-1986ae947440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37fcbc3-01c2-42e0-a3a2-7b3da85eb538",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1233b5-90ad-4532-af9c-6b12bc2f77a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f9d34f-b702-4100-bb01-383773aaf454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6381ffee-e54d-47d6-9843-cdfb20a234ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da74e57d-1277-4b82-bdb9-424c6819cf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5d92a7-6957-4acf-b01d-efd267169886",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e9ac2d-1449-4c27-80af-6fdacd1b1ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd26d44-c774-4c23-ba35-21b2a042db1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fbae6c-fe5c-41ef-91b1-8640b56da8a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2162f8a0-acfc-4673-874c-6ea95b8ef17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eed59d7-97c8-41d3-a5db-3f1fd5f9e8a9",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d3ced8-7315-49f3-b663-a7fcc3d590b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611687d4-b7c2-4226-8256-5875a04024e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cb1e36-b5ae-4aa5-a4fa-9342daddfd36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1c94910-2df2-4e2f-b93a-e852af2638b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38992aaf-a50c-4c3a-90ef-b6f1b4f41f31",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac0e1d8-6cc1-489d-a870-c1c337356fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5eadff9b-98fb-404b-87e2-97531f91eb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d810dd5c-3e13-4f96-87d4-a4f7f3be8520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eca53c4-abec-4a85-9c9f-aa776b8a7ed4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4dbc3754-ab5c-4d57-afff-e3fe7b7641dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e3b8a5f-5a71-4624-86d1-0a78c25dbfaf",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f604232a-ce76-470f-bfe0-9b1be9a67d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0635713-1d73-4f7e-a332-7462ca8ff827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f074fb6e-4bbe-4304-81a6-7630ad8c8532",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "62f434e7-0e2e-4241-a160-e5315c0a4340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c262fb-8f08-464d-a24c-f07e7b49c9e6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18c23f5-4c48-498f-a10e-5754c75b699b",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cbc668b-cad2-4922-9833-db61f4c94412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b696d977-5bc7-44bc-82d6-6353257f8e78",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c32e7a19-4c1b-4a1e-9885-9fd8861c9c01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5e62594-6a3d-4b30-8585-3dddc904aa03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d29cf63-62af-49d6-9409-1962619db16f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a37dbefb-4f8b-46f8-8f55-06bbf299ac8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86720ae1-ff1a-48e6-b7ac-e0c450496c97"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "532ca0ce-2630-4b58-b405-2411a8a5c43c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69b4c1e0-684a-4980-a3fa-6eeaf4f9fa21"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c27e4719-0806-47fb-95de-8ccef6e91e85",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9dbbad33-64b1-40be-8a95-033c62726d3f"
                }
              }
            ]
          },
          {
            "id": "bee2653b-177c-495a-9ca0-06231170de0a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ba1c6625-efac-47b6-b610-dcfdf04b0809",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e10c4c75-29a9-4cfe-b797-05610f4b0d05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4d2674e-9812-4125-90fb-58fcc9bf6213"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3df2c88b-601f-44d7-af23-03638d24eec9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "824cc43e-9e49-4010-94be-c5e2edcc2916"
                    }
                  }
                ]
              },
              {
                "id": "07583e3d-043b-42e5-a501-f921558a79c2",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6140608b-b2e6-4c5d-9032-8fcb9cc49de2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cc225f5-72cf-44fd-8d48-132cf138c378"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2451c6fb-dec3-486a-b48e-0b6dcbac034c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "c66a3e0d-c7c5-40e1-99ae-4f5a20d71b0d"
                    }
                  }
                ]
              },
              {
                "id": "0ac41d44-bd63-402e-a43f-e229b2f939fe",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e096c488-49e2-4423-9484-97252639d5e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b81eaf63-166f-4483-934d-ef96cc034fa2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6451467-b1ec-4551-bf3f-68ce032a20b0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "82288389-87ef-4408-910a-f46f1ae5ef6e"
                    }
                  }
                ]
              },
              {
                "id": "7b105eeb-514f-46d1-8e25-dc02728b943f",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3052fa43-044e-4a4b-9655-bbfd76323707",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6447616-f278-43bc-b1bc-fbce7c8d20fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d6bdff7-c029-4a70-bbc9-62076c793b9e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "a1e0ecf1-1144-4157-9208-891b027105d4"
                    }
                  }
                ]
              },
              {
                "id": "2e7da9e2-cd49-4d95-b5db-a75776f9f5ae",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e734108-3977-4dae-86a5-ce0b6349ed56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36ea1e81-07dc-44bf-8bf4-756acd8c60c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "605dd543-b727-425e-a0f8-b6b32a93be4b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "4a6dfe80-e12f-4e8f-b4dd-e1725b482ee6"
                    }
                  }
                ]
              },
              {
                "id": "c7596ed1-1491-416c-bb69-d7a06cb0bea1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25b37bb6-97bc-48ec-bb5e-722a600bf971",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a23dc07d-5d46-4f50-a2e6-09f88c53219f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f4b74b5-518e-42bd-a692-77cb0d3674a4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "c3791771-7531-4912-98d5-a6b7b6c1e656"
                    }
                  }
                ]
              },
              {
                "id": "f3b9abd3-322d-4b06-93a6-768b87df7101",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66e5154e-174b-47d1-92ec-00607d403901",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e70b91d2-ce6b-4d3a-bf9f-25f111e61a7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a6de4a8-7984-4e72-90c0-b5d368b25687",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "778a1c39-c36f-405d-892c-a42e57abf78c"
                    }
                  }
                ]
              },
              {
                "id": "f8ebe512-e808-4345-b587-df7ac27a3896",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6720cbfe-2ab3-4912-b484-00cede31a2d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f127a6e0-491d-447d-bfac-9aeb90411596"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad2b96cd-351f-44ca-9786-08626c310dda",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "3d28c41e-19cf-4d2e-8a43-d9f1e6f7f290"
                    }
                  }
                ]
              },
              {
                "id": "e3db6259-0865-409f-9098-cd85031907fa",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bef2d66f-1a76-4061-958f-c701bd3b4d37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1db17b89-15af-4e09-956c-063b854dcf93"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff7928ce-c074-4e4b-b8e9-cd495a88824e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "a65a9766-2800-4d24-b0d6-8a3aa14c9d62"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c43ed74-fdab-4a45-9dac-b30f2a033b61",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69dc772e-45ac-421d-8f18-5d2bf8091ef0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ac464b8-7b5c-49f0-affb-01d90a13319b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e6d9711-8016-41c8-b96c-2b203c28d852"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb15d931-28de-4d08-9c51-dc1e460093ce",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "86e3871a-bd2a-4428-bffa-c9230dc7a7fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e926fb83-b401-4e22-af46-6b24f25fdf7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c01a9aa-8cf8-466e-acb2-f520112279f7"
            }
          }
        ]
      },
      {
        "id": "660a15d9-72f8-46cc-8858-ef6423fa2956",
        "name": "Credentials Status",
        "item": [
          {
            "id": "f1228d45-2041-4425-a083-05d0e391d761",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae772a2f-c0b5-4533-b2f7-108883cf675e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b97516ed-eb1f-4427-9ea7-61747cd31044",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6744dc-e3d4-4784-a230-a32de151dea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a0a81a-aebd-4165-8650-7ae3e43d9a4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "132a7bab-84e7-4d60-a036-100306d53cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "654b1d2c-87d6-4053-8854-1b1e04ba54c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248bde56-9200-4964-925f-269b6ca47df5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce80f48e-ae3b-47b0-9531-47e5d9f7cd0f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eceab584-9445-4355-9960-a0145291901b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5595be-5410-40d5-a17f-64850f807884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daca7f71-18c5-48b5-b196-094e5a13b65f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68db83d1-c80e-4bea-ae55-6893b6d53065",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "218035cb-fd93-4bb5-9bd2-51f2c792f311"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d4ac2c3-1038-467b-b5c3-40908c865a1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5201589b-ead8-4b39-9d06-0d29b8a14f9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fe93934-5064-4f49-94e9-6b9d23aaebe4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "30c39d5a-d6b6-41c8-b8bf-b6810fb184b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fbb34e6-dc66-4d3a-be08-9af28622dc9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32b5c698-b2a1-4c7d-8deb-1508e289e8e9"
            }
          }
        ]
      },
      {
        "id": "b739287f-8b7e-42b7-93e6-d2fd4f70cf97",
        "name": "Presentations",
        "item": [
          {
            "id": "9cdc6fab-cb76-4630-a61c-7855af845380",
            "name": "Negative Testing",
            "item": [
              {
                "id": "904db660-8d0b-459e-8a17-381a62e1d049",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9db0742-c9b1-4446-8321-2afb0e4284e0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891f1194-0cf1-4233-8421-469150c9567d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1438428-4374-4b24-ba57-bffee2bab6d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73aca4fb-7c1f-4f1a-976b-b46909681571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f65b3084-0cdb-4517-b354-f2afbf4e6dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1695d1-27c4-4916-a2ca-ec312e07cab0",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c036f4b-8f75-4c14-9250-188d3c658f04",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fd16268-79a7-412f-bba7-ee6ea203f370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "253d77a7-cd4c-4291-8c7a-4eea35d1c025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "455fc0ac-68b2-4301-b05d-70961bd4c691"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02aef0f7-4c3f-462c-a09f-98c20f31a222",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e10f860-2775-4b40-b6a8-6e1c7fe5d5aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b60c19b4-94cc-49d8-a669-ab0039fa8b37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fe23ee4-438e-4ba8-89ec-86fa5cc480ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d827de6-f4a3-43a1-8e29-70a42ef77596",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "7871e161-0f54-4aa0-8df9-efb9511ebca1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e3ba91b-9656-43d2-9674-9f96321029af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca4ed449-b09c-4ada-8b0a-d36004f27a0e"
            }
          }
        ]
      },
      {
        "id": "ae5bf7c2-e18b-41ca-baca-0db8494d31c5",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "13874475-9823-4149-997e-06d6b1fc298b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0bc4ab11-8bf6-44f7-8fb3-eed5ac034116",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "acf19094-333c-48a6-ad8c-6ad3d1047414",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2dcbaa-a647-49d5-a901-1e328ec98ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416ca5e1-0311-4fc0-a748-82c300b5e8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705c79b6-6903-454a-b4fe-ca7bc23b1f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67f45986-6726-4b80-944a-3ca3a6efa8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656d3bab-5e7c-4974-b6bb-4605341bd90a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4872f759-00fe-4b64-aa9a-aed56c14fc93",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7080978a-67a2-46a7-a7d3-b8139e919674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3685c03e-f868-4a1a-929c-a24b352daa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32d8b1c9-872b-4566-998e-f7f21f98a2cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4776ebe5-1d4a-4c4d-b08d-956d71dd140f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fbec233-3270-483c-95df-892cb6c39bbb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27b58789-ac1a-46d3-9373-8635939c8583",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dcd777ad-d1b5-45e5-90b5-653e26a6eacf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1eef4d71-422c-4978-9254-ea98adabf09d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "605c536f-93ae-4d0a-bf88-37ee0fdfbd87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce832349-c9a9-4a74-8e30-f5d7efc6d456",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "562e6565-b9d5-4897-98a5-0174f03bb9fe"
            }
          }
        ]
      },
      {
        "id": "e8447f93-15e1-4658-9221-881427326613",
        "name": "Presentations Prove",
        "item": [
          {
            "id": "178d9beb-199f-4129-8fc2-d7d5ec703d55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf39fa4d-1125-4cc3-a657-8adba8f7242f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2317ee3e-24f1-4893-b264-241fb4402898",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75656211-05ec-41d8-87f5-b127ddac22ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf21cc5-d029-423b-8fe9-f051a378824f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ebfc40a-570d-4376-8bbd-dd4a40f79eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae650a14-0feb-4876-9f28-50adc9af4453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0c1efc-f017-4da9-9bfd-ebc5c449bc8f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbdeeea-cebb-4bb2-8362-e0f7d8e33b3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af73e746-c22f-4cb3-ac58-c26f0171dabb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94eb02e-7041-4c0f-a77c-5db72381d23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3ce15d2-4034-4de2-bd3a-7d6808fe31c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f525f57c-7869-46a6-9d8e-cdc488ee894b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc95e789-32af-4a13-9cb4-0e656179a9e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ef55ef3-312d-474d-8daa-94ba2e75f9d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afced8d8-63fd-455b-a20e-dffbdf7f70d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c35049b4-b4ec-4bb6-a1b4-008656317412",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('prove:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "f7c49fd9-0039-48a5-9b0b-4f15afbe7f4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea6ce3e9-17ab-438b-913e-4781922cf87e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f60e5467-134b-46bd-b3ac-6d3e335c6eb4"
            }
          }
        ]
      },
      {
        "id": "bb70b1c3-687b-4796-aaa8-205a8e44f1bf",
        "name": "Presentations Verify",
        "item": [
          {
            "id": "c18add17-d091-4fed-8e9e-c2446286d71b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "18c99e4b-2e61-47ac-b4e5-617aab540ee3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "94dc1401-5c4f-4f35-9fee-0155ba3c15ce",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4683a3fa-3b32-474b-8a98-29839d0d681d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4682e9d-6722-45f3-8b22-55e1b716fcc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1b6a96-4ef3-462a-b2ce-2fb67be25295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a8a0547-561c-46e5-b2ff-00bad2ea5606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b268d5e-cbf7-4e93-8704-41db60974216",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c22223-261e-414a-b591-fe99095d25a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "358894c4-36ad-4e66-bdab-7154d3720d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1d9671-d4d7-43ee-b92f-33105c06732f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cdf7e98-204f-4e7d-8deb-d8db9513e526"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1aaefa67-d618-4da0-96e9-1323a1464266",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ef40857-df82-4f98-befc-8c127f8a1f51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e478308-d761-4f0a-b69e-5468dffc3d5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18f12703-5ced-4760-8bbd-7537b1220443"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "565798ec-1ef7-4100-814d-3da08e5fe3b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "a81b4180-6111-453c-9509-186a2faae176"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57047852-947d-44f9-8586-f458a9f13de4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37e71977-6743-47f0-be34-d4bcb432e414"
            }
          }
        ]
      },
      {
        "id": "a6365e70-1747-41c7-8f59-3e51321a5c87",
        "name": "Presentations Available",
        "item": [],
        "event": []
      },
      {
        "id": "2ae67955-4be1-4f41-95e2-fdf83080aa15",
        "name": "Presentations Submissions",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 416,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 112,
        "pending": 0,
        "failed": 112
      },
      "tests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 106,
        "pending": 0,
        "failed": 104
      },
      "testScripts": {
        "total": 209,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 207,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661041349321,
      "completed": 1661041351559
    },
    "executions": [
      {
        "id": "e53ecdc5-b19e-4a28-9704-e1f510435e84",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 53,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cad2be49-6d0f-45bf-8cb2-84ad13d723e4",
          "httpRequestId": "286fd40d-f224-4cea-a0ff-d00064a73894"
        },
        "item": {
          "id": "e53ecdc5-b19e-4a28-9704-e1f510435e84",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "55ef3796-a374-4636-a580-78d7244a0af2",
        "cursor": {
          "ref": "df5fc5d2-6353-4f1a-bffa-6b3a118b483b",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4301201e-fcd4-430a-9a9d-a51beb9048c6"
        },
        "item": {
          "id": "55ef3796-a374-4636-a580-78d7244a0af2",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "55ef3796-a374-4636-a580-78d7244a0af2",
        "cursor": {
          "ref": "df5fc5d2-6353-4f1a-bffa-6b3a118b483b",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4301201e-fcd4-430a-9a9d-a51beb9048c6"
        },
        "item": {
          "id": "55ef3796-a374-4636-a580-78d7244a0af2",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "f6895c36-fde4-48f1-8a57-886115a85195",
        "cursor": {
          "ref": "1366511c-df98-476b-8f0f-812748f01c8b",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f87113e3-e6f4-4522-9de7-39727918ec33"
        },
        "item": {
          "id": "f6895c36-fde4-48f1-8a57-886115a85195",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "f6895c36-fde4-48f1-8a57-886115a85195",
        "cursor": {
          "ref": "1366511c-df98-476b-8f0f-812748f01c8b",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f87113e3-e6f4-4522-9de7-39727918ec33"
        },
        "item": {
          "id": "f6895c36-fde4-48f1-8a57-886115a85195",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "f6895c36-fde4-48f1-8a57-886115a85195",
        "cursor": {
          "ref": "1366511c-df98-476b-8f0f-812748f01c8b",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f87113e3-e6f4-4522-9de7-39727918ec33"
        },
        "item": {
          "id": "f6895c36-fde4-48f1-8a57-886115a85195",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "e2ead0b1-baaa-4ed0-b9c0-7232707af550",
        "cursor": {
          "ref": "5fde88cd-6d69-42af-9450-67aa3ba33226",
          "length": 53,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c4349338-5eed-4f53-b9c2-358790d6a473"
        },
        "item": {
          "id": "e2ead0b1-baaa-4ed0-b9c0-7232707af550",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e2ead0b1-baaa-4ed0-b9c0-7232707af550",
        "cursor": {
          "ref": "5fde88cd-6d69-42af-9450-67aa3ba33226",
          "length": 53,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c4349338-5eed-4f53-b9c2-358790d6a473"
        },
        "item": {
          "id": "e2ead0b1-baaa-4ed0-b9c0-7232707af550",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8f97a9c1-7cf5-4732-950d-b766a4d56fc5",
        "cursor": {
          "ref": "75133127-3836-46c9-8b72-d1ae5ac64b3d",
          "length": 53,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2db0af01-af10-4d24-9f96-26b99244ced6"
        },
        "item": {
          "id": "8f97a9c1-7cf5-4732-950d-b766a4d56fc5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "8f97a9c1-7cf5-4732-950d-b766a4d56fc5",
        "cursor": {
          "ref": "75133127-3836-46c9-8b72-d1ae5ac64b3d",
          "length": 53,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2db0af01-af10-4d24-9f96-26b99244ced6"
        },
        "item": {
          "id": "8f97a9c1-7cf5-4732-950d-b766a4d56fc5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "0bdc32ca-348f-4c12-869b-4b6bd044f496",
        "cursor": {
          "ref": "f2b066ba-c6db-4b3f-a17b-7ad6c730cb5d",
          "length": 53,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b8befec3-9c3e-4025-802c-ba3c2366f5df"
        },
        "item": {
          "id": "0bdc32ca-348f-4c12-869b-4b6bd044f496",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "0bdc32ca-348f-4c12-869b-4b6bd044f496",
        "cursor": {
          "ref": "f2b066ba-c6db-4b3f-a17b-7ad6c730cb5d",
          "length": 53,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b8befec3-9c3e-4025-802c-ba3c2366f5df"
        },
        "item": {
          "id": "0bdc32ca-348f-4c12-869b-4b6bd044f496",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "608399f3-dad4-4175-905a-90e75e631108",
        "cursor": {
          "ref": "d621d06a-14c8-4af5-970c-212486adc510",
          "length": 53,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "aa405b77-cf5e-49bf-9506-23e0048b6b63"
        },
        "item": {
          "id": "608399f3-dad4-4175-905a-90e75e631108",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "608399f3-dad4-4175-905a-90e75e631108",
        "cursor": {
          "ref": "d621d06a-14c8-4af5-970c-212486adc510",
          "length": 53,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "aa405b77-cf5e-49bf-9506-23e0048b6b63"
        },
        "item": {
          "id": "608399f3-dad4-4175-905a-90e75e631108",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "664db875-e334-45c8-acb2-fdccd9682e33",
        "cursor": {
          "ref": "5473c1db-cd07-4aaa-a447-2fb18ebe57a8",
          "length": 53,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cdc78d22-d11e-4e29-8a5d-5da0895caf1f"
        },
        "item": {
          "id": "664db875-e334-45c8-acb2-fdccd9682e33",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "664db875-e334-45c8-acb2-fdccd9682e33",
        "cursor": {
          "ref": "5473c1db-cd07-4aaa-a447-2fb18ebe57a8",
          "length": 53,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cdc78d22-d11e-4e29-8a5d-5da0895caf1f"
        },
        "item": {
          "id": "664db875-e334-45c8-acb2-fdccd9682e33",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ad25692a-0259-46ac-9a3a-ef01acfa8e25",
        "cursor": {
          "ref": "7a8bd085-d4c0-4339-9ac0-d0286e95ad6f",
          "length": 53,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "356f7f6b-8c54-4fd6-a1dd-88ffc9a0a385"
        },
        "item": {
          "id": "ad25692a-0259-46ac-9a3a-ef01acfa8e25",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "ad25692a-0259-46ac-9a3a-ef01acfa8e25",
        "cursor": {
          "ref": "7a8bd085-d4c0-4339-9ac0-d0286e95ad6f",
          "length": 53,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "356f7f6b-8c54-4fd6-a1dd-88ffc9a0a385"
        },
        "item": {
          "id": "ad25692a-0259-46ac-9a3a-ef01acfa8e25",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "c072df19-07c6-4121-b73f-2ec69cf409c5",
        "cursor": {
          "ref": "3dbe8b51-efb3-40cf-8c92-ca9b36ab8ad0",
          "length": 53,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0bb4726a-60a9-4a2b-8d1a-1a516660da1f"
        },
        "item": {
          "id": "c072df19-07c6-4121-b73f-2ec69cf409c5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c072df19-07c6-4121-b73f-2ec69cf409c5",
        "cursor": {
          "ref": "3dbe8b51-efb3-40cf-8c92-ca9b36ab8ad0",
          "length": 53,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0bb4726a-60a9-4a2b-8d1a-1a516660da1f"
        },
        "item": {
          "id": "c072df19-07c6-4121-b73f-2ec69cf409c5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "8d898a5b-159c-4e5e-b8fe-5fb426089df7",
        "cursor": {
          "ref": "15fdedcf-d0c1-4cfb-af7c-e4a0c1a546fb",
          "length": 53,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3df1d9a8-a23d-4d0d-aa57-52444eb93f32"
        },
        "item": {
          "id": "8d898a5b-159c-4e5e-b8fe-5fb426089df7",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "8d898a5b-159c-4e5e-b8fe-5fb426089df7",
        "cursor": {
          "ref": "15fdedcf-d0c1-4cfb-af7c-e4a0c1a546fb",
          "length": 53,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3df1d9a8-a23d-4d0d-aa57-52444eb93f32"
        },
        "item": {
          "id": "8d898a5b-159c-4e5e-b8fe-5fb426089df7",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "d983a300-6a29-4b8c-ae4e-d5576e9ee7f0",
        "cursor": {
          "ref": "7498e5e2-97bf-4017-b608-26dcda01da02",
          "length": 53,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44b15c19-981d-4df9-9c0b-3f5b38858fe7"
        },
        "item": {
          "id": "d983a300-6a29-4b8c-ae4e-d5576e9ee7f0",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d983a300-6a29-4b8c-ae4e-d5576e9ee7f0",
        "cursor": {
          "ref": "7498e5e2-97bf-4017-b608-26dcda01da02",
          "length": 53,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44b15c19-981d-4df9-9c0b-3f5b38858fe7"
        },
        "item": {
          "id": "d983a300-6a29-4b8c-ae4e-d5576e9ee7f0",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "dc1dbcb1-0bc1-4929-95ce-9d20372c9e18",
        "cursor": {
          "ref": "6d99cea9-ea4e-44df-af56-08825fd0c779",
          "length": 53,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "185188cd-c0c1-4b2a-90f8-d8712d8a1601"
        },
        "item": {
          "id": "dc1dbcb1-0bc1-4929-95ce-9d20372c9e18",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "dc1dbcb1-0bc1-4929-95ce-9d20372c9e18",
        "cursor": {
          "ref": "6d99cea9-ea4e-44df-af56-08825fd0c779",
          "length": 53,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "185188cd-c0c1-4b2a-90f8-d8712d8a1601"
        },
        "item": {
          "id": "dc1dbcb1-0bc1-4929-95ce-9d20372c9e18",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2a672f6c-2a2f-4f35-ac26-4a4e2105a9e5",
        "cursor": {
          "ref": "e9253a58-5496-4f45-9f49-74442b04948f",
          "length": 53,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "199b7c57-7353-4a71-97e6-2e94ed2cb720"
        },
        "item": {
          "id": "2a672f6c-2a2f-4f35-ac26-4a4e2105a9e5",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2a672f6c-2a2f-4f35-ac26-4a4e2105a9e5",
        "cursor": {
          "ref": "e9253a58-5496-4f45-9f49-74442b04948f",
          "length": 53,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "199b7c57-7353-4a71-97e6-2e94ed2cb720"
        },
        "item": {
          "id": "2a672f6c-2a2f-4f35-ac26-4a4e2105a9e5",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "3a124d80-66c7-4509-a9dd-0827d6402426",
        "cursor": {
          "ref": "179d762c-1265-44e3-bd76-1fdbe194f43d",
          "length": 53,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "026473b3-1b62-4536-a0e5-ca0fa2b7ef30"
        },
        "item": {
          "id": "3a124d80-66c7-4509-a9dd-0827d6402426",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "3a124d80-66c7-4509-a9dd-0827d6402426",
        "cursor": {
          "ref": "179d762c-1265-44e3-bd76-1fdbe194f43d",
          "length": 53,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "026473b3-1b62-4536-a0e5-ca0fa2b7ef30"
        },
        "item": {
          "id": "3a124d80-66c7-4509-a9dd-0827d6402426",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "7ceb5b23-ff1d-4498-8359-7e8c7719403d",
        "cursor": {
          "ref": "61dca7df-dce5-45da-9f1c-24527596f158",
          "length": 53,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4a9eb6a2-7276-452f-ad48-f2a2478f8fbe"
        },
        "item": {
          "id": "7ceb5b23-ff1d-4498-8359-7e8c7719403d",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "7ceb5b23-ff1d-4498-8359-7e8c7719403d",
        "cursor": {
          "ref": "61dca7df-dce5-45da-9f1c-24527596f158",
          "length": 53,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4a9eb6a2-7276-452f-ad48-f2a2478f8fbe"
        },
        "item": {
          "id": "7ceb5b23-ff1d-4498-8359-7e8c7719403d",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "c61fadc4-149b-493a-91d2-254338c59a8d",
        "cursor": {
          "ref": "24ea93b0-db97-48bc-9eb7-2f48d446be0a",
          "length": 53,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "55922621-b55a-4cbb-9c7a-5d7847723d09"
        },
        "item": {
          "id": "c61fadc4-149b-493a-91d2-254338c59a8d",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c61fadc4-149b-493a-91d2-254338c59a8d",
        "cursor": {
          "ref": "24ea93b0-db97-48bc-9eb7-2f48d446be0a",
          "length": 53,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "55922621-b55a-4cbb-9c7a-5d7847723d09"
        },
        "item": {
          "id": "c61fadc4-149b-493a-91d2-254338c59a8d",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "198250c5-c216-46f7-ac9d-8f12b0061d36",
        "cursor": {
          "ref": "663b272e-7c56-407e-9898-1e0778830ae7",
          "length": 53,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f0570aec-222c-4fc2-a803-aad446de0921"
        },
        "item": {
          "id": "198250c5-c216-46f7-ac9d-8f12b0061d36",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "198250c5-c216-46f7-ac9d-8f12b0061d36",
        "cursor": {
          "ref": "663b272e-7c56-407e-9898-1e0778830ae7",
          "length": 53,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f0570aec-222c-4fc2-a803-aad446de0921"
        },
        "item": {
          "id": "198250c5-c216-46f7-ac9d-8f12b0061d36",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "d594ecee-f196-44de-b9e4-e5da8ae3fbdc",
        "cursor": {
          "ref": "406dcba1-64bb-43f7-9f54-f1c274b00536",
          "length": 53,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "debfa09d-4801-499b-9d8f-9a3820d05a34"
        },
        "item": {
          "id": "d594ecee-f196-44de-b9e4-e5da8ae3fbdc",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "d594ecee-f196-44de-b9e4-e5da8ae3fbdc",
        "cursor": {
          "ref": "406dcba1-64bb-43f7-9f54-f1c274b00536",
          "length": 53,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "debfa09d-4801-499b-9d8f-9a3820d05a34"
        },
        "item": {
          "id": "d594ecee-f196-44de-b9e4-e5da8ae3fbdc",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "34ff2fa6-4679-45a3-99ac-8c33b9974acf",
        "cursor": {
          "ref": "1394da1a-8388-4d01-b271-66198520cc29",
          "length": 53,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d8beaabf-de88-4f4e-9d9a-486b07c5316a"
        },
        "item": {
          "id": "34ff2fa6-4679-45a3-99ac-8c33b9974acf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "34ff2fa6-4679-45a3-99ac-8c33b9974acf",
        "cursor": {
          "ref": "1394da1a-8388-4d01-b271-66198520cc29",
          "length": 53,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d8beaabf-de88-4f4e-9d9a-486b07c5316a"
        },
        "item": {
          "id": "34ff2fa6-4679-45a3-99ac-8c33b9974acf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5be40046-2fba-4c57-a21d-d4c807a66485",
        "cursor": {
          "ref": "e27e984c-4f6f-4d24-bbc2-5c6c141275aa",
          "length": 53,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3e088150-cb12-4cf4-9819-e17e686b92aa"
        },
        "item": {
          "id": "5be40046-2fba-4c57-a21d-d4c807a66485",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5be40046-2fba-4c57-a21d-d4c807a66485",
        "cursor": {
          "ref": "e27e984c-4f6f-4d24-bbc2-5c6c141275aa",
          "length": 53,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3e088150-cb12-4cf4-9819-e17e686b92aa"
        },
        "item": {
          "id": "5be40046-2fba-4c57-a21d-d4c807a66485",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "15aa375c-ebf7-48c7-b82a-3a4ac6d31c28",
        "cursor": {
          "ref": "89e6d8de-2560-4d53-865d-b2314dcac32e",
          "length": 53,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "178dca3f-663a-42f7-9f9a-f13eb6826c26"
        },
        "item": {
          "id": "15aa375c-ebf7-48c7-b82a-3a4ac6d31c28",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "15aa375c-ebf7-48c7-b82a-3a4ac6d31c28",
        "cursor": {
          "ref": "89e6d8de-2560-4d53-865d-b2314dcac32e",
          "length": 53,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "178dca3f-663a-42f7-9f9a-f13eb6826c26"
        },
        "item": {
          "id": "15aa375c-ebf7-48c7-b82a-3a4ac6d31c28",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "3ac2f28e-fa7c-4281-b5d5-c55800c7d756",
        "cursor": {
          "ref": "3d5b2fe4-00a9-4918-b2d8-41fb0cc9e4c1",
          "length": 53,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "63e6d9be-0af9-44cd-a5bc-690740839168"
        },
        "item": {
          "id": "3ac2f28e-fa7c-4281-b5d5-c55800c7d756",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3ac2f28e-fa7c-4281-b5d5-c55800c7d756",
        "cursor": {
          "ref": "3d5b2fe4-00a9-4918-b2d8-41fb0cc9e4c1",
          "length": 53,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "63e6d9be-0af9-44cd-a5bc-690740839168"
        },
        "item": {
          "id": "3ac2f28e-fa7c-4281-b5d5-c55800c7d756",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "c42df266-1a24-4eed-91da-ddd08df78f6f",
        "cursor": {
          "ref": "eb4d815b-7b93-4594-ad93-48fc90f36b52",
          "length": 53,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "53eadb01-f1bf-4fdd-8dfc-5ceb5139a67f"
        },
        "item": {
          "id": "c42df266-1a24-4eed-91da-ddd08df78f6f",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c42df266-1a24-4eed-91da-ddd08df78f6f",
        "cursor": {
          "ref": "eb4d815b-7b93-4594-ad93-48fc90f36b52",
          "length": 53,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "53eadb01-f1bf-4fdd-8dfc-5ceb5139a67f"
        },
        "item": {
          "id": "c42df266-1a24-4eed-91da-ddd08df78f6f",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f7e95e4f-90b4-467f-ae88-6b0f46e7ffac",
        "cursor": {
          "ref": "ab68e7bb-1f73-45fa-936e-fe080a2b5b56",
          "length": 53,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "144e6a1c-798c-4495-a768-2772119732d6"
        },
        "item": {
          "id": "f7e95e4f-90b4-467f-ae88-6b0f46e7ffac",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f7e95e4f-90b4-467f-ae88-6b0f46e7ffac",
        "cursor": {
          "ref": "ab68e7bb-1f73-45fa-936e-fe080a2b5b56",
          "length": 53,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "144e6a1c-798c-4495-a768-2772119732d6"
        },
        "item": {
          "id": "f7e95e4f-90b4-467f-ae88-6b0f46e7ffac",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7f996782-c7b7-441d-8dbc-355aac6aaa5e",
        "cursor": {
          "ref": "4fad8b33-a128-44ce-a314-b2588885d19f",
          "length": 53,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "16cfa9e2-394a-42c9-a9d7-fab8537c1c34"
        },
        "item": {
          "id": "7f996782-c7b7-441d-8dbc-355aac6aaa5e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "7f996782-c7b7-441d-8dbc-355aac6aaa5e",
        "cursor": {
          "ref": "4fad8b33-a128-44ce-a314-b2588885d19f",
          "length": 53,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "16cfa9e2-394a-42c9-a9d7-fab8537c1c34"
        },
        "item": {
          "id": "7f996782-c7b7-441d-8dbc-355aac6aaa5e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "b1832cf1-5d3b-4fe6-bdf7-af8cc3f392f0",
        "cursor": {
          "ref": "5781f9bd-8781-4c56-ad1f-575d2e3e9ff1",
          "length": 53,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a0e73968-e3e1-403a-b28e-ff13c0cbe2e3"
        },
        "item": {
          "id": "b1832cf1-5d3b-4fe6-bdf7-af8cc3f392f0",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "b1832cf1-5d3b-4fe6-bdf7-af8cc3f392f0",
        "cursor": {
          "ref": "5781f9bd-8781-4c56-ad1f-575d2e3e9ff1",
          "length": 53,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a0e73968-e3e1-403a-b28e-ff13c0cbe2e3"
        },
        "item": {
          "id": "b1832cf1-5d3b-4fe6-bdf7-af8cc3f392f0",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "2b97fdd0-40e6-43f4-9090-65a1fb00c7b3",
        "cursor": {
          "ref": "4e731f84-6b59-486a-b7a9-017fdf46fcb6",
          "length": 53,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6fffc4a8-d38e-4ae8-a4c1-5f0857bf367a"
        },
        "item": {
          "id": "2b97fdd0-40e6-43f4-9090-65a1fb00c7b3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "2b97fdd0-40e6-43f4-9090-65a1fb00c7b3",
        "cursor": {
          "ref": "4e731f84-6b59-486a-b7a9-017fdf46fcb6",
          "length": 53,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6fffc4a8-d38e-4ae8-a4c1-5f0857bf367a"
        },
        "item": {
          "id": "2b97fdd0-40e6-43f4-9090-65a1fb00c7b3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "d37fcbc3-01c2-42e0-a3a2-7b3da85eb538",
        "cursor": {
          "ref": "c17fd771-c2e8-4f10-b794-3567f46618fa",
          "length": 53,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "37f72371-f986-4fbd-ba3f-3505415a5b8e"
        },
        "item": {
          "id": "d37fcbc3-01c2-42e0-a3a2-7b3da85eb538",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "d37fcbc3-01c2-42e0-a3a2-7b3da85eb538",
        "cursor": {
          "ref": "c17fd771-c2e8-4f10-b794-3567f46618fa",
          "length": 53,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "37f72371-f986-4fbd-ba3f-3505415a5b8e"
        },
        "item": {
          "id": "d37fcbc3-01c2-42e0-a3a2-7b3da85eb538",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "8b5d92a7-6957-4acf-b01d-efd267169886",
        "cursor": {
          "ref": "a87d76cf-55ff-4fab-8842-66cc0766544a",
          "length": 53,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ff5bcaf5-76f7-4395-8c30-a22a34d539e3"
        },
        "item": {
          "id": "8b5d92a7-6957-4acf-b01d-efd267169886",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "8b5d92a7-6957-4acf-b01d-efd267169886",
        "cursor": {
          "ref": "a87d76cf-55ff-4fab-8842-66cc0766544a",
          "length": 53,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ff5bcaf5-76f7-4395-8c30-a22a34d539e3"
        },
        "item": {
          "id": "8b5d92a7-6957-4acf-b01d-efd267169886",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "9eed59d7-97c8-41d3-a5db-3f1fd5f9e8a9",
        "cursor": {
          "ref": "eea1fbd1-3944-4586-b57a-69dea788d527",
          "length": 53,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f8a0bd76-90d4-48b4-9708-d4ce4c44ca37"
        },
        "item": {
          "id": "9eed59d7-97c8-41d3-a5db-3f1fd5f9e8a9",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "9eed59d7-97c8-41d3-a5db-3f1fd5f9e8a9",
        "cursor": {
          "ref": "eea1fbd1-3944-4586-b57a-69dea788d527",
          "length": 53,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f8a0bd76-90d4-48b4-9708-d4ce4c44ca37"
        },
        "item": {
          "id": "9eed59d7-97c8-41d3-a5db-3f1fd5f9e8a9",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "38992aaf-a50c-4c3a-90ef-b6f1b4f41f31",
        "cursor": {
          "ref": "86ee4018-8dcc-41bb-8efb-e70522fbfe73",
          "length": 53,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b8e7b325-bbd6-42fb-9cfc-d07380f8cc6f"
        },
        "item": {
          "id": "38992aaf-a50c-4c3a-90ef-b6f1b4f41f31",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "38992aaf-a50c-4c3a-90ef-b6f1b4f41f31",
        "cursor": {
          "ref": "86ee4018-8dcc-41bb-8efb-e70522fbfe73",
          "length": 53,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b8e7b325-bbd6-42fb-9cfc-d07380f8cc6f"
        },
        "item": {
          "id": "38992aaf-a50c-4c3a-90ef-b6f1b4f41f31",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "7e3b8a5f-5a71-4624-86d1-0a78c25dbfaf",
        "cursor": {
          "ref": "ce284886-5394-46d7-a67e-44b2412fd2a6",
          "length": 53,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ce91e172-a653-417f-b15b-69fae894d8e4"
        },
        "item": {
          "id": "7e3b8a5f-5a71-4624-86d1-0a78c25dbfaf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7e3b8a5f-5a71-4624-86d1-0a78c25dbfaf",
        "cursor": {
          "ref": "ce284886-5394-46d7-a67e-44b2412fd2a6",
          "length": 53,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ce91e172-a653-417f-b15b-69fae894d8e4"
        },
        "item": {
          "id": "7e3b8a5f-5a71-4624-86d1-0a78c25dbfaf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "77c262fb-8f08-464d-a24c-f07e7b49c9e6",
        "cursor": {
          "ref": "516568ff-3591-41ac-8096-eb3a3b9d6445",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5b0acd5d-4e68-4363-bdcf-d1bef1e60430"
        },
        "item": {
          "id": "77c262fb-8f08-464d-a24c-f07e7b49c9e6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "77c262fb-8f08-464d-a24c-f07e7b49c9e6",
        "cursor": {
          "ref": "516568ff-3591-41ac-8096-eb3a3b9d6445",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5b0acd5d-4e68-4363-bdcf-d1bef1e60430"
        },
        "item": {
          "id": "77c262fb-8f08-464d-a24c-f07e7b49c9e6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "77c262fb-8f08-464d-a24c-f07e7b49c9e6",
        "cursor": {
          "ref": "516568ff-3591-41ac-8096-eb3a3b9d6445",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5b0acd5d-4e68-4363-bdcf-d1bef1e60430"
        },
        "item": {
          "id": "77c262fb-8f08-464d-a24c-f07e7b49c9e6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "ba1c6625-efac-47b6-b610-dcfdf04b0809",
        "cursor": {
          "ref": "793c0af4-a05f-4a77-9e41-9fd96bde29e3",
          "length": 53,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4233cd4e-583f-4245-857a-cb4124817248"
        },
        "item": {
          "id": "ba1c6625-efac-47b6-b610-dcfdf04b0809",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "ba1c6625-efac-47b6-b610-dcfdf04b0809",
        "cursor": {
          "ref": "793c0af4-a05f-4a77-9e41-9fd96bde29e3",
          "length": 53,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4233cd4e-583f-4245-857a-cb4124817248"
        },
        "item": {
          "id": "ba1c6625-efac-47b6-b610-dcfdf04b0809",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "07583e3d-043b-42e5-a501-f921558a79c2",
        "cursor": {
          "ref": "0f3786d5-f574-43b1-947d-a2fea76b6081",
          "length": 53,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fc390a4c-d950-4627-8a55-c9f8abc3014e"
        },
        "item": {
          "id": "07583e3d-043b-42e5-a501-f921558a79c2",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "07583e3d-043b-42e5-a501-f921558a79c2",
        "cursor": {
          "ref": "0f3786d5-f574-43b1-947d-a2fea76b6081",
          "length": 53,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fc390a4c-d950-4627-8a55-c9f8abc3014e"
        },
        "item": {
          "id": "07583e3d-043b-42e5-a501-f921558a79c2",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "0ac41d44-bd63-402e-a43f-e229b2f939fe",
        "cursor": {
          "ref": "a385b977-1810-4c24-a3fc-711fee387188",
          "length": 53,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eb3fd2f5-cff6-4b51-92a1-0d85c72637cf"
        },
        "item": {
          "id": "0ac41d44-bd63-402e-a43f-e229b2f939fe",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "0ac41d44-bd63-402e-a43f-e229b2f939fe",
        "cursor": {
          "ref": "a385b977-1810-4c24-a3fc-711fee387188",
          "length": 53,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eb3fd2f5-cff6-4b51-92a1-0d85c72637cf"
        },
        "item": {
          "id": "0ac41d44-bd63-402e-a43f-e229b2f939fe",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "7b105eeb-514f-46d1-8e25-dc02728b943f",
        "cursor": {
          "ref": "839e2476-4dea-4e50-962d-886d0bc2bbc7",
          "length": 53,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2db966f2-82c0-4030-bb0a-006109a8b522"
        },
        "item": {
          "id": "7b105eeb-514f-46d1-8e25-dc02728b943f",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "7b105eeb-514f-46d1-8e25-dc02728b943f",
        "cursor": {
          "ref": "839e2476-4dea-4e50-962d-886d0bc2bbc7",
          "length": 53,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2db966f2-82c0-4030-bb0a-006109a8b522"
        },
        "item": {
          "id": "7b105eeb-514f-46d1-8e25-dc02728b943f",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "2e7da9e2-cd49-4d95-b5db-a75776f9f5ae",
        "cursor": {
          "ref": "90d59ae0-5a17-4ada-be79-9cf824d877e4",
          "length": 53,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a951b925-ff73-4555-9365-ccd4f7cae487"
        },
        "item": {
          "id": "2e7da9e2-cd49-4d95-b5db-a75776f9f5ae",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2e7da9e2-cd49-4d95-b5db-a75776f9f5ae",
        "cursor": {
          "ref": "90d59ae0-5a17-4ada-be79-9cf824d877e4",
          "length": 53,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a951b925-ff73-4555-9365-ccd4f7cae487"
        },
        "item": {
          "id": "2e7da9e2-cd49-4d95-b5db-a75776f9f5ae",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c7596ed1-1491-416c-bb69-d7a06cb0bea1",
        "cursor": {
          "ref": "dc1fc7dc-db70-4ed8-be66-6ea57f6230cb",
          "length": 53,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "20c15430-809e-4c87-8bbb-5de4cb229fdc"
        },
        "item": {
          "id": "c7596ed1-1491-416c-bb69-d7a06cb0bea1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c7596ed1-1491-416c-bb69-d7a06cb0bea1",
        "cursor": {
          "ref": "dc1fc7dc-db70-4ed8-be66-6ea57f6230cb",
          "length": 53,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "20c15430-809e-4c87-8bbb-5de4cb229fdc"
        },
        "item": {
          "id": "c7596ed1-1491-416c-bb69-d7a06cb0bea1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f3b9abd3-322d-4b06-93a6-768b87df7101",
        "cursor": {
          "ref": "9a68b1a6-1e0b-42a3-b26b-9c0b3a650ab8",
          "length": 53,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "70b19ef6-e729-49a5-8beb-5f675762ef20"
        },
        "item": {
          "id": "f3b9abd3-322d-4b06-93a6-768b87df7101",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f3b9abd3-322d-4b06-93a6-768b87df7101",
        "cursor": {
          "ref": "9a68b1a6-1e0b-42a3-b26b-9c0b3a650ab8",
          "length": 53,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "70b19ef6-e729-49a5-8beb-5f675762ef20"
        },
        "item": {
          "id": "f3b9abd3-322d-4b06-93a6-768b87df7101",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f8ebe512-e808-4345-b587-df7ac27a3896",
        "cursor": {
          "ref": "b51090c9-7dd0-4c74-be64-7a6b107af478",
          "length": 53,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ba888c84-4213-43d4-859a-acccd795f76a"
        },
        "item": {
          "id": "f8ebe512-e808-4345-b587-df7ac27a3896",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "f8ebe512-e808-4345-b587-df7ac27a3896",
        "cursor": {
          "ref": "b51090c9-7dd0-4c74-be64-7a6b107af478",
          "length": 53,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ba888c84-4213-43d4-859a-acccd795f76a"
        },
        "item": {
          "id": "f8ebe512-e808-4345-b587-df7ac27a3896",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "e3db6259-0865-409f-9098-cd85031907fa",
        "cursor": {
          "ref": "88e0a80a-3f0c-430b-a009-6fc9cff01bfe",
          "length": 53,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bb93071f-0ab7-42cd-948c-410840cc33ce"
        },
        "item": {
          "id": "e3db6259-0865-409f-9098-cd85031907fa",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e3db6259-0865-409f-9098-cd85031907fa",
        "cursor": {
          "ref": "88e0a80a-3f0c-430b-a009-6fc9cff01bfe",
          "length": 53,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bb93071f-0ab7-42cd-948c-410840cc33ce"
        },
        "item": {
          "id": "e3db6259-0865-409f-9098-cd85031907fa",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b97516ed-eb1f-4427-9ea7-61747cd31044",
        "cursor": {
          "ref": "04fc5a61-c711-44ac-953a-edc6b7760f70",
          "length": 53,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dbe5f016-aa94-4753-b32f-66f302f4e7c4"
        },
        "item": {
          "id": "b97516ed-eb1f-4427-9ea7-61747cd31044",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b97516ed-eb1f-4427-9ea7-61747cd31044",
        "cursor": {
          "ref": "04fc5a61-c711-44ac-953a-edc6b7760f70",
          "length": 53,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dbe5f016-aa94-4753-b32f-66f302f4e7c4"
        },
        "item": {
          "id": "b97516ed-eb1f-4427-9ea7-61747cd31044",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "248bde56-9200-4964-925f-269b6ca47df5",
        "cursor": {
          "ref": "399826d8-7b95-48c7-b8d0-552a259f9a74",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "186bdfd4-3bc3-4c46-b78a-6e25f9d21243"
        },
        "item": {
          "id": "248bde56-9200-4964-925f-269b6ca47df5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "248bde56-9200-4964-925f-269b6ca47df5",
        "cursor": {
          "ref": "399826d8-7b95-48c7-b8d0-552a259f9a74",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "186bdfd4-3bc3-4c46-b78a-6e25f9d21243"
        },
        "item": {
          "id": "248bde56-9200-4964-925f-269b6ca47df5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "248bde56-9200-4964-925f-269b6ca47df5",
        "cursor": {
          "ref": "399826d8-7b95-48c7-b8d0-552a259f9a74",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "186bdfd4-3bc3-4c46-b78a-6e25f9d21243"
        },
        "item": {
          "id": "248bde56-9200-4964-925f-269b6ca47df5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b9db0742-c9b1-4446-8321-2afb0e4284e0",
        "cursor": {
          "ref": "4e5b295a-a8f1-40ed-8eb0-c187199bac75",
          "length": 53,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4841434c-238e-4b9a-84b0-9f47de2d2e5b"
        },
        "item": {
          "id": "b9db0742-c9b1-4446-8321-2afb0e4284e0",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b9db0742-c9b1-4446-8321-2afb0e4284e0",
        "cursor": {
          "ref": "4e5b295a-a8f1-40ed-8eb0-c187199bac75",
          "length": 53,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4841434c-238e-4b9a-84b0-9f47de2d2e5b"
        },
        "item": {
          "id": "b9db0742-c9b1-4446-8321-2afb0e4284e0",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1b1695d1-27c4-4916-a2ca-ec312e07cab0",
        "cursor": {
          "ref": "efc2047e-878d-4dbd-b39f-7b60d74690c5",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fd46b4fd-5df4-4e10-8754-d3eca27ef656"
        },
        "item": {
          "id": "1b1695d1-27c4-4916-a2ca-ec312e07cab0",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1b1695d1-27c4-4916-a2ca-ec312e07cab0",
        "cursor": {
          "ref": "efc2047e-878d-4dbd-b39f-7b60d74690c5",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fd46b4fd-5df4-4e10-8754-d3eca27ef656"
        },
        "item": {
          "id": "1b1695d1-27c4-4916-a2ca-ec312e07cab0",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1b1695d1-27c4-4916-a2ca-ec312e07cab0",
        "cursor": {
          "ref": "efc2047e-878d-4dbd-b39f-7b60d74690c5",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fd46b4fd-5df4-4e10-8754-d3eca27ef656"
        },
        "item": {
          "id": "1b1695d1-27c4-4916-a2ca-ec312e07cab0",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "acf19094-333c-48a6-ad8c-6ad3d1047414",
        "cursor": {
          "ref": "437828fb-d120-4cae-ba52-83b8010679ed",
          "length": 53,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "53b0f711-5377-413d-a070-ed5eb0fdb494"
        },
        "item": {
          "id": "acf19094-333c-48a6-ad8c-6ad3d1047414",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "acf19094-333c-48a6-ad8c-6ad3d1047414",
        "cursor": {
          "ref": "437828fb-d120-4cae-ba52-83b8010679ed",
          "length": 53,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "53b0f711-5377-413d-a070-ed5eb0fdb494"
        },
        "item": {
          "id": "acf19094-333c-48a6-ad8c-6ad3d1047414",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "656d3bab-5e7c-4974-b6bb-4605341bd90a",
        "cursor": {
          "ref": "6134158d-138f-4367-93aa-fe13f85d1732",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "22b94b11-6600-4f60-bd45-b2796aaf3017"
        },
        "item": {
          "id": "656d3bab-5e7c-4974-b6bb-4605341bd90a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "656d3bab-5e7c-4974-b6bb-4605341bd90a",
        "cursor": {
          "ref": "6134158d-138f-4367-93aa-fe13f85d1732",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "22b94b11-6600-4f60-bd45-b2796aaf3017"
        },
        "item": {
          "id": "656d3bab-5e7c-4974-b6bb-4605341bd90a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "656d3bab-5e7c-4974-b6bb-4605341bd90a",
        "cursor": {
          "ref": "6134158d-138f-4367-93aa-fe13f85d1732",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "22b94b11-6600-4f60-bd45-b2796aaf3017"
        },
        "item": {
          "id": "656d3bab-5e7c-4974-b6bb-4605341bd90a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2317ee3e-24f1-4893-b264-241fb4402898",
        "cursor": {
          "ref": "68f6bcb2-c482-4a83-a2d2-2404b8762fd4",
          "length": 53,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4b65490e-95e6-4aed-919a-86e3c3d1e777"
        },
        "item": {
          "id": "2317ee3e-24f1-4893-b264-241fb4402898",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2317ee3e-24f1-4893-b264-241fb4402898",
        "cursor": {
          "ref": "68f6bcb2-c482-4a83-a2d2-2404b8762fd4",
          "length": 53,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4b65490e-95e6-4aed-919a-86e3c3d1e777"
        },
        "item": {
          "id": "2317ee3e-24f1-4893-b264-241fb4402898",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "aa0c1efc-f017-4da9-9bfd-ebc5c449bc8f",
        "cursor": {
          "ref": "ded8ace1-45d0-4532-9e01-67b11fe2bd8c",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b65df5af-eb0d-464e-a75d-3d5ed8781e10"
        },
        "item": {
          "id": "aa0c1efc-f017-4da9-9bfd-ebc5c449bc8f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "aa0c1efc-f017-4da9-9bfd-ebc5c449bc8f",
        "cursor": {
          "ref": "ded8ace1-45d0-4532-9e01-67b11fe2bd8c",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b65df5af-eb0d-464e-a75d-3d5ed8781e10"
        },
        "item": {
          "id": "aa0c1efc-f017-4da9-9bfd-ebc5c449bc8f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "aa0c1efc-f017-4da9-9bfd-ebc5c449bc8f",
        "cursor": {
          "ref": "ded8ace1-45d0-4532-9e01-67b11fe2bd8c",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b65df5af-eb0d-464e-a75d-3d5ed8781e10"
        },
        "item": {
          "id": "aa0c1efc-f017-4da9-9bfd-ebc5c449bc8f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "94dc1401-5c4f-4f35-9fee-0155ba3c15ce",
        "cursor": {
          "ref": "29edbd0b-cb43-4ae4-bcee-87ebae596162",
          "length": 53,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f8bac7ae-b95f-45c1-a6bc-fd035af25208"
        },
        "item": {
          "id": "94dc1401-5c4f-4f35-9fee-0155ba3c15ce",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "94dc1401-5c4f-4f35-9fee-0155ba3c15ce",
        "cursor": {
          "ref": "29edbd0b-cb43-4ae4-bcee-87ebae596162",
          "length": 53,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f8bac7ae-b95f-45c1-a6bc-fd035af25208"
        },
        "item": {
          "id": "94dc1401-5c4f-4f35-9fee-0155ba3c15ce",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8b268d5e-cbf7-4e93-8704-41db60974216",
        "cursor": {
          "ref": "300decaf-c651-47a0-8506-5eea9c2ae3af",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2ff4b6aa-6785-4e85-89d1-489018bc18a3"
        },
        "item": {
          "id": "8b268d5e-cbf7-4e93-8704-41db60974216",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "8b268d5e-cbf7-4e93-8704-41db60974216",
        "cursor": {
          "ref": "300decaf-c651-47a0-8506-5eea9c2ae3af",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2ff4b6aa-6785-4e85-89d1-489018bc18a3"
        },
        "item": {
          "id": "8b268d5e-cbf7-4e93-8704-41db60974216",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "8b268d5e-cbf7-4e93-8704-41db60974216",
        "cursor": {
          "ref": "300decaf-c651-47a0-8506-5eea9c2ae3af",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2ff4b6aa-6785-4e85-89d1-489018bc18a3"
        },
        "item": {
          "id": "8b268d5e-cbf7-4e93-8704-41db60974216",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      }
    ]
  }
}