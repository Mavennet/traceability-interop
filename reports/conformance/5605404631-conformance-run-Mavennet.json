{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "748dd4ae-6b87-46c8-9c11-56f300eeb811",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c9f594c4-bd96-4b6b-8660-28d34dca76f1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b5031fc9-8757-4918-8f08-3e1bbd0f90b7",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50848eb9-3b0e-4925-a906-614cbc868437",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00cbe204-c8fc-4e11-9b74-5b3a6ce88824"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "b5478c8a-73b9-457a-878e-e45c7cdffced",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "11e49add-e69f-42e4-807d-62a5a78b8777",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5da2480d-6a46-401d-8061-df8ff8b5a861",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "411d1b0b-4056-4c25-a2f6-eb9580289328",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55d4d23-86b6-4778-a27f-8e34f59b90a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5aec9c43-79fd-4794-9557-57849502c7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e1e01c-c235-41e6-ae22-afebae44be24",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1726a35-92af-4e58-ac52-d965041edb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88d72658-d9ca-476f-a39b-03d0a4009c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248aa31c-a890-4f4f-8ae8-a98bb274247a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed87dd2c-9785-4ca6-8b2c-1ca40274b0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d1877f6-eff9-44d2-aeee-dbf97f072d4e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c4f1664-0bcd-4571-9cb3-ca1790c8033b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b6d2fcc-55dd-4ec4-90ac-acc76b7a3b54",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb90b9bf-9737-497a-88cb-1cf20aed9b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b561c806-5147-41fb-ba44-7ce80247de42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9c5bec-2b8d-4676-9562-e2bb4ce999cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca635d32-417c-4c03-89b0-bd6fe40eeaad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f047dca7-5085-45cb-8105-f143e8ff5628",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be83891c-43e9-4b29-b0c0-b4f19a51d14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b3c5537-8936-4454-837f-5c01da154403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01199a1-97d5-449d-bd19-bcebb9dca9f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "02ffd988-9d9e-46eb-9026-9cbc40420c7f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8bd465aa-ca3e-450d-bbc7-e01045336f3b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f3fd9d08-a5c3-4ccb-a905-7ed42f04c1c9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "671bb732-0c3e-49d3-9f56-24400b176237",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3b206466-6c30-493b-b0b9-899bc279004e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2b79566-2f88-4e5f-9430-cacb5101bcb2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5ccacbec-b937-4f58-894b-2361e00dc470"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c07f579-afe7-4eb9-8f39-d495009a57d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f469321d-8750-4f24-91dc-9063db1e6fbb"
            }
          }
        ]
      },
      {
        "id": "dfb7b558-2fa9-4f4b-a114-5b5bfaa6c433",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "09c3a18c-b04f-45eb-b19b-8d5b5ce12333",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8646b8c-d6fd-4da2-8aec-0b44413e57e6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "880cc064-a52f-44ff-bb90-9ce9dca75b18",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0919bf1d-64b1-4093-bb94-2c1902d326e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615c1965-204a-4e09-94fe-c7e68e06f870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699bfc54-c3be-418f-9b83-226277509e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dffcc7ad-e2de-4c57-bbb3-aa340ab4390e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb025241-2f91-48b9-bda2-3af1aad89122",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fa2c83-0dff-4f06-b823-750164d1ff9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a33952-27b6-466b-aafb-003629bb08ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc986b6b-25a4-4dd0-b9b0-0eb014f4b4e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dec92f86-1016-45a4-9181-28444cf4e7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1fefd4-0af9-4882-806f-147bdd92ad94",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0947dd6-83dd-4532-a0c2-8633524aeb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659b39aa-449f-4e71-a72d-1c4f766666a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc4e23a-16ef-4c4e-a21e-71f8e1651c63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fb6e730-6bd1-40fb-a063-93ec44b72f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb6d0eb-5c80-40a1-933f-5e5eaca955b8",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989e9609-4a8e-465a-8861-53561508d7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb60aa2-3134-42f2-ab3a-2689b87eaf78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e877abd0-1bc2-4e45-9306-0870bf6378b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1fe3a54-ad23-44e2-adbd-984ceec8be0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208285aa-f05a-4cbd-b674-1b93fa93a355",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524029e2-3087-45a5-a6e5-b7b2191ccee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ace813e-9336-4cfa-b323-5697a12a832c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e4ee92-0a09-4fc0-8f54-b89bf1befa41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02ac1cc7-6c21-4184-8522-d5c273e97aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c25081d-5482-4575-91d1-a8860bbf4549",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2936a290-685d-45ed-9c3f-9f6dcd98ba67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb9f373-2178-43e4-a00c-081827d73c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ee01b1-308a-4284-bbfa-2b770eece430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7c80dff-3265-494f-bfdf-b1a69b50a5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030a87a1-dc90-40ed-85fd-5fa07409cac8",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087194c6-2da5-4993-82a3-08e79b6e12bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9cb65f-8bab-4cbc-a28c-c9f480a9ecd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b03b5dc-8ac4-4ca5-a343-4adc39f0690e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df754fe-8690-41d0-ac28-3062e3f67678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d85af9a-40e0-4af9-b4ae-b3a448d30821",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ba3dba-2dab-42f3-afbb-63772018a257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891a7f76-7883-44d2-b93d-16e4b18a42d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a8864e-ab3e-4bdd-9136-427cdf03d4dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6c74f15-891b-4296-ba92-da714eb02513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958ded3b-8fc4-4d73-99fb-4032a466d5c4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3a05d6-0da6-4a8b-b191-18c02c23650d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "145fcf5a-cb46-432d-bd00-d4538b87e237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8c7342-bbfa-4b44-bf10-b63e43d3e5ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "808e3fdb-673f-4448-b0d7-e44d29761035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5a150e-3fd1-4ff0-8b78-75798df3f0c0",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81876553-9a9f-4d46-bb60-4bab943296a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ffccbe9-ba60-4ce3-a4c5-7f2ce0a782f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5f8b7b-8050-4690-8e06-102f41992816",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e203e66d-fda7-43a3-8eea-d89597432d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bc9528-d2d2-427a-bcdf-b09974ddea36",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136d0eef-c2c6-4ea1-9a4a-735c8ae18069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca27d03-0fd1-41d8-876a-b03417f9581a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7354d8ce-af98-47f3-b464-83b30270bed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8a9c3a06-87bd-40b4-8a81-99ba285a52a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebe6dc9-1f9c-42a2-adbf-aa8b101aff3e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43b4fa7-5897-4046-b483-8b4522095973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd42069-580d-4a30-9a3f-b54bc343d05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ce7e44-79fd-4417-ac7a-421b4769fd88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a23a774c-88aa-44f2-b6fa-4204ef30600f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbec9529-2044-4b4c-9a8f-99105ed8e73f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac54ba9-8b78-43bc-9d80-17f28a3ff465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b33a67-ed1a-4abc-9099-84a745221836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8739f30-aefd-47db-9d69-dc3d4c44c52a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f36e6873-5126-4306-bc9b-6e06e2257eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84999871-efa8-4956-90db-f8a26f066dc7",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4bc09d-e232-4fc1-9f71-0d6496dafe0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cc8a51-ca40-4da7-8e16-f0d9eaca558e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e0d5f2-ab2c-462e-b0d5-9288e4ca2616",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed082970-0156-4ee1-b979-e22e4f603029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc2a327-cb36-477e-b544-31a84fc69588",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a17c428-2a6e-4870-9977-3778a7f6ec99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706a498f-8494-4d3d-af2c-41578601de31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c9da90-7d8a-4d68-8043-770abca0caac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ea108185-d287-4fde-9bcf-9bcce22b9359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3e8f86-b1af-4099-89c2-5d0c59659a3f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3182511f-0dff-4450-9e01-33a3aff082ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6be89c-fd00-4b1c-baaf-b8d923198490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96013c8a-8534-438e-81ff-148f6bb3c033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "aaeae942-9344-4326-9dec-58eef48a576f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5a955b-f8a9-4c98-b9f2-b151737366f3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4076070e-ed8e-4e92-9c2c-db66ef7fdf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba983a6-d462-486f-b3ea-db05eda27cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0abdb9-b7ac-4a0b-a19e-940de8f47db6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eedd9c1-1db0-4192-bc70-017e7980a173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0930fed0-4076-45d1-bfd9-1aa78778af99",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2133a09-3d69-481a-a706-24f37da624b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9144d9e-7a53-4854-9080-2beb9a7c1472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00937c61-ad9f-465b-94a1-f17db9838d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf262aa6-c9ff-4cab-a6e0-ae6c2a61cb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c406d6-b668-42aa-ac87-08c4e1da9796",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05813ee4-6ae3-4fa5-b1d4-9a6267888178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3963cfec-5571-4768-b329-5e740fb831a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50000bae-c03a-410e-a02b-28d7fc0a16a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "703eaaae-4e5b-40c7-9e50-0f1c933551bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e820f5e-e857-4e40-90e6-794a41c3afdf",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd5b375-781e-40eb-bec8-16ee6451fac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca435b7-7e1c-4bf6-90ed-547469a775e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a9cdc3-fc62-48a8-a655-b819752c005e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d8fc4c0-4e12-4643-8e0e-bd860de7eefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21331984-c6fa-4716-9380-8044fc2e140a",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e1965d-e215-4729-b127-3a540bb15056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafe26e8-127c-461e-a11e-81ce66efc827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16a049d-67d7-4c2b-96c4-5beff9e83ded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ac99998-5023-485e-9bdb-8e6c3844fb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f692a7a1-2eac-4d8d-a87a-f87a70704760",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ffcaae-4e4b-4d5e-8242-41dca1d502d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52edc0af-d1d6-492f-b0d7-8d0e2c38a61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce714ec-e9f7-45fd-b255-04e466c446d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fcd7070-d326-40f4-a7b4-e15013a7c28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73388bb1-b08e-431d-a358-c69d35511929",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a7cc53-985f-4b37-ad58-66a51aac437a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b778bc-26c6-406c-8cf4-8acf87661465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4409e7e4-585b-4ddc-8d9f-fbca62600721",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7c1df43-73fd-4fef-8b61-5b2041b4f469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35014c79-2336-4966-9a9b-480131563f0d",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbf06a6-01fd-492b-9060-acbcdff50672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0707d5d1-1ced-4511-9e2f-f1c0f55bd2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5273514f-4aeb-4980-bb26-dce17a3f3632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1afad142-d45e-4895-9b73-084180fa58cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddab453-31ae-4997-ace9-21b4aea39d20",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef56164-4015-4ada-b04e-020144c944a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c99c7823-0261-4076-9ba3-3432f75600b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c478d3e1-a35e-4883-8ae9-981c4a3c4eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40e93d9b-dc22-433d-b556-d4775595c6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd17a50-3aca-47f1-b88e-755218b16d47",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6535768d-07fe-4da2-a4ad-dc77953031c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3528f508-24f0-428d-ac0f-09eacea8574b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebabc765-e1e8-4d18-a618-87cc6a870e71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e0239f5-c3d0-41ea-bdf4-572e63f624af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3166ab43-4112-41e6-893b-e1458aa4973e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3308e750-f0aa-4d46-a659-63a2088879c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb995aa-0221-49e8-9771-9ae33cd97f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f689e3-ff5e-4710-a9b8-afe6760c95a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77048769-4a91-4896-9573-36651dc658df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f3f8d9-cb94-4380-a4e2-ab53e2df4bc1",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228db255-2d0f-407e-afa0-ee4146427f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1743b897-46e1-4c33-9f09-52799780d4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4bf20c-619e-4d07-83ed-fc277e7f0131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02b8aa42-a257-4f4b-ac1f-3decc2f6b8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e69108-d1c1-4df4-b7ae-39a8bd4d4015",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0679568-e93f-41ca-a989-09b67b2eb31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e532f292-a6be-4a1b-bc1a-8dc3fd182f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa85ad8-5ff3-43ee-9233-ff23a45e193e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01820c3e-4f5a-4698-994b-70de66039e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8377efd-9afc-4f86-aaf9-99e210c6a8b8",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429bc36e-eaee-41ac-b09c-79d909fa46bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc49b329-5860-42f9-baca-6d90d3cf0930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded22edd-10b2-4290-985c-52e34df5a8b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1c6dac4-c7df-4be3-811a-4e279e5a5456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff0ee6b-b8cf-464d-8d16-88817729a413",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5cbabd-c8e2-440e-bd00-59c46c6ec9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3b6ea73a-5ba4-42fe-97ab-70efc5e7ef19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e8897c-6498-4c1c-962e-586b5b7b90f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19084877-f94f-40f4-8c76-fdb00b9c00ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b38c740-c723-4027-858b-dc4b549dd273",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e7e375a-b43b-42f3-92d8-b1ac4afe6fa5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847357d6-c6c8-4f2e-b1dd-7fe3dd8e3139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab9dc9b3-5077-457b-b242-238393eae19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76c5e7e-e05f-4d48-a941-63ac69168fd2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1904b168-bd02-4ef4-9a1c-0d87fe42b9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3017b067-ed67-4ba6-a996-1b61f08a5d11",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249a627a-a093-4ac6-bfc7-b97aa63247d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d57e9eaf-82bf-4a71-a7ea-97ede90717ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b3595f-49c4-4127-97cb-aa50cd3d49ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "76e89ce7-820c-4a61-ac6b-48a1cb784faa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f19e03f1-89bd-49f3-b4a9-4d85dfbef048",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a554abf8-8148-4e8c-99ee-8a80436b870a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "671b59ed-6a9c-477e-a945-2048c4de6099",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5d84514-d472-4e88-a944-b377f352aa6e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc3340af-53e4-48f2-817c-2f405262f12c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "782ffa1d-7500-46ce-b938-86c548649ead"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e034e47-8e82-464f-8189-36b613a029b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8262952-cbae-4564-889b-4e76598e9e11"
                }
              }
            ]
          },
          {
            "id": "4d246c79-36a4-476b-9258-4778429a27e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1854c2d2-977c-42f0-ac7c-8e18c4a7fab3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "184a5dbf-fca8-48cd-9b95-f665d88735a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd8682b1-bd4f-46c4-9850-c73616a8869c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f86a5d55-afbe-4d5f-93ac-67e63a39d629",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "60a440bf-dd23-4f55-88ba-7ef3bfec6ed1"
                    }
                  }
                ]
              },
              {
                "id": "07dced0f-632f-4fa0-9fde-b8e98f459548",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c3be1b1-36f2-4456-8caa-2097c3c4d23e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19d3b7d0-68ca-4d77-966f-254db0efe4db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d4a21da-7253-450b-b648-ac5c3f7eab06",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9d0cb95d-4ce1-4320-a86b-93703bacfaa7"
                    }
                  }
                ]
              },
              {
                "id": "1aebff46-7ae7-490a-8924-2e0787d1aca5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5cc3984-40bc-4c70-a2e6-f4c7ff5c15ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e340e88-693e-40e6-bed9-c72aacb4df05"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e40d7fcb-65b0-40c0-b734-32b66b60652f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7c11412d-e1e4-4b4b-977b-218647c1fad7"
                    }
                  }
                ]
              },
              {
                "id": "c63f0dfc-fade-4510-a53f-54bca6631a79",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "675e2169-8b06-45b9-8c9c-cedb6d6440b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea6ec5fb-a1ed-42d2-a5b7-b026be20a654"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfc6b48e-9d92-4c3c-8938-bef13a988250",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a5cd913f-ce9b-4d52-8532-5f58584f57bf"
                    }
                  }
                ]
              },
              {
                "id": "d497b3b7-dddd-4462-ae10-a9fe2f1deee1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57e82bc4-dc70-4525-bd19-d8be65662125",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "1a2f345a-9394-41c6-88c1-138e5a723aeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9906983-b787-4e72-a933-23926af71e71",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f75e421f-8ec1-4087-a370-562bf6e53209"
                    }
                  }
                ]
              },
              {
                "id": "b8f394b2-1e60-4fde-b6f1-34bca6c68c6c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1edc2764-8951-484b-a2a3-dd143f5b37d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cfc1722f-edfc-48f4-a5b4-be8e08dd3dcc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1056fa0d-f317-46b6-b5db-b280fbf729c2",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2ff4314a-dcdc-403d-bef9-8a2defcca59c"
                    }
                  }
                ]
              },
              {
                "id": "ebeaca20-d972-4d97-885f-b73d62c425cd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1678876-b950-4033-9c76-003cf690de49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b28614a-0f5d-4499-94ec-f6e7e3f36441"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b9b8ebb-4454-4b8c-a832-349f2d57f6f9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "71415f1b-294b-400c-a91c-7d59de16d8b2"
                    }
                  }
                ]
              },
              {
                "id": "8d2bd149-c9b1-47d8-8582-82f904863c92",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef9066b0-18ed-4b6d-bb9a-817fe96b73db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25e69cf2-f74c-4e0f-b7f3-322c4e6b41fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "520c7834-bfbf-49f8-b67d-4de43b19dcf0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "352e9f91-6523-4b95-9756-059597ff330d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8f98f34-e692-46d6-b5f6-38108a8a6d0a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "accc9908-2c01-4ebc-aea0-230648981044"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c39357db-0081-42ea-b931-bccf7fe5b163",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b9baed9-7d75-47df-9256-9c7cf7cde73c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b48a8de1-bb8f-4332-9a11-c2749d6c34b2",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "0138fea1-0bd1-450c-b40b-0a6e6025c073"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6006b7c6-2185-4f19-a3c3-b5ab07389d91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1cd8e36-fede-4d07-9b31-6096d2c91acf"
            }
          }
        ]
      },
      {
        "id": "c4b14cc5-fa5d-40d2-8867-d04726e06beb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "30ae4bc1-3ab9-4440-9ce6-c5639492b3b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58189cc0-d0c7-47e3-a57e-47ba3cdc72a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0fbfd370-9422-44f3-b14c-7792f6d7b791",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538fea2d-90ab-42e2-a427-bd14600bf9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9e299f-cb82-4df5-8310-2772695fd904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d100c7e9-582e-485d-90e5-4f136fe1bc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7879028-5dc4-46a1-87ce-b2d0420c01c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b9dd8f-03b8-45d7-aa84-966ed022e045",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4eb3de1-b8f1-4a06-8a93-d4ee6f183bce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3c531884-05ee-4692-a19b-66ea38fc9add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b422378a-bbd1-40d8-b5ed-4c2765c3c58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9631d323-8b8c-474c-b8b6-5c8cfbbb260a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d219c42-d0ce-4dac-af22-632d69786000",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24d028c4-3fb5-4fbe-96eb-bccceeaa403e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d042cd4-ca6d-4cf3-ac84-11e0ca39b7d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "273c960b-6287-4127-a9a6-d8a9d32d4cf0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29060890-03a3-4f8a-bde3-5e417e942a1b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "ada7a909-8a7d-4334-b456-b3c6615bb475"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56abda75-5fe5-443d-a62f-2cca1f7875a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0efedf26-79c7-4fe9-ab2a-8dc8051b954e"
            }
          }
        ]
      },
      {
        "id": "affebab0-e627-4942-a937-b2fe3eecc1e4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ffe5cad2-26b6-4fef-a212-e684573a6f8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43aac05c-762d-4874-bb09-804002843a16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75b20598-0537-48e1-ba04-0c254b947c29",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48104ba3-4868-40ba-b51a-afb38c3113ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "55102897-e272-46a6-9706-bde23f917ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a932f1b-0beb-4527-b7e7-95156529f53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1feced2-345e-4c54-af75-99ec62d824ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d0370f-503e-4bde-b119-e40555f92cef",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ae53af-6ca1-48c2-964d-3f6a8e9ac5a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "3bc3a44c-ff4b-4642-a339-7955130ce031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6dcb84-12f7-4db1-85c5-41bfddd4e044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8665c30-b0ae-4542-a6fa-8a9620e0690f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2210b45-605b-483c-9ab9-ea4c23c7ea5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb2bef4e-65ea-4e9d-9666-1a0593fa790c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77cc8668-8279-421e-99d7-1f32005b9636",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b02feb0-5de6-47bc-92c9-6b3171661a67"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43edda22-32a7-460b-9eea-0e4cb2c77991",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8d629be0-6b8a-46f2-bc18-5ed4ffb0eea2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67d9d893-7f24-4426-b791-429e083f17de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "176fe383-a67d-4a4c-9d55-d8bd466a9163"
            }
          }
        ]
      },
      {
        "id": "23871e08-554b-4ab8-a7bf-44b83b7f884d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "516a8467-3a12-4083-bf1c-84779ce2c9af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77624bfc-10b0-45bd-9f19-f11adaa45db1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6b95d54-ce2a-41bc-8841-6d17dba7cf0d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059a3cf4-8606-44f8-8f59-6be792de2fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2174440-7025-481e-b81e-7f86a74f4c45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7917c8ce-5f05-45a6-8f1c-c1c57e6d75e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78272a0c-e69d-4ed7-875a-1437677724b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161c456e-9c3f-4fd7-9f28-591aba9b953f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cffd36-b23a-4778-bd83-a566329c6843",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e78bd315-f10c-4ea6-9106-5482c344132a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a536a5cd-e750-41aa-8a88-fd3220a591c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a20ace74-92ad-46e7-9c13-57cd8a7ce1f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6c443fa-2adf-407f-85ed-d4de6dabf128",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ee84198-66d7-4a2f-9d33-5f96bcf07f2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f77f2bd-9296-48bf-b114-2cae7ab19aae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2add97a6-b4e6-42f1-883e-4ec7b10fe60c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e366ba49-cfa8-4290-859a-112e9fdf86cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "cbcacac9-acdb-41ba-8d74-7163ede6c6a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43f1dd68-19a4-48dd-91c8-98cff31d932b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b721d5a0-ad06-4eff-8d4b-59d2aea07536"
            }
          }
        ]
      },
      {
        "id": "ec6f04b0-1d9d-4392-b835-921c8ac99c1a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cffbc069-7307-4e33-a197-8096fc135d40",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f115e8c6-2b6b-461b-830c-17cff5c7fc11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6e62a1f-6c4d-4680-b6fd-3a0b873385ef",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a283c032-bd8f-43b6-8e12-ca5df9e4dfd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264902d4-2544-497e-9d5b-c1667201200c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59f5339-9d2c-445f-9375-04e1d85ff892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "978d79cf-cb72-4062-8d03-0ae4deb04664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a147907e-9637-454c-909e-f36d60ab2318",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75742417-bc0c-4735-b6f1-274796e4c3d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8c22adc8-457b-4646-9ae5-43695e7c0b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11399e0b-3645-42b7-8691-6529ae1d21ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f1a1f91-3943-4a66-9109-a77a5541583f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d11c7b28-ce61-4a4a-806d-d201e9007fe7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ccbb89b-b019-4e67-9456-27afeffeba8b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e76e4a0c-0f63-4eec-b183-414035386292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d03e6ae4-3a0b-4b72-9134-bdd867ed318f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1dacae2-96e5-4459-bc52-ef352049a894",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "d92f521e-16b1-4615-8d55-3432b957009f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0246892-b924-4475-9618-e73de70c6637",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "592d9c80-4d56-4968-bc64-2f30eb1c1bcf"
            }
          }
        ]
      },
      {
        "id": "1cd23fba-721c-47de-882f-42d4fe9eb1b0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4cb15ad0-af04-4e18-ac4d-a5023b75bddf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df472a84-b812-4de0-91f1-1dbcb99fc031",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71841abe-8d47-4690-b953-d31f7230ae23",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c643f75-f5e1-46da-aa9c-59f1ff691544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94b2a48-3369-4014-b5c9-253cb4f696f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c63116-86e9-479f-bf69-4fa104f7236d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd07ccc1-53ce-40fa-89cf-02bfe462790d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eee5379-0cac-4c4c-b4df-08d50697e21f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001813bb-d7c0-404d-9808-8444a86fb637",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "af25e5c5-0bbd-43a5-8a68-b6a264991d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a84df8e-9f85-4c33-89d5-e0abf16be9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "980ce877-5f00-4916-b5b5-790edf28ff59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "896aa39d-8e53-4f05-9694-2a6ceeb03ef2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0d48a68-f3c2-4174-a546-0147baec8268"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79e06900-6daf-42ed-aef4-b95bc6de974d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4ddc106-3b3a-4ca3-be91-a72cb7a483ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a07137b-78ad-4b04-8bcb-abb8ba0a6f0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "dfcc4bf0-0c00-405a-9fbb-a1134a415b52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2940e0c0-e0b5-442a-a7be-063a25b6ce5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5988a2d7-331c-4144-94ff-cfe40e4a56f9"
            }
          }
        ]
      },
      {
        "id": "b9788db1-04c0-40c9-bd8a-ef8679aa6159",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "1a6ee154-a9ed-4006-9511-5372745b361a",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 163,
        "pending": 0,
        "failed": 163
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 121
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1689812616407,
      "completed": 1689812619488
    },
    "executions": [
      {
        "id": "b5031fc9-8757-4918-8f08-3e1bbd0f90b7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9b8fa2c8-98ce-40f7-a96e-88fefecb54f8",
          "httpRequestId": "2fc40824-6b00-43fd-bc17-d79d5edbb2b5"
        },
        "item": {
          "id": "b5031fc9-8757-4918-8f08-3e1bbd0f90b7",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "411d1b0b-4056-4c25-a2f6-eb9580289328",
        "cursor": {
          "ref": "a15b6fc5-8f4f-40d4-9e77-6aa96b320b4f",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d4b24039-b342-400b-bd92-5bff12fcef3e"
        },
        "item": {
          "id": "411d1b0b-4056-4c25-a2f6-eb9580289328",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "411d1b0b-4056-4c25-a2f6-eb9580289328",
        "cursor": {
          "ref": "a15b6fc5-8f4f-40d4-9e77-6aa96b320b4f",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d4b24039-b342-400b-bd92-5bff12fcef3e"
        },
        "item": {
          "id": "411d1b0b-4056-4c25-a2f6-eb9580289328",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "62e1e01c-c235-41e6-ae22-afebae44be24",
        "cursor": {
          "ref": "bfd03a93-30a5-4181-8ae6-8620379e3d53",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "638917a7-5615-4488-935f-307e323f6d31"
        },
        "item": {
          "id": "62e1e01c-c235-41e6-ae22-afebae44be24",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "62e1e01c-c235-41e6-ae22-afebae44be24",
        "cursor": {
          "ref": "bfd03a93-30a5-4181-8ae6-8620379e3d53",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "638917a7-5615-4488-935f-307e323f6d31"
        },
        "item": {
          "id": "62e1e01c-c235-41e6-ae22-afebae44be24",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "248aa31c-a890-4f4f-8ae8-a98bb274247a",
        "cursor": {
          "ref": "ff28ce8c-8032-4ce3-b96e-1b29056b99d5",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "415c0451-40eb-4d98-a00f-5b53f580d4d4"
        },
        "item": {
          "id": "248aa31c-a890-4f4f-8ae8-a98bb274247a",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "248aa31c-a890-4f4f-8ae8-a98bb274247a",
        "cursor": {
          "ref": "ff28ce8c-8032-4ce3-b96e-1b29056b99d5",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "415c0451-40eb-4d98-a00f-5b53f580d4d4"
        },
        "item": {
          "id": "248aa31c-a890-4f4f-8ae8-a98bb274247a",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "7b6d2fcc-55dd-4ec4-90ac-acc76b7a3b54",
        "cursor": {
          "ref": "96f557c4-5f7c-446e-a4a7-c89636e58a57",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0bf6d8f4-fe5b-40dd-974e-f28ad0895406"
        },
        "item": {
          "id": "7b6d2fcc-55dd-4ec4-90ac-acc76b7a3b54",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "7b6d2fcc-55dd-4ec4-90ac-acc76b7a3b54",
        "cursor": {
          "ref": "96f557c4-5f7c-446e-a4a7-c89636e58a57",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0bf6d8f4-fe5b-40dd-974e-f28ad0895406"
        },
        "item": {
          "id": "7b6d2fcc-55dd-4ec4-90ac-acc76b7a3b54",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "f047dca7-5085-45cb-8105-f143e8ff5628",
        "cursor": {
          "ref": "8af6a9f9-70e0-4852-a5d3-76863ac6d934",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "914c0013-755d-4b52-9321-1e9b6569623d"
        },
        "item": {
          "id": "f047dca7-5085-45cb-8105-f143e8ff5628",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "f047dca7-5085-45cb-8105-f143e8ff5628",
        "cursor": {
          "ref": "8af6a9f9-70e0-4852-a5d3-76863ac6d934",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "914c0013-755d-4b52-9321-1e9b6569623d"
        },
        "item": {
          "id": "f047dca7-5085-45cb-8105-f143e8ff5628",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "f047dca7-5085-45cb-8105-f143e8ff5628",
        "cursor": {
          "ref": "8af6a9f9-70e0-4852-a5d3-76863ac6d934",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "914c0013-755d-4b52-9321-1e9b6569623d"
        },
        "item": {
          "id": "f047dca7-5085-45cb-8105-f143e8ff5628",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "f3fd9d08-a5c3-4ccb-a905-7ed42f04c1c9",
        "cursor": {
          "ref": "d4e9181f-eb16-452c-884a-b0f2678aba2e",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "126503fa-7da3-401a-93ad-6d35ddc6c7a0"
        },
        "item": {
          "id": "f3fd9d08-a5c3-4ccb-a905-7ed42f04c1c9",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "f3fd9d08-a5c3-4ccb-a905-7ed42f04c1c9",
        "cursor": {
          "ref": "d4e9181f-eb16-452c-884a-b0f2678aba2e",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "126503fa-7da3-401a-93ad-6d35ddc6c7a0"
        },
        "item": {
          "id": "f3fd9d08-a5c3-4ccb-a905-7ed42f04c1c9",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "880cc064-a52f-44ff-bb90-9ce9dca75b18",
        "cursor": {
          "ref": "500eb353-18d8-4ba8-a23c-fec5a16f8ca9",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7c7778f1-5f21-45f4-a1a1-344330ef5714"
        },
        "item": {
          "id": "880cc064-a52f-44ff-bb90-9ce9dca75b18",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "880cc064-a52f-44ff-bb90-9ce9dca75b18",
        "cursor": {
          "ref": "500eb353-18d8-4ba8-a23c-fec5a16f8ca9",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7c7778f1-5f21-45f4-a1a1-344330ef5714"
        },
        "item": {
          "id": "880cc064-a52f-44ff-bb90-9ce9dca75b18",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "880cc064-a52f-44ff-bb90-9ce9dca75b18",
        "cursor": {
          "ref": "500eb353-18d8-4ba8-a23c-fec5a16f8ca9",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7c7778f1-5f21-45f4-a1a1-344330ef5714"
        },
        "item": {
          "id": "880cc064-a52f-44ff-bb90-9ce9dca75b18",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "bb025241-2f91-48b9-bda2-3af1aad89122",
        "cursor": {
          "ref": "7ede0435-40ce-4bcd-a24d-0d81662a7b0d",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "249ce6a6-8cc5-452b-a3df-367b5f9dc689"
        },
        "item": {
          "id": "bb025241-2f91-48b9-bda2-3af1aad89122",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "bb025241-2f91-48b9-bda2-3af1aad89122",
        "cursor": {
          "ref": "7ede0435-40ce-4bcd-a24d-0d81662a7b0d",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "249ce6a6-8cc5-452b-a3df-367b5f9dc689"
        },
        "item": {
          "id": "bb025241-2f91-48b9-bda2-3af1aad89122",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "bb025241-2f91-48b9-bda2-3af1aad89122",
        "cursor": {
          "ref": "7ede0435-40ce-4bcd-a24d-0d81662a7b0d",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "249ce6a6-8cc5-452b-a3df-367b5f9dc689"
        },
        "item": {
          "id": "bb025241-2f91-48b9-bda2-3af1aad89122",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "cc1fefd4-0af9-4882-806f-147bdd92ad94",
        "cursor": {
          "ref": "2820ce39-587c-407d-a1f4-6d442aae7388",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7cb6b319-ccbc-4b31-90f2-793663025f12"
        },
        "item": {
          "id": "cc1fefd4-0af9-4882-806f-147bdd92ad94",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "cc1fefd4-0af9-4882-806f-147bdd92ad94",
        "cursor": {
          "ref": "2820ce39-587c-407d-a1f4-6d442aae7388",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7cb6b319-ccbc-4b31-90f2-793663025f12"
        },
        "item": {
          "id": "cc1fefd4-0af9-4882-806f-147bdd92ad94",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "cc1fefd4-0af9-4882-806f-147bdd92ad94",
        "cursor": {
          "ref": "2820ce39-587c-407d-a1f4-6d442aae7388",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7cb6b319-ccbc-4b31-90f2-793663025f12"
        },
        "item": {
          "id": "cc1fefd4-0af9-4882-806f-147bdd92ad94",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "bdb6d0eb-5c80-40a1-933f-5e5eaca955b8",
        "cursor": {
          "ref": "2e638821-395b-43b3-9d2c-8a4dad2ec508",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6aca6a9c-7360-4d93-b4e1-f50afbb7ddd4"
        },
        "item": {
          "id": "bdb6d0eb-5c80-40a1-933f-5e5eaca955b8",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "bdb6d0eb-5c80-40a1-933f-5e5eaca955b8",
        "cursor": {
          "ref": "2e638821-395b-43b3-9d2c-8a4dad2ec508",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6aca6a9c-7360-4d93-b4e1-f50afbb7ddd4"
        },
        "item": {
          "id": "bdb6d0eb-5c80-40a1-933f-5e5eaca955b8",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "bdb6d0eb-5c80-40a1-933f-5e5eaca955b8",
        "cursor": {
          "ref": "2e638821-395b-43b3-9d2c-8a4dad2ec508",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6aca6a9c-7360-4d93-b4e1-f50afbb7ddd4"
        },
        "item": {
          "id": "bdb6d0eb-5c80-40a1-933f-5e5eaca955b8",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "208285aa-f05a-4cbd-b674-1b93fa93a355",
        "cursor": {
          "ref": "c6944093-a743-4eeb-b4db-800f64ae3db1",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2517361c-b70c-41b9-a8ce-cbad45107c6c"
        },
        "item": {
          "id": "208285aa-f05a-4cbd-b674-1b93fa93a355",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "208285aa-f05a-4cbd-b674-1b93fa93a355",
        "cursor": {
          "ref": "c6944093-a743-4eeb-b4db-800f64ae3db1",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2517361c-b70c-41b9-a8ce-cbad45107c6c"
        },
        "item": {
          "id": "208285aa-f05a-4cbd-b674-1b93fa93a355",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "208285aa-f05a-4cbd-b674-1b93fa93a355",
        "cursor": {
          "ref": "c6944093-a743-4eeb-b4db-800f64ae3db1",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2517361c-b70c-41b9-a8ce-cbad45107c6c"
        },
        "item": {
          "id": "208285aa-f05a-4cbd-b674-1b93fa93a355",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "2c25081d-5482-4575-91d1-a8860bbf4549",
        "cursor": {
          "ref": "f2286277-ed78-42f7-823c-b0a7825982cb",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1d39560f-889b-41b6-9ce7-7bc2cc4ecc87"
        },
        "item": {
          "id": "2c25081d-5482-4575-91d1-a8860bbf4549",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2c25081d-5482-4575-91d1-a8860bbf4549",
        "cursor": {
          "ref": "f2286277-ed78-42f7-823c-b0a7825982cb",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1d39560f-889b-41b6-9ce7-7bc2cc4ecc87"
        },
        "item": {
          "id": "2c25081d-5482-4575-91d1-a8860bbf4549",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2c25081d-5482-4575-91d1-a8860bbf4549",
        "cursor": {
          "ref": "f2286277-ed78-42f7-823c-b0a7825982cb",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1d39560f-889b-41b6-9ce7-7bc2cc4ecc87"
        },
        "item": {
          "id": "2c25081d-5482-4575-91d1-a8860bbf4549",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "030a87a1-dc90-40ed-85fd-5fa07409cac8",
        "cursor": {
          "ref": "2550a77d-a51a-4df0-8b6a-f13dda63fa2b",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "271bd562-0a40-43c1-b5c9-a298e7a7f2d7"
        },
        "item": {
          "id": "030a87a1-dc90-40ed-85fd-5fa07409cac8",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "030a87a1-dc90-40ed-85fd-5fa07409cac8",
        "cursor": {
          "ref": "2550a77d-a51a-4df0-8b6a-f13dda63fa2b",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "271bd562-0a40-43c1-b5c9-a298e7a7f2d7"
        },
        "item": {
          "id": "030a87a1-dc90-40ed-85fd-5fa07409cac8",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "030a87a1-dc90-40ed-85fd-5fa07409cac8",
        "cursor": {
          "ref": "2550a77d-a51a-4df0-8b6a-f13dda63fa2b",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "271bd562-0a40-43c1-b5c9-a298e7a7f2d7"
        },
        "item": {
          "id": "030a87a1-dc90-40ed-85fd-5fa07409cac8",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "8d85af9a-40e0-4af9-b4ae-b3a448d30821",
        "cursor": {
          "ref": "3245ce12-0e06-48dd-a297-d647d1bde1e0",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a455240d-00c1-4ada-b6b8-2c0627a7dba6"
        },
        "item": {
          "id": "8d85af9a-40e0-4af9-b4ae-b3a448d30821",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "8d85af9a-40e0-4af9-b4ae-b3a448d30821",
        "cursor": {
          "ref": "3245ce12-0e06-48dd-a297-d647d1bde1e0",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a455240d-00c1-4ada-b6b8-2c0627a7dba6"
        },
        "item": {
          "id": "8d85af9a-40e0-4af9-b4ae-b3a448d30821",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "8d85af9a-40e0-4af9-b4ae-b3a448d30821",
        "cursor": {
          "ref": "3245ce12-0e06-48dd-a297-d647d1bde1e0",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a455240d-00c1-4ada-b6b8-2c0627a7dba6"
        },
        "item": {
          "id": "8d85af9a-40e0-4af9-b4ae-b3a448d30821",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "958ded3b-8fc4-4d73-99fb-4032a466d5c4",
        "cursor": {
          "ref": "8ed22ee9-f5bd-41ff-988b-c54a41b08832",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ea1b95a1-6ae1-4e85-97d2-4a6df4f12335"
        },
        "item": {
          "id": "958ded3b-8fc4-4d73-99fb-4032a466d5c4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "958ded3b-8fc4-4d73-99fb-4032a466d5c4",
        "cursor": {
          "ref": "8ed22ee9-f5bd-41ff-988b-c54a41b08832",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ea1b95a1-6ae1-4e85-97d2-4a6df4f12335"
        },
        "item": {
          "id": "958ded3b-8fc4-4d73-99fb-4032a466d5c4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "958ded3b-8fc4-4d73-99fb-4032a466d5c4",
        "cursor": {
          "ref": "8ed22ee9-f5bd-41ff-988b-c54a41b08832",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ea1b95a1-6ae1-4e85-97d2-4a6df4f12335"
        },
        "item": {
          "id": "958ded3b-8fc4-4d73-99fb-4032a466d5c4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "cd5a150e-3fd1-4ff0-8b78-75798df3f0c0",
        "cursor": {
          "ref": "dd1b1be4-c315-4430-9477-7758b4983aa1",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "79ec50f0-ac9b-48a9-9785-51574f0cc0ea"
        },
        "item": {
          "id": "cd5a150e-3fd1-4ff0-8b78-75798df3f0c0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "cd5a150e-3fd1-4ff0-8b78-75798df3f0c0",
        "cursor": {
          "ref": "dd1b1be4-c315-4430-9477-7758b4983aa1",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "79ec50f0-ac9b-48a9-9785-51574f0cc0ea"
        },
        "item": {
          "id": "cd5a150e-3fd1-4ff0-8b78-75798df3f0c0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "cd5a150e-3fd1-4ff0-8b78-75798df3f0c0",
        "cursor": {
          "ref": "dd1b1be4-c315-4430-9477-7758b4983aa1",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "79ec50f0-ac9b-48a9-9785-51574f0cc0ea"
        },
        "item": {
          "id": "cd5a150e-3fd1-4ff0-8b78-75798df3f0c0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "99bc9528-d2d2-427a-bcdf-b09974ddea36",
        "cursor": {
          "ref": "8cec7b64-9892-429b-9858-79685c2f78bd",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fc51794c-5b08-47e4-ad4e-f1587eb7f5a4"
        },
        "item": {
          "id": "99bc9528-d2d2-427a-bcdf-b09974ddea36",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "99bc9528-d2d2-427a-bcdf-b09974ddea36",
        "cursor": {
          "ref": "8cec7b64-9892-429b-9858-79685c2f78bd",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fc51794c-5b08-47e4-ad4e-f1587eb7f5a4"
        },
        "item": {
          "id": "99bc9528-d2d2-427a-bcdf-b09974ddea36",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "99bc9528-d2d2-427a-bcdf-b09974ddea36",
        "cursor": {
          "ref": "8cec7b64-9892-429b-9858-79685c2f78bd",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fc51794c-5b08-47e4-ad4e-f1587eb7f5a4"
        },
        "item": {
          "id": "99bc9528-d2d2-427a-bcdf-b09974ddea36",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "3ebe6dc9-1f9c-42a2-adbf-aa8b101aff3e",
        "cursor": {
          "ref": "21c88420-93aa-433a-85ec-b92cc4541044",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cc24e269-e166-446a-b875-00ecef599334"
        },
        "item": {
          "id": "3ebe6dc9-1f9c-42a2-adbf-aa8b101aff3e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "3ebe6dc9-1f9c-42a2-adbf-aa8b101aff3e",
        "cursor": {
          "ref": "21c88420-93aa-433a-85ec-b92cc4541044",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cc24e269-e166-446a-b875-00ecef599334"
        },
        "item": {
          "id": "3ebe6dc9-1f9c-42a2-adbf-aa8b101aff3e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "3ebe6dc9-1f9c-42a2-adbf-aa8b101aff3e",
        "cursor": {
          "ref": "21c88420-93aa-433a-85ec-b92cc4541044",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cc24e269-e166-446a-b875-00ecef599334"
        },
        "item": {
          "id": "3ebe6dc9-1f9c-42a2-adbf-aa8b101aff3e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "bbec9529-2044-4b4c-9a8f-99105ed8e73f",
        "cursor": {
          "ref": "cfda36fb-2c66-4f99-8c66-401fd769e054",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8c42cd22-6e11-438d-9c07-c2345130a550"
        },
        "item": {
          "id": "bbec9529-2044-4b4c-9a8f-99105ed8e73f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "bbec9529-2044-4b4c-9a8f-99105ed8e73f",
        "cursor": {
          "ref": "cfda36fb-2c66-4f99-8c66-401fd769e054",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8c42cd22-6e11-438d-9c07-c2345130a550"
        },
        "item": {
          "id": "bbec9529-2044-4b4c-9a8f-99105ed8e73f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "bbec9529-2044-4b4c-9a8f-99105ed8e73f",
        "cursor": {
          "ref": "cfda36fb-2c66-4f99-8c66-401fd769e054",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8c42cd22-6e11-438d-9c07-c2345130a550"
        },
        "item": {
          "id": "bbec9529-2044-4b4c-9a8f-99105ed8e73f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "84999871-efa8-4956-90db-f8a26f066dc7",
        "cursor": {
          "ref": "3ddf6e3a-048b-4eab-bcc9-ae9a137d7930",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "67740251-e786-4ca2-b263-219a34d4a230"
        },
        "item": {
          "id": "84999871-efa8-4956-90db-f8a26f066dc7",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "84999871-efa8-4956-90db-f8a26f066dc7",
        "cursor": {
          "ref": "3ddf6e3a-048b-4eab-bcc9-ae9a137d7930",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "67740251-e786-4ca2-b263-219a34d4a230"
        },
        "item": {
          "id": "84999871-efa8-4956-90db-f8a26f066dc7",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "84999871-efa8-4956-90db-f8a26f066dc7",
        "cursor": {
          "ref": "3ddf6e3a-048b-4eab-bcc9-ae9a137d7930",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "67740251-e786-4ca2-b263-219a34d4a230"
        },
        "item": {
          "id": "84999871-efa8-4956-90db-f8a26f066dc7",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8bc2a327-cb36-477e-b544-31a84fc69588",
        "cursor": {
          "ref": "53e00288-5632-43a1-bee7-baf9c52a1bde",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0eb4135e-18a8-44a9-a510-0eb0de231785"
        },
        "item": {
          "id": "8bc2a327-cb36-477e-b544-31a84fc69588",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "8bc2a327-cb36-477e-b544-31a84fc69588",
        "cursor": {
          "ref": "53e00288-5632-43a1-bee7-baf9c52a1bde",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0eb4135e-18a8-44a9-a510-0eb0de231785"
        },
        "item": {
          "id": "8bc2a327-cb36-477e-b544-31a84fc69588",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "8bc2a327-cb36-477e-b544-31a84fc69588",
        "cursor": {
          "ref": "53e00288-5632-43a1-bee7-baf9c52a1bde",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0eb4135e-18a8-44a9-a510-0eb0de231785"
        },
        "item": {
          "id": "8bc2a327-cb36-477e-b544-31a84fc69588",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "0c3e8f86-b1af-4099-89c2-5d0c59659a3f",
        "cursor": {
          "ref": "9c3cd96c-b7f9-4354-a420-a798ae70268f",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "51174192-80b4-4cae-b0b0-57562b3e9bf0"
        },
        "item": {
          "id": "0c3e8f86-b1af-4099-89c2-5d0c59659a3f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0c3e8f86-b1af-4099-89c2-5d0c59659a3f",
        "cursor": {
          "ref": "9c3cd96c-b7f9-4354-a420-a798ae70268f",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "51174192-80b4-4cae-b0b0-57562b3e9bf0"
        },
        "item": {
          "id": "0c3e8f86-b1af-4099-89c2-5d0c59659a3f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0c3e8f86-b1af-4099-89c2-5d0c59659a3f",
        "cursor": {
          "ref": "9c3cd96c-b7f9-4354-a420-a798ae70268f",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "51174192-80b4-4cae-b0b0-57562b3e9bf0"
        },
        "item": {
          "id": "0c3e8f86-b1af-4099-89c2-5d0c59659a3f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1c5a955b-f8a9-4c98-b9f2-b151737366f3",
        "cursor": {
          "ref": "af01b768-cd87-4dd2-a071-d22c66c026cb",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "12c64b61-7d2c-4003-8c42-d8baf2a1b369"
        },
        "item": {
          "id": "1c5a955b-f8a9-4c98-b9f2-b151737366f3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "1c5a955b-f8a9-4c98-b9f2-b151737366f3",
        "cursor": {
          "ref": "af01b768-cd87-4dd2-a071-d22c66c026cb",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "12c64b61-7d2c-4003-8c42-d8baf2a1b369"
        },
        "item": {
          "id": "1c5a955b-f8a9-4c98-b9f2-b151737366f3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "1c5a955b-f8a9-4c98-b9f2-b151737366f3",
        "cursor": {
          "ref": "af01b768-cd87-4dd2-a071-d22c66c026cb",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "12c64b61-7d2c-4003-8c42-d8baf2a1b369"
        },
        "item": {
          "id": "1c5a955b-f8a9-4c98-b9f2-b151737366f3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "0930fed0-4076-45d1-bfd9-1aa78778af99",
        "cursor": {
          "ref": "88c70327-8ba7-4266-b4eb-2aa05aeb7533",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cece1b36-79be-465c-9131-1f2cba6b6d1b"
        },
        "item": {
          "id": "0930fed0-4076-45d1-bfd9-1aa78778af99",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0930fed0-4076-45d1-bfd9-1aa78778af99",
        "cursor": {
          "ref": "88c70327-8ba7-4266-b4eb-2aa05aeb7533",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cece1b36-79be-465c-9131-1f2cba6b6d1b"
        },
        "item": {
          "id": "0930fed0-4076-45d1-bfd9-1aa78778af99",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0930fed0-4076-45d1-bfd9-1aa78778af99",
        "cursor": {
          "ref": "88c70327-8ba7-4266-b4eb-2aa05aeb7533",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cece1b36-79be-465c-9131-1f2cba6b6d1b"
        },
        "item": {
          "id": "0930fed0-4076-45d1-bfd9-1aa78778af99",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "c0c406d6-b668-42aa-ac87-08c4e1da9796",
        "cursor": {
          "ref": "15a25850-547a-492e-b42a-6156c424c48e",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "25c27716-f8ca-43ea-bcdf-57a5ca030365"
        },
        "item": {
          "id": "c0c406d6-b668-42aa-ac87-08c4e1da9796",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c0c406d6-b668-42aa-ac87-08c4e1da9796",
        "cursor": {
          "ref": "15a25850-547a-492e-b42a-6156c424c48e",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "25c27716-f8ca-43ea-bcdf-57a5ca030365"
        },
        "item": {
          "id": "c0c406d6-b668-42aa-ac87-08c4e1da9796",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c0c406d6-b668-42aa-ac87-08c4e1da9796",
        "cursor": {
          "ref": "15a25850-547a-492e-b42a-6156c424c48e",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "25c27716-f8ca-43ea-bcdf-57a5ca030365"
        },
        "item": {
          "id": "c0c406d6-b668-42aa-ac87-08c4e1da9796",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "4e820f5e-e857-4e40-90e6-794a41c3afdf",
        "cursor": {
          "ref": "9821567f-7f94-44d9-88a5-234617062f72",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "484674d7-1eed-4eee-aae7-85ee6164b229"
        },
        "item": {
          "id": "4e820f5e-e857-4e40-90e6-794a41c3afdf",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "4e820f5e-e857-4e40-90e6-794a41c3afdf",
        "cursor": {
          "ref": "9821567f-7f94-44d9-88a5-234617062f72",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "484674d7-1eed-4eee-aae7-85ee6164b229"
        },
        "item": {
          "id": "4e820f5e-e857-4e40-90e6-794a41c3afdf",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "4e820f5e-e857-4e40-90e6-794a41c3afdf",
        "cursor": {
          "ref": "9821567f-7f94-44d9-88a5-234617062f72",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "484674d7-1eed-4eee-aae7-85ee6164b229"
        },
        "item": {
          "id": "4e820f5e-e857-4e40-90e6-794a41c3afdf",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "21331984-c6fa-4716-9380-8044fc2e140a",
        "cursor": {
          "ref": "9222a14a-030d-48b1-88ed-1fdc6d48ee07",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fb0cbaf0-a75c-4e21-954d-277c78950918"
        },
        "item": {
          "id": "21331984-c6fa-4716-9380-8044fc2e140a",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "21331984-c6fa-4716-9380-8044fc2e140a",
        "cursor": {
          "ref": "9222a14a-030d-48b1-88ed-1fdc6d48ee07",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fb0cbaf0-a75c-4e21-954d-277c78950918"
        },
        "item": {
          "id": "21331984-c6fa-4716-9380-8044fc2e140a",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "21331984-c6fa-4716-9380-8044fc2e140a",
        "cursor": {
          "ref": "9222a14a-030d-48b1-88ed-1fdc6d48ee07",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fb0cbaf0-a75c-4e21-954d-277c78950918"
        },
        "item": {
          "id": "21331984-c6fa-4716-9380-8044fc2e140a",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "f692a7a1-2eac-4d8d-a87a-f87a70704760",
        "cursor": {
          "ref": "a951b786-1423-448c-89d3-14f50708d711",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f1d933b1-dda9-47ed-b3aa-543ec7096324"
        },
        "item": {
          "id": "f692a7a1-2eac-4d8d-a87a-f87a70704760",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "f692a7a1-2eac-4d8d-a87a-f87a70704760",
        "cursor": {
          "ref": "a951b786-1423-448c-89d3-14f50708d711",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f1d933b1-dda9-47ed-b3aa-543ec7096324"
        },
        "item": {
          "id": "f692a7a1-2eac-4d8d-a87a-f87a70704760",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "f692a7a1-2eac-4d8d-a87a-f87a70704760",
        "cursor": {
          "ref": "a951b786-1423-448c-89d3-14f50708d711",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f1d933b1-dda9-47ed-b3aa-543ec7096324"
        },
        "item": {
          "id": "f692a7a1-2eac-4d8d-a87a-f87a70704760",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "73388bb1-b08e-431d-a358-c69d35511929",
        "cursor": {
          "ref": "9a458662-c763-4127-a3f5-0e872a8b4dfd",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "77e3c9cc-f47c-4e46-9626-f4cd30f85533"
        },
        "item": {
          "id": "73388bb1-b08e-431d-a358-c69d35511929",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "73388bb1-b08e-431d-a358-c69d35511929",
        "cursor": {
          "ref": "9a458662-c763-4127-a3f5-0e872a8b4dfd",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "77e3c9cc-f47c-4e46-9626-f4cd30f85533"
        },
        "item": {
          "id": "73388bb1-b08e-431d-a358-c69d35511929",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "73388bb1-b08e-431d-a358-c69d35511929",
        "cursor": {
          "ref": "9a458662-c763-4127-a3f5-0e872a8b4dfd",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "77e3c9cc-f47c-4e46-9626-f4cd30f85533"
        },
        "item": {
          "id": "73388bb1-b08e-431d-a358-c69d35511929",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "35014c79-2336-4966-9a9b-480131563f0d",
        "cursor": {
          "ref": "9c3ce0bc-b705-4109-a886-d081751bd2ba",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c81e8e58-3f0a-45a6-b069-fa20cc7a0823"
        },
        "item": {
          "id": "35014c79-2336-4966-9a9b-480131563f0d",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "35014c79-2336-4966-9a9b-480131563f0d",
        "cursor": {
          "ref": "9c3ce0bc-b705-4109-a886-d081751bd2ba",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c81e8e58-3f0a-45a6-b069-fa20cc7a0823"
        },
        "item": {
          "id": "35014c79-2336-4966-9a9b-480131563f0d",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "35014c79-2336-4966-9a9b-480131563f0d",
        "cursor": {
          "ref": "9c3ce0bc-b705-4109-a886-d081751bd2ba",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c81e8e58-3f0a-45a6-b069-fa20cc7a0823"
        },
        "item": {
          "id": "35014c79-2336-4966-9a9b-480131563f0d",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "2ddab453-31ae-4997-ace9-21b4aea39d20",
        "cursor": {
          "ref": "6e5db992-6513-4b47-9bef-bc34f674794e",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9ea22f58-5a7a-4c48-904e-8e4522033201"
        },
        "item": {
          "id": "2ddab453-31ae-4997-ace9-21b4aea39d20",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "2ddab453-31ae-4997-ace9-21b4aea39d20",
        "cursor": {
          "ref": "6e5db992-6513-4b47-9bef-bc34f674794e",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9ea22f58-5a7a-4c48-904e-8e4522033201"
        },
        "item": {
          "id": "2ddab453-31ae-4997-ace9-21b4aea39d20",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "2ddab453-31ae-4997-ace9-21b4aea39d20",
        "cursor": {
          "ref": "6e5db992-6513-4b47-9bef-bc34f674794e",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9ea22f58-5a7a-4c48-904e-8e4522033201"
        },
        "item": {
          "id": "2ddab453-31ae-4997-ace9-21b4aea39d20",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "3bd17a50-3aca-47f1-b88e-755218b16d47",
        "cursor": {
          "ref": "71c4f84d-d83c-4cae-bd34-e215b02dda96",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a594ebc1-74c2-446c-8e4a-b089d76b5892"
        },
        "item": {
          "id": "3bd17a50-3aca-47f1-b88e-755218b16d47",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "3bd17a50-3aca-47f1-b88e-755218b16d47",
        "cursor": {
          "ref": "71c4f84d-d83c-4cae-bd34-e215b02dda96",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a594ebc1-74c2-446c-8e4a-b089d76b5892"
        },
        "item": {
          "id": "3bd17a50-3aca-47f1-b88e-755218b16d47",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "3bd17a50-3aca-47f1-b88e-755218b16d47",
        "cursor": {
          "ref": "71c4f84d-d83c-4cae-bd34-e215b02dda96",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a594ebc1-74c2-446c-8e4a-b089d76b5892"
        },
        "item": {
          "id": "3bd17a50-3aca-47f1-b88e-755218b16d47",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "3166ab43-4112-41e6-893b-e1458aa4973e",
        "cursor": {
          "ref": "da2f8c5e-30e4-4983-9bc2-900c37d38003",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "acd971ae-240d-48f2-9df4-cd56d1b90838"
        },
        "item": {
          "id": "3166ab43-4112-41e6-893b-e1458aa4973e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "3166ab43-4112-41e6-893b-e1458aa4973e",
        "cursor": {
          "ref": "da2f8c5e-30e4-4983-9bc2-900c37d38003",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "acd971ae-240d-48f2-9df4-cd56d1b90838"
        },
        "item": {
          "id": "3166ab43-4112-41e6-893b-e1458aa4973e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "3166ab43-4112-41e6-893b-e1458aa4973e",
        "cursor": {
          "ref": "da2f8c5e-30e4-4983-9bc2-900c37d38003",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "acd971ae-240d-48f2-9df4-cd56d1b90838"
        },
        "item": {
          "id": "3166ab43-4112-41e6-893b-e1458aa4973e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "42f3f8d9-cb94-4380-a4e2-ab53e2df4bc1",
        "cursor": {
          "ref": "504152b7-280f-4a11-846b-df24fee07b1d",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d9d3edfb-d6b5-4c59-b391-eecb98ba383e"
        },
        "item": {
          "id": "42f3f8d9-cb94-4380-a4e2-ab53e2df4bc1",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "42f3f8d9-cb94-4380-a4e2-ab53e2df4bc1",
        "cursor": {
          "ref": "504152b7-280f-4a11-846b-df24fee07b1d",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d9d3edfb-d6b5-4c59-b391-eecb98ba383e"
        },
        "item": {
          "id": "42f3f8d9-cb94-4380-a4e2-ab53e2df4bc1",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "42f3f8d9-cb94-4380-a4e2-ab53e2df4bc1",
        "cursor": {
          "ref": "504152b7-280f-4a11-846b-df24fee07b1d",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d9d3edfb-d6b5-4c59-b391-eecb98ba383e"
        },
        "item": {
          "id": "42f3f8d9-cb94-4380-a4e2-ab53e2df4bc1",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "15e69108-d1c1-4df4-b7ae-39a8bd4d4015",
        "cursor": {
          "ref": "0583c0f4-1a14-41e8-89a8-2ff094c7db2e",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4f85f0d6-aeef-41de-be92-232e7eda933d"
        },
        "item": {
          "id": "15e69108-d1c1-4df4-b7ae-39a8bd4d4015",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "15e69108-d1c1-4df4-b7ae-39a8bd4d4015",
        "cursor": {
          "ref": "0583c0f4-1a14-41e8-89a8-2ff094c7db2e",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4f85f0d6-aeef-41de-be92-232e7eda933d"
        },
        "item": {
          "id": "15e69108-d1c1-4df4-b7ae-39a8bd4d4015",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "15e69108-d1c1-4df4-b7ae-39a8bd4d4015",
        "cursor": {
          "ref": "0583c0f4-1a14-41e8-89a8-2ff094c7db2e",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4f85f0d6-aeef-41de-be92-232e7eda933d"
        },
        "item": {
          "id": "15e69108-d1c1-4df4-b7ae-39a8bd4d4015",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f8377efd-9afc-4f86-aaf9-99e210c6a8b8",
        "cursor": {
          "ref": "199e4c64-e540-4330-9a23-23a6c42c1af3",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c8f61bd0-8e90-419e-afab-8551f3872a64"
        },
        "item": {
          "id": "f8377efd-9afc-4f86-aaf9-99e210c6a8b8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "f8377efd-9afc-4f86-aaf9-99e210c6a8b8",
        "cursor": {
          "ref": "199e4c64-e540-4330-9a23-23a6c42c1af3",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c8f61bd0-8e90-419e-afab-8551f3872a64"
        },
        "item": {
          "id": "f8377efd-9afc-4f86-aaf9-99e210c6a8b8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "f8377efd-9afc-4f86-aaf9-99e210c6a8b8",
        "cursor": {
          "ref": "199e4c64-e540-4330-9a23-23a6c42c1af3",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c8f61bd0-8e90-419e-afab-8551f3872a64"
        },
        "item": {
          "id": "f8377efd-9afc-4f86-aaf9-99e210c6a8b8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "dff0ee6b-b8cf-464d-8d16-88817729a413",
        "cursor": {
          "ref": "2ef4103a-bc95-4c01-9614-52671b9fe857",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6c2a68da-cd2c-405a-aec8-cda0dfecb044"
        },
        "item": {
          "id": "dff0ee6b-b8cf-464d-8d16-88817729a413",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "dff0ee6b-b8cf-464d-8d16-88817729a413",
        "cursor": {
          "ref": "2ef4103a-bc95-4c01-9614-52671b9fe857",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6c2a68da-cd2c-405a-aec8-cda0dfecb044"
        },
        "item": {
          "id": "dff0ee6b-b8cf-464d-8d16-88817729a413",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "dff0ee6b-b8cf-464d-8d16-88817729a413",
        "cursor": {
          "ref": "2ef4103a-bc95-4c01-9614-52671b9fe857",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6c2a68da-cd2c-405a-aec8-cda0dfecb044"
        },
        "item": {
          "id": "dff0ee6b-b8cf-464d-8d16-88817729a413",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "4e7e375a-b43b-42f3-92d8-b1ac4afe6fa5",
        "cursor": {
          "ref": "7bca1193-2354-4a30-8bbf-7c6866c778cf",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "67659022-0286-45ef-8346-13f3e34b4812"
        },
        "item": {
          "id": "4e7e375a-b43b-42f3-92d8-b1ac4afe6fa5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4e7e375a-b43b-42f3-92d8-b1ac4afe6fa5",
        "cursor": {
          "ref": "7bca1193-2354-4a30-8bbf-7c6866c778cf",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "67659022-0286-45ef-8346-13f3e34b4812"
        },
        "item": {
          "id": "4e7e375a-b43b-42f3-92d8-b1ac4afe6fa5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4e7e375a-b43b-42f3-92d8-b1ac4afe6fa5",
        "cursor": {
          "ref": "7bca1193-2354-4a30-8bbf-7c6866c778cf",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "67659022-0286-45ef-8346-13f3e34b4812"
        },
        "item": {
          "id": "4e7e375a-b43b-42f3-92d8-b1ac4afe6fa5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3017b067-ed67-4ba6-a996-1b61f08a5d11",
        "cursor": {
          "ref": "84f041d5-f375-4782-9c45-cb2f2a36e7ad",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b269fe2c-63e0-448c-a1eb-803729ec9380"
        },
        "item": {
          "id": "3017b067-ed67-4ba6-a996-1b61f08a5d11",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3017b067-ed67-4ba6-a996-1b61f08a5d11",
        "cursor": {
          "ref": "84f041d5-f375-4782-9c45-cb2f2a36e7ad",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b269fe2c-63e0-448c-a1eb-803729ec9380"
        },
        "item": {
          "id": "3017b067-ed67-4ba6-a996-1b61f08a5d11",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3017b067-ed67-4ba6-a996-1b61f08a5d11",
        "cursor": {
          "ref": "84f041d5-f375-4782-9c45-cb2f2a36e7ad",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b269fe2c-63e0-448c-a1eb-803729ec9380"
        },
        "item": {
          "id": "3017b067-ed67-4ba6-a996-1b61f08a5d11",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3017b067-ed67-4ba6-a996-1b61f08a5d11",
        "cursor": {
          "ref": "84f041d5-f375-4782-9c45-cb2f2a36e7ad",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b269fe2c-63e0-448c-a1eb-803729ec9380"
        },
        "item": {
          "id": "3017b067-ed67-4ba6-a996-1b61f08a5d11",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1854c2d2-977c-42f0-ac7c-8e18c4a7fab3",
        "cursor": {
          "ref": "6d54f50f-8706-42d3-b2cf-035b24fc5289",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8d356b00-aa67-4ea2-b3db-afcb54db30a8"
        },
        "item": {
          "id": "1854c2d2-977c-42f0-ac7c-8e18c4a7fab3",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "1854c2d2-977c-42f0-ac7c-8e18c4a7fab3",
        "cursor": {
          "ref": "6d54f50f-8706-42d3-b2cf-035b24fc5289",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8d356b00-aa67-4ea2-b3db-afcb54db30a8"
        },
        "item": {
          "id": "1854c2d2-977c-42f0-ac7c-8e18c4a7fab3",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "1854c2d2-977c-42f0-ac7c-8e18c4a7fab3",
        "cursor": {
          "ref": "6d54f50f-8706-42d3-b2cf-035b24fc5289",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8d356b00-aa67-4ea2-b3db-afcb54db30a8"
        },
        "item": {
          "id": "1854c2d2-977c-42f0-ac7c-8e18c4a7fab3",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "07dced0f-632f-4fa0-9fde-b8e98f459548",
        "cursor": {
          "ref": "574bf982-1326-4704-8d0a-eeb9bf95a897",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e5187368-6860-4d92-800b-a7c0f1ef312b"
        },
        "item": {
          "id": "07dced0f-632f-4fa0-9fde-b8e98f459548",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "07dced0f-632f-4fa0-9fde-b8e98f459548",
        "cursor": {
          "ref": "574bf982-1326-4704-8d0a-eeb9bf95a897",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e5187368-6860-4d92-800b-a7c0f1ef312b"
        },
        "item": {
          "id": "07dced0f-632f-4fa0-9fde-b8e98f459548",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "07dced0f-632f-4fa0-9fde-b8e98f459548",
        "cursor": {
          "ref": "574bf982-1326-4704-8d0a-eeb9bf95a897",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e5187368-6860-4d92-800b-a7c0f1ef312b"
        },
        "item": {
          "id": "07dced0f-632f-4fa0-9fde-b8e98f459548",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "1aebff46-7ae7-490a-8924-2e0787d1aca5",
        "cursor": {
          "ref": "eee6a454-1eaf-4af0-b494-549a3d116e28",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4237dd41-f37b-47fd-aae2-b3893750ffc2"
        },
        "item": {
          "id": "1aebff46-7ae7-490a-8924-2e0787d1aca5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "1aebff46-7ae7-490a-8924-2e0787d1aca5",
        "cursor": {
          "ref": "eee6a454-1eaf-4af0-b494-549a3d116e28",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4237dd41-f37b-47fd-aae2-b3893750ffc2"
        },
        "item": {
          "id": "1aebff46-7ae7-490a-8924-2e0787d1aca5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "1aebff46-7ae7-490a-8924-2e0787d1aca5",
        "cursor": {
          "ref": "eee6a454-1eaf-4af0-b494-549a3d116e28",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4237dd41-f37b-47fd-aae2-b3893750ffc2"
        },
        "item": {
          "id": "1aebff46-7ae7-490a-8924-2e0787d1aca5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "c63f0dfc-fade-4510-a53f-54bca6631a79",
        "cursor": {
          "ref": "6af676ca-c28d-48d4-aa9f-5aebaed61621",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ff265b40-d733-4bfd-b108-95491201d990"
        },
        "item": {
          "id": "c63f0dfc-fade-4510-a53f-54bca6631a79",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c63f0dfc-fade-4510-a53f-54bca6631a79",
        "cursor": {
          "ref": "6af676ca-c28d-48d4-aa9f-5aebaed61621",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ff265b40-d733-4bfd-b108-95491201d990"
        },
        "item": {
          "id": "c63f0dfc-fade-4510-a53f-54bca6631a79",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c63f0dfc-fade-4510-a53f-54bca6631a79",
        "cursor": {
          "ref": "6af676ca-c28d-48d4-aa9f-5aebaed61621",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ff265b40-d733-4bfd-b108-95491201d990"
        },
        "item": {
          "id": "c63f0dfc-fade-4510-a53f-54bca6631a79",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d497b3b7-dddd-4462-ae10-a9fe2f1deee1",
        "cursor": {
          "ref": "870300ae-9d94-4f8a-86b3-3142e3ba57fa",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "54f35994-1f4a-433e-b76d-87c5d7258753"
        },
        "item": {
          "id": "d497b3b7-dddd-4462-ae10-a9fe2f1deee1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "d497b3b7-dddd-4462-ae10-a9fe2f1deee1",
        "cursor": {
          "ref": "870300ae-9d94-4f8a-86b3-3142e3ba57fa",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "54f35994-1f4a-433e-b76d-87c5d7258753"
        },
        "item": {
          "id": "d497b3b7-dddd-4462-ae10-a9fe2f1deee1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "d497b3b7-dddd-4462-ae10-a9fe2f1deee1",
        "cursor": {
          "ref": "870300ae-9d94-4f8a-86b3-3142e3ba57fa",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "54f35994-1f4a-433e-b76d-87c5d7258753"
        },
        "item": {
          "id": "d497b3b7-dddd-4462-ae10-a9fe2f1deee1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "b8f394b2-1e60-4fde-b6f1-34bca6c68c6c",
        "cursor": {
          "ref": "df9ba8ae-6d1b-478b-bee7-ff7e894f4714",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8ea56379-4e02-4f96-b33b-163492d3f21a"
        },
        "item": {
          "id": "b8f394b2-1e60-4fde-b6f1-34bca6c68c6c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b8f394b2-1e60-4fde-b6f1-34bca6c68c6c",
        "cursor": {
          "ref": "df9ba8ae-6d1b-478b-bee7-ff7e894f4714",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8ea56379-4e02-4f96-b33b-163492d3f21a"
        },
        "item": {
          "id": "b8f394b2-1e60-4fde-b6f1-34bca6c68c6c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b8f394b2-1e60-4fde-b6f1-34bca6c68c6c",
        "cursor": {
          "ref": "df9ba8ae-6d1b-478b-bee7-ff7e894f4714",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8ea56379-4e02-4f96-b33b-163492d3f21a"
        },
        "item": {
          "id": "b8f394b2-1e60-4fde-b6f1-34bca6c68c6c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ebeaca20-d972-4d97-885f-b73d62c425cd",
        "cursor": {
          "ref": "029df91c-0186-485a-acd1-1de04fd0d14c",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2c440996-441f-45fa-8cd8-29ac6f82b313"
        },
        "item": {
          "id": "ebeaca20-d972-4d97-885f-b73d62c425cd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ebeaca20-d972-4d97-885f-b73d62c425cd",
        "cursor": {
          "ref": "029df91c-0186-485a-acd1-1de04fd0d14c",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2c440996-441f-45fa-8cd8-29ac6f82b313"
        },
        "item": {
          "id": "ebeaca20-d972-4d97-885f-b73d62c425cd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ebeaca20-d972-4d97-885f-b73d62c425cd",
        "cursor": {
          "ref": "029df91c-0186-485a-acd1-1de04fd0d14c",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2c440996-441f-45fa-8cd8-29ac6f82b313"
        },
        "item": {
          "id": "ebeaca20-d972-4d97-885f-b73d62c425cd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8d2bd149-c9b1-47d8-8582-82f904863c92",
        "cursor": {
          "ref": "51f361bd-0f79-4778-8bbf-36f74a9fb51e",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c1fb2c61-4db8-44e8-85f7-a429a50a5ec5"
        },
        "item": {
          "id": "8d2bd149-c9b1-47d8-8582-82f904863c92",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8d2bd149-c9b1-47d8-8582-82f904863c92",
        "cursor": {
          "ref": "51f361bd-0f79-4778-8bbf-36f74a9fb51e",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c1fb2c61-4db8-44e8-85f7-a429a50a5ec5"
        },
        "item": {
          "id": "8d2bd149-c9b1-47d8-8582-82f904863c92",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8d2bd149-c9b1-47d8-8582-82f904863c92",
        "cursor": {
          "ref": "51f361bd-0f79-4778-8bbf-36f74a9fb51e",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c1fb2c61-4db8-44e8-85f7-a429a50a5ec5"
        },
        "item": {
          "id": "8d2bd149-c9b1-47d8-8582-82f904863c92",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0fbfd370-9422-44f3-b14c-7792f6d7b791",
        "cursor": {
          "ref": "9431d272-448b-4098-b667-2deb72b7980c",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d1aad53c-fdd3-4b99-a796-2d04f8918a1c"
        },
        "item": {
          "id": "0fbfd370-9422-44f3-b14c-7792f6d7b791",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0fbfd370-9422-44f3-b14c-7792f6d7b791",
        "cursor": {
          "ref": "9431d272-448b-4098-b667-2deb72b7980c",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d1aad53c-fdd3-4b99-a796-2d04f8918a1c"
        },
        "item": {
          "id": "0fbfd370-9422-44f3-b14c-7792f6d7b791",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "59b9dd8f-03b8-45d7-aa84-966ed022e045",
        "cursor": {
          "ref": "a02dd81a-c1c4-4cd6-b56e-43e94aee2ee8",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4dae39a3-d6ac-4eea-9f2c-d2a120b9f42b"
        },
        "item": {
          "id": "59b9dd8f-03b8-45d7-aa84-966ed022e045",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "59b9dd8f-03b8-45d7-aa84-966ed022e045",
        "cursor": {
          "ref": "a02dd81a-c1c4-4cd6-b56e-43e94aee2ee8",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4dae39a3-d6ac-4eea-9f2c-d2a120b9f42b"
        },
        "item": {
          "id": "59b9dd8f-03b8-45d7-aa84-966ed022e045",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "59b9dd8f-03b8-45d7-aa84-966ed022e045",
        "cursor": {
          "ref": "a02dd81a-c1c4-4cd6-b56e-43e94aee2ee8",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4dae39a3-d6ac-4eea-9f2c-d2a120b9f42b"
        },
        "item": {
          "id": "59b9dd8f-03b8-45d7-aa84-966ed022e045",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "75b20598-0537-48e1-ba04-0c254b947c29",
        "cursor": {
          "ref": "92a6b558-2d57-49d6-8d88-18a69ccfe645",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "51afbad6-4ef6-416e-81e5-5fe8e025e2d1"
        },
        "item": {
          "id": "75b20598-0537-48e1-ba04-0c254b947c29",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "75b20598-0537-48e1-ba04-0c254b947c29",
        "cursor": {
          "ref": "92a6b558-2d57-49d6-8d88-18a69ccfe645",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "51afbad6-4ef6-416e-81e5-5fe8e025e2d1"
        },
        "item": {
          "id": "75b20598-0537-48e1-ba04-0c254b947c29",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "04d0370f-503e-4bde-b119-e40555f92cef",
        "cursor": {
          "ref": "7e72825d-295f-4d0d-853d-2229b93c5e30",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dd1bad0a-9dff-42ce-b703-39562af33689"
        },
        "item": {
          "id": "04d0370f-503e-4bde-b119-e40555f92cef",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "04d0370f-503e-4bde-b119-e40555f92cef",
        "cursor": {
          "ref": "7e72825d-295f-4d0d-853d-2229b93c5e30",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dd1bad0a-9dff-42ce-b703-39562af33689"
        },
        "item": {
          "id": "04d0370f-503e-4bde-b119-e40555f92cef",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "04d0370f-503e-4bde-b119-e40555f92cef",
        "cursor": {
          "ref": "7e72825d-295f-4d0d-853d-2229b93c5e30",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dd1bad0a-9dff-42ce-b703-39562af33689"
        },
        "item": {
          "id": "04d0370f-503e-4bde-b119-e40555f92cef",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b6b95d54-ce2a-41bc-8841-6d17dba7cf0d",
        "cursor": {
          "ref": "ee7ac593-9f09-4a55-83db-59b58294051c",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "87e22ed2-6268-45b1-83b1-a13fdf66fe4f"
        },
        "item": {
          "id": "b6b95d54-ce2a-41bc-8841-6d17dba7cf0d",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b6b95d54-ce2a-41bc-8841-6d17dba7cf0d",
        "cursor": {
          "ref": "ee7ac593-9f09-4a55-83db-59b58294051c",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "87e22ed2-6268-45b1-83b1-a13fdf66fe4f"
        },
        "item": {
          "id": "b6b95d54-ce2a-41bc-8841-6d17dba7cf0d",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "161c456e-9c3f-4fd7-9f28-591aba9b953f",
        "cursor": {
          "ref": "58096c4c-7508-4d9e-8e44-e6be5dc8c8b8",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8b8c5c14-5462-4010-957c-c17e840f4365"
        },
        "item": {
          "id": "161c456e-9c3f-4fd7-9f28-591aba9b953f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "161c456e-9c3f-4fd7-9f28-591aba9b953f",
        "cursor": {
          "ref": "58096c4c-7508-4d9e-8e44-e6be5dc8c8b8",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8b8c5c14-5462-4010-957c-c17e840f4365"
        },
        "item": {
          "id": "161c456e-9c3f-4fd7-9f28-591aba9b953f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "161c456e-9c3f-4fd7-9f28-591aba9b953f",
        "cursor": {
          "ref": "58096c4c-7508-4d9e-8e44-e6be5dc8c8b8",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8b8c5c14-5462-4010-957c-c17e840f4365"
        },
        "item": {
          "id": "161c456e-9c3f-4fd7-9f28-591aba9b953f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c6e62a1f-6c4d-4680-b6fd-3a0b873385ef",
        "cursor": {
          "ref": "70a9cec0-be9c-4820-a8f9-540dc8b0d4d4",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6c17b627-ed41-4300-b85f-04b8ca4b6946"
        },
        "item": {
          "id": "c6e62a1f-6c4d-4680-b6fd-3a0b873385ef",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "c6e62a1f-6c4d-4680-b6fd-3a0b873385ef",
        "cursor": {
          "ref": "70a9cec0-be9c-4820-a8f9-540dc8b0d4d4",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6c17b627-ed41-4300-b85f-04b8ca4b6946"
        },
        "item": {
          "id": "c6e62a1f-6c4d-4680-b6fd-3a0b873385ef",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "a147907e-9637-454c-909e-f36d60ab2318",
        "cursor": {
          "ref": "5ddbb77c-553b-4f52-b257-2017b0cc90b6",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fb32e074-57b5-4178-9d8b-94fbf7c4ff2b"
        },
        "item": {
          "id": "a147907e-9637-454c-909e-f36d60ab2318",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "a147907e-9637-454c-909e-f36d60ab2318",
        "cursor": {
          "ref": "5ddbb77c-553b-4f52-b257-2017b0cc90b6",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fb32e074-57b5-4178-9d8b-94fbf7c4ff2b"
        },
        "item": {
          "id": "a147907e-9637-454c-909e-f36d60ab2318",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "a147907e-9637-454c-909e-f36d60ab2318",
        "cursor": {
          "ref": "5ddbb77c-553b-4f52-b257-2017b0cc90b6",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fb32e074-57b5-4178-9d8b-94fbf7c4ff2b"
        },
        "item": {
          "id": "a147907e-9637-454c-909e-f36d60ab2318",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "71841abe-8d47-4690-b953-d31f7230ae23",
        "cursor": {
          "ref": "04a0a2d1-949e-4eb1-a1e4-4a3ad71e87b4",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "35ed9867-120c-40df-a4cf-b90d36d923db"
        },
        "item": {
          "id": "71841abe-8d47-4690-b953-d31f7230ae23",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "71841abe-8d47-4690-b953-d31f7230ae23",
        "cursor": {
          "ref": "04a0a2d1-949e-4eb1-a1e4-4a3ad71e87b4",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "35ed9867-120c-40df-a4cf-b90d36d923db"
        },
        "item": {
          "id": "71841abe-8d47-4690-b953-d31f7230ae23",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2eee5379-0cac-4c4c-b4df-08d50697e21f",
        "cursor": {
          "ref": "bd2010a4-ee78-499c-bcf4-0419a0ef7e16",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ae972cbe-c4fc-48ae-90ee-444a2fc47a15"
        },
        "item": {
          "id": "2eee5379-0cac-4c4c-b4df-08d50697e21f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "2eee5379-0cac-4c4c-b4df-08d50697e21f",
        "cursor": {
          "ref": "bd2010a4-ee78-499c-bcf4-0419a0ef7e16",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ae972cbe-c4fc-48ae-90ee-444a2fc47a15"
        },
        "item": {
          "id": "2eee5379-0cac-4c4c-b4df-08d50697e21f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "2eee5379-0cac-4c4c-b4df-08d50697e21f",
        "cursor": {
          "ref": "bd2010a4-ee78-499c-bcf4-0419a0ef7e16",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ae972cbe-c4fc-48ae-90ee-444a2fc47a15"
        },
        "item": {
          "id": "2eee5379-0cac-4c4c-b4df-08d50697e21f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}