{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "470a377e-0a3c-41ac-b52c-162aa7724b00",
        "name": "Issue Credential",
        "item": [
          {
            "id": "a2a7acbc-4ca1-4efe-b4bd-c1a54c994e5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8223bcaf-d613-4988-b24d-87f313fc5d60",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3628116b-6999-45cf-bba1-38504dd991b5",
                    "name": "credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3a10f2-6b52-4d1a-8b00-ccdad995fde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffca961-e339-4778-8882-d80d13880144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85e575d-4db9-4d7b-9133-5e25faa73334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56142508-08ed-40d1-9494-1688d498a327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f133d215-b198-4a30-83a1-b74c0a93f840",
                    "name": "credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cad9a57-b3dd-4cd7-81f2-77273f032c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4442a4-a1ef-49f0-ad9c-c6fd524503f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02bf5199-76d5-4b26-8db1-1630bbd19427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "143de94c-605c-4080-9673-4fe422699749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041f622b-c501-4668-8e3e-c87155206738",
                    "name": "credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec76802d-4633-4310-aad3-246a8358f65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e272cb-7eb9-43db-a2c0-261feda31226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ae77e7-1469-4371-aec6-e6a51b2b938f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7467a48-037f-4890-8d98-80b94c86d23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc21aaa-a857-4876-80fb-314ff935d934",
                    "name": "credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15f7810-7db9-4750-b2d9-ca63603e9c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd828d5-ef42-4552-ab86-c22e51cd48c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a7a179-88ed-4a46-a537-4b2bf8b08ba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5c4ab8a-9ea7-412c-ba50-b98c2a805c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbf9062-ec2c-450c-9e58-7146aa71a1b8",
                    "name": "credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289564a2-e1e1-4954-8805-6451c9f4e7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84950caa-8d25-40ef-b501-cda974ddb441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3211e4ac-1a8f-4d17-bd4b-1b1b984592a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46595cc3-0117-4f8b-9e3b-d87f8b233dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bad0301-d6a3-4e1d-aa41-e970984d6e02",
                    "name": "credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d38fb8-fe4f-4ee1-ac71-66340e0284fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9d9651-20a4-4dcb-8071-eb6110e88fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc753728-d20b-4adf-9e9d-0d2d2056f9dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61e1ff7c-8231-4999-928a-80caf47a34cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfc9111-17b8-49b4-a7e5-aefd6e33ae87",
                    "name": "credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b404abaf-3dd0-41d4-8c6d-d5c67ec8fabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b26eeb9-ac92-4d06-ba13-b8f2ac3be498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b18d26b-52c3-4719-ba65-55c4551b7570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "920fcef6-c655-4d10-b2c2-de107f746416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd44251e-3942-4ee6-ba41-c669f121596c",
                    "name": "credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2043851-88ea-4068-a582-60062696fddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96b1eba-063b-4d56-a8d2-1ee9697e9ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9ea820-949b-4704-bfa3-76b2f0e1c6d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b305b86d-d9fa-4cdb-ae55-b14673658586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84544108-be43-443f-9672-98e05bc03b07",
                    "name": "credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697f32e5-6742-4d79-a4ee-bd5d869c538b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a81172-ed51-4097-81ef-ffc6432752eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303169b2-84ac-4010-8009-3465a26cc575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f97ef422-0114-4390-a844-38e69a44279f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947238fc-d010-4c3b-a0c8-9be5cc8e9ba4",
                    "name": "credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7989b4-58a3-457d-84ff-2355fb517676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7985bf7d-2dcd-4fce-bc71-dcb72a2d5ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaebd480-63c8-4d7a-a624-52aa75465798",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0297220c-8dbd-4117-be0d-2b3d43f96959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb9c22a-d064-4a4f-9c4c-9f5c0a4b4172",
                    "name": "credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34afdd9-6013-46e0-8c98-f8f1aac47058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425fa815-88b6-4e06-8754-cfa7c039bd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa119fd6-7bac-4043-941e-59d871850fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c65e94c-9ca9-409f-87a5-cd323fb7fd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d4ea03-76b7-454e-af8f-18f463d5d6dc",
                    "name": "credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5455e17d-9b29-4be6-a779-718bc77e5007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517c3631-434a-4933-b5c4-19e7b32030c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d866a47-9872-4966-aaea-aec170950849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83d7e5fa-eb34-4eaf-9e2c-512a21cc6c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9faff09a-a07c-4cdb-bc14-32fed4d1c914",
                    "name": "credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bf688c-6fdf-4987-8ea8-9f1bdb58cd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b44fa2-a10a-42f6-bcfb-0cb9ad5cf219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8aae7b-039b-4e03-8b43-5182060e2d42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2150d047-eaa4-4cd1-8a1f-2b0dcc0bc172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf867c9-d405-45f9-8f06-786617c8e0d1",
                    "name": "credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd2a8ee-d23e-4c3a-a2ea-be0e3f801813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ee777e-cbf9-4269-b7bc-ae59ac915770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024c3a9f-2dd7-471f-afc1-8517b3ea47a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c3facc7-b367-4d29-9465-57eb69daa88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e28485-29e5-4ca9-9cd4-878ee4257161",
                    "name": "credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd665bc-8b64-4555-be43-d4ed9a0fc171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989d03da-ca9c-4e87-a129-27d8cf722b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a8be20-c54f-42c3-a5f1-92fa51dd8de8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8936b3cf-7a6f-4dd3-a1e5-9da471ccaa8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66c996e-d35b-4873-acc0-2cb93fc01521",
                    "name": "credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f852857-d18f-406a-9335-3f2bcc84f8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b908c2f-9a7e-40b1-9332-577411904c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6bd5b3-bae1-4aec-9a52-a8ea7e3ba066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12c59f79-6c6b-474d-8e27-9a4f1f5b4392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e1ab60-065f-4611-b2be-9c06cc65b377",
                    "name": "credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ca8c36-db22-4f07-8df4-332272616833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877a5019-2b06-43cf-88e6-3cb912971661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928a0dc5-ee83-47a2-ae2d-b0b686ecdb19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b013105-b5e6-4071-bc86-df898f7c14a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68c815a-9f7c-49e1-bd29-6402c68530ac",
                    "name": "options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d8b786-b3e7-4dd1-8a1a-4b3aaed53395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1260d9d6-86e0-4f09-9a33-e03d25662d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cce2dc-079e-46e4-ac28-b04cc3dc9793",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f09cac80-cdcb-4375-b57c-e7beefa92967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899c885e-001d-4521-8a93-7590f74b236a",
                    "name": "options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc782e0-e308-4b6c-a82f-55bf165c8057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746fef13-862c-4bbe-92fb-c15423599784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e66386-319c-475d-bae1-98969e30b00f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20be703a-7df6-43b9-bc61-c2cd96c8c805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856ca7c3-bbf0-4b41-9332-abaeae95b798",
                    "name": "options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c9ae17-e62b-4108-986c-5eed642129cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a164d02-d2e0-4ba2-90cd-de0c0ff22c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779b2d7b-1bcb-4536-87b7-963e36c515de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8758ecbc-5688-4e15-8f07-4063c289ab6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94aaef45-e601-41a4-8dd7-0deb25df3403",
                    "name": "options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214d8446-8c71-4c57-a1a1-d580e4bc524f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b919eb-5b91-49d2-8354-6e264f669b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8b3d29-f1b6-4a47-984e-0cdef3e78895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af013eb0-92ff-4eeb-98d5-761c59828da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f874920-3dc9-4369-bf9b-2882a9364dee",
                    "name": "options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a830ffe-f784-466d-9668-990a740d60fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f00ceb-5c16-4a7c-ab19-e5a9e64e3e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6b611d-f6d3-425b-9cee-8ff56c455c68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78de5639-6ed9-48b2-bb61-6f9cfa14e6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bd0c86-c2e5-47e0-9fcd-a9be38953cee",
                    "name": "options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19412538-4344-4cd0-a228-157e4bf5f2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7bcd0f7-47c2-4550-88ee-18e8a40ffd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8473e034-1c25-4867-8f51-06c449192962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "979bf27d-2ca1-47f4-945a-5f9031ca7167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17512f58-a51f-4ceb-98a9-306aa88db503",
                    "name": "options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0be7d2-b015-4258-a717-58968574984b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d782547a-b560-4bf5-a397-1867651b39cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b19f32d-aee9-4201-8fa0-be8b3e4de7a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfa9254f-c37b-4fda-a4d6-f989e2c9b69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf885e3a-7b30-4f4f-b630-9e2908cdc005",
                    "name": "options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17cc3a4-16da-4468-9daa-064ca5a3fe38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec3832a-027e-4c85-935b-9f21bd7a1f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70d725c-ec24-4a6f-a2e2-849aed4c9c82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c72a630c-47b1-43c1-925c-142726c99955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca9dcb5-b7da-44d6-8ed2-f16288b17e96",
                    "name": "options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eeeb31e-a526-4adf-91df-a0b03c460d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "706d92e5-f173-4f8d-958a-63c1c71474fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392a9f89-8256-4449-b93d-73f83f5e4e12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebdd53c4-13a3-4395-86ba-6ac5058c9626"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "52683d3d-87f3-4fa6-ba69-7c9f9f1135f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c0696b5-a1a9-42ac-86ec-729ee9cc8c19",
                    "name": "missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed8c167-79eb-4adc-af38-299e7014fc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1bf9dfe3-5b23-4720-b446-65c782fdfaf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cf6cad-0b37-42dc-80bc-8040efbc39d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "9d365590-e2d9-4d56-8411-9e1b2b13f6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854fffca-ac6f-4f7a-a786-010f5eba0c2a",
                    "name": "missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4ba1ea-92c5-498c-ae4c-04caf4226b4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f8492f2-254d-4bc5-bb25-0c2919b2cb06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c86d5ae-5329-4ea5-a9f3-4bb7f0febbf1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "38275b5d-691a-43d3-8a58-a423a890f7d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "152518de-3f30-4ca0-8fda-f3e61231ccec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5c1d96e-5e5b-495c-992d-c12f8391772e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dde8f33e-ff4f-47f1-9c35-bb2a85a3ade5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae62f00e-fff1-48d1-af4a-cb2042f6e324"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0f4db68f-8e60-47f7-af0d-9529fb0e90dd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75c11893-3a12-4f64-900a-537064d57a51"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "19e2e003-625d-479f-a38e-992ca33e39b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4b9f286-6c70-4409-8ce3-8b95a73bc67a"
                }
              }
            ]
          },
          {
            "id": "fee862e9-1b8e-4d95-9420-e85ed96ed21b",
            "name": "Happy Path",
            "item": [
              {
                "id": "3d317e23-d568-4903-8d75-f9f35829f130",
                "name": "base",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f00f95cb-75e6-4980-b147-fed195cc98e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8e2fac3-1b1e-4a08-bb1d-22ddae8086fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32a15307-c46e-4f2a-8e2b-8dd427325ad5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "9d0e719f-40bb-403b-a27e-992551050f30"
                    }
                  }
                ]
              },
              {
                "id": "07abdb25-c785-4cf9-a595-08fd5659e2f3",
                "name": "credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "048cf9e2-c929-454d-87b7-f91d4f09d1a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1108b66a-d753-4aee-bc59-a6928699b29c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d618e734-b05c-4cb1-b908-a1b596f8014e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "e6eab59c-45a9-42ce-aa8a-12d9f9963290"
                    }
                  }
                ]
              },
              {
                "id": "e239ec35-5763-4cce-83f0-48dd208e5045",
                "name": "credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "610e3854-5d0a-419b-864e-ae9bcd1c3cc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "620157c8-4152-4c18-b51a-9dff00a60f28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1029abc-49cd-4b77-a238-c101a5243bef",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "2f5ade87-86d0-4d79-a8dd-3b866e3673e3"
                    }
                  }
                ]
              },
              {
                "id": "b4bb3d32-e211-4d8a-bd1e-a693eb4c0469",
                "name": "credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60a76da4-72de-40e0-b08b-a3e106d163b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5450002a-8d4b-4759-8de5-7949da420ee8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "689a112a-5eee-4533-b9e2-9cfca7b62811",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "468bf338-b27c-421f-9cb7-5f8b1a57eb34"
                    }
                  }
                ]
              },
              {
                "id": "1e04f915-ac3a-4e25-ba61-52e38028f3b3",
                "name": "credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fe61b32-9b0c-4ffa-a430-6e64a76a9be8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cff12f9d-0774-402b-9a05-9a7e35510a28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1aa62316-97c8-4b35-94a7-b62198545497",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "a8608f0f-8830-4f31-b9a0-c2054d8d1049"
                    }
                  }
                ]
              },
              {
                "id": "6d5baf17-eafe-4432-a3ed-0a3bd4212315",
                "name": "credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d861fed-fcf0-46ee-85ad-dbc457ae7944",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3915eaf4-50ae-4b3f-a8a0-fe0a80218e0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d53fa11f-ef15-4493-9ab2-68b1bd3ff717",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "f03653b7-5518-41c5-80b4-0ba3c25ee7e3"
                    }
                  }
                ]
              },
              {
                "id": "3dcfb5ce-1b1c-4913-995f-4f6cf9409da3",
                "name": "options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91e034a9-ef2e-42af-bb78-a5da8075e6be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7adfdfc4-34b1-4b67-a962-f28dd9fd31d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f858e4a-eedc-4cdb-a0b9-810f368e66af",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "b7227082-0c63-4ad6-8046-8f853affeb43"
                    }
                  }
                ]
              },
              {
                "id": "6a0d7368-0624-4dbc-95aa-ec4da9b3fe1e",
                "name": "options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7aaf8a83-6e9e-48f0-b89b-03d17816192e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c972dff-84f6-4a93-b995-b7c8bae8a39c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4277b707-e4e2-4a7e-af39-579f850d5bf6",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "a0f04e98-b570-46b1-b432-34bb619cda87"
                    }
                  }
                ]
              },
              {
                "id": "8c50688b-989b-40cd-b500-86a08d799b8c",
                "name": "options:opt.credentialStatus Copy",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f375729a-aa50-40f7-91f9-b5fc1d12310f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6dbe0015-e655-49db-aad9-8ac11397e029"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8475c62-0f06-4adb-b2e7-9bb2233af905",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "e5c2670b-a244-475d-bbb2-e9580bec3c60"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b38d08cc-12d8-4cbe-ab64-7b188fa9cd4f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b45d63ea-ae11-48a8-afa3-2963afba4c54"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e68a7cd3-da74-4c89-9cda-7bc727208d08",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a2079b2-9300-4cef-9d27-9e8d2d98ac9d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09e661fd-4e92-47cf-bf0b-732f03a9c2da",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "563ced87-0158-4d40-a181-bf9542bca8e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b6de05f-e918-4024-931a-cda1823e139a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cf3eb3b-c1d0-4581-a16e-ac586f15e486"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 300,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 75,
        "pending": 0,
        "failed": 75
      },
      "tests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 74,
        "pending": 0,
        "failed": 72
      },
      "testScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1657931051592,
      "completed": 1657931053310
    },
    "executions": [
      {
        "id": "3628116b-6999-45cf-bba1-38504dd991b5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "38ef3116-3b55-4e2b-8116-e9522491bb89",
          "httpRequestId": "40eb066e-6dc2-46d9-ae56-72e31a934798"
        },
        "item": {
          "id": "3628116b-6999-45cf-bba1-38504dd991b5",
          "name": "credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "3628116b-6999-45cf-bba1-38504dd991b5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "38ef3116-3b55-4e2b-8116-e9522491bb89",
          "httpRequestId": "40eb066e-6dc2-46d9-ae56-72e31a934798"
        },
        "item": {
          "id": "3628116b-6999-45cf-bba1-38504dd991b5",
          "name": "credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "f133d215-b198-4a30-83a1-b74c0a93f840",
        "cursor": {
          "ref": "9e57094d-0e8e-4798-b7b5-05e9b75096df",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5d7df9ed-72c0-4065-b02d-de70a504c47f"
        },
        "item": {
          "id": "f133d215-b198-4a30-83a1-b74c0a93f840",
          "name": "credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "f133d215-b198-4a30-83a1-b74c0a93f840",
        "cursor": {
          "ref": "9e57094d-0e8e-4798-b7b5-05e9b75096df",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5d7df9ed-72c0-4065-b02d-de70a504c47f"
        },
        "item": {
          "id": "f133d215-b198-4a30-83a1-b74c0a93f840",
          "name": "credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "041f622b-c501-4668-8e3e-c87155206738",
        "cursor": {
          "ref": "6941d346-e70c-4018-b6bf-0a922d149531",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "54e91d4e-17c5-4fba-97ca-00c428845796"
        },
        "item": {
          "id": "041f622b-c501-4668-8e3e-c87155206738",
          "name": "credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "041f622b-c501-4668-8e3e-c87155206738",
        "cursor": {
          "ref": "6941d346-e70c-4018-b6bf-0a922d149531",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "54e91d4e-17c5-4fba-97ca-00c428845796"
        },
        "item": {
          "id": "041f622b-c501-4668-8e3e-c87155206738",
          "name": "credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "5fc21aaa-a857-4876-80fb-314ff935d934",
        "cursor": {
          "ref": "635a03f8-620b-4a40-8a06-c28fe5dac52c",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3782beb7-f442-40ad-803a-5d2e219d2850"
        },
        "item": {
          "id": "5fc21aaa-a857-4876-80fb-314ff935d934",
          "name": "credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5fc21aaa-a857-4876-80fb-314ff935d934",
        "cursor": {
          "ref": "635a03f8-620b-4a40-8a06-c28fe5dac52c",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3782beb7-f442-40ad-803a-5d2e219d2850"
        },
        "item": {
          "id": "5fc21aaa-a857-4876-80fb-314ff935d934",
          "name": "credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1bbf9062-ec2c-450c-9e58-7146aa71a1b8",
        "cursor": {
          "ref": "d2220706-647e-47f1-a2e5-a5cc2364b7f2",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "38a5c698-216c-460e-955f-992ed373cc53"
        },
        "item": {
          "id": "1bbf9062-ec2c-450c-9e58-7146aa71a1b8",
          "name": "credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "1bbf9062-ec2c-450c-9e58-7146aa71a1b8",
        "cursor": {
          "ref": "d2220706-647e-47f1-a2e5-a5cc2364b7f2",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "38a5c698-216c-460e-955f-992ed373cc53"
        },
        "item": {
          "id": "1bbf9062-ec2c-450c-9e58-7146aa71a1b8",
          "name": "credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "5bad0301-d6a3-4e1d-aa41-e970984d6e02",
        "cursor": {
          "ref": "6aefeaa0-236b-4b07-a9ac-5cbf8dd956a3",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "157642a2-0a93-4006-8700-bddd1b04a7b2"
        },
        "item": {
          "id": "5bad0301-d6a3-4e1d-aa41-e970984d6e02",
          "name": "credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "5bad0301-d6a3-4e1d-aa41-e970984d6e02",
        "cursor": {
          "ref": "6aefeaa0-236b-4b07-a9ac-5cbf8dd956a3",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "157642a2-0a93-4006-8700-bddd1b04a7b2"
        },
        "item": {
          "id": "5bad0301-d6a3-4e1d-aa41-e970984d6e02",
          "name": "credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "fcfc9111-17b8-49b4-a7e5-aefd6e33ae87",
        "cursor": {
          "ref": "42ec7e09-f52f-48a4-9522-af051a73d8ba",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "337e7e7f-b659-44a0-8002-80a708cef17d"
        },
        "item": {
          "id": "fcfc9111-17b8-49b4-a7e5-aefd6e33ae87",
          "name": "credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "fcfc9111-17b8-49b4-a7e5-aefd6e33ae87",
        "cursor": {
          "ref": "42ec7e09-f52f-48a4-9522-af051a73d8ba",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "337e7e7f-b659-44a0-8002-80a708cef17d"
        },
        "item": {
          "id": "fcfc9111-17b8-49b4-a7e5-aefd6e33ae87",
          "name": "credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "fd44251e-3942-4ee6-ba41-c669f121596c",
        "cursor": {
          "ref": "6da19c87-8276-4c6d-b330-d7287a0e6fea",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b5f47f11-8005-43aa-bfcd-411f6f21780a"
        },
        "item": {
          "id": "fd44251e-3942-4ee6-ba41-c669f121596c",
          "name": "credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fd44251e-3942-4ee6-ba41-c669f121596c",
        "cursor": {
          "ref": "6da19c87-8276-4c6d-b330-d7287a0e6fea",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b5f47f11-8005-43aa-bfcd-411f6f21780a"
        },
        "item": {
          "id": "fd44251e-3942-4ee6-ba41-c669f121596c",
          "name": "credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "84544108-be43-443f-9672-98e05bc03b07",
        "cursor": {
          "ref": "88a6a4dd-e174-4605-907c-2b356bbb348b",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "69a2a68c-b0f3-451a-a96b-3c2ca6304c87"
        },
        "item": {
          "id": "84544108-be43-443f-9672-98e05bc03b07",
          "name": "credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "84544108-be43-443f-9672-98e05bc03b07",
        "cursor": {
          "ref": "88a6a4dd-e174-4605-907c-2b356bbb348b",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "69a2a68c-b0f3-451a-a96b-3c2ca6304c87"
        },
        "item": {
          "id": "84544108-be43-443f-9672-98e05bc03b07",
          "name": "credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "947238fc-d010-4c3b-a0c8-9be5cc8e9ba4",
        "cursor": {
          "ref": "45713901-5506-4211-8fa1-aa062ac98597",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d3be715d-c0bc-44d9-9e49-e918afd2cc5d"
        },
        "item": {
          "id": "947238fc-d010-4c3b-a0c8-9be5cc8e9ba4",
          "name": "credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "947238fc-d010-4c3b-a0c8-9be5cc8e9ba4",
        "cursor": {
          "ref": "45713901-5506-4211-8fa1-aa062ac98597",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d3be715d-c0bc-44d9-9e49-e918afd2cc5d"
        },
        "item": {
          "id": "947238fc-d010-4c3b-a0c8-9be5cc8e9ba4",
          "name": "credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "5eb9c22a-d064-4a4f-9c4c-9f5c0a4b4172",
        "cursor": {
          "ref": "93f3dee8-57cf-40b2-a9f1-988c1d5df636",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3a4432df-689c-420e-a70b-372fb0b3085b"
        },
        "item": {
          "id": "5eb9c22a-d064-4a4f-9c4c-9f5c0a4b4172",
          "name": "credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "5eb9c22a-d064-4a4f-9c4c-9f5c0a4b4172",
        "cursor": {
          "ref": "93f3dee8-57cf-40b2-a9f1-988c1d5df636",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3a4432df-689c-420e-a70b-372fb0b3085b"
        },
        "item": {
          "id": "5eb9c22a-d064-4a4f-9c4c-9f5c0a4b4172",
          "name": "credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b2d4ea03-76b7-454e-af8f-18f463d5d6dc",
        "cursor": {
          "ref": "76cf356d-3239-4d6e-8114-c005c08d3bfe",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "10c51f4b-cead-49f6-83ef-8ba1c5c45404"
        },
        "item": {
          "id": "b2d4ea03-76b7-454e-af8f-18f463d5d6dc",
          "name": "credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b2d4ea03-76b7-454e-af8f-18f463d5d6dc",
        "cursor": {
          "ref": "76cf356d-3239-4d6e-8114-c005c08d3bfe",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "10c51f4b-cead-49f6-83ef-8ba1c5c45404"
        },
        "item": {
          "id": "b2d4ea03-76b7-454e-af8f-18f463d5d6dc",
          "name": "credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9faff09a-a07c-4cdb-bc14-32fed4d1c914",
        "cursor": {
          "ref": "ec3b892b-1844-46b6-9eee-d097cbdf99ca",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2b007938-2925-4e03-95fb-f0737e67274f"
        },
        "item": {
          "id": "9faff09a-a07c-4cdb-bc14-32fed4d1c914",
          "name": "credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "9faff09a-a07c-4cdb-bc14-32fed4d1c914",
        "cursor": {
          "ref": "ec3b892b-1844-46b6-9eee-d097cbdf99ca",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2b007938-2925-4e03-95fb-f0737e67274f"
        },
        "item": {
          "id": "9faff09a-a07c-4cdb-bc14-32fed4d1c914",
          "name": "credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "1cf867c9-d405-45f9-8f06-786617c8e0d1",
        "cursor": {
          "ref": "5f6ebb49-3377-4af3-b3ef-da735c7b6c35",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "353eb32b-0d63-4075-842e-44fdc7a61163"
        },
        "item": {
          "id": "1cf867c9-d405-45f9-8f06-786617c8e0d1",
          "name": "credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "1cf867c9-d405-45f9-8f06-786617c8e0d1",
        "cursor": {
          "ref": "5f6ebb49-3377-4af3-b3ef-da735c7b6c35",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "353eb32b-0d63-4075-842e-44fdc7a61163"
        },
        "item": {
          "id": "1cf867c9-d405-45f9-8f06-786617c8e0d1",
          "name": "credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "c1e28485-29e5-4ca9-9cd4-878ee4257161",
        "cursor": {
          "ref": "30623b5a-bbc4-4b60-b4ba-a0903fdeff76",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f8fa4386-3281-4e1f-9280-e89fc63a66c7"
        },
        "item": {
          "id": "c1e28485-29e5-4ca9-9cd4-878ee4257161",
          "name": "credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "c1e28485-29e5-4ca9-9cd4-878ee4257161",
        "cursor": {
          "ref": "30623b5a-bbc4-4b60-b4ba-a0903fdeff76",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f8fa4386-3281-4e1f-9280-e89fc63a66c7"
        },
        "item": {
          "id": "c1e28485-29e5-4ca9-9cd4-878ee4257161",
          "name": "credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "e66c996e-d35b-4873-acc0-2cb93fc01521",
        "cursor": {
          "ref": "92321dc2-e821-40a9-9c72-62a16e70118f",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b7edbbcd-2eb4-4691-baba-8f9bf4d75e6f"
        },
        "item": {
          "id": "e66c996e-d35b-4873-acc0-2cb93fc01521",
          "name": "credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e66c996e-d35b-4873-acc0-2cb93fc01521",
        "cursor": {
          "ref": "92321dc2-e821-40a9-9c72-62a16e70118f",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b7edbbcd-2eb4-4691-baba-8f9bf4d75e6f"
        },
        "item": {
          "id": "e66c996e-d35b-4873-acc0-2cb93fc01521",
          "name": "credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "43e1ab60-065f-4611-b2be-9c06cc65b377",
        "cursor": {
          "ref": "698ce370-42d1-454f-bc5d-cf0fbf906778",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f8cb5c75-f8ef-4a22-a876-9be309dc784b"
        },
        "item": {
          "id": "43e1ab60-065f-4611-b2be-9c06cc65b377",
          "name": "credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "43e1ab60-065f-4611-b2be-9c06cc65b377",
        "cursor": {
          "ref": "698ce370-42d1-454f-bc5d-cf0fbf906778",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f8cb5c75-f8ef-4a22-a876-9be309dc784b"
        },
        "item": {
          "id": "43e1ab60-065f-4611-b2be-9c06cc65b377",
          "name": "credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b68c815a-9f7c-49e1-bd29-6402c68530ac",
        "cursor": {
          "ref": "f3ff0c7d-e543-46f8-9469-2cfbbc7e48d4",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "19d31bd1-77a6-405e-87b6-e26a0f6e6427"
        },
        "item": {
          "id": "b68c815a-9f7c-49e1-bd29-6402c68530ac",
          "name": "options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "b68c815a-9f7c-49e1-bd29-6402c68530ac",
        "cursor": {
          "ref": "f3ff0c7d-e543-46f8-9469-2cfbbc7e48d4",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "19d31bd1-77a6-405e-87b6-e26a0f6e6427"
        },
        "item": {
          "id": "b68c815a-9f7c-49e1-bd29-6402c68530ac",
          "name": "options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "899c885e-001d-4521-8a93-7590f74b236a",
        "cursor": {
          "ref": "ae3416c7-0a75-41d6-b2ff-0e1eb3f78e4a",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6b66ce85-e5bd-4c89-9382-689aca9f75df"
        },
        "item": {
          "id": "899c885e-001d-4521-8a93-7590f74b236a",
          "name": "options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "899c885e-001d-4521-8a93-7590f74b236a",
        "cursor": {
          "ref": "ae3416c7-0a75-41d6-b2ff-0e1eb3f78e4a",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6b66ce85-e5bd-4c89-9382-689aca9f75df"
        },
        "item": {
          "id": "899c885e-001d-4521-8a93-7590f74b236a",
          "name": "options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "856ca7c3-bbf0-4b41-9332-abaeae95b798",
        "cursor": {
          "ref": "96928857-86f5-44cc-acc0-c7e536d7fc37",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "80178622-1540-4898-96ee-5dd71779aeea"
        },
        "item": {
          "id": "856ca7c3-bbf0-4b41-9332-abaeae95b798",
          "name": "options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "856ca7c3-bbf0-4b41-9332-abaeae95b798",
        "cursor": {
          "ref": "96928857-86f5-44cc-acc0-c7e536d7fc37",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "80178622-1540-4898-96ee-5dd71779aeea"
        },
        "item": {
          "id": "856ca7c3-bbf0-4b41-9332-abaeae95b798",
          "name": "options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "94aaef45-e601-41a4-8dd7-0deb25df3403",
        "cursor": {
          "ref": "5c79f03d-c0b7-41f6-a7d1-dd59889c6186",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4fa20a7b-57d7-4e74-8516-84017c941a52"
        },
        "item": {
          "id": "94aaef45-e601-41a4-8dd7-0deb25df3403",
          "name": "options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "94aaef45-e601-41a4-8dd7-0deb25df3403",
        "cursor": {
          "ref": "5c79f03d-c0b7-41f6-a7d1-dd59889c6186",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4fa20a7b-57d7-4e74-8516-84017c941a52"
        },
        "item": {
          "id": "94aaef45-e601-41a4-8dd7-0deb25df3403",
          "name": "options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "6f874920-3dc9-4369-bf9b-2882a9364dee",
        "cursor": {
          "ref": "1988502d-5d19-4304-aca4-667af07654d4",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7e406b47-61a3-43a3-9004-3211af87493a"
        },
        "item": {
          "id": "6f874920-3dc9-4369-bf9b-2882a9364dee",
          "name": "options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6f874920-3dc9-4369-bf9b-2882a9364dee",
        "cursor": {
          "ref": "1988502d-5d19-4304-aca4-667af07654d4",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7e406b47-61a3-43a3-9004-3211af87493a"
        },
        "item": {
          "id": "6f874920-3dc9-4369-bf9b-2882a9364dee",
          "name": "options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "12bd0c86-c2e5-47e0-9fcd-a9be38953cee",
        "cursor": {
          "ref": "66fc0547-fee6-4501-90ea-0477db7dccce",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "053782e5-a362-4f77-af04-ef3ee129e3c0"
        },
        "item": {
          "id": "12bd0c86-c2e5-47e0-9fcd-a9be38953cee",
          "name": "options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "12bd0c86-c2e5-47e0-9fcd-a9be38953cee",
        "cursor": {
          "ref": "66fc0547-fee6-4501-90ea-0477db7dccce",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "053782e5-a362-4f77-af04-ef3ee129e3c0"
        },
        "item": {
          "id": "12bd0c86-c2e5-47e0-9fcd-a9be38953cee",
          "name": "options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "17512f58-a51f-4ceb-98a9-306aa88db503",
        "cursor": {
          "ref": "cb181c51-1890-46a0-977c-f18c1038aeaa",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fc094faa-33b4-4ab8-97d4-37dc3b4ec54a"
        },
        "item": {
          "id": "17512f58-a51f-4ceb-98a9-306aa88db503",
          "name": "options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "17512f58-a51f-4ceb-98a9-306aa88db503",
        "cursor": {
          "ref": "cb181c51-1890-46a0-977c-f18c1038aeaa",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fc094faa-33b4-4ab8-97d4-37dc3b4ec54a"
        },
        "item": {
          "id": "17512f58-a51f-4ceb-98a9-306aa88db503",
          "name": "options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "bf885e3a-7b30-4f4f-b630-9e2908cdc005",
        "cursor": {
          "ref": "79d8a4d8-4764-44b8-8a6e-40872c340956",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "df883603-e206-44fb-be1d-b5ca335cc358"
        },
        "item": {
          "id": "bf885e3a-7b30-4f4f-b630-9e2908cdc005",
          "name": "options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "bf885e3a-7b30-4f4f-b630-9e2908cdc005",
        "cursor": {
          "ref": "79d8a4d8-4764-44b8-8a6e-40872c340956",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "df883603-e206-44fb-be1d-b5ca335cc358"
        },
        "item": {
          "id": "bf885e3a-7b30-4f4f-b630-9e2908cdc005",
          "name": "options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "1ca9dcb5-b7da-44d6-8ed2-f16288b17e96",
        "cursor": {
          "ref": "be9c4cc1-f24a-4cb0-8444-ed21f3b2e3c2",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7cae7f30-d260-4e22-949b-9f94fd1f729b"
        },
        "item": {
          "id": "1ca9dcb5-b7da-44d6-8ed2-f16288b17e96",
          "name": "options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "1ca9dcb5-b7da-44d6-8ed2-f16288b17e96",
        "cursor": {
          "ref": "be9c4cc1-f24a-4cb0-8444-ed21f3b2e3c2",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7cae7f30-d260-4e22-949b-9f94fd1f729b"
        },
        "item": {
          "id": "1ca9dcb5-b7da-44d6-8ed2-f16288b17e96",
          "name": "options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "3c0696b5-a1a9-42ac-86ec-729ee9cc8c19",
        "cursor": {
          "ref": "f854ee51-5b0e-415a-8658-735e6d1314ea",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d0e790c1-aaa6-437b-8ec0-cf3583f1ae45"
        },
        "item": {
          "id": "3c0696b5-a1a9-42ac-86ec-729ee9cc8c19",
          "name": "missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "3c0696b5-a1a9-42ac-86ec-729ee9cc8c19",
        "cursor": {
          "ref": "f854ee51-5b0e-415a-8658-735e6d1314ea",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d0e790c1-aaa6-437b-8ec0-cf3583f1ae45"
        },
        "item": {
          "id": "3c0696b5-a1a9-42ac-86ec-729ee9cc8c19",
          "name": "missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "854fffca-ac6f-4f7a-a786-010f5eba0c2a",
        "cursor": {
          "ref": "d5c098c3-2543-4aed-9e3f-5c0c88478370",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "97ce90b4-74b7-4571-ac7b-4a0446015ce4"
        },
        "item": {
          "id": "854fffca-ac6f-4f7a-a786-010f5eba0c2a",
          "name": "missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "854fffca-ac6f-4f7a-a786-010f5eba0c2a",
        "cursor": {
          "ref": "d5c098c3-2543-4aed-9e3f-5c0c88478370",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "97ce90b4-74b7-4571-ac7b-4a0446015ce4"
        },
        "item": {
          "id": "854fffca-ac6f-4f7a-a786-010f5eba0c2a",
          "name": "missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "854fffca-ac6f-4f7a-a786-010f5eba0c2a",
        "cursor": {
          "ref": "d5c098c3-2543-4aed-9e3f-5c0c88478370",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "97ce90b4-74b7-4571-ac7b-4a0446015ce4"
        },
        "item": {
          "id": "854fffca-ac6f-4f7a-a786-010f5eba0c2a",
          "name": "missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "3d317e23-d568-4903-8d75-f9f35829f130",
        "cursor": {
          "ref": "b8507f3d-d9f3-42bd-bf99-b14fb86e264d",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4ea6696f-cdf4-45a3-9537-1b4cea2e444a"
        },
        "item": {
          "id": "3d317e23-d568-4903-8d75-f9f35829f130",
          "name": "base"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3d317e23-d568-4903-8d75-f9f35829f130",
        "cursor": {
          "ref": "b8507f3d-d9f3-42bd-bf99-b14fb86e264d",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4ea6696f-cdf4-45a3-9537-1b4cea2e444a"
        },
        "item": {
          "id": "3d317e23-d568-4903-8d75-f9f35829f130",
          "name": "base"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "07abdb25-c785-4cf9-a595-08fd5659e2f3",
        "cursor": {
          "ref": "22b1fafd-0a73-4dfd-b4c3-59e0708554a0",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ccf3d733-f6c3-4004-8326-41fc16ec2bfa"
        },
        "item": {
          "id": "07abdb25-c785-4cf9-a595-08fd5659e2f3",
          "name": "credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "07abdb25-c785-4cf9-a595-08fd5659e2f3",
        "cursor": {
          "ref": "22b1fafd-0a73-4dfd-b4c3-59e0708554a0",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ccf3d733-f6c3-4004-8326-41fc16ec2bfa"
        },
        "item": {
          "id": "07abdb25-c785-4cf9-a595-08fd5659e2f3",
          "name": "credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "e239ec35-5763-4cce-83f0-48dd208e5045",
        "cursor": {
          "ref": "da5926b6-349e-489f-b20d-cf120b7c4f13",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3c71cd3a-b8b2-4a01-adbb-0c5015b82341"
        },
        "item": {
          "id": "e239ec35-5763-4cce-83f0-48dd208e5045",
          "name": "credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "e239ec35-5763-4cce-83f0-48dd208e5045",
        "cursor": {
          "ref": "da5926b6-349e-489f-b20d-cf120b7c4f13",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3c71cd3a-b8b2-4a01-adbb-0c5015b82341"
        },
        "item": {
          "id": "e239ec35-5763-4cce-83f0-48dd208e5045",
          "name": "credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "b4bb3d32-e211-4d8a-bd1e-a693eb4c0469",
        "cursor": {
          "ref": "9a2e6abc-ca5b-46fc-ac6c-ae66d00e0213",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e2a0fc0f-1012-49c2-8867-1c2a67385c28"
        },
        "item": {
          "id": "b4bb3d32-e211-4d8a-bd1e-a693eb4c0469",
          "name": "credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "b4bb3d32-e211-4d8a-bd1e-a693eb4c0469",
        "cursor": {
          "ref": "9a2e6abc-ca5b-46fc-ac6c-ae66d00e0213",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e2a0fc0f-1012-49c2-8867-1c2a67385c28"
        },
        "item": {
          "id": "b4bb3d32-e211-4d8a-bd1e-a693eb4c0469",
          "name": "credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1e04f915-ac3a-4e25-ba61-52e38028f3b3",
        "cursor": {
          "ref": "3ca7ae66-3c69-4bbc-9d51-ca44ad022a14",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "081e7d77-50fc-40dd-b2ac-55e8beb9c414"
        },
        "item": {
          "id": "1e04f915-ac3a-4e25-ba61-52e38028f3b3",
          "name": "credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "1e04f915-ac3a-4e25-ba61-52e38028f3b3",
        "cursor": {
          "ref": "3ca7ae66-3c69-4bbc-9d51-ca44ad022a14",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "081e7d77-50fc-40dd-b2ac-55e8beb9c414"
        },
        "item": {
          "id": "1e04f915-ac3a-4e25-ba61-52e38028f3b3",
          "name": "credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6d5baf17-eafe-4432-a3ed-0a3bd4212315",
        "cursor": {
          "ref": "d465b624-0857-45da-b942-8563f89e4677",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "173727d3-76c8-4b7b-941c-d5bcd94e0aa6"
        },
        "item": {
          "id": "6d5baf17-eafe-4432-a3ed-0a3bd4212315",
          "name": "credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6d5baf17-eafe-4432-a3ed-0a3bd4212315",
        "cursor": {
          "ref": "d465b624-0857-45da-b942-8563f89e4677",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "173727d3-76c8-4b7b-941c-d5bcd94e0aa6"
        },
        "item": {
          "id": "6d5baf17-eafe-4432-a3ed-0a3bd4212315",
          "name": "credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "3dcfb5ce-1b1c-4913-995f-4f6cf9409da3",
        "cursor": {
          "ref": "1fce31d0-dd43-4704-82f9-ac895066177b",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "59ea4ab7-ad69-462a-a8ed-a99eb8d1bd90"
        },
        "item": {
          "id": "3dcfb5ce-1b1c-4913-995f-4f6cf9409da3",
          "name": "options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "3dcfb5ce-1b1c-4913-995f-4f6cf9409da3",
        "cursor": {
          "ref": "1fce31d0-dd43-4704-82f9-ac895066177b",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "59ea4ab7-ad69-462a-a8ed-a99eb8d1bd90"
        },
        "item": {
          "id": "3dcfb5ce-1b1c-4913-995f-4f6cf9409da3",
          "name": "options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "6a0d7368-0624-4dbc-95aa-ec4da9b3fe1e",
        "cursor": {
          "ref": "39268c5f-16c1-476d-a586-d4caf03b65bb",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "85004462-322a-440e-8257-322ce0fbdb8c"
        },
        "item": {
          "id": "6a0d7368-0624-4dbc-95aa-ec4da9b3fe1e",
          "name": "options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "6a0d7368-0624-4dbc-95aa-ec4da9b3fe1e",
        "cursor": {
          "ref": "39268c5f-16c1-476d-a586-d4caf03b65bb",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "85004462-322a-440e-8257-322ce0fbdb8c"
        },
        "item": {
          "id": "6a0d7368-0624-4dbc-95aa-ec4da9b3fe1e",
          "name": "options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "8c50688b-989b-40cd-b500-86a08d799b8c",
        "cursor": {
          "ref": "577c37cd-77a1-4218-a879-5b445babacc8",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "84376e35-8ceb-4b19-90c7-4abe59c839bd"
        },
        "item": {
          "id": "8c50688b-989b-40cd-b500-86a08d799b8c",
          "name": "options:opt.credentialStatus Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "8c50688b-989b-40cd-b500-86a08d799b8c",
        "cursor": {
          "ref": "577c37cd-77a1-4218-a879-5b445babacc8",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "84376e35-8ceb-4b19-90c7-4abe59c839bd"
        },
        "item": {
          "id": "8c50688b-989b-40cd-b500-86a08d799b8c",
          "name": "options:opt.credentialStatus Copy"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      }
    ]
  }
}