{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "bb7418b9-c64f-4628-953e-e8ce59f2f30f",
        "name": "API Configuration",
        "item": [
          {
            "id": "ab0c2cc3-a761-4c0f-9df9-05a5daacab99",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96e42dbc-dbe6-4b33-9687-6ca048bab084",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bfaf954-d5f1-4373-9753-767debe69646",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a62dfa8c-50c3-49b2-b56b-571cf08d66c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "7215aab8-4f40-4d8f-9a9a-5c1500886b5e",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "d375329e-d1b2-4f71-9a1f-6444e53d575c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dbbc8ecc-e2c8-4b49-a783-4fe933808c62",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c71afb9-31d7-4a30-96fc-0f1b0bf22b05",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502f8fd2-5aa9-4db4-9d0b-dbff89bc4139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff8912c3-c97e-42cd-a117-8491a5fa3891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd63495-b423-4ca9-a39e-4a66481fd880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c36eeb10-0ca3-4429-9e2b-acdcf0a54169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a3d3bc-b64f-41f7-96c9-ec33a8698077",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae833135-fb09-495e-8cb3-83391a7d701a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c5ecdb2-ad16-4350-8198-dd2a91ef5962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ca5524-d6e8-4d40-8fe6-8d0b2a0f3908",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90de8721-04e2-4000-b65e-749d41639eaa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4f714829-f8b7-422f-8a6c-4423864fb31c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9dfd2233-0b41-4ec7-afa5-f62d780ab2fe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "671048f9-719c-40e6-b037-cde69028d271",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f0daabfb-f3b8-4b11-acc9-4ac51728d8e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "298cf663-2493-469e-bfbb-c6567e652dd2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "8dae8fa5-9930-4725-a463-4d055a1fac0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a35a1dc0-1167-4e91-b191-462b7d85c8aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dbf9dfe1-a78c-41d6-8e39-14659c721303"
            }
          }
        ]
      },
      {
        "id": "460ca203-d5c2-4526-8518-a55667825b4d",
        "name": "Issue Credential",
        "item": [
          {
            "id": "ee13c08d-898c-48fc-9c39-69aabb78a19e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dbb9459a-7b99-4c67-96c0-70540923bb69",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "30ac0c52-1434-4e46-a4fb-6cd3ca92ff4a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e8a463-88c3-4742-977a-a3bd13055731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ac108f4-ce1f-4072-978d-3403e9fe9712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717aa314-7eeb-4b40-b8de-8c59d603d862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5ed2d15-d868-447c-b9b2-f55e7186bbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c42cb51-5645-4255-a654-bc8c9135aa97",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f97fbc-8699-4116-8b1b-21ab3fb7b940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c08dcbd-fde0-4a00-8249-c58e6353d5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c64a0e-439a-472a-a818-956570df922c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "992a2655-ddc7-41a5-9d7f-eef70fdaa385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b800cac8-15ea-4248-b4bb-cfdfd6832e85",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7bc27e-6ac6-4429-b134-73bc2ee9131f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8b0b6a-8d81-4c65-8c4e-a0b3f2712ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc29879-0bdf-45f3-b8de-bf15547d49ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3e2760c-8936-4b0e-80e2-851d3e0d00ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9366099f-d876-46a6-b981-42620e034237",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530f7ccf-621d-4fdb-a615-27599077616f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e5372a-2f52-4c8b-b32a-b515cb14c0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4d5a75-1351-4200-b4a2-2d73b30de957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6deaafb2-4669-4b77-84f6-bf9de08a2330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f86c3a-1b40-45fd-9a35-f43ff2759aa9",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29adf7fd-1d1f-4504-97ab-0044f6523192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ebee2e-03ee-448a-ae7e-61797a0033e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e440af-fcd8-4f6d-8ee4-ea50caa48d6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a26b80aa-c341-4b3b-85cf-fa33d6c1b9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fa11d0-0158-4ba6-a5a5-9b9c1b5ca3a2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be82a7e-db56-4e92-b351-40aef8f3b31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c75d012b-f12e-4ddf-8636-e15450ff5a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d443afc6-157d-44c5-9fd9-2dfbeefec77d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aef3b578-0970-4670-b530-096aa11046c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027744ff-2910-4a4a-8f90-09bcd884e6d4",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8db57d-2af7-4a89-97f4-74882ca76ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb268a63-833c-4456-91b3-15cae7900a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b574c11-cc3b-4074-a5dd-0c61448f69a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5da32b7-2348-422e-8106-d1a51c32cdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30f6697-78c9-4c41-a7ae-f6874459bfaa",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b0cbb2-5556-4c63-bcb1-d4aaf1164532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49061996-e2f2-4370-aca5-1381bb5a4c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8db6bda-cf14-4fbd-8f88-8f62df1217b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a801e386-5263-49d7-938c-11652979902e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7662987-0654-4384-8bce-a506d68da4c8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43f4e64-21a6-49cd-9bc0-8e44f3f18730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b335a9-ce62-407c-849d-1c68143e5329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7ac6b7-9f4a-412f-8d59-90497c7ba4fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b191269-72bd-430a-b1e6-c1ad213dabe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c013241-030d-4c23-9ae7-ef34e016365c",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16cd2a50-b971-454c-a54f-dd7e8dc5cc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd53525a-739c-43a4-84d6-adedb90a0bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655061ec-f393-4021-85bc-f2f38b259922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e729bc5c-9498-490d-a9ff-4bf5ca70350e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7409225-9abd-4f17-a76f-7bdd15eb0b0c",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbda6f1-2316-4624-a4ba-b418001730b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88feb3da-73f3-4918-b96b-61379ea6ccaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb860714-628e-447b-b460-af003a3b79be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "31953b09-af02-459a-a81f-52610c48cf08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9f31e5-9159-4b98-86bb-33b47cbbdc20",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adef3bb-f509-4b2d-9d9b-8b4d21ecf46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0871788f-f7c5-4258-adef-11d6fbe03dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d280024e-f340-4e03-9864-7996ca89d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "844ff41c-f730-4791-992f-ffcfc1c5c184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f08d36-43cf-41a9-9337-31a408973fe3",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4088aff-87ca-481f-b04d-3a2d6101bc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da075fdc-2607-4bdf-8b8c-b157a54ff20a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a25b918-b428-4669-9f71-418ecbfc08df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "eca78b9d-cfdd-4715-9856-b58d90444e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d711c003-7926-4f82-92cc-1bd9d6468c14",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb388a3-5d12-43ae-b24e-aaf0137dcd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975c4645-c848-4197-80e0-82a0a4e7ee59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23102f9e-8774-427a-a115-8340ac8c39e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50222e93-8070-4d6e-a527-0540fd62ba4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3209d90-2d77-418e-804d-58133437dbc4",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281ba2eb-deab-42cd-9040-d5350ee33d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25b9e1f-044a-4516-84b6-e782649588d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ee9f10-736e-4de8-896b-0c5c0f48924a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac2ec231-dbfb-4d73-a98e-ead645f3e4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050aaf23-27a9-4c97-bcf4-d056c78a80f8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41477ad9-9fe1-4acd-8e0a-3e3b951fc383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f9465b-e906-433c-8304-191298c27be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8218886b-fe51-4d61-9a15-4dacdd97e8be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70ca2fa3-2714-499a-a3e7-c93be887f831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65402348-9dc1-4ca2-9ddc-2d3a8ae22916",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c20d5d6-cad3-4655-aeec-c9384d668069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b6823b-5314-4acc-be2b-0a763a4675dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24716b10-4b54-4956-bc2e-caba2a16ae40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b00f1fd8-09cf-4009-8819-9157d217ef29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ecae7f-1404-4716-9bc7-c1af45368b87",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503ef99f-d802-437a-aa4b-421dc75a0f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9335c12f-208f-4c93-9472-69d7aaefd4d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6fea03-f564-4835-8cb7-aea94d5fadc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7306df94-301c-41db-9c9c-b286d82cd835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9faaba5-22ce-41a0-a17d-942835c050e0",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fda522-7c61-4cf5-9e65-c840f282b4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751475a9-0680-4239-9e24-6dec68ed63a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13cb69f-ff0a-4651-9ad9-fa2dd929aef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1741d61c-fd2e-4821-a26e-b56a093304b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9212a55a-09b9-481c-9d01-2baba938ddc1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b687b4d2-b8c7-4109-9f08-a31f4937547a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43498eda-2728-4c6d-bba2-faf0ace3543b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ade5bc3-d61b-412a-b0a8-6ce26ca89aeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8e519ea-7a05-4075-8db8-869129481f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e403043a-87ca-4bc4-af79-39f997c9b7ad",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6250d5-1a62-4b02-a9e9-7d25fe2564c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed929815-6d7f-44f6-ba74-d61cf5979fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d760a4-06f4-4289-bcc2-3df7bc76f349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5206740b-62c6-47cc-a7e6-f1fb58bed9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab550aa-3bc0-4c40-9cb6-5aa2ed087470",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff07dbb1-3213-44ed-80dc-a24d307c275f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28787dcf-1f5d-4f73-8a66-80117e746a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ee0c25-4b79-4513-9111-4597cd6cd8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6afb9230-0c06-46e0-b134-efbdb582c7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f089c66-385f-4a72-8819-bbfa1effed0c",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da34a4f-499d-40c5-8507-8c9c50155545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf3b7c0-e5f7-4eb5-a790-e0d86c4617dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b8c2fd-f291-4c86-ab6d-e5a4b991ab9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e7a5348-1e6e-4656-98b7-a83174886a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd455ad-1178-4ca0-ae94-01cc3ae1efd5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75253a25-94e5-4fc5-80d9-446a41fe0ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1cceca-1789-4103-9a89-60bd3c5583de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b229380-7ce5-479e-b928-21d2c99000c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a34fe3bf-49a2-44d1-9573-7f9102e89ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c0f47e-5466-4a2d-8999-e457ad9820f8",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d71664-aa6e-4a3d-a444-8d09d03084ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a310af-7250-42a2-9763-8f0dad9621e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a7cbe2-8fd5-4365-8b65-a0821f8d1df3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffc96baf-05db-42d4-ade8-42aed98ee692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47422d1-a76f-4f6a-964f-ca461c2b573f",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3fb949-a218-4e1f-9448-4b9d66b3dc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f2a2aa-129f-4f67-b62f-f36fbffe25d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c38c6a0-adc1-4349-b9ec-b4fd12bd9129",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11b89eca-38d0-4248-86e7-cfbc7e62db0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50538a13-8378-446a-a5ff-a4e078b38f27",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb6a72a-7653-4882-8e22-65f9671861f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016366e4-8131-4a02-add0-389b85165887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c865ceb-f210-45b1-aefe-c154b61344ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "199cd86e-8eb6-4d61-b2cd-1b98c1b32817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1709aff6-6622-46a7-92d2-7a1f8e0183cb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09967ed0-c562-4814-ad4e-894da36ab1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d896f2f8-6c11-4e3c-96d9-ae38123443e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22067cc-49c0-46d0-ab63-5eb68c18c557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8c0b6c2-aca9-45c9-8c0b-034f12d565f5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7c1cbe41-f540-408c-bedb-8fdeef4bacad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6377498e-65a7-4a99-adf0-71ddae65e5eb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbcccc9d-0b8d-438c-9e9a-af3fed8739ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9bdaaa2-1a89-4215-a5a4-a58f32809813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d464c1-92f1-4159-9328-44453ea0c69d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7b0567b5-93ca-437f-955c-f08e20c5f258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9869d0f0-0d33-4621-928b-b8960cf003f6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa4b1bb-203a-49db-b7a4-c530f7be1f04",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc9744c5-ffcd-4e46-9cba-c0839809cd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89b413b-6e51-4977-820a-15b53185cffd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9fe16a76-7b1a-42d7-a94d-7accd50d96d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ec85d6b-dd83-451a-af14-99a5f8eef0b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c847bb9b-9338-45a2-a7fc-d330db9b3936"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34195575-8731-4a87-bbb6-d4e7223af3a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "872bbe7f-a515-4479-94b2-775e76b1147a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8febfc8e-1e06-451a-846a-5211eb2d7163",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56d1cf49-43d8-419c-810e-c95340ff1c04"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6888601e-b6d8-4995-9884-080be7fdca07",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a802244f-992d-430b-ac3b-67cf1fbec025"
                }
              }
            ]
          },
          {
            "id": "7dd8888a-8dda-47fa-8080-16655938d417",
            "name": "Positive Testing",
            "item": [
              {
                "id": "15f576a2-ea90-4259-a04c-a84c1d6f1b5f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b97811b0-cf92-4a48-8948-22b24dddf1ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b5a852e-a60e-4dfe-9035-5ff192f83175"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1d33c26-2755-4a21-b236-980b6759ec03",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "4268e7e8-31b6-4a38-83ff-46a66801a015"
                    }
                  }
                ]
              },
              {
                "id": "75388cd5-f277-4b80-871b-2c01c56b3144",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "382ac5d8-6014-4c5c-acb9-e0df14149d47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ebf683e7-1785-4a32-b5c1-170ce6672143"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ad49108-0c4a-4466-94d9-f4f305e9c917",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "245c3708-ee20-41f4-bdf0-346574abbb61"
                    }
                  }
                ]
              },
              {
                "id": "ad137dda-1429-47a4-b323-f2266ad20d85",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef33f118-afbc-46d3-9509-b8a17079b6be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71418a03-5216-4884-972f-98fac8ce956e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd6fcb90-a4f5-48cd-b6cb-c07e67dbe5b1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "bccd8b30-f099-484e-9a7b-bc416e853091"
                    }
                  }
                ]
              },
              {
                "id": "5972b530-f7e3-4c98-abe7-e8e252f9b93b",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbecbe3b-85a3-4955-bdda-9b428724b23d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0db044b9-eff9-4c22-8f63-ae1fae15878c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01530070-b146-4348-a5df-d86acca27ed2",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "97967ea6-4736-4b76-bf2d-cca81baeb2da"
                    }
                  }
                ]
              },
              {
                "id": "262aeb8c-599a-4110-a6fe-ad3ce7cae0cc",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "834ae09c-641d-4d62-aeb6-1baa07f759f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "338c0900-685d-410d-a164-1d2ec35e5778"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "040f0ac9-f5aa-43a4-bd52-16b038b9dbd8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "df974754-584d-49e1-af84-db67974f716f"
                    }
                  }
                ]
              },
              {
                "id": "bb52d423-42fa-4ce6-8d66-19e3ae167fac",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5539d3b-e7d4-4d3f-ad11-9a5cef99d502",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd78e084-03e4-46d9-b1c7-799c9bddd0d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72f127f9-19ea-4c89-9bb2-f9170870a124",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "0031075c-7e57-4cf2-8da3-ea68cdc88d50"
                    }
                  }
                ]
              },
              {
                "id": "4bc8c7a2-1029-4341-830b-72b76b36f5d5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6aa92176-15ef-4a8c-8294-d12bf25c7fb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09f88f6d-97ed-47a1-8cae-21c9ed07cdfe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9979ca5-7e86-43ee-ba55-d4ea46a7063a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "8f30f44f-bc35-420f-b1f1-e19d7cd0d50a"
                    }
                  }
                ]
              },
              {
                "id": "753ecfa1-ef26-4b78-8d10-0184330dffd1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9c39aad-0b0f-4da9-8d8c-f9e1579656d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6a1496f5-9525-4864-af04-41d34cce5a27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce30c46b-bfe3-49b3-a740-a67c4c7a31b9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "2e059f99-6f4c-4b05-b8d7-857b126d5320"
                    }
                  }
                ]
              },
              {
                "id": "d5a9191f-6804-4654-a8a9-cc42d9530915",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ace7bc4b-32a7-4e4c-a572-c1139c100cbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13f714b4-926d-4b54-9bee-5b809c66f050"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "634a43c7-c2b9-424e-be40-dfa321c74147",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "af1a635b-f909-4aee-baa6-e97d30dfee7c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd1ed056-b948-4907-af09-b5935da7a076",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "332e6cfa-48af-4d08-9a28-530687194661"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c8090826-4b0b-4916-98d4-690d86b4e227",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8cb56dd8-82ba-4e88-928b-bd3a00fa2d94"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b47eb48f-8098-4f86-9a24-c874e9b9ef16",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "7b51bebf-1f11-4819-9656-f54e5f499ef0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e33593e3-8be3-40a4-89a7-56d97a46daf2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53717719-9ab4-43e9-ab3d-dd8613341f87"
            }
          }
        ]
      },
      {
        "id": "88b8796f-6724-40a9-bd4b-8051a1d0eb87",
        "name": "Credentials Status",
        "item": [
          {
            "id": "d0b5a7da-2b95-4ed0-9cfd-016a8d0c201a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "629ab96e-760a-4a06-a31b-45492ff8a33f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1378a051-450b-4922-b5bb-895183df2d91",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c11532-28f4-4aae-8b80-02e3b666b168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0d3d22-990a-42b9-9842-ba00de543863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c28066e-d46d-4c50-93b0-614234c2e1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0010490e-35c0-4184-a093-4151bc0a9da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09de2f28-d3b5-4496-98c2-e545457b6846",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4392bf3d-d366-41ae-bd34-c6801be660a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2f17706-1155-4a98-8554-38ead26f7117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd65f464-cc68-4ce7-9a97-7e9a7e405313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e94b9c6-3c94-4f05-8a3b-c6c776998b84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebf68d49-65ac-4b60-9d50-c72b023cdcd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4118e10-f4e3-4daa-be2c-39c42635a3dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b2bf61b-6f13-43dd-9a01-8e5fc14d05b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b3ff346-825a-4d5c-a6fb-3d632865870e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e95d831d-c004-42ff-bbea-7f67531e5331",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "2b59d65f-4ce0-46bf-b5f8-2aa76c853269"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "597375d1-30b4-4ce2-806b-67e3f8e1057d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d31601b-170e-4431-9099-d46cb026dbfe"
            }
          }
        ]
      },
      {
        "id": "b880c136-1d96-4b48-a0b5-b3bdfeca04c4",
        "name": "Presentations",
        "item": [
          {
            "id": "611b9861-8978-471f-b558-152977d3f443",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3187101c-22bb-4b03-8dc6-f0e63556b20d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41d93d25-1e3c-404b-81b2-01cc13e76a25",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4380f3d9-624f-41e9-9bd1-b755c943d5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcab222-0a18-4701-b761-49f2cf0d5485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60101261-f888-4a5b-92bf-0d9d800234d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d70adedf-708d-4910-ba02-7801728a6618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0904e60-2c34-4b3e-bd5b-eef16800f20e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c0cd9f-09f1-47ed-a39d-c40c7891ebe0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85f45ca0-a891-4ea4-803f-67352f78698b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5ba6d5-4901-4430-ba2a-f70089c4d1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "388801c6-6dcc-4663-b0e1-a934d23a8b45"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e69dd88-ac1d-451c-9a60-9681a91ad066",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66699043-4d5d-4d96-a1d4-83e0ec477b7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec4c34fb-b858-485b-883f-8459a0bb15fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d02678f8-1b16-445d-a0a0-144c74834a11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2937d6a0-03b8-4a3f-baca-4f7a9661fa84",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "b87f5764-b18f-49e9-9e6c-7944a8cadde6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ecb6923-6367-410e-bcda-21518f4ea334",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d43995f-1914-46e0-a1be-c0a060575670"
            }
          }
        ]
      },
      {
        "id": "c386175b-8972-44a6-8f17-b5ac61900424",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "0325d6dc-f5d2-43dd-a580-ae85f1d41f23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88a6041f-bf41-406e-b519-5c9d8ceda884",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0df2fbd1-0cfa-456c-bc6e-571c2ea83d15",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf93b81-b332-4410-87c3-554ca3a874f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0defeb48-b4fb-41cd-8b78-ee5f93142b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718fbc86-68f7-40e3-b7f3-2104bd96ecc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "636a2526-a470-41fd-96a2-b78ed5c6c0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5784f987-d313-45d4-804a-7e4eb1723e49",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a23582b-b7a7-4fd0-9c6e-70cf04041b83",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de865dce-cd00-48d0-a198-9d2852593458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65ff96e-2980-40f1-8a81-edbbba0bc795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "525d3fde-33b8-4cb2-9757-0c785c7e38ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b19d038-66b9-493c-930a-1031450d79df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14f4ca4a-0403-4c73-9476-e12b26a9090b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e32ad6c0-f49c-4191-8050-01137c815922",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ab65001-bda9-42a7-8573-1af4280dcb3b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b823207-6357-4135-b0fa-d48ba3dc548c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "e57be933-33b8-4d34-8c0b-2c930763e45f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "578a3935-82fe-406e-874a-ac8dcc9ceaf9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eac5ffa6-c2ab-4aa0-b002-e62aa31f0c40"
            }
          }
        ]
      },
      {
        "id": "2c48e028-8219-44fd-9b38-ad29c5655a1b",
        "name": "Presentations Prove",
        "item": [
          {
            "id": "ae0fda35-7b15-47a6-b94a-f50ec5340540",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a700e6f6-7e21-45aa-8328-bbddfd30ba8b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "352009b0-697a-460f-ba56-10cff59131f5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bee895b-0966-4c5d-8167-581022a2651e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38237f5b-2146-42d2-bedb-47a44cd7a136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3c4084-5312-468c-85d0-e51b04e0c9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b52c0b81-5606-4eae-831e-347cff413a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44ee225-a04e-43a0-b796-5b5a41337729",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92252f3-c74b-429f-8287-49adc0cf6f20",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d05bc4b-64d1-4ffa-94f1-cf67f2923139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c3d2f2-5440-4c0b-aeab-f73e3c5b9284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b15904c5-c8e3-46f6-b30b-1709c7c95700"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca87403f-b4c4-46ce-b05f-3e6784ecb03e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61582423-fd3c-42bf-a5e8-1aa818afa910"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2a635ce-c503-45c8-bc0b-ea218265faa6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ecd5afe8-4b4a-4841-8d45-e58bd5d059dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f41edb9-f7b9-44bb-a402-3358291dca23",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('prove:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "4dbdfb78-8b10-4532-a075-18e4e3fd099d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6c9b726-9e04-44a9-91ef-a331cefae25b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "543e573c-6b3d-4ae4-be95-304e1bc0f642"
            }
          }
        ]
      },
      {
        "id": "0125d506-cc07-49e7-be7e-3a6568a7b704",
        "name": "Presentations Verify",
        "item": [
          {
            "id": "7282409b-8a37-4562-a48a-623031873ede",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6f287dc-468f-4201-a86d-ea4ed3856f20",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4665c884-f074-4a83-a0e5-5dc7945c81b2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0565d5-ad71-4da5-94cd-3413a7e1af0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21afd96-e059-4369-bd2c-f3b76b0a02c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e23afa-c530-44f2-8aac-fac32afcc7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6903de8b-6c49-42ab-b5e8-fc4ba566bbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014b8e68-758f-435d-8a2c-1fb5358a5151",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23811344-a007-453c-b408-70c5d689c135",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a26c2a6-2341-4b20-a17e-b2251265aeff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd3a793-a6d2-4924-8ae0-dec8954c32de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11053c4c-9237-4ff3-a4f6-10ca7a303792"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de1a0830-517e-4eb7-baed-ecb6aa7f14dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10548a0b-2738-46d7-b5c9-81ddedf7bf6c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a3df815-d1ba-4bf5-9604-4e0bf46896a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9440b0ad-5802-45fb-925b-4942732123ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fbd08b38-0160-44f0-8dfe-de593d9adac9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "3a0b1a86-dd88-44be-a27e-636033299e0a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "589ca23a-4e75-4aa4-be33-038161cbae39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f537c568-f8b9-4efe-ae09-87180ed2f2ff"
            }
          }
        ]
      },
      {
        "id": "8f1a1cbb-8cc5-4115-bce4-2168b55b953b",
        "name": "Presentations Available",
        "item": [],
        "event": []
      },
      {
        "id": "199f775d-eb7b-4476-9a03-dbeba89711a0",
        "name": "Presentations Submissions",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 416,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 112,
        "pending": 0,
        "failed": 112
      },
      "tests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 106,
        "pending": 0,
        "failed": 104
      },
      "testScripts": {
        "total": 209,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 207,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1660523050918,
      "completed": 1660523053224
    },
    "executions": [
      {
        "id": "96e42dbc-dbe6-4b33-9687-6ca048bab084",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 53,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "faeed173-5265-4240-90e1-254b702e6cf0",
          "httpRequestId": "0afe2fba-41de-4a1c-86df-872be45243cf"
        },
        "item": {
          "id": "96e42dbc-dbe6-4b33-9687-6ca048bab084",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "3c71afb9-31d7-4a30-96fc-0f1b0bf22b05",
        "cursor": {
          "ref": "c1be359c-b575-4b14-82d7-5e4aec2ab198",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6fe2c32f-4bbb-493e-bd0e-6f118e27474d"
        },
        "item": {
          "id": "3c71afb9-31d7-4a30-96fc-0f1b0bf22b05",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "3c71afb9-31d7-4a30-96fc-0f1b0bf22b05",
        "cursor": {
          "ref": "c1be359c-b575-4b14-82d7-5e4aec2ab198",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6fe2c32f-4bbb-493e-bd0e-6f118e27474d"
        },
        "item": {
          "id": "3c71afb9-31d7-4a30-96fc-0f1b0bf22b05",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "b3a3d3bc-b64f-41f7-96c9-ec33a8698077",
        "cursor": {
          "ref": "f881f75c-7626-4065-a617-d144059856e5",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "89f51a57-7d91-45db-8d4a-2b4b4c99b406"
        },
        "item": {
          "id": "b3a3d3bc-b64f-41f7-96c9-ec33a8698077",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "b3a3d3bc-b64f-41f7-96c9-ec33a8698077",
        "cursor": {
          "ref": "f881f75c-7626-4065-a617-d144059856e5",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "89f51a57-7d91-45db-8d4a-2b4b4c99b406"
        },
        "item": {
          "id": "b3a3d3bc-b64f-41f7-96c9-ec33a8698077",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "b3a3d3bc-b64f-41f7-96c9-ec33a8698077",
        "cursor": {
          "ref": "f881f75c-7626-4065-a617-d144059856e5",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "89f51a57-7d91-45db-8d4a-2b4b4c99b406"
        },
        "item": {
          "id": "b3a3d3bc-b64f-41f7-96c9-ec33a8698077",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "9dfd2233-0b41-4ec7-afa5-f62d780ab2fe",
        "cursor": {
          "ref": "adec9cd4-f9a7-4ddd-a90f-fcc98ddade57",
          "length": 53,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "938926bb-7048-485f-8cf3-9fda92703271"
        },
        "item": {
          "id": "9dfd2233-0b41-4ec7-afa5-f62d780ab2fe",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9dfd2233-0b41-4ec7-afa5-f62d780ab2fe",
        "cursor": {
          "ref": "adec9cd4-f9a7-4ddd-a90f-fcc98ddade57",
          "length": 53,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "938926bb-7048-485f-8cf3-9fda92703271"
        },
        "item": {
          "id": "9dfd2233-0b41-4ec7-afa5-f62d780ab2fe",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "30ac0c52-1434-4e46-a4fb-6cd3ca92ff4a",
        "cursor": {
          "ref": "a6441a32-ea6e-4f22-aa61-1406c3d4b268",
          "length": 53,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4968c4ee-f4bb-493a-9798-ffd2c6d1d8c9"
        },
        "item": {
          "id": "30ac0c52-1434-4e46-a4fb-6cd3ca92ff4a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "30ac0c52-1434-4e46-a4fb-6cd3ca92ff4a",
        "cursor": {
          "ref": "a6441a32-ea6e-4f22-aa61-1406c3d4b268",
          "length": 53,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4968c4ee-f4bb-493a-9798-ffd2c6d1d8c9"
        },
        "item": {
          "id": "30ac0c52-1434-4e46-a4fb-6cd3ca92ff4a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "6c42cb51-5645-4255-a654-bc8c9135aa97",
        "cursor": {
          "ref": "c1726e03-c124-4a59-a84a-d95a3ae443b4",
          "length": 53,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f88e6c96-fca5-4e3c-bcb5-d80da3aa8415"
        },
        "item": {
          "id": "6c42cb51-5645-4255-a654-bc8c9135aa97",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "6c42cb51-5645-4255-a654-bc8c9135aa97",
        "cursor": {
          "ref": "c1726e03-c124-4a59-a84a-d95a3ae443b4",
          "length": 53,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f88e6c96-fca5-4e3c-bcb5-d80da3aa8415"
        },
        "item": {
          "id": "6c42cb51-5645-4255-a654-bc8c9135aa97",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "b800cac8-15ea-4248-b4bb-cfdfd6832e85",
        "cursor": {
          "ref": "f5bdcf38-8cd4-4107-b41c-ad622e501cf5",
          "length": 53,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8245aac8-f9e1-49de-a91c-c3439a3001c9"
        },
        "item": {
          "id": "b800cac8-15ea-4248-b4bb-cfdfd6832e85",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b800cac8-15ea-4248-b4bb-cfdfd6832e85",
        "cursor": {
          "ref": "f5bdcf38-8cd4-4107-b41c-ad622e501cf5",
          "length": 53,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8245aac8-f9e1-49de-a91c-c3439a3001c9"
        },
        "item": {
          "id": "b800cac8-15ea-4248-b4bb-cfdfd6832e85",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "9366099f-d876-46a6-b981-42620e034237",
        "cursor": {
          "ref": "fcc69d75-a831-484e-96f7-472b33df82c7",
          "length": 53,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b6f572b-907f-47dc-8133-2dd8c5421fc0"
        },
        "item": {
          "id": "9366099f-d876-46a6-b981-42620e034237",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9366099f-d876-46a6-b981-42620e034237",
        "cursor": {
          "ref": "fcc69d75-a831-484e-96f7-472b33df82c7",
          "length": 53,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b6f572b-907f-47dc-8133-2dd8c5421fc0"
        },
        "item": {
          "id": "9366099f-d876-46a6-b981-42620e034237",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a1f86c3a-1b40-45fd-9a35-f43ff2759aa9",
        "cursor": {
          "ref": "8d62f8e5-1edb-47da-9674-30db2b3b8b5e",
          "length": 53,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f803c8ab-8155-4421-91f2-286a2f9b06c3"
        },
        "item": {
          "id": "a1f86c3a-1b40-45fd-9a35-f43ff2759aa9",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "a1f86c3a-1b40-45fd-9a35-f43ff2759aa9",
        "cursor": {
          "ref": "8d62f8e5-1edb-47da-9674-30db2b3b8b5e",
          "length": 53,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f803c8ab-8155-4421-91f2-286a2f9b06c3"
        },
        "item": {
          "id": "a1f86c3a-1b40-45fd-9a35-f43ff2759aa9",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "c1fa11d0-0158-4ba6-a5a5-9b9c1b5ca3a2",
        "cursor": {
          "ref": "3ddc0d45-13aa-4129-822f-e9bb87a23b08",
          "length": 53,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "18edf3bc-f90c-4dbd-9dac-4644750adc9a"
        },
        "item": {
          "id": "c1fa11d0-0158-4ba6-a5a5-9b9c1b5ca3a2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c1fa11d0-0158-4ba6-a5a5-9b9c1b5ca3a2",
        "cursor": {
          "ref": "3ddc0d45-13aa-4129-822f-e9bb87a23b08",
          "length": 53,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "18edf3bc-f90c-4dbd-9dac-4644750adc9a"
        },
        "item": {
          "id": "c1fa11d0-0158-4ba6-a5a5-9b9c1b5ca3a2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "027744ff-2910-4a4a-8f90-09bcd884e6d4",
        "cursor": {
          "ref": "3ceb2f0e-8734-4821-88fe-75d65b620557",
          "length": 53,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ec9bbcd0-e83b-489d-8036-165c57f2d302"
        },
        "item": {
          "id": "027744ff-2910-4a4a-8f90-09bcd884e6d4",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "027744ff-2910-4a4a-8f90-09bcd884e6d4",
        "cursor": {
          "ref": "3ceb2f0e-8734-4821-88fe-75d65b620557",
          "length": 53,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ec9bbcd0-e83b-489d-8036-165c57f2d302"
        },
        "item": {
          "id": "027744ff-2910-4a4a-8f90-09bcd884e6d4",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "c30f6697-78c9-4c41-a7ae-f6874459bfaa",
        "cursor": {
          "ref": "b749048e-1c73-4a6b-9e4a-d2441105a05c",
          "length": 53,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cc51fb3b-8eb6-4e99-9cf9-9fb6898fdc7b"
        },
        "item": {
          "id": "c30f6697-78c9-4c41-a7ae-f6874459bfaa",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "c30f6697-78c9-4c41-a7ae-f6874459bfaa",
        "cursor": {
          "ref": "b749048e-1c73-4a6b-9e4a-d2441105a05c",
          "length": 53,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cc51fb3b-8eb6-4e99-9cf9-9fb6898fdc7b"
        },
        "item": {
          "id": "c30f6697-78c9-4c41-a7ae-f6874459bfaa",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e7662987-0654-4384-8bce-a506d68da4c8",
        "cursor": {
          "ref": "da0ec6ac-0d14-455b-9d09-73b0c6d35378",
          "length": 53,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a565d18d-1956-49f5-b1de-7945dcf53592"
        },
        "item": {
          "id": "e7662987-0654-4384-8bce-a506d68da4c8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "e7662987-0654-4384-8bce-a506d68da4c8",
        "cursor": {
          "ref": "da0ec6ac-0d14-455b-9d09-73b0c6d35378",
          "length": 53,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a565d18d-1956-49f5-b1de-7945dcf53592"
        },
        "item": {
          "id": "e7662987-0654-4384-8bce-a506d68da4c8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "1c013241-030d-4c23-9ae7-ef34e016365c",
        "cursor": {
          "ref": "ce0349c9-3737-48f2-b2e7-96d02ce39c9b",
          "length": 53,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f921b2a5-fe6d-4735-a847-51fb78f6fdcd"
        },
        "item": {
          "id": "1c013241-030d-4c23-9ae7-ef34e016365c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "1c013241-030d-4c23-9ae7-ef34e016365c",
        "cursor": {
          "ref": "ce0349c9-3737-48f2-b2e7-96d02ce39c9b",
          "length": 53,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f921b2a5-fe6d-4735-a847-51fb78f6fdcd"
        },
        "item": {
          "id": "1c013241-030d-4c23-9ae7-ef34e016365c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "f7409225-9abd-4f17-a76f-7bdd15eb0b0c",
        "cursor": {
          "ref": "a011baf9-c3e8-42e5-806c-87c1ced5a331",
          "length": 53,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ae5d8f0b-e909-4c64-a712-221963bcc738"
        },
        "item": {
          "id": "f7409225-9abd-4f17-a76f-7bdd15eb0b0c",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "f7409225-9abd-4f17-a76f-7bdd15eb0b0c",
        "cursor": {
          "ref": "a011baf9-c3e8-42e5-806c-87c1ced5a331",
          "length": 53,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ae5d8f0b-e909-4c64-a712-221963bcc738"
        },
        "item": {
          "id": "f7409225-9abd-4f17-a76f-7bdd15eb0b0c",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "1d9f31e5-9159-4b98-86bb-33b47cbbdc20",
        "cursor": {
          "ref": "6fdd2862-1aad-4934-bda8-f957e315d403",
          "length": 53,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "669c1e01-919e-4957-8808-6e8f753223be"
        },
        "item": {
          "id": "1d9f31e5-9159-4b98-86bb-33b47cbbdc20",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1d9f31e5-9159-4b98-86bb-33b47cbbdc20",
        "cursor": {
          "ref": "6fdd2862-1aad-4934-bda8-f957e315d403",
          "length": 53,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "669c1e01-919e-4957-8808-6e8f753223be"
        },
        "item": {
          "id": "1d9f31e5-9159-4b98-86bb-33b47cbbdc20",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "90f08d36-43cf-41a9-9337-31a408973fe3",
        "cursor": {
          "ref": "5303def2-4d7a-4480-a472-970174df0fc3",
          "length": 53,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1b62e909-a57a-4c5e-8b71-7f22c80901ad"
        },
        "item": {
          "id": "90f08d36-43cf-41a9-9337-31a408973fe3",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "90f08d36-43cf-41a9-9337-31a408973fe3",
        "cursor": {
          "ref": "5303def2-4d7a-4480-a472-970174df0fc3",
          "length": 53,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1b62e909-a57a-4c5e-8b71-7f22c80901ad"
        },
        "item": {
          "id": "90f08d36-43cf-41a9-9337-31a408973fe3",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d711c003-7926-4f82-92cc-1bd9d6468c14",
        "cursor": {
          "ref": "5e12aa5c-ea79-429e-ba28-a323ef2c90f9",
          "length": 53,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "971ea716-6bd0-450a-8205-e9ca14c233c9"
        },
        "item": {
          "id": "d711c003-7926-4f82-92cc-1bd9d6468c14",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "d711c003-7926-4f82-92cc-1bd9d6468c14",
        "cursor": {
          "ref": "5e12aa5c-ea79-429e-ba28-a323ef2c90f9",
          "length": 53,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "971ea716-6bd0-450a-8205-e9ca14c233c9"
        },
        "item": {
          "id": "d711c003-7926-4f82-92cc-1bd9d6468c14",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "e3209d90-2d77-418e-804d-58133437dbc4",
        "cursor": {
          "ref": "44601a4a-8057-4494-af6e-d3ef5bc668b0",
          "length": 53,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "94fd4712-cc65-4d8c-9aad-962386bb48b8"
        },
        "item": {
          "id": "e3209d90-2d77-418e-804d-58133437dbc4",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "e3209d90-2d77-418e-804d-58133437dbc4",
        "cursor": {
          "ref": "44601a4a-8057-4494-af6e-d3ef5bc668b0",
          "length": 53,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "94fd4712-cc65-4d8c-9aad-962386bb48b8"
        },
        "item": {
          "id": "e3209d90-2d77-418e-804d-58133437dbc4",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "050aaf23-27a9-4c97-bcf4-d056c78a80f8",
        "cursor": {
          "ref": "2f423a41-a712-43de-9d85-8db8a7b21e7b",
          "length": 53,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "80d85086-252e-4af8-97b8-6b13b868dd77"
        },
        "item": {
          "id": "050aaf23-27a9-4c97-bcf4-d056c78a80f8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "050aaf23-27a9-4c97-bcf4-d056c78a80f8",
        "cursor": {
          "ref": "2f423a41-a712-43de-9d85-8db8a7b21e7b",
          "length": 53,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "80d85086-252e-4af8-97b8-6b13b868dd77"
        },
        "item": {
          "id": "050aaf23-27a9-4c97-bcf4-d056c78a80f8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "65402348-9dc1-4ca2-9ddc-2d3a8ae22916",
        "cursor": {
          "ref": "a93a70bf-d4ab-450c-b9ce-98cf068e816b",
          "length": 53,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ce7014a0-63dc-4a74-9832-68e023b0d695"
        },
        "item": {
          "id": "65402348-9dc1-4ca2-9ddc-2d3a8ae22916",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "65402348-9dc1-4ca2-9ddc-2d3a8ae22916",
        "cursor": {
          "ref": "a93a70bf-d4ab-450c-b9ce-98cf068e816b",
          "length": 53,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ce7014a0-63dc-4a74-9832-68e023b0d695"
        },
        "item": {
          "id": "65402348-9dc1-4ca2-9ddc-2d3a8ae22916",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c1ecae7f-1404-4716-9bc7-c1af45368b87",
        "cursor": {
          "ref": "7cabda75-efc2-44f4-804a-12c04b714cd2",
          "length": 53,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2a020ddb-c6d4-4f94-91f5-52a082773fd9"
        },
        "item": {
          "id": "c1ecae7f-1404-4716-9bc7-c1af45368b87",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "c1ecae7f-1404-4716-9bc7-c1af45368b87",
        "cursor": {
          "ref": "7cabda75-efc2-44f4-804a-12c04b714cd2",
          "length": 53,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2a020ddb-c6d4-4f94-91f5-52a082773fd9"
        },
        "item": {
          "id": "c1ecae7f-1404-4716-9bc7-c1af45368b87",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e9faaba5-22ce-41a0-a17d-942835c050e0",
        "cursor": {
          "ref": "7e45e0ee-5ce7-4744-bc68-0463a666ce05",
          "length": 53,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c350d839-e606-41e0-9c5f-e7d35f124e93"
        },
        "item": {
          "id": "e9faaba5-22ce-41a0-a17d-942835c050e0",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e9faaba5-22ce-41a0-a17d-942835c050e0",
        "cursor": {
          "ref": "7e45e0ee-5ce7-4744-bc68-0463a666ce05",
          "length": 53,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c350d839-e606-41e0-9c5f-e7d35f124e93"
        },
        "item": {
          "id": "e9faaba5-22ce-41a0-a17d-942835c050e0",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "9212a55a-09b9-481c-9d01-2baba938ddc1",
        "cursor": {
          "ref": "90e75c30-a159-4424-8f44-ca8984b1d7a7",
          "length": 53,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1cc801f2-e3cb-417a-8741-844634cb8ce6"
        },
        "item": {
          "id": "9212a55a-09b9-481c-9d01-2baba938ddc1",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "9212a55a-09b9-481c-9d01-2baba938ddc1",
        "cursor": {
          "ref": "90e75c30-a159-4424-8f44-ca8984b1d7a7",
          "length": 53,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1cc801f2-e3cb-417a-8741-844634cb8ce6"
        },
        "item": {
          "id": "9212a55a-09b9-481c-9d01-2baba938ddc1",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e403043a-87ca-4bc4-af79-39f997c9b7ad",
        "cursor": {
          "ref": "5a9f374b-4fc6-40a8-bbbf-c26907ecc2ed",
          "length": 53,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "00c85993-607a-459b-ab44-e6ed27ff53f1"
        },
        "item": {
          "id": "e403043a-87ca-4bc4-af79-39f997c9b7ad",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "e403043a-87ca-4bc4-af79-39f997c9b7ad",
        "cursor": {
          "ref": "5a9f374b-4fc6-40a8-bbbf-c26907ecc2ed",
          "length": 53,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "00c85993-607a-459b-ab44-e6ed27ff53f1"
        },
        "item": {
          "id": "e403043a-87ca-4bc4-af79-39f997c9b7ad",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "dab550aa-3bc0-4c40-9cb6-5aa2ed087470",
        "cursor": {
          "ref": "b669647e-fcf4-4e7f-b8e1-1261da847aac",
          "length": 53,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6de74a9d-5ea7-42ec-ab81-0b17c3c47b4b"
        },
        "item": {
          "id": "dab550aa-3bc0-4c40-9cb6-5aa2ed087470",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "dab550aa-3bc0-4c40-9cb6-5aa2ed087470",
        "cursor": {
          "ref": "b669647e-fcf4-4e7f-b8e1-1261da847aac",
          "length": 53,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6de74a9d-5ea7-42ec-ab81-0b17c3c47b4b"
        },
        "item": {
          "id": "dab550aa-3bc0-4c40-9cb6-5aa2ed087470",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "4f089c66-385f-4a72-8819-bbfa1effed0c",
        "cursor": {
          "ref": "2b349ce2-3723-4483-a633-932481b4106b",
          "length": 53,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "36f88297-62a0-4181-a288-6dc801d6ae06"
        },
        "item": {
          "id": "4f089c66-385f-4a72-8819-bbfa1effed0c",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "4f089c66-385f-4a72-8819-bbfa1effed0c",
        "cursor": {
          "ref": "2b349ce2-3723-4483-a633-932481b4106b",
          "length": 53,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "36f88297-62a0-4181-a288-6dc801d6ae06"
        },
        "item": {
          "id": "4f089c66-385f-4a72-8819-bbfa1effed0c",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "2bd455ad-1178-4ca0-ae94-01cc3ae1efd5",
        "cursor": {
          "ref": "9850c588-5be4-41bc-bf68-94044cd891d9",
          "length": 53,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "08c77a13-8064-4914-9787-d572669f373b"
        },
        "item": {
          "id": "2bd455ad-1178-4ca0-ae94-01cc3ae1efd5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "2bd455ad-1178-4ca0-ae94-01cc3ae1efd5",
        "cursor": {
          "ref": "9850c588-5be4-41bc-bf68-94044cd891d9",
          "length": 53,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "08c77a13-8064-4914-9787-d572669f373b"
        },
        "item": {
          "id": "2bd455ad-1178-4ca0-ae94-01cc3ae1efd5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "67c0f47e-5466-4a2d-8999-e457ad9820f8",
        "cursor": {
          "ref": "5afd359c-4413-4324-9e51-9667cfada476",
          "length": 53,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "44678da0-fea5-4cb3-a890-d595684b67f1"
        },
        "item": {
          "id": "67c0f47e-5466-4a2d-8999-e457ad9820f8",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "67c0f47e-5466-4a2d-8999-e457ad9820f8",
        "cursor": {
          "ref": "5afd359c-4413-4324-9e51-9667cfada476",
          "length": 53,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "44678da0-fea5-4cb3-a890-d595684b67f1"
        },
        "item": {
          "id": "67c0f47e-5466-4a2d-8999-e457ad9820f8",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "f47422d1-a76f-4f6a-964f-ca461c2b573f",
        "cursor": {
          "ref": "f9496217-88e9-46f1-a353-4641facc16d8",
          "length": 53,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f14e46f2-00eb-48ec-9487-050dd2369ee7"
        },
        "item": {
          "id": "f47422d1-a76f-4f6a-964f-ca461c2b573f",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "f47422d1-a76f-4f6a-964f-ca461c2b573f",
        "cursor": {
          "ref": "f9496217-88e9-46f1-a353-4641facc16d8",
          "length": 53,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f14e46f2-00eb-48ec-9487-050dd2369ee7"
        },
        "item": {
          "id": "f47422d1-a76f-4f6a-964f-ca461c2b573f",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "50538a13-8378-446a-a5ff-a4e078b38f27",
        "cursor": {
          "ref": "63d69db0-fb9f-4bfd-96f8-e14dace81267",
          "length": 53,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bd198846-654c-4687-a5ef-3f0b617a1a17"
        },
        "item": {
          "id": "50538a13-8378-446a-a5ff-a4e078b38f27",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "50538a13-8378-446a-a5ff-a4e078b38f27",
        "cursor": {
          "ref": "63d69db0-fb9f-4bfd-96f8-e14dace81267",
          "length": 53,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bd198846-654c-4687-a5ef-3f0b617a1a17"
        },
        "item": {
          "id": "50538a13-8378-446a-a5ff-a4e078b38f27",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1709aff6-6622-46a7-92d2-7a1f8e0183cb",
        "cursor": {
          "ref": "b037877a-0acd-4fc4-a51d-aec29a469f00",
          "length": 53,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "50b8376a-921e-4f95-ac58-71448170f7af"
        },
        "item": {
          "id": "1709aff6-6622-46a7-92d2-7a1f8e0183cb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1709aff6-6622-46a7-92d2-7a1f8e0183cb",
        "cursor": {
          "ref": "b037877a-0acd-4fc4-a51d-aec29a469f00",
          "length": 53,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "50b8376a-921e-4f95-ac58-71448170f7af"
        },
        "item": {
          "id": "1709aff6-6622-46a7-92d2-7a1f8e0183cb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "6377498e-65a7-4a99-adf0-71ddae65e5eb",
        "cursor": {
          "ref": "0f5e3f08-67e3-4404-906a-2601bab4f687",
          "length": 53,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d648a715-7293-4335-b054-254b8865a177"
        },
        "item": {
          "id": "6377498e-65a7-4a99-adf0-71ddae65e5eb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6377498e-65a7-4a99-adf0-71ddae65e5eb",
        "cursor": {
          "ref": "0f5e3f08-67e3-4404-906a-2601bab4f687",
          "length": 53,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d648a715-7293-4335-b054-254b8865a177"
        },
        "item": {
          "id": "6377498e-65a7-4a99-adf0-71ddae65e5eb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "9869d0f0-0d33-4621-928b-b8960cf003f6",
        "cursor": {
          "ref": "f330cb36-d3fb-460c-99ff-3ac28b5c5e02",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ef3962b5-36cf-45e7-b889-e3c2247442c5"
        },
        "item": {
          "id": "9869d0f0-0d33-4621-928b-b8960cf003f6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "9869d0f0-0d33-4621-928b-b8960cf003f6",
        "cursor": {
          "ref": "f330cb36-d3fb-460c-99ff-3ac28b5c5e02",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ef3962b5-36cf-45e7-b889-e3c2247442c5"
        },
        "item": {
          "id": "9869d0f0-0d33-4621-928b-b8960cf003f6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "9869d0f0-0d33-4621-928b-b8960cf003f6",
        "cursor": {
          "ref": "f330cb36-d3fb-460c-99ff-3ac28b5c5e02",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ef3962b5-36cf-45e7-b889-e3c2247442c5"
        },
        "item": {
          "id": "9869d0f0-0d33-4621-928b-b8960cf003f6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "15f576a2-ea90-4259-a04c-a84c1d6f1b5f",
        "cursor": {
          "ref": "bfad65e7-3d40-457d-942b-0eae69a73cb8",
          "length": 53,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6d0c4d75-89ca-4afd-ac11-d8846ff5a96b"
        },
        "item": {
          "id": "15f576a2-ea90-4259-a04c-a84c1d6f1b5f",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "15f576a2-ea90-4259-a04c-a84c1d6f1b5f",
        "cursor": {
          "ref": "bfad65e7-3d40-457d-942b-0eae69a73cb8",
          "length": 53,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6d0c4d75-89ca-4afd-ac11-d8846ff5a96b"
        },
        "item": {
          "id": "15f576a2-ea90-4259-a04c-a84c1d6f1b5f",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "75388cd5-f277-4b80-871b-2c01c56b3144",
        "cursor": {
          "ref": "98a06c23-9926-41e6-9281-d4f756f164ed",
          "length": 53,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2677e347-9c9e-4285-a200-c06bb0d18e53"
        },
        "item": {
          "id": "75388cd5-f277-4b80-871b-2c01c56b3144",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "75388cd5-f277-4b80-871b-2c01c56b3144",
        "cursor": {
          "ref": "98a06c23-9926-41e6-9281-d4f756f164ed",
          "length": 53,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2677e347-9c9e-4285-a200-c06bb0d18e53"
        },
        "item": {
          "id": "75388cd5-f277-4b80-871b-2c01c56b3144",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "ad137dda-1429-47a4-b323-f2266ad20d85",
        "cursor": {
          "ref": "3b28d0fd-c9c1-4b9f-807f-d8114d401df6",
          "length": 53,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9f897219-9804-4893-bbf5-c5430c07c1b1"
        },
        "item": {
          "id": "ad137dda-1429-47a4-b323-f2266ad20d85",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "ad137dda-1429-47a4-b323-f2266ad20d85",
        "cursor": {
          "ref": "3b28d0fd-c9c1-4b9f-807f-d8114d401df6",
          "length": 53,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9f897219-9804-4893-bbf5-c5430c07c1b1"
        },
        "item": {
          "id": "ad137dda-1429-47a4-b323-f2266ad20d85",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "5972b530-f7e3-4c98-abe7-e8e252f9b93b",
        "cursor": {
          "ref": "65e370e8-fb52-4a04-a51d-eeb1bcd85e4f",
          "length": 53,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b4f73bf8-fcae-45ce-971a-f9964742a051"
        },
        "item": {
          "id": "5972b530-f7e3-4c98-abe7-e8e252f9b93b",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "5972b530-f7e3-4c98-abe7-e8e252f9b93b",
        "cursor": {
          "ref": "65e370e8-fb52-4a04-a51d-eeb1bcd85e4f",
          "length": 53,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b4f73bf8-fcae-45ce-971a-f9964742a051"
        },
        "item": {
          "id": "5972b530-f7e3-4c98-abe7-e8e252f9b93b",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "262aeb8c-599a-4110-a6fe-ad3ce7cae0cc",
        "cursor": {
          "ref": "1de983a7-97c6-4f64-aed0-be53d6821bff",
          "length": 53,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9f003694-31f8-4cac-8efe-beaa9c3160ac"
        },
        "item": {
          "id": "262aeb8c-599a-4110-a6fe-ad3ce7cae0cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "262aeb8c-599a-4110-a6fe-ad3ce7cae0cc",
        "cursor": {
          "ref": "1de983a7-97c6-4f64-aed0-be53d6821bff",
          "length": 53,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9f003694-31f8-4cac-8efe-beaa9c3160ac"
        },
        "item": {
          "id": "262aeb8c-599a-4110-a6fe-ad3ce7cae0cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "bb52d423-42fa-4ce6-8d66-19e3ae167fac",
        "cursor": {
          "ref": "99b6d930-3865-4703-a53f-40b5571b45f2",
          "length": 53,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "95c62e35-ecf7-44fc-b9a4-0aeee63d69f0"
        },
        "item": {
          "id": "bb52d423-42fa-4ce6-8d66-19e3ae167fac",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bb52d423-42fa-4ce6-8d66-19e3ae167fac",
        "cursor": {
          "ref": "99b6d930-3865-4703-a53f-40b5571b45f2",
          "length": 53,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "95c62e35-ecf7-44fc-b9a4-0aeee63d69f0"
        },
        "item": {
          "id": "bb52d423-42fa-4ce6-8d66-19e3ae167fac",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4bc8c7a2-1029-4341-830b-72b76b36f5d5",
        "cursor": {
          "ref": "d32a01c8-ba43-4fb7-8b0a-894038d6a3e5",
          "length": 53,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c97cda03-c473-45e9-854a-d2b96f5ca71a"
        },
        "item": {
          "id": "4bc8c7a2-1029-4341-830b-72b76b36f5d5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4bc8c7a2-1029-4341-830b-72b76b36f5d5",
        "cursor": {
          "ref": "d32a01c8-ba43-4fb7-8b0a-894038d6a3e5",
          "length": 53,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c97cda03-c473-45e9-854a-d2b96f5ca71a"
        },
        "item": {
          "id": "4bc8c7a2-1029-4341-830b-72b76b36f5d5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "753ecfa1-ef26-4b78-8d10-0184330dffd1",
        "cursor": {
          "ref": "5cd4785d-6ea0-4d5c-a1af-4b09ee0f31fd",
          "length": 53,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "158264d4-9814-4780-9567-aa79e1b7f1d0"
        },
        "item": {
          "id": "753ecfa1-ef26-4b78-8d10-0184330dffd1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "753ecfa1-ef26-4b78-8d10-0184330dffd1",
        "cursor": {
          "ref": "5cd4785d-6ea0-4d5c-a1af-4b09ee0f31fd",
          "length": 53,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "158264d4-9814-4780-9567-aa79e1b7f1d0"
        },
        "item": {
          "id": "753ecfa1-ef26-4b78-8d10-0184330dffd1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "d5a9191f-6804-4654-a8a9-cc42d9530915",
        "cursor": {
          "ref": "9d949c9c-2e67-4002-887a-35d1dba00caa",
          "length": 53,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "66d04eb4-582b-469a-94cf-d725a92c207b"
        },
        "item": {
          "id": "d5a9191f-6804-4654-a8a9-cc42d9530915",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d5a9191f-6804-4654-a8a9-cc42d9530915",
        "cursor": {
          "ref": "9d949c9c-2e67-4002-887a-35d1dba00caa",
          "length": 53,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "66d04eb4-582b-469a-94cf-d725a92c207b"
        },
        "item": {
          "id": "d5a9191f-6804-4654-a8a9-cc42d9530915",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1378a051-450b-4922-b5bb-895183df2d91",
        "cursor": {
          "ref": "334ca532-5f5e-45d2-ba3f-914b6c881d15",
          "length": 53,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "951b0c2b-884f-45a9-8700-830b0564e97e"
        },
        "item": {
          "id": "1378a051-450b-4922-b5bb-895183df2d91",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1378a051-450b-4922-b5bb-895183df2d91",
        "cursor": {
          "ref": "334ca532-5f5e-45d2-ba3f-914b6c881d15",
          "length": 53,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "951b0c2b-884f-45a9-8700-830b0564e97e"
        },
        "item": {
          "id": "1378a051-450b-4922-b5bb-895183df2d91",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "09de2f28-d3b5-4496-98c2-e545457b6846",
        "cursor": {
          "ref": "0e6041b0-c314-4386-8195-5139e5bf05f9",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "28b1bd7a-8a8e-4db6-9cd2-db9c330565b9"
        },
        "item": {
          "id": "09de2f28-d3b5-4496-98c2-e545457b6846",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "09de2f28-d3b5-4496-98c2-e545457b6846",
        "cursor": {
          "ref": "0e6041b0-c314-4386-8195-5139e5bf05f9",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "28b1bd7a-8a8e-4db6-9cd2-db9c330565b9"
        },
        "item": {
          "id": "09de2f28-d3b5-4496-98c2-e545457b6846",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "09de2f28-d3b5-4496-98c2-e545457b6846",
        "cursor": {
          "ref": "0e6041b0-c314-4386-8195-5139e5bf05f9",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "28b1bd7a-8a8e-4db6-9cd2-db9c330565b9"
        },
        "item": {
          "id": "09de2f28-d3b5-4496-98c2-e545457b6846",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "41d93d25-1e3c-404b-81b2-01cc13e76a25",
        "cursor": {
          "ref": "1ff59e47-0d56-4424-89ac-59c7a82614b5",
          "length": 53,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9a5e793f-f0b2-4c1f-a599-de1290f2d54e"
        },
        "item": {
          "id": "41d93d25-1e3c-404b-81b2-01cc13e76a25",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "41d93d25-1e3c-404b-81b2-01cc13e76a25",
        "cursor": {
          "ref": "1ff59e47-0d56-4424-89ac-59c7a82614b5",
          "length": 53,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9a5e793f-f0b2-4c1f-a599-de1290f2d54e"
        },
        "item": {
          "id": "41d93d25-1e3c-404b-81b2-01cc13e76a25",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c0904e60-2c34-4b3e-bd5b-eef16800f20e",
        "cursor": {
          "ref": "49c4abe3-b36f-4516-9384-d43095a52711",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8406fd43-6e0c-4e4d-8e52-adb45a9ed254"
        },
        "item": {
          "id": "c0904e60-2c34-4b3e-bd5b-eef16800f20e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c0904e60-2c34-4b3e-bd5b-eef16800f20e",
        "cursor": {
          "ref": "49c4abe3-b36f-4516-9384-d43095a52711",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8406fd43-6e0c-4e4d-8e52-adb45a9ed254"
        },
        "item": {
          "id": "c0904e60-2c34-4b3e-bd5b-eef16800f20e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c0904e60-2c34-4b3e-bd5b-eef16800f20e",
        "cursor": {
          "ref": "49c4abe3-b36f-4516-9384-d43095a52711",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8406fd43-6e0c-4e4d-8e52-adb45a9ed254"
        },
        "item": {
          "id": "c0904e60-2c34-4b3e-bd5b-eef16800f20e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0df2fbd1-0cfa-456c-bc6e-571c2ea83d15",
        "cursor": {
          "ref": "a9dd1aa4-2d46-4892-97e7-996da40ceb6b",
          "length": 53,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "de5644f2-94d5-4420-8693-20557be473f6"
        },
        "item": {
          "id": "0df2fbd1-0cfa-456c-bc6e-571c2ea83d15",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0df2fbd1-0cfa-456c-bc6e-571c2ea83d15",
        "cursor": {
          "ref": "a9dd1aa4-2d46-4892-97e7-996da40ceb6b",
          "length": 53,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "de5644f2-94d5-4420-8693-20557be473f6"
        },
        "item": {
          "id": "0df2fbd1-0cfa-456c-bc6e-571c2ea83d15",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5784f987-d313-45d4-804a-7e4eb1723e49",
        "cursor": {
          "ref": "2b59c47d-5457-4abb-af7f-f0fa95fb4cac",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "387385b8-e8b8-4035-b31d-e6ac131cd473"
        },
        "item": {
          "id": "5784f987-d313-45d4-804a-7e4eb1723e49",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5784f987-d313-45d4-804a-7e4eb1723e49",
        "cursor": {
          "ref": "2b59c47d-5457-4abb-af7f-f0fa95fb4cac",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "387385b8-e8b8-4035-b31d-e6ac131cd473"
        },
        "item": {
          "id": "5784f987-d313-45d4-804a-7e4eb1723e49",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5784f987-d313-45d4-804a-7e4eb1723e49",
        "cursor": {
          "ref": "2b59c47d-5457-4abb-af7f-f0fa95fb4cac",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "387385b8-e8b8-4035-b31d-e6ac131cd473"
        },
        "item": {
          "id": "5784f987-d313-45d4-804a-7e4eb1723e49",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "352009b0-697a-460f-ba56-10cff59131f5",
        "cursor": {
          "ref": "9a20e299-c7af-4b46-90ee-f707805e0f2a",
          "length": 53,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "42cea6d9-8d2b-4d23-97d8-15de8769480d"
        },
        "item": {
          "id": "352009b0-697a-460f-ba56-10cff59131f5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "352009b0-697a-460f-ba56-10cff59131f5",
        "cursor": {
          "ref": "9a20e299-c7af-4b46-90ee-f707805e0f2a",
          "length": 53,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "42cea6d9-8d2b-4d23-97d8-15de8769480d"
        },
        "item": {
          "id": "352009b0-697a-460f-ba56-10cff59131f5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f44ee225-a04e-43a0-b796-5b5a41337729",
        "cursor": {
          "ref": "8ab32d46-1cd2-4d9f-a4ae-d2cf81759489",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4be5475c-4632-4080-8885-9315fc353225"
        },
        "item": {
          "id": "f44ee225-a04e-43a0-b796-5b5a41337729",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f44ee225-a04e-43a0-b796-5b5a41337729",
        "cursor": {
          "ref": "8ab32d46-1cd2-4d9f-a4ae-d2cf81759489",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4be5475c-4632-4080-8885-9315fc353225"
        },
        "item": {
          "id": "f44ee225-a04e-43a0-b796-5b5a41337729",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f44ee225-a04e-43a0-b796-5b5a41337729",
        "cursor": {
          "ref": "8ab32d46-1cd2-4d9f-a4ae-d2cf81759489",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4be5475c-4632-4080-8885-9315fc353225"
        },
        "item": {
          "id": "f44ee225-a04e-43a0-b796-5b5a41337729",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4665c884-f074-4a83-a0e5-5dc7945c81b2",
        "cursor": {
          "ref": "82b3489b-0bfe-48f9-9ab1-ef039177bc46",
          "length": 53,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cadd7d17-95fe-4de3-a6b9-14774a471c7d"
        },
        "item": {
          "id": "4665c884-f074-4a83-a0e5-5dc7945c81b2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4665c884-f074-4a83-a0e5-5dc7945c81b2",
        "cursor": {
          "ref": "82b3489b-0bfe-48f9-9ab1-ef039177bc46",
          "length": 53,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cadd7d17-95fe-4de3-a6b9-14774a471c7d"
        },
        "item": {
          "id": "4665c884-f074-4a83-a0e5-5dc7945c81b2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "014b8e68-758f-435d-8a2c-1fb5358a5151",
        "cursor": {
          "ref": "e39bf6e4-8ce9-4d05-9b62-6350e8d5f159",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "21d88ce5-d7c2-4ff8-b260-e14c36ee5622"
        },
        "item": {
          "id": "014b8e68-758f-435d-8a2c-1fb5358a5151",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "014b8e68-758f-435d-8a2c-1fb5358a5151",
        "cursor": {
          "ref": "e39bf6e4-8ce9-4d05-9b62-6350e8d5f159",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "21d88ce5-d7c2-4ff8-b260-e14c36ee5622"
        },
        "item": {
          "id": "014b8e68-758f-435d-8a2c-1fb5358a5151",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "014b8e68-758f-435d-8a2c-1fb5358a5151",
        "cursor": {
          "ref": "e39bf6e4-8ce9-4d05-9b62-6350e8d5f159",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "21d88ce5-d7c2-4ff8-b260-e14c36ee5622"
        },
        "item": {
          "id": "014b8e68-758f-435d-8a2c-1fb5358a5151",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      }
    ]
  }
}