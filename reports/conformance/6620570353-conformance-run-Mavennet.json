{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "84fba532-7201-4014-a46f-6d997c57c5c1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a47200ab-236e-40cb-b01d-0053e2453032",
            "name": "Positive Testing",
            "item": [
              {
                "id": "caf789e5-1c46-4f07-99f1-4fc8e8977f9b",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e02c851a-8ebe-42c3-8332-b6bbb80bee3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b40404f1-5279-4888-ac75-fcea4c58c481"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "de8d6fae-be16-4b93-a5e4-bb591acb39f6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c848b698-a635-4526-b716-a7dda98e72d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14579bd4-b021-496f-91a0-6a830654b285",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "33ae3b96-f7f6-45bc-b43e-5201ecf33d5c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d297cad-c561-453d-b435-fa8ca7223a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f66dc4f0-0b83-40e5-b7ef-9fdc5dff4faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83de3652-6c41-462d-b27e-6fdc4dbf41cc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89060be-881c-4747-baac-65c08399d0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f39d51a-f903-4f4b-af24-ecc6e389fd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70529c74-062c-4b78-98b3-03f2e9f7a858",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f1879d-d783-426f-9c09-caff19b22b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "edc32d84-6a9d-4a35-a179-37068826cafb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "86a4a783-e010-4e8c-995a-3bd9f7459edb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa83f7d3-986c-4332-8364-c8368b0cd9a3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96aad2e9-10f6-4b3d-8113-b3762bba3f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f96e34e-3c27-41f9-ae83-762318792fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909370f3-8cf0-4a74-89f7-b3d3189fbb5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1372633-362b-4679-983b-8f90aca63741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa5f0a8-1b47-4794-b059-7675a448299a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037043b5-a9f8-496b-8457-3a69152e7600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd778c3b-616f-4551-8f48-300f7b7f3870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c884dbc7-8e97-4871-a151-8c1685a45775",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9befdc22-6cb6-4af7-b577-f69fa173cad8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1bdc88f6-be4f-49c6-9ddc-4d1f4836e4a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f3b1113-0125-458b-9f75-924ed42c7e49",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a67b7932-b788-49d1-9c8f-7de1c66e11fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b721c791-578e-464a-91a3-dac7e61a47a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db8f5c4c-57e3-4dd7-985d-8b23df8fb3de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "64cf4c07-35e1-40b2-9fda-86b6936e243b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ab66de1-a343-496a-8810-fa4763fb7068",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0249c22c-a1bf-4464-bd63-22677ebc6134"
            }
          }
        ]
      },
      {
        "id": "565ea100-1e82-4003-9963-2c7157b16215",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c047a197-0912-4106-b595-3e3143084afb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a826c96-7093-4230-a529-03b02b90fec8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a74d1f89-9321-4f59-8269-0ba086e33f87",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd400a54-2966-4872-a798-1a55925d1993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242fdffc-e4a6-4059-94a0-d92761f0a6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbcf9d9-4466-440c-98c2-201950741352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f4559de-c68b-47f3-bf8d-54b0c1cd24a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da20f75-4896-499d-9e4f-f70183bf7f64",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa7656b-e8ac-42e1-8d3a-82f8eb2eb248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84468d45-8870-4bc8-b035-ac4cd737c911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6952164e-d92d-488b-a7e0-0f369bf9b03d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30e419b2-98f8-4da9-a9e0-6ed3ee745757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad27f0cd-cbe4-4e19-822d-371516324089",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8451f645-4580-474a-9748-a88e7fe57530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd55108e-d3ad-4851-8130-ee8bc7673721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0408e8-2cf4-4cf6-8250-a79e8d21d280",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d97efbdd-6e1e-43c8-961f-717bd156fc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e939f608-5859-49af-8ae3-be5791d5d2c0",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8209b9b-b9c0-405c-aaab-65afc84e3c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d962e95-d0ff-4777-909e-1a1bdf03e980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e65f0f-3790-4f8c-a725-a69d19cff67e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fc37bc8-1751-41d1-9742-351ef816f80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab798565-c681-4e7f-9536-9545ef4ac4ad",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7989d6f2-6fe1-4fbf-a037-98a7b71b9e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ca8a18-d95e-4e39-899a-2788f7430de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27435b9-b386-4a86-98ca-d7ac4c6bc45f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3643142-14dd-4eb5-af13-b2f3c0b32254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296791a6-f25d-4ee8-b0c1-59d7d6957da4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc12446e-2c91-4da3-8c67-6dca432e3b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e616f26d-9aeb-4f96-a2e7-789096ecb3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28c00e1-e281-4e87-87a7-9b51f5855270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e2ccb28-f4cf-4ae8-8ad3-b3a2be6335ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0991e992-8a6d-4ee5-bf15-bcf897c59442",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002f4b89-7bc1-4563-8400-3cb443fb8c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0190cf05-624d-4ba7-8623-97cd473b7484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9adb04-f710-48c2-a31f-484221d6f25c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c074e38-0f5c-4477-ab7c-e59376e54e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da819fd4-a72b-4de6-b332-7fc565059184",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864dcb4a-e380-4abe-974a-965b531d6b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22329d06-d568-4ec7-bd81-dc1b50091af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc333786-1895-4c9b-b44f-d63d0cdfc9c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34c9a904-8796-4b51-a08e-88b659f27da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fc99c9-5a51-455c-b693-9c7e90d06899",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483b0bd5-d6e4-4136-92bb-efc343aa4d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1986e593-19e0-4569-884c-52e750677d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263e0a0e-b832-40f8-977f-1721a78bc5ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eae3184f-37e8-4f44-8324-f0657f27f4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee084223-b547-4292-a63c-dea89914c0c7",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191dc838-5ce0-4e05-a2cb-504e4c1a4ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe10ce20-fa29-4cd5-911d-5363dd35e352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a104f4cc-65e7-4a89-b841-69bad0724559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e37c2b9-73a9-4e40-acdd-6d0795032492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b31120b-43e2-48ad-933a-6dc34d0f4abf",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ff06e2-2a2a-40ba-b562-60444d1b8fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddb89a9-2a8f-4866-8f3d-aec7df7ff033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff26a43-8c2c-44fb-9bf6-147b2de29804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "01c9a789-b0a1-43ef-9581-209a419b0c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2271a7-6745-4671-a58c-3e2c9fd340b2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c196a85-fa04-48b3-a4f3-8ef72eb371aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fcde2f-30f9-40b2-ab71-131e553d1288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a833e129-5356-40fe-ad8f-679a1e280fd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "f15aac36-5860-48f3-bc19-1b6d077edc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542ff636-a9a6-43dd-a01a-b41ac55f8b7c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67f2c1b-da7c-49ee-afad-c859551988d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5333b7e-4f2b-4d2c-9de5-6445c6c1f800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5486f9bf-6291-40d8-8101-5ed66af9a219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4571e27-0822-45ee-ab21-2c73adac41bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be50cf16-375c-4bc3-953c-5f48af25a7ad",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca585ad-3f7c-4066-9255-6fcd4a349fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c7eafb-97ae-412f-b105-d3c025405f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a09b5ba-09a5-496f-9c72-fbcde1a8c6ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43b45e81-5858-436b-a479-43a1a879eb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d537a5-7796-455c-a822-75cc175cb5c0",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fcac8b-ff2b-4d67-a792-0695e6efa2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc780461-05c9-4929-a74f-86245c8c7deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7aa4e5-e163-4505-93aa-baa6907a047c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b41e0a67-4a1d-4380-8cbe-7882cb062df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afc280a-62d3-4870-8330-3869b208be85",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a643ad6-1821-4ece-9f67-77ef6d9dd394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6eca4c-fe48-4b59-a55d-a4077a79dfe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568f7e4c-096d-49d0-8572-94e7db110b30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "7054a1b9-e3b8-4a64-bbfc-a6b07e294344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf340934-c392-409e-abfa-20d2e40d1c75",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e270041-fd3f-49ae-afbb-5993143fa890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996a1553-2cbb-4c6a-b360-d4b972a40b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a883ca2b-5dc4-4bfd-99df-f1e007feab31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9412950e-808b-4e2e-a1ba-94c7631bccdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcb6127-b5f4-4163-881b-c05c6a2ec429",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b61d4be-6e24-48ed-8e9b-592c7de6ebfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c47a8ff-9b66-498d-9782-5e416becb5fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9095e1-94fa-4b2f-bef8-9f4697f4ac67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5919304c-7881-4f3b-afcd-e96b4b9b4152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94705ed0-544a-4f4c-8aea-e039bb946a91",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ea0b07-c2da-43a4-aa71-11c9d0f5d6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e85f769-2ecc-4aeb-9404-52fe14d0b04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f11f2c-ee49-4e05-9003-f9e13c3a8177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0076fd00-6954-4118-8f11-22fcb404d000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c5598d-51c9-4c30-87fe-d553331d42e3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe4ed44-f944-4908-87c0-b0ec47e7b7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30dce370-e553-4a82-9580-2d6278d01832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065ddc2e-997e-4e9d-b604-71dcf2098615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "957e618d-c2a7-41d8-a4cb-58c8bb4bd018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de75d5d-ee4c-42ec-9c22-0800058ab898",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f9c056-643e-4abc-9362-29969fd8e1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d77fb06-a758-4ce2-bc08-a10a2a3cbd50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a149ead-44da-4ad0-a9eb-9962170bdde1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "475cbe4b-0585-4081-8fe2-a8c199647826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71604620-7d94-4f11-b40b-1279a3c08f0d",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd0e456-a2c7-4df0-a171-c223334d5473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bafb065-e311-4702-8c9a-fc6f4a81d91c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c816daf2-5a04-483b-bd42-a226421b56eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "128136b1-b463-4161-8e23-46f3ea1a70ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb09b8da-ab93-4730-bc7b-3539c4593000",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31527bfa-1442-492a-8e8a-662e04f4966a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fe1052-969b-46b4-9526-2aee10283b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732e0805-4ff9-458f-8652-000e46e0ee09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66075f82-8460-425d-82ce-07fd90129ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f80d83-3972-4573-b5ef-72a356ab0375",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cee0de1-be15-41f0-8ca0-96ec1b2355e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907701fd-f84a-47ae-ba3c-e5af3ec02232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe17a033-089c-4024-a00c-e65e848fdef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96a4291f-c449-4f56-b8e4-7130ed775eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d0aedd-92e0-4282-9ad5-41a5264cc15c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792dec2e-ef78-4814-808e-00146cf0e157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbec37fc-7dca-4722-9e11-465e9e1d12e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef0620a-7e7f-46f8-8c20-d16b0894c45d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c60cbc3-191f-4446-9809-58154cfbd6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87581c4-2028-4020-b551-f83aafafcb0d",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39f5eae-5446-45f4-a67e-41491cf503f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a525e39-5ea0-4ac5-b22b-c713a582ecfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67052b8e-2ec7-4939-91aa-6cfdc943e6f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9586731e-0e90-4273-b164-ad9ea10ef8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30912a72-4e88-474a-bde4-f04571d7f212",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d31fae-465c-41db-bd63-89db134cd271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a359293-b708-4378-b47f-dc2a221ed757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985245d5-4469-4a50-b67b-eb9fc83e29b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e99d2e9-de38-4f28-8a8c-32e5fb93fe21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4153f74-b01f-498e-9496-a6561087b93e",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29dfdc9-0003-4dbb-867a-b42e9037ecbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0452ada8-ccf2-413c-929a-b831580e31d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16b5ab9-4682-4516-a725-916d5b2ead91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcbedeb5-b385-40dc-808a-527bd2472ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebeb6dc-2d36-4192-a8da-3af15b4206e9",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d239201-2862-4da9-98a9-6bcd1421d240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24261004-281f-45d9-a90a-751526cd78a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f396f4-a8a2-41c5-9110-0a45d1978e13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f4957b9-3ed8-4486-a97d-c55523726135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35df6623-460c-467c-8ec8-a56f10393434",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e101ebf5-ea26-4525-bf4c-8e3b1526afa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031efe87-9788-4be7-b1fe-032e1f4fe098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46508e75-0f4f-4b95-95b8-faf449fa7432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db55e363-9ff8-409a-8244-4bc0248f2c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6810aabf-51d2-4d6a-991b-ae8f8f46dc6e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3a208e-cf43-4e36-b66b-5f08477cecda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0a4db1ad-8bfb-42c1-8db9-13143cc6dedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9dfecbf-5db7-437a-8986-19f4e4e71bfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b55b7a12-4ba6-4448-8b4a-7195d6b6e244"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2765288f-23ad-4b40-a877-4084d9b7d79a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ab372ed-aa75-4a51-bd1b-81736230a296",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4f6440-c5a1-4193-b0ee-641538fa07e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4282122-5f74-4c03-a562-3ec42af3b471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495d6c4b-a5eb-4c90-ad2f-ed9ab70db59e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ba133630-4887-41f8-b876-e0ba79e811c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071b32dd-f0e4-4447-8cbc-53d22d6b8837",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942c3836-02ab-4b00-bf8d-4b58d65adc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e731848-47ba-432d-9ebc-0291f13a6a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7d5a7c-bff2-484b-b995-84927aeafbed",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c1a2c1b5-5230-4108-a0e5-d4045e8047a3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd3c3d2b-17c0-4442-8356-2fc6eb0778ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc121ae8-5264-49d3-b425-d238e0682db9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2861ef1c-862e-4dd4-af2d-28ef3e12418d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ddc0c46-9bb4-458b-8d37-9e724eeb4e6d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4e525ebe-d86c-46e2-8996-c91ed0d323ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73e18384-8643-4b7f-9369-433ec8a718d4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bfd4b064-8310-460d-b2ad-52dec8c138c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1042f246-b13d-47a7-a0ff-34740e6a8cc1"
                }
              }
            ]
          },
          {
            "id": "8969b8f0-ccfd-48ff-9f98-1c3eb101fb35",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9426556-7aae-4e69-9a4a-b9854bf0c112",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c28fc43d-353c-46c2-ba0b-cf9c4116deec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6843764-8ba6-45ca-aec8-8db3ebab4a80"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed5dec9a-bebd-4e1e-a3c1-5a5d406d474b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8d389c0b-f497-46c8-a1db-047d4979abad"
                    }
                  }
                ]
              },
              {
                "id": "f00c8938-2fd2-4c5a-9871-865c215d11bf",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f9f0f05-16bf-442f-9f1b-31afe11ce987",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c45cbdc2-a59a-4c37-814a-80c053ec8f00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8e881f7-b301-48c2-8329-395cdd34f20d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "805ffb7c-994e-4e5d-b0a3-07d901c7bc8b"
                    }
                  }
                ]
              },
              {
                "id": "02c4f6ee-fe34-44aa-a182-07353264518e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25aac11f-9d86-4cb6-8752-ea28a02b4970",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "819a7c78-a4ab-47a1-8d4e-b35d68c9d848"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50a8b218-e0e5-49ce-bb83-7cce6aca6026",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "fc9033c5-cfb3-4ba5-bd46-06ec33d05389"
                    }
                  }
                ]
              },
              {
                "id": "4543e198-ee23-4077-8034-61bce2502204",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8724cbe6-1a18-4afd-ae4d-668e69199872",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "85454ba3-11e6-4eeb-8d6a-eaa51b7786f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d04e7af-4cc6-4e7c-a44e-4061ed84fcfc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ed2feabc-5c6c-4718-bec6-9c58d94e4fce"
                    }
                  }
                ]
              },
              {
                "id": "abfd87a6-9f38-4c9d-a824-4e053446b6e3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61270b69-125c-4b9e-a980-2d6bc3ac6533",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "1862be33-28c5-446b-96d7-6a8796c1ac2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4cfb2c2-ebed-401c-8149-932a3906eb27",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "50b6fb6a-ca19-4ff9-801d-8268f329eb3e"
                    }
                  }
                ]
              },
              {
                "id": "1aa45ed5-1b2b-4be1-bdc9-9e05f3949169",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "241a4f60-d157-4278-94f9-eb4da47fdee9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab8c818c-0410-45c5-a470-1aadce51eaeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ded20b28-2ac5-4f5d-903c-100c366bbbfb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7fbe6077-57e6-45b6-8ea1-2cf691b3acb6"
                    }
                  }
                ]
              },
              {
                "id": "a060d741-effc-4203-be5b-ead4fbd6645a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f60b1fc-540b-425e-93bf-d1a1c0d94cd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cea49cfd-5d62-4d39-a291-a226f56e862b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97fd136f-d81c-41bd-8e1c-bdf9b5228053",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "351b1078-c750-4b6d-8ab1-1e7e3431f34e"
                    }
                  }
                ]
              },
              {
                "id": "09c36385-19c7-4e17-9191-82e09142e6d4",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f58d68a-f52e-4732-b023-3d1c0fd2e636",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c66affe-d296-4190-a17e-8691188c90df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c853f46-d37f-4a3c-9367-acf542a03b9e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5996e0da-563b-4fdb-9632-7c2efad45447"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c1e57b6a-0ea3-4566-8ad0-b846127824d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "541da160-c8ec-4245-a7d5-e8f3ead337f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "63bd6935-5242-4a74-b339-532453094689",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b2921d9-9062-48e9-bdfe-a51ec3cd0ea6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37de8be1-3c53-4b2e-b30c-9f36e418ddbb",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "a19541e1-a9da-4984-ad4f-b1bd8977ebf2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8ad4efe-6ba3-43e6-a34b-cc48af5a4917",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f830971-5e0f-40cd-a06a-5cbac83dfb05"
            }
          }
        ]
      },
      {
        "id": "f63a45b4-e64a-4e77-b11a-e4b735acdd8f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a650dafc-2253-4310-9aa5-84603eca51e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72899370-4b3b-4287-b801-4b1e4a6065cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6dbb716a-4033-4994-a90a-deabf2af064b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5197e60-3725-4ad6-9a5c-1ca3a59814c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80d86a9-f313-4009-bfea-9d35b2c0647c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b997b23-cd2f-4805-b2ae-04e3f9e9672a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4939b744-8a2f-495f-8ec9-3449458093a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa1496f-ed14-4657-8039-bd1227ad3edc",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d27d2f3-ec5b-4fec-839c-50b08eb57c51",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0eb0e7d8-11a3-4f82-9a67-ce52da6aafe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be31877c-117f-4578-ba79-0293950f0743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3312d424-40a7-4eb7-8ab8-308726e2816f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3609f392-700c-4880-8f72-f69de7a1744c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15246302-6b32-4fef-a1fd-bac4013fb89a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "11a11a74-4e21-4048-b622-a6dbd54ae81f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60e7834c-bcaf-4cee-a6d0-61e7819e53e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c8ab8ce-23f1-4fec-a6f3-636a79bcfdf0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "e873baff-f935-4522-ad0e-891d537d2e53"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6ff38f6-27d6-4c89-a925-195b9d6276b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "077466de-3fe8-4495-bf1e-6af847f8567a"
            }
          }
        ]
      },
      {
        "id": "81297e29-bae6-4dee-b55a-24e9dbd3d065",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8dd95922-8c9d-495e-a0d1-70a20f41a701",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94459add-a5f7-456a-99bf-7441acf647e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25c4105f-5495-412f-b80b-53d4f9dfb98a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f3c48b-e26c-4a36-9d78-4bc92cbf8b22",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "ae391bb9-2c24-4c60-87bc-be9e4294c86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced78027-ae9e-4fcf-bf1f-41f870418604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0610a3d-ebbc-4b5f-bcde-8967ff5e49f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d079345-1649-4daa-83f6-80ecb4e668de",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7b9173-05f9-4ed3-9b6d-26f718687f0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "3ef3cd5b-2b7a-496d-9119-2338fb4fd004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b74b4e-7133-4452-ab2e-7fe035f2964e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fae3a8ea-c533-4e21-b109-7255fcf88c32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16052acd-aa5f-45d0-aebc-bbe506b80860",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df430525-ebd4-454c-8b64-6e9de33ef9d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0d31151-807a-485c-ac74-f8b9311f7a2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04273db6-46f8-4c4e-8af6-8a31b277017e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c31f9232-8a33-4537-9b2d-6cb769b3d358",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "986adefa-5fe9-4aed-8363-76994c003a29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51769256-efa5-4d00-8b75-666f64337f4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a1c7ebc-4338-415a-8a66-16efc5b09f26"
            }
          }
        ]
      },
      {
        "id": "fe40dfb3-4c7b-4692-a9ac-58646a90bbf5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9979d22e-b8ae-420e-8acc-822af49c2211",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5753f199-e6cb-4339-8826-00acc4a58d4c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9331cfdc-c211-42db-b5c1-f9a24f9e426e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf23d348-9e90-4886-90d9-e3348e3bab18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f70fb1-71c7-4e18-9708-15242b63d807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79eb10c-c28b-4cba-a09d-3ded9572dbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "595955e4-46da-4126-a5cb-eb67fbd48c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ecf7be-215d-4464-9ec9-2ead930d1419",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c547b7c-0899-401a-abd1-c5008f071e3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e2a3dfbf-ae15-4dae-9d3a-be135aaf4f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a58e552-8b28-4f1e-b166-4046b41cfbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f50dfe1-4fb1-413a-b69d-86a2b85fb8c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "722a9599-75c7-47bf-9133-daa3a33c01c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7a189fe-c1ee-4ecd-9190-61e8d04241f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70062462-3e91-4be3-a625-a22a40534207",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a013d385-8a11-4df9-adc7-710346c501fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33cab746-9c1a-4584-bb28-ea1eb3dcde62",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "2b7689d9-ff1a-4649-8857-21c6ba114b4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66391cd8-f0ce-4034-8045-aa8d77fa0a52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf45ea21-21bc-4c97-87f3-34760773a9e7"
            }
          }
        ]
      },
      {
        "id": "21d8b053-4303-4946-b337-221674d0a6a0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "288141d1-55f7-4eb5-96c7-614d9dce9588",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50083d45-f69e-4bbb-9e69-343b0ca98a83",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "687da6a1-f744-408d-8ac0-652df424bd12",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61d765b-deca-4824-9ac7-2e06999e6e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16001d93-0c0b-481b-821e-e33f1e2d4de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04fba71-8781-40fa-909b-ea25fd15f8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef641898-014f-4fd5-b583-29958f5e91ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f264b142-b938-449a-945f-02fe88230a4e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17099ad8-d487-49b4-9c54-c609f0cc0948",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2b375738-9506-47b2-aa34-582418123137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba6ab71-bbb8-4217-b1e5-7f60e0764e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ef24ebf-7ced-4680-a6d4-6bb8fd5349db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "580eea19-6ddd-4e32-942c-aaae4b604939",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2567e2ce-f62a-4972-9566-3e7eede015b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "779c1942-7e87-4ba5-95ce-0e811ad151a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25451218-091a-4ecb-9758-7957d2a8c9a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d61c4b6-3ba5-479a-870e-cdc90c0db7f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "1e5bd851-27db-4c34-b6f6-86cfb41a2c9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "330e3e4f-dc1f-49c5-b8e2-423fab8db5c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "414cf464-54e9-4d36-912c-f53e088628fb"
            }
          }
        ]
      },
      {
        "id": "188eb88d-c3fa-409d-aafd-490f7ee19b38",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "da194700-e2dd-406d-bef1-e23a59acc2a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cd94fcc-d10b-462e-a80f-1ae264bd7d43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b95e5774-c8dd-4868-b0ed-bf4e95b3b5b7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72121367-46f0-4bec-a62b-d52fb43dfc83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee079261-97a5-4a5f-b330-2c92d13fcd7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab445cf-4e72-43b7-b0af-653dd41adfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "671e9b2a-2c5e-4638-a8ef-6bb59a8cc81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d54e4b7-d870-452c-b643-8fd2d72e2318",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d385a26c-177e-4dc8-b492-6270f985b308",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "def029db-7802-4527-899d-1786203a64cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d1bb06-2378-4ea4-b15c-b47b34608110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32978cdb-4a37-4c59-8c81-c94521edc880"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cb4443c-ca59-429d-a904-06bbcdfdebbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0702990-036e-4b0d-ae55-58724e1eb7b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "312a90d7-f5be-4cb0-988a-9709e9755fdd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "297e3d6e-b17d-4a48-8325-2d9ab2538cbf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f872845-77e7-4dd3-8c1b-641806bf44a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "15983621-adb8-4570-af13-d95c6fc4d399"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11e5e914-c251-41d6-98e1-8a7466ec472e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "013c848c-0419-47b1-91bd-04f31303452a"
            }
          }
        ]
      },
      {
        "id": "f559ce12-7df7-40ac-a5e4-47081dc3613f",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "250f7dd7-6d48-40b2-91f8-4157fca37a1c",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 163,
        "pending": 0,
        "failed": 163
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 121
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698106790509,
      "completed": 1698106793473
    },
    "executions": [
      {
        "id": "caf789e5-1c46-4f07-99f1-4fc8e8977f9b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c096a09e-8021-4c76-ad9a-1128212d91c0",
          "httpRequestId": "8bfa3e6e-c0a6-494d-bbcc-8e63d7f2abb5"
        },
        "item": {
          "id": "caf789e5-1c46-4f07-99f1-4fc8e8977f9b",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "33ae3b96-f7f6-45bc-b43e-5201ecf33d5c",
        "cursor": {
          "ref": "89191527-867b-496d-867f-357a2f7c2b34",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "35c03dbe-8bc7-4cd6-a9ab-04a3c6a90dcc"
        },
        "item": {
          "id": "33ae3b96-f7f6-45bc-b43e-5201ecf33d5c",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "33ae3b96-f7f6-45bc-b43e-5201ecf33d5c",
        "cursor": {
          "ref": "89191527-867b-496d-867f-357a2f7c2b34",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "35c03dbe-8bc7-4cd6-a9ab-04a3c6a90dcc"
        },
        "item": {
          "id": "33ae3b96-f7f6-45bc-b43e-5201ecf33d5c",
          "name": "did:invalid"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "83de3652-6c41-462d-b27e-6fdc4dbf41cc",
        "cursor": {
          "ref": "062aed30-553e-4d55-a238-88f58a2c1a7c",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2ad39bfe-dd29-4ec1-a5d4-280b444da846"
        },
        "item": {
          "id": "83de3652-6c41-462d-b27e-6fdc4dbf41cc",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "83de3652-6c41-462d-b27e-6fdc4dbf41cc",
        "cursor": {
          "ref": "062aed30-553e-4d55-a238-88f58a2c1a7c",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2ad39bfe-dd29-4ec1-a5d4-280b444da846"
        },
        "item": {
          "id": "83de3652-6c41-462d-b27e-6fdc4dbf41cc",
          "name": "did:not_found:did_web"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "70529c74-062c-4b78-98b3-03f2e9f7a858",
        "cursor": {
          "ref": "685424b4-01e4-4fa6-949e-4bddcbf0f618",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae72ca0f-3fe8-4205-9372-0bbb5123262b"
        },
        "item": {
          "id": "70529c74-062c-4b78-98b3-03f2e9f7a858",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "70529c74-062c-4b78-98b3-03f2e9f7a858",
        "cursor": {
          "ref": "685424b4-01e4-4fa6-949e-4bddcbf0f618",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae72ca0f-3fe8-4205-9372-0bbb5123262b"
        },
        "item": {
          "id": "70529c74-062c-4b78-98b3-03f2e9f7a858",
          "name": "did:not_found:urn"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fa83f7d3-986c-4332-8364-c8368b0cd9a3",
        "cursor": {
          "ref": "a381f2a2-ea88-4290-8395-573a7ccb49e0",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c96f5aa7-952c-496c-8dca-7b3944c87945"
        },
        "item": {
          "id": "fa83f7d3-986c-4332-8364-c8368b0cd9a3",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "fa83f7d3-986c-4332-8364-c8368b0cd9a3",
        "cursor": {
          "ref": "a381f2a2-ea88-4290-8395-573a7ccb49e0",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c96f5aa7-952c-496c-8dca-7b3944c87945"
        },
        "item": {
          "id": "fa83f7d3-986c-4332-8364-c8368b0cd9a3",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "6fa5f0a8-1b47-4794-b059-7675a448299a",
        "cursor": {
          "ref": "15f312b2-9c41-45a2-b82e-3f2bfc02c279",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "42147265-d9cf-4c1c-a4f3-e3834a58103f"
        },
        "item": {
          "id": "6fa5f0a8-1b47-4794-b059-7675a448299a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "6fa5f0a8-1b47-4794-b059-7675a448299a",
        "cursor": {
          "ref": "15f312b2-9c41-45a2-b82e-3f2bfc02c279",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "42147265-d9cf-4c1c-a4f3-e3834a58103f"
        },
        "item": {
          "id": "6fa5f0a8-1b47-4794-b059-7675a448299a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "6fa5f0a8-1b47-4794-b059-7675a448299a",
        "cursor": {
          "ref": "15f312b2-9c41-45a2-b82e-3f2bfc02c279",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "42147265-d9cf-4c1c-a4f3-e3834a58103f"
        },
        "item": {
          "id": "6fa5f0a8-1b47-4794-b059-7675a448299a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "4f3b1113-0125-458b-9f75-924ed42c7e49",
        "cursor": {
          "ref": "07f9d40e-0f68-4830-ac1e-3d6431dff7c9",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cd3d8d57-1308-413b-8c8a-24594906e7f5"
        },
        "item": {
          "id": "4f3b1113-0125-458b-9f75-924ed42c7e49",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4f3b1113-0125-458b-9f75-924ed42c7e49",
        "cursor": {
          "ref": "07f9d40e-0f68-4830-ac1e-3d6431dff7c9",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cd3d8d57-1308-413b-8c8a-24594906e7f5"
        },
        "item": {
          "id": "4f3b1113-0125-458b-9f75-924ed42c7e49",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a74d1f89-9321-4f59-8269-0ba086e33f87",
        "cursor": {
          "ref": "9c162229-6536-4213-8b77-6fdc1a5b8e0a",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "02efc222-c93b-4a26-bec7-0741d02b96fb"
        },
        "item": {
          "id": "a74d1f89-9321-4f59-8269-0ba086e33f87",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a74d1f89-9321-4f59-8269-0ba086e33f87",
        "cursor": {
          "ref": "9c162229-6536-4213-8b77-6fdc1a5b8e0a",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "02efc222-c93b-4a26-bec7-0741d02b96fb"
        },
        "item": {
          "id": "a74d1f89-9321-4f59-8269-0ba086e33f87",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a74d1f89-9321-4f59-8269-0ba086e33f87",
        "cursor": {
          "ref": "9c162229-6536-4213-8b77-6fdc1a5b8e0a",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "02efc222-c93b-4a26-bec7-0741d02b96fb"
        },
        "item": {
          "id": "a74d1f89-9321-4f59-8269-0ba086e33f87",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6da20f75-4896-499d-9e4f-f70183bf7f64",
        "cursor": {
          "ref": "1ff130c3-b68b-4a19-ba4a-556a1f551e08",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "925761ad-ec2b-4217-b216-e039b51ded20"
        },
        "item": {
          "id": "6da20f75-4896-499d-9e4f-f70183bf7f64",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "6da20f75-4896-499d-9e4f-f70183bf7f64",
        "cursor": {
          "ref": "1ff130c3-b68b-4a19-ba4a-556a1f551e08",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "925761ad-ec2b-4217-b216-e039b51ded20"
        },
        "item": {
          "id": "6da20f75-4896-499d-9e4f-f70183bf7f64",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "6da20f75-4896-499d-9e4f-f70183bf7f64",
        "cursor": {
          "ref": "1ff130c3-b68b-4a19-ba4a-556a1f551e08",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "925761ad-ec2b-4217-b216-e039b51ded20"
        },
        "item": {
          "id": "6da20f75-4896-499d-9e4f-f70183bf7f64",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "ad27f0cd-cbe4-4e19-822d-371516324089",
        "cursor": {
          "ref": "7cca93a4-dc38-4abf-84b3-fa8893163a7d",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bfcf7d42-9208-4529-9c20-a5691d96a361"
        },
        "item": {
          "id": "ad27f0cd-cbe4-4e19-822d-371516324089",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "ad27f0cd-cbe4-4e19-822d-371516324089",
        "cursor": {
          "ref": "7cca93a4-dc38-4abf-84b3-fa8893163a7d",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bfcf7d42-9208-4529-9c20-a5691d96a361"
        },
        "item": {
          "id": "ad27f0cd-cbe4-4e19-822d-371516324089",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "ad27f0cd-cbe4-4e19-822d-371516324089",
        "cursor": {
          "ref": "7cca93a4-dc38-4abf-84b3-fa8893163a7d",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bfcf7d42-9208-4529-9c20-a5691d96a361"
        },
        "item": {
          "id": "ad27f0cd-cbe4-4e19-822d-371516324089",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e939f608-5859-49af-8ae3-be5791d5d2c0",
        "cursor": {
          "ref": "eb6377dd-640f-4105-ace9-92cda58a32e2",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b5841047-7f45-44e4-8768-0377c8cb1185"
        },
        "item": {
          "id": "e939f608-5859-49af-8ae3-be5791d5d2c0",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e939f608-5859-49af-8ae3-be5791d5d2c0",
        "cursor": {
          "ref": "eb6377dd-640f-4105-ace9-92cda58a32e2",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b5841047-7f45-44e4-8768-0377c8cb1185"
        },
        "item": {
          "id": "e939f608-5859-49af-8ae3-be5791d5d2c0",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e939f608-5859-49af-8ae3-be5791d5d2c0",
        "cursor": {
          "ref": "eb6377dd-640f-4105-ace9-92cda58a32e2",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b5841047-7f45-44e4-8768-0377c8cb1185"
        },
        "item": {
          "id": "e939f608-5859-49af-8ae3-be5791d5d2c0",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "ab798565-c681-4e7f-9536-9545ef4ac4ad",
        "cursor": {
          "ref": "0c8dcbae-ac90-42b8-a4e2-f949e68ef2ae",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c0c1b60d-8d87-4a74-a69e-9e2c66ca6a30"
        },
        "item": {
          "id": "ab798565-c681-4e7f-9536-9545ef4ac4ad",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "ab798565-c681-4e7f-9536-9545ef4ac4ad",
        "cursor": {
          "ref": "0c8dcbae-ac90-42b8-a4e2-f949e68ef2ae",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c0c1b60d-8d87-4a74-a69e-9e2c66ca6a30"
        },
        "item": {
          "id": "ab798565-c681-4e7f-9536-9545ef4ac4ad",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "ab798565-c681-4e7f-9536-9545ef4ac4ad",
        "cursor": {
          "ref": "0c8dcbae-ac90-42b8-a4e2-f949e68ef2ae",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c0c1b60d-8d87-4a74-a69e-9e2c66ca6a30"
        },
        "item": {
          "id": "ab798565-c681-4e7f-9536-9545ef4ac4ad",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "296791a6-f25d-4ee8-b0c1-59d7d6957da4",
        "cursor": {
          "ref": "bb9c55dc-e3c1-49f2-83dd-32601451d196",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eae45eb8-f8b8-4e60-9c88-7248af5a59f3"
        },
        "item": {
          "id": "296791a6-f25d-4ee8-b0c1-59d7d6957da4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "296791a6-f25d-4ee8-b0c1-59d7d6957da4",
        "cursor": {
          "ref": "bb9c55dc-e3c1-49f2-83dd-32601451d196",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eae45eb8-f8b8-4e60-9c88-7248af5a59f3"
        },
        "item": {
          "id": "296791a6-f25d-4ee8-b0c1-59d7d6957da4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "296791a6-f25d-4ee8-b0c1-59d7d6957da4",
        "cursor": {
          "ref": "bb9c55dc-e3c1-49f2-83dd-32601451d196",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eae45eb8-f8b8-4e60-9c88-7248af5a59f3"
        },
        "item": {
          "id": "296791a6-f25d-4ee8-b0c1-59d7d6957da4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "0991e992-8a6d-4ee5-bf15-bcf897c59442",
        "cursor": {
          "ref": "adaeb45e-5ea1-4bb9-bf6f-99317ace6f6d",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "79638992-970e-4dd5-b05b-8bc9bc7ac83d"
        },
        "item": {
          "id": "0991e992-8a6d-4ee5-bf15-bcf897c59442",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "0991e992-8a6d-4ee5-bf15-bcf897c59442",
        "cursor": {
          "ref": "adaeb45e-5ea1-4bb9-bf6f-99317ace6f6d",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "79638992-970e-4dd5-b05b-8bc9bc7ac83d"
        },
        "item": {
          "id": "0991e992-8a6d-4ee5-bf15-bcf897c59442",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "0991e992-8a6d-4ee5-bf15-bcf897c59442",
        "cursor": {
          "ref": "adaeb45e-5ea1-4bb9-bf6f-99317ace6f6d",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "79638992-970e-4dd5-b05b-8bc9bc7ac83d"
        },
        "item": {
          "id": "0991e992-8a6d-4ee5-bf15-bcf897c59442",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "da819fd4-a72b-4de6-b332-7fc565059184",
        "cursor": {
          "ref": "15e632be-4f6b-4ef6-b27b-2116236deb81",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "955dbecc-38f4-4e68-9dae-eab968a68224"
        },
        "item": {
          "id": "da819fd4-a72b-4de6-b332-7fc565059184",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "da819fd4-a72b-4de6-b332-7fc565059184",
        "cursor": {
          "ref": "15e632be-4f6b-4ef6-b27b-2116236deb81",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "955dbecc-38f4-4e68-9dae-eab968a68224"
        },
        "item": {
          "id": "da819fd4-a72b-4de6-b332-7fc565059184",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "da819fd4-a72b-4de6-b332-7fc565059184",
        "cursor": {
          "ref": "15e632be-4f6b-4ef6-b27b-2116236deb81",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "955dbecc-38f4-4e68-9dae-eab968a68224"
        },
        "item": {
          "id": "da819fd4-a72b-4de6-b332-7fc565059184",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "b3fc99c9-5a51-455c-b693-9c7e90d06899",
        "cursor": {
          "ref": "d4d72777-c6c6-4074-b78a-9f66daf60cc1",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7c80435c-616a-40ac-888d-497d3ee9910f"
        },
        "item": {
          "id": "b3fc99c9-5a51-455c-b693-9c7e90d06899",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b3fc99c9-5a51-455c-b693-9c7e90d06899",
        "cursor": {
          "ref": "d4d72777-c6c6-4074-b78a-9f66daf60cc1",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7c80435c-616a-40ac-888d-497d3ee9910f"
        },
        "item": {
          "id": "b3fc99c9-5a51-455c-b693-9c7e90d06899",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b3fc99c9-5a51-455c-b693-9c7e90d06899",
        "cursor": {
          "ref": "d4d72777-c6c6-4074-b78a-9f66daf60cc1",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7c80435c-616a-40ac-888d-497d3ee9910f"
        },
        "item": {
          "id": "b3fc99c9-5a51-455c-b693-9c7e90d06899",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ee084223-b547-4292-a63c-dea89914c0c7",
        "cursor": {
          "ref": "5ceec61a-073e-4a37-ad59-0ad5c86c2693",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d0fa9c80-16b8-41f9-9e54-da7b6647bd17"
        },
        "item": {
          "id": "ee084223-b547-4292-a63c-dea89914c0c7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ee084223-b547-4292-a63c-dea89914c0c7",
        "cursor": {
          "ref": "5ceec61a-073e-4a37-ad59-0ad5c86c2693",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d0fa9c80-16b8-41f9-9e54-da7b6647bd17"
        },
        "item": {
          "id": "ee084223-b547-4292-a63c-dea89914c0c7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ee084223-b547-4292-a63c-dea89914c0c7",
        "cursor": {
          "ref": "5ceec61a-073e-4a37-ad59-0ad5c86c2693",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d0fa9c80-16b8-41f9-9e54-da7b6647bd17"
        },
        "item": {
          "id": "ee084223-b547-4292-a63c-dea89914c0c7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "4b31120b-43e2-48ad-933a-6dc34d0f4abf",
        "cursor": {
          "ref": "0dfac5a3-d644-40cf-a87c-04c2e35f828d",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "df4935bf-44dc-479d-986f-d75862062fcc"
        },
        "item": {
          "id": "4b31120b-43e2-48ad-933a-6dc34d0f4abf",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "4b31120b-43e2-48ad-933a-6dc34d0f4abf",
        "cursor": {
          "ref": "0dfac5a3-d644-40cf-a87c-04c2e35f828d",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "df4935bf-44dc-479d-986f-d75862062fcc"
        },
        "item": {
          "id": "4b31120b-43e2-48ad-933a-6dc34d0f4abf",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "4b31120b-43e2-48ad-933a-6dc34d0f4abf",
        "cursor": {
          "ref": "0dfac5a3-d644-40cf-a87c-04c2e35f828d",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "df4935bf-44dc-479d-986f-d75862062fcc"
        },
        "item": {
          "id": "4b31120b-43e2-48ad-933a-6dc34d0f4abf",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "1c2271a7-6745-4671-a58c-3e2c9fd340b2",
        "cursor": {
          "ref": "a9324be7-42d9-4cd7-b5b1-e387462b181c",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "25000ed4-c56e-43ea-98f3-66d4d39ae3b5"
        },
        "item": {
          "id": "1c2271a7-6745-4671-a58c-3e2c9fd340b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "1c2271a7-6745-4671-a58c-3e2c9fd340b2",
        "cursor": {
          "ref": "a9324be7-42d9-4cd7-b5b1-e387462b181c",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "25000ed4-c56e-43ea-98f3-66d4d39ae3b5"
        },
        "item": {
          "id": "1c2271a7-6745-4671-a58c-3e2c9fd340b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "1c2271a7-6745-4671-a58c-3e2c9fd340b2",
        "cursor": {
          "ref": "a9324be7-42d9-4cd7-b5b1-e387462b181c",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "25000ed4-c56e-43ea-98f3-66d4d39ae3b5"
        },
        "item": {
          "id": "1c2271a7-6745-4671-a58c-3e2c9fd340b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "542ff636-a9a6-43dd-a01a-b41ac55f8b7c",
        "cursor": {
          "ref": "deffc382-7788-425d-87d3-7c98bc503495",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e949195c-1a70-4c5f-85ae-4c4926ed1941"
        },
        "item": {
          "id": "542ff636-a9a6-43dd-a01a-b41ac55f8b7c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "542ff636-a9a6-43dd-a01a-b41ac55f8b7c",
        "cursor": {
          "ref": "deffc382-7788-425d-87d3-7c98bc503495",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e949195c-1a70-4c5f-85ae-4c4926ed1941"
        },
        "item": {
          "id": "542ff636-a9a6-43dd-a01a-b41ac55f8b7c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "542ff636-a9a6-43dd-a01a-b41ac55f8b7c",
        "cursor": {
          "ref": "deffc382-7788-425d-87d3-7c98bc503495",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e949195c-1a70-4c5f-85ae-4c4926ed1941"
        },
        "item": {
          "id": "542ff636-a9a6-43dd-a01a-b41ac55f8b7c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "be50cf16-375c-4bc3-953c-5f48af25a7ad",
        "cursor": {
          "ref": "03e9bc3e-5bbf-4212-9d99-214cc75a3eab",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8e3ecce6-b229-40db-946f-f343da0dddf7"
        },
        "item": {
          "id": "be50cf16-375c-4bc3-953c-5f48af25a7ad",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "be50cf16-375c-4bc3-953c-5f48af25a7ad",
        "cursor": {
          "ref": "03e9bc3e-5bbf-4212-9d99-214cc75a3eab",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8e3ecce6-b229-40db-946f-f343da0dddf7"
        },
        "item": {
          "id": "be50cf16-375c-4bc3-953c-5f48af25a7ad",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "be50cf16-375c-4bc3-953c-5f48af25a7ad",
        "cursor": {
          "ref": "03e9bc3e-5bbf-4212-9d99-214cc75a3eab",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8e3ecce6-b229-40db-946f-f343da0dddf7"
        },
        "item": {
          "id": "be50cf16-375c-4bc3-953c-5f48af25a7ad",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "59d537a5-7796-455c-a822-75cc175cb5c0",
        "cursor": {
          "ref": "49ce9359-c5bc-4a1f-8045-77886e0455a5",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "19b9566f-97d7-47df-b0a3-8be070f14c13"
        },
        "item": {
          "id": "59d537a5-7796-455c-a822-75cc175cb5c0",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "59d537a5-7796-455c-a822-75cc175cb5c0",
        "cursor": {
          "ref": "49ce9359-c5bc-4a1f-8045-77886e0455a5",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "19b9566f-97d7-47df-b0a3-8be070f14c13"
        },
        "item": {
          "id": "59d537a5-7796-455c-a822-75cc175cb5c0",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "59d537a5-7796-455c-a822-75cc175cb5c0",
        "cursor": {
          "ref": "49ce9359-c5bc-4a1f-8045-77886e0455a5",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "19b9566f-97d7-47df-b0a3-8be070f14c13"
        },
        "item": {
          "id": "59d537a5-7796-455c-a822-75cc175cb5c0",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6afc280a-62d3-4870-8330-3869b208be85",
        "cursor": {
          "ref": "42e7a0b7-9763-4f1a-8401-aa60355a085b",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f9641623-9b59-48ae-8848-e13c72d52f2e"
        },
        "item": {
          "id": "6afc280a-62d3-4870-8330-3869b208be85",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "6afc280a-62d3-4870-8330-3869b208be85",
        "cursor": {
          "ref": "42e7a0b7-9763-4f1a-8401-aa60355a085b",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f9641623-9b59-48ae-8848-e13c72d52f2e"
        },
        "item": {
          "id": "6afc280a-62d3-4870-8330-3869b208be85",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "6afc280a-62d3-4870-8330-3869b208be85",
        "cursor": {
          "ref": "42e7a0b7-9763-4f1a-8401-aa60355a085b",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f9641623-9b59-48ae-8848-e13c72d52f2e"
        },
        "item": {
          "id": "6afc280a-62d3-4870-8330-3869b208be85",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "bf340934-c392-409e-abfa-20d2e40d1c75",
        "cursor": {
          "ref": "537033af-0d80-4cb4-b852-b852bbc8deff",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4a8da706-8f6e-4150-8c57-6b92e911ceb1"
        },
        "item": {
          "id": "bf340934-c392-409e-abfa-20d2e40d1c75",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "bf340934-c392-409e-abfa-20d2e40d1c75",
        "cursor": {
          "ref": "537033af-0d80-4cb4-b852-b852bbc8deff",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4a8da706-8f6e-4150-8c57-6b92e911ceb1"
        },
        "item": {
          "id": "bf340934-c392-409e-abfa-20d2e40d1c75",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "bf340934-c392-409e-abfa-20d2e40d1c75",
        "cursor": {
          "ref": "537033af-0d80-4cb4-b852-b852bbc8deff",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4a8da706-8f6e-4150-8c57-6b92e911ceb1"
        },
        "item": {
          "id": "bf340934-c392-409e-abfa-20d2e40d1c75",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "9dcb6127-b5f4-4163-881b-c05c6a2ec429",
        "cursor": {
          "ref": "0fb53033-5999-4282-83d1-daaa932948eb",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "82659953-2c1b-4d76-80d8-ce293cdd63b5"
        },
        "item": {
          "id": "9dcb6127-b5f4-4163-881b-c05c6a2ec429",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9dcb6127-b5f4-4163-881b-c05c6a2ec429",
        "cursor": {
          "ref": "0fb53033-5999-4282-83d1-daaa932948eb",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "82659953-2c1b-4d76-80d8-ce293cdd63b5"
        },
        "item": {
          "id": "9dcb6127-b5f4-4163-881b-c05c6a2ec429",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9dcb6127-b5f4-4163-881b-c05c6a2ec429",
        "cursor": {
          "ref": "0fb53033-5999-4282-83d1-daaa932948eb",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "82659953-2c1b-4d76-80d8-ce293cdd63b5"
        },
        "item": {
          "id": "9dcb6127-b5f4-4163-881b-c05c6a2ec429",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "94705ed0-544a-4f4c-8aea-e039bb946a91",
        "cursor": {
          "ref": "a17e758f-f337-4732-bccb-f8b61c2fbe5d",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "159d81e4-a762-43fa-8b15-d30bf344d4b8"
        },
        "item": {
          "id": "94705ed0-544a-4f4c-8aea-e039bb946a91",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "94705ed0-544a-4f4c-8aea-e039bb946a91",
        "cursor": {
          "ref": "a17e758f-f337-4732-bccb-f8b61c2fbe5d",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "159d81e4-a762-43fa-8b15-d30bf344d4b8"
        },
        "item": {
          "id": "94705ed0-544a-4f4c-8aea-e039bb946a91",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "94705ed0-544a-4f4c-8aea-e039bb946a91",
        "cursor": {
          "ref": "a17e758f-f337-4732-bccb-f8b61c2fbe5d",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "159d81e4-a762-43fa-8b15-d30bf344d4b8"
        },
        "item": {
          "id": "94705ed0-544a-4f4c-8aea-e039bb946a91",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "d6c5598d-51c9-4c30-87fe-d553331d42e3",
        "cursor": {
          "ref": "72e710c8-0455-4610-adfc-50e2ee3de1a5",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f99dc762-80e3-4fed-8a11-0f890fa96bd5"
        },
        "item": {
          "id": "d6c5598d-51c9-4c30-87fe-d553331d42e3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "d6c5598d-51c9-4c30-87fe-d553331d42e3",
        "cursor": {
          "ref": "72e710c8-0455-4610-adfc-50e2ee3de1a5",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f99dc762-80e3-4fed-8a11-0f890fa96bd5"
        },
        "item": {
          "id": "d6c5598d-51c9-4c30-87fe-d553331d42e3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "d6c5598d-51c9-4c30-87fe-d553331d42e3",
        "cursor": {
          "ref": "72e710c8-0455-4610-adfc-50e2ee3de1a5",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f99dc762-80e3-4fed-8a11-0f890fa96bd5"
        },
        "item": {
          "id": "d6c5598d-51c9-4c30-87fe-d553331d42e3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "7de75d5d-ee4c-42ec-9c22-0800058ab898",
        "cursor": {
          "ref": "508b7cb7-aad2-4bda-b785-272c3066c4d8",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e5852e2a-31ce-4c1c-8594-dfca00e7b13a"
        },
        "item": {
          "id": "7de75d5d-ee4c-42ec-9c22-0800058ab898",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "7de75d5d-ee4c-42ec-9c22-0800058ab898",
        "cursor": {
          "ref": "508b7cb7-aad2-4bda-b785-272c3066c4d8",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e5852e2a-31ce-4c1c-8594-dfca00e7b13a"
        },
        "item": {
          "id": "7de75d5d-ee4c-42ec-9c22-0800058ab898",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "7de75d5d-ee4c-42ec-9c22-0800058ab898",
        "cursor": {
          "ref": "508b7cb7-aad2-4bda-b785-272c3066c4d8",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e5852e2a-31ce-4c1c-8594-dfca00e7b13a"
        },
        "item": {
          "id": "7de75d5d-ee4c-42ec-9c22-0800058ab898",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "71604620-7d94-4f11-b40b-1279a3c08f0d",
        "cursor": {
          "ref": "e2189860-280b-49d3-ac89-84497e764fdb",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e4bc6603-0a16-414f-89c4-265ac19bf65b"
        },
        "item": {
          "id": "71604620-7d94-4f11-b40b-1279a3c08f0d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "71604620-7d94-4f11-b40b-1279a3c08f0d",
        "cursor": {
          "ref": "e2189860-280b-49d3-ac89-84497e764fdb",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e4bc6603-0a16-414f-89c4-265ac19bf65b"
        },
        "item": {
          "id": "71604620-7d94-4f11-b40b-1279a3c08f0d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "71604620-7d94-4f11-b40b-1279a3c08f0d",
        "cursor": {
          "ref": "e2189860-280b-49d3-ac89-84497e764fdb",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e4bc6603-0a16-414f-89c4-265ac19bf65b"
        },
        "item": {
          "id": "71604620-7d94-4f11-b40b-1279a3c08f0d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "cb09b8da-ab93-4730-bc7b-3539c4593000",
        "cursor": {
          "ref": "68c199ce-de5d-407b-a902-678847160ccf",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "adc442ad-7abf-46c8-baa6-28665fa4cc98"
        },
        "item": {
          "id": "cb09b8da-ab93-4730-bc7b-3539c4593000",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "cb09b8da-ab93-4730-bc7b-3539c4593000",
        "cursor": {
          "ref": "68c199ce-de5d-407b-a902-678847160ccf",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "adc442ad-7abf-46c8-baa6-28665fa4cc98"
        },
        "item": {
          "id": "cb09b8da-ab93-4730-bc7b-3539c4593000",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "cb09b8da-ab93-4730-bc7b-3539c4593000",
        "cursor": {
          "ref": "68c199ce-de5d-407b-a902-678847160ccf",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "adc442ad-7abf-46c8-baa6-28665fa4cc98"
        },
        "item": {
          "id": "cb09b8da-ab93-4730-bc7b-3539c4593000",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "f4f80d83-3972-4573-b5ef-72a356ab0375",
        "cursor": {
          "ref": "48dafd87-e40d-4885-ae19-f299b9e0d805",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8e44d6dc-3153-4d7d-8539-60218327643e"
        },
        "item": {
          "id": "f4f80d83-3972-4573-b5ef-72a356ab0375",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f4f80d83-3972-4573-b5ef-72a356ab0375",
        "cursor": {
          "ref": "48dafd87-e40d-4885-ae19-f299b9e0d805",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8e44d6dc-3153-4d7d-8539-60218327643e"
        },
        "item": {
          "id": "f4f80d83-3972-4573-b5ef-72a356ab0375",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f4f80d83-3972-4573-b5ef-72a356ab0375",
        "cursor": {
          "ref": "48dafd87-e40d-4885-ae19-f299b9e0d805",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8e44d6dc-3153-4d7d-8539-60218327643e"
        },
        "item": {
          "id": "f4f80d83-3972-4573-b5ef-72a356ab0375",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f0d0aedd-92e0-4282-9ad5-41a5264cc15c",
        "cursor": {
          "ref": "ffc4fd35-164d-4a0c-8b7e-860f90e7ddb2",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b3284583-3fbd-48c2-8781-f966a12b2fdd"
        },
        "item": {
          "id": "f0d0aedd-92e0-4282-9ad5-41a5264cc15c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f0d0aedd-92e0-4282-9ad5-41a5264cc15c",
        "cursor": {
          "ref": "ffc4fd35-164d-4a0c-8b7e-860f90e7ddb2",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b3284583-3fbd-48c2-8781-f966a12b2fdd"
        },
        "item": {
          "id": "f0d0aedd-92e0-4282-9ad5-41a5264cc15c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f0d0aedd-92e0-4282-9ad5-41a5264cc15c",
        "cursor": {
          "ref": "ffc4fd35-164d-4a0c-8b7e-860f90e7ddb2",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b3284583-3fbd-48c2-8781-f966a12b2fdd"
        },
        "item": {
          "id": "f0d0aedd-92e0-4282-9ad5-41a5264cc15c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "b87581c4-2028-4020-b551-f83aafafcb0d",
        "cursor": {
          "ref": "357d7421-e1f9-4a63-bfa3-da4f860a4a3b",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "885cafb9-b0c9-4424-9dfc-74733574ff6c"
        },
        "item": {
          "id": "b87581c4-2028-4020-b551-f83aafafcb0d",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b87581c4-2028-4020-b551-f83aafafcb0d",
        "cursor": {
          "ref": "357d7421-e1f9-4a63-bfa3-da4f860a4a3b",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "885cafb9-b0c9-4424-9dfc-74733574ff6c"
        },
        "item": {
          "id": "b87581c4-2028-4020-b551-f83aafafcb0d",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b87581c4-2028-4020-b551-f83aafafcb0d",
        "cursor": {
          "ref": "357d7421-e1f9-4a63-bfa3-da4f860a4a3b",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "885cafb9-b0c9-4424-9dfc-74733574ff6c"
        },
        "item": {
          "id": "b87581c4-2028-4020-b551-f83aafafcb0d",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "30912a72-4e88-474a-bde4-f04571d7f212",
        "cursor": {
          "ref": "7b98abc3-b948-4109-bf9f-c7dabaaa4a26",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "42659b00-67de-4171-9a6e-7187a86760e7"
        },
        "item": {
          "id": "30912a72-4e88-474a-bde4-f04571d7f212",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "30912a72-4e88-474a-bde4-f04571d7f212",
        "cursor": {
          "ref": "7b98abc3-b948-4109-bf9f-c7dabaaa4a26",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "42659b00-67de-4171-9a6e-7187a86760e7"
        },
        "item": {
          "id": "30912a72-4e88-474a-bde4-f04571d7f212",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "30912a72-4e88-474a-bde4-f04571d7f212",
        "cursor": {
          "ref": "7b98abc3-b948-4109-bf9f-c7dabaaa4a26",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "42659b00-67de-4171-9a6e-7187a86760e7"
        },
        "item": {
          "id": "30912a72-4e88-474a-bde4-f04571d7f212",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "b4153f74-b01f-498e-9496-a6561087b93e",
        "cursor": {
          "ref": "3c025a16-3376-4c58-92d7-8fc5fa14b627",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "feaaa957-23d9-4852-8ef6-d18a810d59cb"
        },
        "item": {
          "id": "b4153f74-b01f-498e-9496-a6561087b93e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "b4153f74-b01f-498e-9496-a6561087b93e",
        "cursor": {
          "ref": "3c025a16-3376-4c58-92d7-8fc5fa14b627",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "feaaa957-23d9-4852-8ef6-d18a810d59cb"
        },
        "item": {
          "id": "b4153f74-b01f-498e-9496-a6561087b93e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "b4153f74-b01f-498e-9496-a6561087b93e",
        "cursor": {
          "ref": "3c025a16-3376-4c58-92d7-8fc5fa14b627",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "feaaa957-23d9-4852-8ef6-d18a810d59cb"
        },
        "item": {
          "id": "b4153f74-b01f-498e-9496-a6561087b93e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "bebeb6dc-2d36-4192-a8da-3af15b4206e9",
        "cursor": {
          "ref": "50181f7f-79e0-4e49-a162-db9a68f8bf9b",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "07cc899a-b4c1-43bf-bb7d-7a960a7fa13b"
        },
        "item": {
          "id": "bebeb6dc-2d36-4192-a8da-3af15b4206e9",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "bebeb6dc-2d36-4192-a8da-3af15b4206e9",
        "cursor": {
          "ref": "50181f7f-79e0-4e49-a162-db9a68f8bf9b",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "07cc899a-b4c1-43bf-bb7d-7a960a7fa13b"
        },
        "item": {
          "id": "bebeb6dc-2d36-4192-a8da-3af15b4206e9",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "bebeb6dc-2d36-4192-a8da-3af15b4206e9",
        "cursor": {
          "ref": "50181f7f-79e0-4e49-a162-db9a68f8bf9b",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "07cc899a-b4c1-43bf-bb7d-7a960a7fa13b"
        },
        "item": {
          "id": "bebeb6dc-2d36-4192-a8da-3af15b4206e9",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "35df6623-460c-467c-8ec8-a56f10393434",
        "cursor": {
          "ref": "b8590b21-adc8-4653-8cb0-b87faccf4470",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "df3b11fa-26c3-42d5-9435-7e8f8188b5f5"
        },
        "item": {
          "id": "35df6623-460c-467c-8ec8-a56f10393434",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "35df6623-460c-467c-8ec8-a56f10393434",
        "cursor": {
          "ref": "b8590b21-adc8-4653-8cb0-b87faccf4470",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "df3b11fa-26c3-42d5-9435-7e8f8188b5f5"
        },
        "item": {
          "id": "35df6623-460c-467c-8ec8-a56f10393434",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "35df6623-460c-467c-8ec8-a56f10393434",
        "cursor": {
          "ref": "b8590b21-adc8-4653-8cb0-b87faccf4470",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "df3b11fa-26c3-42d5-9435-7e8f8188b5f5"
        },
        "item": {
          "id": "35df6623-460c-467c-8ec8-a56f10393434",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "6810aabf-51d2-4d6a-991b-ae8f8f46dc6e",
        "cursor": {
          "ref": "00a96dce-1cea-4c01-a71d-aad2ad8ab19e",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2f8c4a11-c48b-41c7-8c86-9b755b1fa364"
        },
        "item": {
          "id": "6810aabf-51d2-4d6a-991b-ae8f8f46dc6e",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "6810aabf-51d2-4d6a-991b-ae8f8f46dc6e",
        "cursor": {
          "ref": "00a96dce-1cea-4c01-a71d-aad2ad8ab19e",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2f8c4a11-c48b-41c7-8c86-9b755b1fa364"
        },
        "item": {
          "id": "6810aabf-51d2-4d6a-991b-ae8f8f46dc6e",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "6810aabf-51d2-4d6a-991b-ae8f8f46dc6e",
        "cursor": {
          "ref": "00a96dce-1cea-4c01-a71d-aad2ad8ab19e",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2f8c4a11-c48b-41c7-8c86-9b755b1fa364"
        },
        "item": {
          "id": "6810aabf-51d2-4d6a-991b-ae8f8f46dc6e",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "7ab372ed-aa75-4a51-bd1b-81736230a296",
        "cursor": {
          "ref": "bc3a54f1-c26e-4996-bc4d-df57623163dd",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dd84df6a-22e7-4e2a-b629-4a0fc2b8136e"
        },
        "item": {
          "id": "7ab372ed-aa75-4a51-bd1b-81736230a296",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7ab372ed-aa75-4a51-bd1b-81736230a296",
        "cursor": {
          "ref": "bc3a54f1-c26e-4996-bc4d-df57623163dd",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dd84df6a-22e7-4e2a-b629-4a0fc2b8136e"
        },
        "item": {
          "id": "7ab372ed-aa75-4a51-bd1b-81736230a296",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7ab372ed-aa75-4a51-bd1b-81736230a296",
        "cursor": {
          "ref": "bc3a54f1-c26e-4996-bc4d-df57623163dd",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dd84df6a-22e7-4e2a-b629-4a0fc2b8136e"
        },
        "item": {
          "id": "7ab372ed-aa75-4a51-bd1b-81736230a296",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "071b32dd-f0e4-4447-8cbc-53d22d6b8837",
        "cursor": {
          "ref": "1a01cb07-589e-4eb2-a4b5-b8be6ec7577b",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "58b83435-3ee4-4c2c-a715-9a419664afed"
        },
        "item": {
          "id": "071b32dd-f0e4-4447-8cbc-53d22d6b8837",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "071b32dd-f0e4-4447-8cbc-53d22d6b8837",
        "cursor": {
          "ref": "1a01cb07-589e-4eb2-a4b5-b8be6ec7577b",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "58b83435-3ee4-4c2c-a715-9a419664afed"
        },
        "item": {
          "id": "071b32dd-f0e4-4447-8cbc-53d22d6b8837",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "071b32dd-f0e4-4447-8cbc-53d22d6b8837",
        "cursor": {
          "ref": "1a01cb07-589e-4eb2-a4b5-b8be6ec7577b",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "58b83435-3ee4-4c2c-a715-9a419664afed"
        },
        "item": {
          "id": "071b32dd-f0e4-4447-8cbc-53d22d6b8837",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "071b32dd-f0e4-4447-8cbc-53d22d6b8837",
        "cursor": {
          "ref": "1a01cb07-589e-4eb2-a4b5-b8be6ec7577b",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "58b83435-3ee4-4c2c-a715-9a419664afed"
        },
        "item": {
          "id": "071b32dd-f0e4-4447-8cbc-53d22d6b8837",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d9426556-7aae-4e69-9a4a-b9854bf0c112",
        "cursor": {
          "ref": "1a1ebd67-5e32-4859-a0be-9cb4eb633e32",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2d030f1c-2eba-4bc5-ab64-9c8ce8e003f1"
        },
        "item": {
          "id": "d9426556-7aae-4e69-9a4a-b9854bf0c112",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "d9426556-7aae-4e69-9a4a-b9854bf0c112",
        "cursor": {
          "ref": "1a1ebd67-5e32-4859-a0be-9cb4eb633e32",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2d030f1c-2eba-4bc5-ab64-9c8ce8e003f1"
        },
        "item": {
          "id": "d9426556-7aae-4e69-9a4a-b9854bf0c112",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "d9426556-7aae-4e69-9a4a-b9854bf0c112",
        "cursor": {
          "ref": "1a1ebd67-5e32-4859-a0be-9cb4eb633e32",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2d030f1c-2eba-4bc5-ab64-9c8ce8e003f1"
        },
        "item": {
          "id": "d9426556-7aae-4e69-9a4a-b9854bf0c112",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "f00c8938-2fd2-4c5a-9871-865c215d11bf",
        "cursor": {
          "ref": "cccb89f7-7d7b-4839-bf2f-46dd3e1e7424",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2c628728-586c-4bd5-8f68-5ec01cf5fced"
        },
        "item": {
          "id": "f00c8938-2fd2-4c5a-9871-865c215d11bf",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "f00c8938-2fd2-4c5a-9871-865c215d11bf",
        "cursor": {
          "ref": "cccb89f7-7d7b-4839-bf2f-46dd3e1e7424",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2c628728-586c-4bd5-8f68-5ec01cf5fced"
        },
        "item": {
          "id": "f00c8938-2fd2-4c5a-9871-865c215d11bf",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "f00c8938-2fd2-4c5a-9871-865c215d11bf",
        "cursor": {
          "ref": "cccb89f7-7d7b-4839-bf2f-46dd3e1e7424",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2c628728-586c-4bd5-8f68-5ec01cf5fced"
        },
        "item": {
          "id": "f00c8938-2fd2-4c5a-9871-865c215d11bf",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "02c4f6ee-fe34-44aa-a182-07353264518e",
        "cursor": {
          "ref": "78415c9f-8c54-4eaf-ba6b-228ef9310c9a",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0d0aa9de-6bdf-4fb1-845a-683b9eda89dd"
        },
        "item": {
          "id": "02c4f6ee-fe34-44aa-a182-07353264518e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "02c4f6ee-fe34-44aa-a182-07353264518e",
        "cursor": {
          "ref": "78415c9f-8c54-4eaf-ba6b-228ef9310c9a",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0d0aa9de-6bdf-4fb1-845a-683b9eda89dd"
        },
        "item": {
          "id": "02c4f6ee-fe34-44aa-a182-07353264518e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "02c4f6ee-fe34-44aa-a182-07353264518e",
        "cursor": {
          "ref": "78415c9f-8c54-4eaf-ba6b-228ef9310c9a",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0d0aa9de-6bdf-4fb1-845a-683b9eda89dd"
        },
        "item": {
          "id": "02c4f6ee-fe34-44aa-a182-07353264518e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "4543e198-ee23-4077-8034-61bce2502204",
        "cursor": {
          "ref": "a4151711-3ccc-4017-ab53-608e2e5292ac",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6e0c16ee-9744-4b1b-a183-70011790a498"
        },
        "item": {
          "id": "4543e198-ee23-4077-8034-61bce2502204",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4543e198-ee23-4077-8034-61bce2502204",
        "cursor": {
          "ref": "a4151711-3ccc-4017-ab53-608e2e5292ac",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6e0c16ee-9744-4b1b-a183-70011790a498"
        },
        "item": {
          "id": "4543e198-ee23-4077-8034-61bce2502204",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4543e198-ee23-4077-8034-61bce2502204",
        "cursor": {
          "ref": "a4151711-3ccc-4017-ab53-608e2e5292ac",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6e0c16ee-9744-4b1b-a183-70011790a498"
        },
        "item": {
          "id": "4543e198-ee23-4077-8034-61bce2502204",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "abfd87a6-9f38-4c9d-a824-4e053446b6e3",
        "cursor": {
          "ref": "f47b86aa-4d9b-4859-8205-3c3c98b4bae1",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2a076461-49b6-4d75-b78e-b8b3b755c278"
        },
        "item": {
          "id": "abfd87a6-9f38-4c9d-a824-4e053446b6e3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "abfd87a6-9f38-4c9d-a824-4e053446b6e3",
        "cursor": {
          "ref": "f47b86aa-4d9b-4859-8205-3c3c98b4bae1",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2a076461-49b6-4d75-b78e-b8b3b755c278"
        },
        "item": {
          "id": "abfd87a6-9f38-4c9d-a824-4e053446b6e3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "abfd87a6-9f38-4c9d-a824-4e053446b6e3",
        "cursor": {
          "ref": "f47b86aa-4d9b-4859-8205-3c3c98b4bae1",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2a076461-49b6-4d75-b78e-b8b3b755c278"
        },
        "item": {
          "id": "abfd87a6-9f38-4c9d-a824-4e053446b6e3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject matches request credential.credentialSubject.id",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:45)"
            }
          }
        ]
      },
      {
        "id": "1aa45ed5-1b2b-4be1-bdc9-9e05f3949169",
        "cursor": {
          "ref": "567d63e2-1fd8-4226-b96e-b03b4dc61b32",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b3c75ae4-7de9-4a7e-8f51-10b1af4252ed"
        },
        "item": {
          "id": "1aa45ed5-1b2b-4be1-bdc9-9e05f3949169",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1aa45ed5-1b2b-4be1-bdc9-9e05f3949169",
        "cursor": {
          "ref": "567d63e2-1fd8-4226-b96e-b03b4dc61b32",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b3c75ae4-7de9-4a7e-8f51-10b1af4252ed"
        },
        "item": {
          "id": "1aa45ed5-1b2b-4be1-bdc9-9e05f3949169",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1aa45ed5-1b2b-4be1-bdc9-9e05f3949169",
        "cursor": {
          "ref": "567d63e2-1fd8-4226-b96e-b03b4dc61b32",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b3c75ae4-7de9-4a7e-8f51-10b1af4252ed"
        },
        "item": {
          "id": "1aa45ed5-1b2b-4be1-bdc9-9e05f3949169",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a060d741-effc-4203-be5b-ead4fbd6645a",
        "cursor": {
          "ref": "729b713c-6704-4efc-9c78-e84a02e9baa3",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3e32f77f-1010-43cb-bc9b-91cb872c57a3"
        },
        "item": {
          "id": "a060d741-effc-4203-be5b-ead4fbd6645a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a060d741-effc-4203-be5b-ead4fbd6645a",
        "cursor": {
          "ref": "729b713c-6704-4efc-9c78-e84a02e9baa3",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3e32f77f-1010-43cb-bc9b-91cb872c57a3"
        },
        "item": {
          "id": "a060d741-effc-4203-be5b-ead4fbd6645a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a060d741-effc-4203-be5b-ead4fbd6645a",
        "cursor": {
          "ref": "729b713c-6704-4efc-9c78-e84a02e9baa3",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3e32f77f-1010-43cb-bc9b-91cb872c57a3"
        },
        "item": {
          "id": "a060d741-effc-4203-be5b-ead4fbd6645a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "09c36385-19c7-4e17-9191-82e09142e6d4",
        "cursor": {
          "ref": "c1af9409-dfbe-4b5d-b873-374fb4ad7670",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "affad5a8-8caa-472a-9af3-54a4f4dd1240"
        },
        "item": {
          "id": "09c36385-19c7-4e17-9191-82e09142e6d4",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "09c36385-19c7-4e17-9191-82e09142e6d4",
        "cursor": {
          "ref": "c1af9409-dfbe-4b5d-b873-374fb4ad7670",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "affad5a8-8caa-472a-9af3-54a4f4dd1240"
        },
        "item": {
          "id": "09c36385-19c7-4e17-9191-82e09142e6d4",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "09c36385-19c7-4e17-9191-82e09142e6d4",
        "cursor": {
          "ref": "c1af9409-dfbe-4b5d-b873-374fb4ad7670",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "affad5a8-8caa-472a-9af3-54a4f4dd1240"
        },
        "item": {
          "id": "09c36385-19c7-4e17-9191-82e09142e6d4",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6dbb716a-4033-4994-a90a-deabf2af064b",
        "cursor": {
          "ref": "eaa5b9a1-b362-43d9-a139-9dacc0bd4f9e",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "245bd9df-8a30-4551-a2e0-7c082c3c5531"
        },
        "item": {
          "id": "6dbb716a-4033-4994-a90a-deabf2af064b",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6dbb716a-4033-4994-a90a-deabf2af064b",
        "cursor": {
          "ref": "eaa5b9a1-b362-43d9-a139-9dacc0bd4f9e",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "245bd9df-8a30-4551-a2e0-7c082c3c5531"
        },
        "item": {
          "id": "6dbb716a-4033-4994-a90a-deabf2af064b",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7fa1496f-ed14-4657-8039-bd1227ad3edc",
        "cursor": {
          "ref": "5047effd-5275-4049-b691-0b9c1f51735e",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2ced4061-526c-4a37-b4ae-a7f5311278bf"
        },
        "item": {
          "id": "7fa1496f-ed14-4657-8039-bd1227ad3edc",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7fa1496f-ed14-4657-8039-bd1227ad3edc",
        "cursor": {
          "ref": "5047effd-5275-4049-b691-0b9c1f51735e",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2ced4061-526c-4a37-b4ae-a7f5311278bf"
        },
        "item": {
          "id": "7fa1496f-ed14-4657-8039-bd1227ad3edc",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7fa1496f-ed14-4657-8039-bd1227ad3edc",
        "cursor": {
          "ref": "5047effd-5275-4049-b691-0b9c1f51735e",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2ced4061-526c-4a37-b4ae-a7f5311278bf"
        },
        "item": {
          "id": "7fa1496f-ed14-4657-8039-bd1227ad3edc",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "25c4105f-5495-412f-b80b-53d4f9dfb98a",
        "cursor": {
          "ref": "6fde265c-9a7d-496b-a729-40dbf72330f4",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2563ae36-3344-4591-8426-313063666571"
        },
        "item": {
          "id": "25c4105f-5495-412f-b80b-53d4f9dfb98a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "25c4105f-5495-412f-b80b-53d4f9dfb98a",
        "cursor": {
          "ref": "6fde265c-9a7d-496b-a729-40dbf72330f4",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2563ae36-3344-4591-8426-313063666571"
        },
        "item": {
          "id": "25c4105f-5495-412f-b80b-53d4f9dfb98a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2d079345-1649-4daa-83f6-80ecb4e668de",
        "cursor": {
          "ref": "381ed535-2788-41cc-a93e-6e71b4f1a2db",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "07ef0338-b485-461f-96a2-6527fa8ade5a"
        },
        "item": {
          "id": "2d079345-1649-4daa-83f6-80ecb4e668de",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2d079345-1649-4daa-83f6-80ecb4e668de",
        "cursor": {
          "ref": "381ed535-2788-41cc-a93e-6e71b4f1a2db",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "07ef0338-b485-461f-96a2-6527fa8ade5a"
        },
        "item": {
          "id": "2d079345-1649-4daa-83f6-80ecb4e668de",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2d079345-1649-4daa-83f6-80ecb4e668de",
        "cursor": {
          "ref": "381ed535-2788-41cc-a93e-6e71b4f1a2db",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "07ef0338-b485-461f-96a2-6527fa8ade5a"
        },
        "item": {
          "id": "2d079345-1649-4daa-83f6-80ecb4e668de",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "9331cfdc-c211-42db-b5c1-f9a24f9e426e",
        "cursor": {
          "ref": "82596c67-fdd4-4257-81ae-4f9d62c09b05",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "89c657fb-0778-4b80-8496-dffd70bd73b9"
        },
        "item": {
          "id": "9331cfdc-c211-42db-b5c1-f9a24f9e426e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "9331cfdc-c211-42db-b5c1-f9a24f9e426e",
        "cursor": {
          "ref": "82596c67-fdd4-4257-81ae-4f9d62c09b05",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "89c657fb-0778-4b80-8496-dffd70bd73b9"
        },
        "item": {
          "id": "9331cfdc-c211-42db-b5c1-f9a24f9e426e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "c7ecf7be-215d-4464-9ec9-2ead930d1419",
        "cursor": {
          "ref": "d45ae7cf-b4b8-4de9-a911-0f2eb494636c",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "76e795cb-46ac-40f5-add4-b52ea93bb59e"
        },
        "item": {
          "id": "c7ecf7be-215d-4464-9ec9-2ead930d1419",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c7ecf7be-215d-4464-9ec9-2ead930d1419",
        "cursor": {
          "ref": "d45ae7cf-b4b8-4de9-a911-0f2eb494636c",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "76e795cb-46ac-40f5-add4-b52ea93bb59e"
        },
        "item": {
          "id": "c7ecf7be-215d-4464-9ec9-2ead930d1419",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c7ecf7be-215d-4464-9ec9-2ead930d1419",
        "cursor": {
          "ref": "d45ae7cf-b4b8-4de9-a911-0f2eb494636c",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "76e795cb-46ac-40f5-add4-b52ea93bb59e"
        },
        "item": {
          "id": "c7ecf7be-215d-4464-9ec9-2ead930d1419",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "687da6a1-f744-408d-8ac0-652df424bd12",
        "cursor": {
          "ref": "be05ec07-4fe6-401f-b021-7b715bceb24e",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a3510840-bb97-4526-99be-2514719c7b9e"
        },
        "item": {
          "id": "687da6a1-f744-408d-8ac0-652df424bd12",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "687da6a1-f744-408d-8ac0-652df424bd12",
        "cursor": {
          "ref": "be05ec07-4fe6-401f-b021-7b715bceb24e",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a3510840-bb97-4526-99be-2514719c7b9e"
        },
        "item": {
          "id": "687da6a1-f744-408d-8ac0-652df424bd12",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f264b142-b938-449a-945f-02fe88230a4e",
        "cursor": {
          "ref": "582fa351-8050-45dc-bd03-5ed9e139551d",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "41a269d7-022f-4f7d-b7cd-6e64b5ca88a4"
        },
        "item": {
          "id": "f264b142-b938-449a-945f-02fe88230a4e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "f264b142-b938-449a-945f-02fe88230a4e",
        "cursor": {
          "ref": "582fa351-8050-45dc-bd03-5ed9e139551d",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "41a269d7-022f-4f7d-b7cd-6e64b5ca88a4"
        },
        "item": {
          "id": "f264b142-b938-449a-945f-02fe88230a4e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "f264b142-b938-449a-945f-02fe88230a4e",
        "cursor": {
          "ref": "582fa351-8050-45dc-bd03-5ed9e139551d",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "41a269d7-022f-4f7d-b7cd-6e64b5ca88a4"
        },
        "item": {
          "id": "f264b142-b938-449a-945f-02fe88230a4e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "b95e5774-c8dd-4868-b0ed-bf4e95b3b5b7",
        "cursor": {
          "ref": "bc6a6549-7ce9-43e3-aecf-113f5a514a49",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c63d1a51-7d6a-444e-b7e5-afbf07fe13bc"
        },
        "item": {
          "id": "b95e5774-c8dd-4868-b0ed-bf4e95b3b5b7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "b95e5774-c8dd-4868-b0ed-bf4e95b3b5b7",
        "cursor": {
          "ref": "bc6a6549-7ce9-43e3-aecf-113f5a514a49",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c63d1a51-7d6a-444e-b7e5-afbf07fe13bc"
        },
        "item": {
          "id": "b95e5774-c8dd-4868-b0ed-bf4e95b3b5b7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2d54e4b7-d870-452c-b643-8fd2d72e2318",
        "cursor": {
          "ref": "b369eee7-fc87-4dd4-9009-f44d9c4ce813",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bb17cf86-9db1-4fb7-a710-5632b3601109"
        },
        "item": {
          "id": "2d54e4b7-d870-452c-b643-8fd2d72e2318",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "2d54e4b7-d870-452c-b643-8fd2d72e2318",
        "cursor": {
          "ref": "b369eee7-fc87-4dd4-9009-f44d9c4ce813",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bb17cf86-9db1-4fb7-a710-5632b3601109"
        },
        "item": {
          "id": "2d54e4b7-d870-452c-b643-8fd2d72e2318",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "2d54e4b7-d870-452c-b643-8fd2d72e2318",
        "cursor": {
          "ref": "b369eee7-fc87-4dd4-9009-f44d9c4ce813",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bb17cf86-9db1-4fb7-a710-5632b3601109"
        },
        "item": {
          "id": "2d54e4b7-d870-452c-b643-8fd2d72e2318",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}