{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fa78704a-8c3c-4714-bb49-5f960594c6fd",
        "name": "API Configuration",
        "item": [
          {
            "id": "ba2d4ddf-2b30-4fe0-88a9-94dcddeba93a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cbafee08-1dd6-47f8-a306-33c6fb6f3013",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abb59d13-8fb8-42cf-8891-7e7152797a6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33da503c-d7de-46ea-ab7c-976b9478f84c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "0dd385dc-7370-479a-becc-4d721ad1b445",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "0802b634-268f-4d8b-b5b1-d9aeecbe8b7b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0955b8b9-424a-4a40-8165-74e1f180010a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7bf343f5-401c-4c73-ada6-1356b48112d2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a02c2e6-ba3e-45aa-a6ee-b8bff8ae091a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56c49026-17aa-4b0a-a8d1-1499c0659fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a9ee76-6ad5-4b9c-b545-b8672fb7393f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2560827c-4333-4d83-9d82-660b62f95d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4304fd-7d58-4b7d-9e54-319b730b6a7f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59051546-8039-4264-b2ec-7150ec0c6e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82710746-213c-41f3-86d8-7c637ccda545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f66cc04-70cc-492d-802d-f1ea42f59322",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69358979-fb57-4e76-acaf-100a86d3005b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4af7140f-1e9d-4af8-a759-e098b101249d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e758eb40-3f05-43ec-b144-80f47d70c33c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4df20636-9776-4c17-8baa-d8f9a001ebd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "253805be-ca11-4344-94bf-b300c7332510"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e9bbb25-1dc3-4add-891d-0940a39b5b7c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "3326ca3b-9349-4910-9a51-e775b31b259b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4715438a-64bb-4a2a-8a6a-d139b49ce3f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cffbe703-ca3a-4ddc-ae06-30a8d8fb8964"
            }
          }
        ]
      },
      {
        "id": "f2c848f9-a3eb-4f68-9a68-54f57b6629d7",
        "name": "Issue Credential",
        "item": [
          {
            "id": "28a80332-6f20-4f9b-906d-e787ec074f77",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43d77d3a-da13-4a9c-9dbc-68ee8e6de893",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b38470db-5917-484d-8754-9c7815f08e92",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef73204d-7a77-44a4-8974-dedbb93780d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99abb3e-fea4-4e36-be77-f0f15425cea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22f40e2-0d59-4e6d-8300-e60eeec80332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8641230d-5e49-4d1e-b34a-9479d4af20fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9ead5d-8f3c-4d13-9968-2d86cb670d47",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe29610-4bf2-487f-b465-ca55fbbd465c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2383c55a-ada9-472c-811c-c99a06dc6487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec53e3c0-e4c0-46a6-859e-867ca6c9ba81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e7a2baf-7c93-4b5a-90f9-b92f51ff7c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebde4ed6-4868-4e36-afa2-2533027cbf93",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e51d55-a9a0-4575-b65e-d0efdb1fbf45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e64a74b-5a72-47e0-8229-58159869e50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076fdac5-10a4-4a0b-8fb3-169789214fd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afa5c4f4-3b55-4066-b218-05e98478408b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6db62c-04df-479a-bcaa-17ff3977e776",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cc7105-1f1c-4289-9f84-3feb3e719351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e44eea5-f674-480a-b327-a3d315b3fcee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ece812c-d343-4622-a1a0-1d846f7631a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffbbc9c8-e1a0-48d5-bbe7-9b910e58ad4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6e5d78-d5dd-47ba-80c6-e7249291f2ac",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b3fa23-9e8c-4ff4-92c7-f4f11ead671e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e908a2-d51d-47e6-9b55-c8e6f42b032c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ad6ae7-1557-4199-9816-6521733b4847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a84c73-0601-4893-9bee-5cbdaf295156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af41f7b9-07f2-4030-8cc3-49878efa4ea3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdebbe0-f04f-4515-9165-7f0be37f9f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a47b3eb-83f0-41f4-b967-402f4815f083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a8cf27-f4fa-4c77-9c42-767b0014e511",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef8d1f81-63ee-45ca-8129-a872c339aeef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fba601-82b0-4d11-b936-2fa486728ba8",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cea2dac-2635-48c4-bcb3-0fb81d4d8f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3f6a91-6d21-4d83-91af-70d39f1c2b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2693adc-f666-46e9-b6c1-13ce822ef308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f867937-b7e9-4079-8452-ab66fb0d6200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e25d6f0-c366-4489-a9c3-a63e26c95ace",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4c7b08-bdaf-4c0a-a6be-46533071a5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713ae1ae-189d-4062-ac3c-8669e2b25a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054f03f9-48be-4f0c-a00a-6cf69d649e94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cce95dc6-7e70-4b43-8033-ecc7934526f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c87880d-d18f-4cf2-99e3-89ad3a7a03be",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a630bd10-a6a2-487a-9677-efb20bb9795c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f947d906-78a3-495f-97e5-72ab95c8a073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9ebf81-b381-466e-8df6-524c8060c44b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25514fa0-df6c-440d-b75f-697cc562f0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5673db0-eaa2-4141-8b35-12df896730a7",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83f931d-dbdd-4aff-bacc-c762d75fa0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa4627a-6a04-4839-83d8-c2a9c74417d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8d3961-44ad-49af-b880-4e791eef849f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da0c2cd3-817f-441b-a65f-8199b7e4c6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3a7bdf-15aa-42b6-b414-3f922824583f",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0304904d-e5bd-49b1-a6c1-4ece7cbab1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f93af07-9263-4197-9f77-7cbb166cb2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fa65f6-6799-4738-aedc-fbac603abcd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "53b36d65-2879-4b5f-acbc-f89040db784f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825a8be7-fbe8-4fe0-9d8c-fe866d3dafdd",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdad8f7-5413-4cdb-804c-743ce39d6672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d24e7f9-0dd5-459e-a0d4-6ae74007713f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6731150-4951-48cc-9996-5cfa76747e01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ca1d2ec-53b7-4de9-9b50-c2346bdfdbb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a547f89f-22a3-4ff1-89ae-7b1da0c9fb60",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937dc89f-eb4f-45ae-a9af-dba15f54cb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e6a95c5-20e6-4427-a98d-2522441eb80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e297b2-c23c-4ca5-8f98-e2996d60097e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "afdb265b-2bbb-4362-902d-306f83e008f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50a1204-795b-474a-9e27-f25b33e22862",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35960f63-ce8e-4b41-9882-96a0d377179f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ec424e-26ba-4efd-9375-b9572e88af31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d43ddb-67b9-42c7-bdac-0ae58a46f70c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb808cf0-d265-4506-baeb-df8177f210ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722d88e9-4a71-40a3-9d96-3ca5c1b84962",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2901397-1687-4351-a2bf-870f797c5485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27199507-8af5-43c1-80c7-805f4220519e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07beecc-b687-4ed6-92fc-3efb8defd2d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f12f1f0-eed5-494e-a449-8f05897a884f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888ff2c2-8181-42dd-bc81-7854f57910b3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dac76bb-a29c-4676-925e-3c9250c94898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "986d879f-30d9-4b89-8936-43c1d7646c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecee4e3-d7c7-4e9f-a6b9-9fa29f568a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6a19978-1a21-4363-a7f4-3bda18315427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12561d39-b033-448e-92c0-db29d5087371",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affb99fd-bef9-4c23-82ab-7c6e04b5ab7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17781091-2eec-4afe-b959-d4ba116f90c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46563bdb-de28-4414-9469-3e327009877a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6c69732-851c-45ae-b56f-251f508305db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31f9dc4-8ed7-4193-91eb-86564e220b84",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cb84ed-eaff-4342-8ae3-c0db57b7e0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04e500a-7349-450d-85e7-348464596132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfff1834-44ac-4c17-8309-3693da122862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4efa8216-5e27-400c-834b-2736770c5176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a8bffa-5ffe-4c35-949d-9e8b985637f4",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01cdf1c-dd5b-4b7b-bb42-2ad40206f854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4403dd2a-1829-4a60-91e6-67f7dc88450d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d0e28d-cf40-47db-83b0-59064fd20042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fa553ce-2b48-4564-b2b3-277b2a16475f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d6bb1d-a322-4728-a41b-84fc94ed049e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2fe2e5-33d6-4adc-9910-3c1365d4cce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbda47da-950f-4c88-8528-48462fc3d73b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc37b48-f573-4966-8dbc-cfadf4d49508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "008524ab-6666-4e0a-b7c4-4776ebd25c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f35de47-edd9-4b60-aa46-350ec3eab5da",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445224a0-6b41-4f52-8cc2-6d5aa2641c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b61fef-112c-4fb0-95b5-5a0567a87b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0f715c-c31f-4eaa-8a03-91522b8fd4b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "956c6a6e-ef4a-435c-be1e-c7b6ad6ec1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de089592-f39d-4aed-9e1d-7099979658bf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b2bb86-627b-4eb9-80a2-a89bdf5f6ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b71aeb8-09ec-48c4-b3b3-515cf65ed001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8557d0c6-78ae-47b5-9298-d9387c0d961a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d7dbe59-628f-4854-ab6d-39aa908ceaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a516641a-46dd-4210-bee8-d43984bff9e4",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e4e12f-726c-4c5a-927e-f5b6cb267d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd11486-4799-424a-b636-6cca50a36d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957ef53c-bd3e-4944-aadc-bb006ec0fe62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8c17fa1-2b44-48f5-b59f-0b63e01d6110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2357a7-c911-4cd3-939c-e0a7fca8ab19",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a231dcc-261e-43f4-9d7a-081bb70c6bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f74b8e-f823-42b3-ac0a-173817e608d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523a21b0-5743-4d02-bff7-7b09b924125a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e68362-2359-4521-9992-8cb928e9a2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1ba9bc-790b-4108-9823-346ceb4ba6f9",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d063d871-bab6-45ed-bbfc-965fece82b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98b0d5f6-3894-4922-b02a-6cec367b4fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b460d723-d49d-4aed-bafd-680ca3d23e46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f14038b2-d57e-48ce-8549-80cc4afeaf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8df8a6-354e-4bd4-97ab-244bcb461190",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c17e46-231e-458c-99ca-a0b54764fcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe624aad-99c4-40ca-9926-733329567f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31d64b5-b4e3-4b22-a90c-7f60500e61e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ca25168-803e-400b-9cdb-645e202948d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1260bc71-90b8-4575-a4d5-f73d8f2d8677",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea7057d-143a-4183-bec1-ecc7a290b683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8c9bdb-5d64-42c6-8dd5-b33425773e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386cc166-a83f-4e9c-8b93-56e60b86d9ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "559c91cf-3568-4534-a8a0-bfd5a8c69d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6cd768-13f0-4aae-a8cd-0bda0759f852",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1f7f91-dcb0-4777-b474-c7c6e1558725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b27fd709-1cd5-4248-a84e-88d916eb4e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb43091b-d8e4-4e33-9a94-8cbce2d3a18b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f03b99b7-d1d0-462b-a050-2017758e3a13"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f7619489-a097-4c9b-88be-92c6f8acda82",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f9caa5d-a19a-4119-8cee-f88d68eae3a1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fa59ed-3771-4486-9a92-a9d1d1edcc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0866deae-b558-493b-b32b-6332a29e6f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a699fe-4f1b-4b46-a5f2-ad8294962cb8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "6c84a00f-50fb-4a9f-a787-1ffba26535c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2bf12c-b232-4b86-aab5-cd4a447c486a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669b42c8-4e07-4365-8c70-3e039362e73c",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea5d918f-6da4-4066-b3c5-b8adc996de0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba0839d-e3ea-458f-aeb3-0a3cb5570e50",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "20b9536e-b74a-41ab-b160-db811fbbc190"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3f06caa-0ae8-4b16-a921-4321ac271a52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec382976-7187-41e2-aa65-b870fe893661"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15692ac3-0cbe-4705-ad43-0ff23136a27b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "609143f5-7b0f-471f-9e7a-3b5e86e596cf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a111b4ae-990f-4bbf-837f-29242189bb05",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9cff0e7-65f5-4d24-86b1-0ce67b76697a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8766b1b2-0dad-4ee0-8e07-0ca2b4e1de6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b25fa6e-aede-4ac1-994f-6ebf111b27aa"
                }
              }
            ]
          },
          {
            "id": "1943c137-33a7-4b26-9e27-e1e5504ac9d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1dc24916-0eb5-47dd-86ab-a44cae87833f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bac1590-c87d-4b75-a062-b75bedb48a75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2dbc5d1c-9e1c-406b-ab36-4253a688b202"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a52694b-2501-485f-b1ee-6d016d9a9a8a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "fd2879c7-ba20-4a89-9526-31333612c9d9"
                    }
                  }
                ]
              },
              {
                "id": "1a424e42-701b-4852-b972-2d5c35b823b5",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa001189-d3ff-457c-8217-af590eb1dea3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc927d1b-f79e-47c7-be1d-b2256ae13706"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70a50ac1-2068-42ba-b41a-fbbbf61c1598",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "0fb2a897-a97c-4748-97d9-48d033c53d67"
                    }
                  }
                ]
              },
              {
                "id": "e3288f4e-d180-4268-9451-653afe69a084",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29114c5d-ffe2-41ee-96f8-9957063b352a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ab6c229-c697-4746-9166-7bfe95646d01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0f73686-a071-4e06-81e6-68d57c0f9b98",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "c45892b3-720f-40de-b297-72689e0f8373"
                    }
                  }
                ]
              },
              {
                "id": "a4b4c705-d67f-461b-a560-ddbc190ea64e",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3973bd2c-c232-4531-8e61-da5c4340b003",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d7c93a82-1de1-4b66-824e-aa501a9b0a3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb2d6273-47f7-46b0-9e30-7450abf877f4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "3357bea8-1bdc-443f-8bb4-e46a5ee90b08"
                    }
                  }
                ]
              },
              {
                "id": "c7af24da-aadb-4836-9e97-7875074f6ecc",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5bfd4a4-388c-49db-826b-ef01fc03c5be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1b877bb-0755-4df7-921d-4caaf6a128a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eebc6654-18d9-48e3-8538-adb6329a078e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "ff924093-3393-4e56-8748-f45d4f522fe5"
                    }
                  }
                ]
              },
              {
                "id": "f19a5278-8663-47fe-8895-858f335462b5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20584690-9132-47c2-b580-08b194a70035",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a732914-b429-4cea-941e-723750da5aff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8c1d2b9-d901-4185-8dd7-090ef0435d16",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "471cc439-8c00-4160-b910-1c72fb33a66a"
                    }
                  }
                ]
              },
              {
                "id": "3058f932-2ae8-4ee7-8925-f437c10b40d3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6a3b538-c507-4d5e-8cab-106e512fa6a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ea703df-5774-4006-acb3-45c1c034f967"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69f20b53-4bce-4f17-a334-29f6f81288b6",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "47c8396c-e62f-4ad1-8f36-a242c83d5a28"
                    }
                  }
                ]
              },
              {
                "id": "bd0c9b04-883c-4f6e-b866-57d6b5fe2bf3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a517afa-68ab-43cf-90e8-f00ac33f0e9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "421d9d06-f75a-48d4-b285-1e79de16b6cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08eb3e19-70de-4d32-8cb1-bf5c81800906",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "c98bc0d4-8b34-427d-9c2b-4ecd44b1d8d3"
                    }
                  }
                ]
              },
              {
                "id": "c721018b-7f6d-4860-afe0-026d43a29721",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7af798ed-f5df-41d8-b183-b7f3d2b036ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1dab8cd3-fca6-484d-9ac6-a57d61ff7414"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ab95414-ab29-4297-9ad0-32f1fd8c3936",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "75495faf-5e18-4d22-a878-de0de0d0ed9c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65565bac-6d70-4140-8d55-1a35994ef84a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0cc31220-bd9f-4ba0-9257-343514544c5e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dcc5694d-1e45-4c50-b643-bd093db474d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0e7801b-9165-437b-a2c8-d07e63ad66f3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f11ba50-333c-4723-8b90-86836a14d6ce",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "68319ebd-022e-47cc-abf6-2ad2862d9731"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96880dfb-5210-4ed9-9d38-c573ec771dab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e89aa49-5a12-4e50-a9e1-b31313047c99"
            }
          }
        ]
      },
      {
        "id": "68e8ea69-12a7-4a21-91f9-fba30a14cd4d",
        "name": "Credentials Status",
        "item": [
          {
            "id": "fc888142-fb83-47fc-8839-216e018bab8b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b8c0d2e-a31c-478d-97e6-ff48ea4aee44",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44321835-0650-4b0b-9862-c822ae3d88ed",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d179dbea-1a32-4762-ba69-f658c38dbdb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85dd626e-d9b1-4944-bdbc-788558e24a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05542fb-b6fb-4c03-90e5-df94ea9aad18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18075a9f-12a4-4c20-8601-bfb1889be384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b9ddec-aab0-49dc-9d7a-aec53c9d5306",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f8dda2-d824-46c1-8014-0b63e7758e1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63600b4a-b61f-4abd-8f8b-2b8b2f0811a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c72d1fc-8e42-48f9-a13e-9bc49f9c557b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "029251f3-d5fe-4009-af59-c58d278c9ff1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "316e4890-7172-4e29-8964-3b84663c8b9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2776d19d-f58e-46e7-881c-79da6c88b874"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b5ee0b2-0b91-493a-b90c-587c7eb27c0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c2d351b-38d7-40b1-aace-abe119d29550"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "526402f2-b261-4167-bcf5-8a029437493d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "1f50f2c5-6c6d-4367-b911-f14bb8a452f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26fc46b6-ed3b-4126-813f-555659ae3dbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0cd28a4-8de3-44a0-b537-b841bd82c91e"
            }
          }
        ]
      },
      {
        "id": "e6f7363b-8824-4b24-aa48-2272c15e242a",
        "name": "Presentations",
        "item": [
          {
            "id": "58ab8536-f52c-4afb-9c51-8df1a80ce3dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3da556cd-45d7-41cc-9c9f-aad7e22b373e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90394c1c-40d5-4407-af56-95bda32c73d1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5f597f-5062-4d17-9f91-8cf7493ba735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38842561-9b0e-4a05-878a-bf84865879de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33f5329-bacc-4c72-b73c-5b025fe6828b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f50fcf14-261d-4c32-81ce-ecaf0c574eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3602b425-8700-40ac-b397-2d0650484756",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a4ce48-02fb-4683-807e-b1532a3848b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfd882c7-1894-4d43-a7c0-86586ffb4bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053e8b1d-1b72-4dc5-bccc-9c567d0ea0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e402605-17c1-4a45-aee0-519627a47f01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5ee0a0f-708c-48c8-bf5e-0f98796ba203",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c61493ce-d5c4-484a-90c1-20e5edbf2737"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "984c3339-cde5-4f76-927b-02c4f58c7df8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a15d5fdb-f98f-447d-8830-3b647cf0c2b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51d4ea4a-97e1-402e-bc0b-e5508db32285",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "71b47715-2b12-4a2a-ade5-8a953546f0e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fadec956-9f76-41c9-ba77-352f658fa142",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60449657-8956-46a8-8c45-3a470dce9147"
            }
          }
        ]
      },
      {
        "id": "af57d9ca-f1a8-473a-9ef5-6e970d643b21",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "b899cc27-14b2-432c-a511-dafbfc3b1dfa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ce04245-5c0a-4389-9ae7-ee67da984874",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "959d6ec8-01b6-4497-b246-217d74447c02",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ae5444-3f97-4c94-94cb-7f6b4a33eb1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8a4f34-e6a0-4f19-b624-e252d4b398f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44286c1f-79f7-49b7-b6bb-6aae893e6ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5adde54d-71be-49cc-8376-53dd01eb7d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9186bf7b-ab6b-4376-a78e-58301d159064",
                    "name": "credentials_verify:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec2d266-f7a8-44a4-85f9-c42ccd88b63e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65928789-f149-4ab3-b49b-e97544dfb2a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdaf267-1b6a-479c-a11e-8b54a155ff91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd1d27dd-442c-4419-ad79-d57e571e3190"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b6bcb9c-45a8-43d8-9218-d8c8038887c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4abd7813-e98e-4bdb-b36c-4059bfac9e5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0cea312f-25e8-487f-9d34-943430b79523",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b3761a0-99f3-40b3-bb49-4946986d7cc7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19189347-2da4-4952-8564-2791728b93e4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "42ceb9e2-0217-47b8-bb75-a935b15700fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fe0a336-5dde-4ac1-9ba6-90c46814fc86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9606ed9d-c616-4884-84ce-e83fdfe90698"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 384,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 102,
        "pending": 0,
        "failed": 102
      },
      "tests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 98,
        "pending": 0,
        "failed": 96
      },
      "testScripts": {
        "total": 193,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 191,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1659572685271,
      "completed": 1659572688173
    },
    "executions": [
      {
        "id": "cbafee08-1dd6-47f8-a306-33c6fb6f3013",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 49,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "76a62e64-9a0d-445d-82e9-62e4578b3947",
          "httpRequestId": "e7f04655-d991-4105-8fc8-85aafa5487b5"
        },
        "item": {
          "id": "cbafee08-1dd6-47f8-a306-33c6fb6f3013",
          "name": "did_json"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "7bf343f5-401c-4c73-ada6-1356b48112d2",
        "cursor": {
          "ref": "89c23854-1eaf-439e-938e-e4a89b665850",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ac0e8fbb-0b38-4c5e-a398-5896a3eaa1ae"
        },
        "item": {
          "id": "7bf343f5-401c-4c73-ada6-1356b48112d2",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "7bf343f5-401c-4c73-ada6-1356b48112d2",
        "cursor": {
          "ref": "89c23854-1eaf-439e-938e-e4a89b665850",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ac0e8fbb-0b38-4c5e-a398-5896a3eaa1ae"
        },
        "item": {
          "id": "7bf343f5-401c-4c73-ada6-1356b48112d2",
          "name": "identifiers:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "4e4304fd-7d58-4b7d-9e54-319b730b6a7f",
        "cursor": {
          "ref": "e0787498-ed4b-4914-a6e5-1c4ae3ca54fb",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1c6c4445-5b8e-40be-97f7-eb08072fa50c"
        },
        "item": {
          "id": "4e4304fd-7d58-4b7d-9e54-319b730b6a7f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "4e4304fd-7d58-4b7d-9e54-319b730b6a7f",
        "cursor": {
          "ref": "e0787498-ed4b-4914-a6e5-1c4ae3ca54fb",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1c6c4445-5b8e-40be-97f7-eb08072fa50c"
        },
        "item": {
          "id": "4e4304fd-7d58-4b7d-9e54-319b730b6a7f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "4e4304fd-7d58-4b7d-9e54-319b730b6a7f",
        "cursor": {
          "ref": "e0787498-ed4b-4914-a6e5-1c4ae3ca54fb",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1c6c4445-5b8e-40be-97f7-eb08072fa50c"
        },
        "item": {
          "id": "4e4304fd-7d58-4b7d-9e54-319b730b6a7f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "e758eb40-3f05-43ec-b144-80f47d70c33c",
        "cursor": {
          "ref": "d21fedbd-73db-492d-9663-0b6e77842784",
          "length": 49,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b760ae28-678b-41a7-908f-deedd2fdc16e"
        },
        "item": {
          "id": "e758eb40-3f05-43ec-b144-80f47d70c33c",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e758eb40-3f05-43ec-b144-80f47d70c33c",
        "cursor": {
          "ref": "d21fedbd-73db-492d-9663-0b6e77842784",
          "length": 49,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b760ae28-678b-41a7-908f-deedd2fdc16e"
        },
        "item": {
          "id": "e758eb40-3f05-43ec-b144-80f47d70c33c",
          "name": "identifiers"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b38470db-5917-484d-8754-9c7815f08e92",
        "cursor": {
          "ref": "4c388e93-8b5e-4be7-8a0a-8537e01963cb",
          "length": 49,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cbd164b3-6794-41fd-9448-3f16efdba384"
        },
        "item": {
          "id": "b38470db-5917-484d-8754-9c7815f08e92",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "b38470db-5917-484d-8754-9c7815f08e92",
        "cursor": {
          "ref": "4c388e93-8b5e-4be7-8a0a-8537e01963cb",
          "length": 49,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cbd164b3-6794-41fd-9448-3f16efdba384"
        },
        "item": {
          "id": "b38470db-5917-484d-8754-9c7815f08e92",
          "name": "credentials_issue:credential:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "9b9ead5d-8f3c-4d13-9968-2d86cb670d47",
        "cursor": {
          "ref": "02331afb-8d67-4436-825b-ec3424781d9a",
          "length": 49,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b9fff769-9509-4b26-a75d-30b794014ef5"
        },
        "item": {
          "id": "9b9ead5d-8f3c-4d13-9968-2d86cb670d47",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9b9ead5d-8f3c-4d13-9968-2d86cb670d47",
        "cursor": {
          "ref": "02331afb-8d67-4436-825b-ec3424781d9a",
          "length": 49,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b9fff769-9509-4b26-a75d-30b794014ef5"
        },
        "item": {
          "id": "9b9ead5d-8f3c-4d13-9968-2d86cb670d47",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "ebde4ed6-4868-4e36-afa2-2533027cbf93",
        "cursor": {
          "ref": "33f4607c-b3eb-4585-b7bf-901e9bde2c81",
          "length": 49,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1a47bc81-90c2-4927-9dbc-8eb0406247b6"
        },
        "item": {
          "id": "ebde4ed6-4868-4e36-afa2-2533027cbf93",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ebde4ed6-4868-4e36-afa2-2533027cbf93",
        "cursor": {
          "ref": "33f4607c-b3eb-4585-b7bf-901e9bde2c81",
          "length": 49,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1a47bc81-90c2-4927-9dbc-8eb0406247b6"
        },
        "item": {
          "id": "ebde4ed6-4868-4e36-afa2-2533027cbf93",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "9b6db62c-04df-479a-bcaa-17ff3977e776",
        "cursor": {
          "ref": "5afceb97-0fa2-45d4-a3cd-d1976af7192a",
          "length": 49,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c89a3a8d-9611-4042-8ad0-55fb257e1d5b"
        },
        "item": {
          "id": "9b6db62c-04df-479a-bcaa-17ff3977e776",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9b6db62c-04df-479a-bcaa-17ff3977e776",
        "cursor": {
          "ref": "5afceb97-0fa2-45d4-a3cd-d1976af7192a",
          "length": 49,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c89a3a8d-9611-4042-8ad0-55fb257e1d5b"
        },
        "item": {
          "id": "9b6db62c-04df-479a-bcaa-17ff3977e776",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2c6e5d78-d5dd-47ba-80c6-e7249291f2ac",
        "cursor": {
          "ref": "104f6a65-ea17-4a93-b9c0-d699d6a2db78",
          "length": 49,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f5bfb43f-4823-4d69-bfb4-f8b780c54ddc"
        },
        "item": {
          "id": "2c6e5d78-d5dd-47ba-80c6-e7249291f2ac",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "2c6e5d78-d5dd-47ba-80c6-e7249291f2ac",
        "cursor": {
          "ref": "104f6a65-ea17-4a93-b9c0-d699d6a2db78",
          "length": 49,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f5bfb43f-4823-4d69-bfb4-f8b780c54ddc"
        },
        "item": {
          "id": "2c6e5d78-d5dd-47ba-80c6-e7249291f2ac",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "af41f7b9-07f2-4030-8cc3-49878efa4ea3",
        "cursor": {
          "ref": "f037d67f-8c00-456b-8688-d2740567aa60",
          "length": 49,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "11035a4b-0765-4efc-a886-191a65071a45"
        },
        "item": {
          "id": "af41f7b9-07f2-4030-8cc3-49878efa4ea3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "af41f7b9-07f2-4030-8cc3-49878efa4ea3",
        "cursor": {
          "ref": "f037d67f-8c00-456b-8688-d2740567aa60",
          "length": 49,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "11035a4b-0765-4efc-a886-191a65071a45"
        },
        "item": {
          "id": "af41f7b9-07f2-4030-8cc3-49878efa4ea3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f5fba601-82b0-4d11-b936-2fa486728ba8",
        "cursor": {
          "ref": "4ede77ed-2570-4bd5-9f0e-284d3a76edbf",
          "length": 49,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d1f0d352-4b14-4f64-94e6-3e1861dfc040"
        },
        "item": {
          "id": "f5fba601-82b0-4d11-b936-2fa486728ba8",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "f5fba601-82b0-4d11-b936-2fa486728ba8",
        "cursor": {
          "ref": "4ede77ed-2570-4bd5-9f0e-284d3a76edbf",
          "length": 49,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d1f0d352-4b14-4f64-94e6-3e1861dfc040"
        },
        "item": {
          "id": "f5fba601-82b0-4d11-b936-2fa486728ba8",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "0e25d6f0-c366-4489-a9c3-a63e26c95ace",
        "cursor": {
          "ref": "2b37e324-29ee-4162-af46-0be8ad3a5bc0",
          "length": 49,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5225ac0c-6b8f-43af-9294-c4ea9536f83a"
        },
        "item": {
          "id": "0e25d6f0-c366-4489-a9c3-a63e26c95ace",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "0e25d6f0-c366-4489-a9c3-a63e26c95ace",
        "cursor": {
          "ref": "2b37e324-29ee-4162-af46-0be8ad3a5bc0",
          "length": 49,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5225ac0c-6b8f-43af-9294-c4ea9536f83a"
        },
        "item": {
          "id": "0e25d6f0-c366-4489-a9c3-a63e26c95ace",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "2c87880d-d18f-4cf2-99e3-89ad3a7a03be",
        "cursor": {
          "ref": "af482988-1339-494f-b3d5-963af62b536d",
          "length": 49,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "04bbfd6a-2bb1-4d99-8a39-c250a0688901"
        },
        "item": {
          "id": "2c87880d-d18f-4cf2-99e3-89ad3a7a03be",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2c87880d-d18f-4cf2-99e3-89ad3a7a03be",
        "cursor": {
          "ref": "af482988-1339-494f-b3d5-963af62b536d",
          "length": 49,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "04bbfd6a-2bb1-4d99-8a39-c250a0688901"
        },
        "item": {
          "id": "2c87880d-d18f-4cf2-99e3-89ad3a7a03be",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "b5673db0-eaa2-4141-8b35-12df896730a7",
        "cursor": {
          "ref": "c7de771c-33cc-4776-9903-f4c17cb09a37",
          "length": 49,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "87a64148-5c8a-4001-9583-ad8ed4967ec0"
        },
        "item": {
          "id": "b5673db0-eaa2-4141-8b35-12df896730a7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "b5673db0-eaa2-4141-8b35-12df896730a7",
        "cursor": {
          "ref": "c7de771c-33cc-4776-9903-f4c17cb09a37",
          "length": 49,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "87a64148-5c8a-4001-9583-ad8ed4967ec0"
        },
        "item": {
          "id": "b5673db0-eaa2-4141-8b35-12df896730a7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "9f3a7bdf-15aa-42b6-b414-3f922824583f",
        "cursor": {
          "ref": "74fc440a-a3ac-40a6-b799-7062713c5b8d",
          "length": 49,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a7715a81-a265-4193-8016-a7131d8d561e"
        },
        "item": {
          "id": "9f3a7bdf-15aa-42b6-b414-3f922824583f",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "9f3a7bdf-15aa-42b6-b414-3f922824583f",
        "cursor": {
          "ref": "74fc440a-a3ac-40a6-b799-7062713c5b8d",
          "length": 49,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a7715a81-a265-4193-8016-a7131d8d561e"
        },
        "item": {
          "id": "9f3a7bdf-15aa-42b6-b414-3f922824583f",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "825a8be7-fbe8-4fe0-9d8c-fe866d3dafdd",
        "cursor": {
          "ref": "884bc1ff-1a67-4646-9c2e-5bb36c004bb1",
          "length": 49,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c5df15bb-b1d0-41c6-a29e-e1943e9efe79"
        },
        "item": {
          "id": "825a8be7-fbe8-4fe0-9d8c-fe866d3dafdd",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "825a8be7-fbe8-4fe0-9d8c-fe866d3dafdd",
        "cursor": {
          "ref": "884bc1ff-1a67-4646-9c2e-5bb36c004bb1",
          "length": 49,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c5df15bb-b1d0-41c6-a29e-e1943e9efe79"
        },
        "item": {
          "id": "825a8be7-fbe8-4fe0-9d8c-fe866d3dafdd",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a547f89f-22a3-4ff1-89ae-7b1da0c9fb60",
        "cursor": {
          "ref": "fbbe147d-96ed-4472-aaa4-dc1fd5bedc9f",
          "length": 49,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f19dc250-500d-4bac-a771-95c739925dec"
        },
        "item": {
          "id": "a547f89f-22a3-4ff1-89ae-7b1da0c9fb60",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "a547f89f-22a3-4ff1-89ae-7b1da0c9fb60",
        "cursor": {
          "ref": "fbbe147d-96ed-4472-aaa4-dc1fd5bedc9f",
          "length": 49,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f19dc250-500d-4bac-a771-95c739925dec"
        },
        "item": {
          "id": "a547f89f-22a3-4ff1-89ae-7b1da0c9fb60",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b50a1204-795b-474a-9e27-f25b33e22862",
        "cursor": {
          "ref": "1b9e978e-a569-4868-9ac7-c9cd1f2b05eb",
          "length": 49,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b674773a-7b50-4983-9e36-3242d62dbd3a"
        },
        "item": {
          "id": "b50a1204-795b-474a-9e27-f25b33e22862",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "b50a1204-795b-474a-9e27-f25b33e22862",
        "cursor": {
          "ref": "1b9e978e-a569-4868-9ac7-c9cd1f2b05eb",
          "length": 49,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b674773a-7b50-4983-9e36-3242d62dbd3a"
        },
        "item": {
          "id": "b50a1204-795b-474a-9e27-f25b33e22862",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "722d88e9-4a71-40a3-9d96-3ca5c1b84962",
        "cursor": {
          "ref": "614b7e8b-eaea-4576-84b0-2d85d3f888f9",
          "length": 49,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "db6bd145-ebbd-4f29-a849-cb959f49053a"
        },
        "item": {
          "id": "722d88e9-4a71-40a3-9d96-3ca5c1b84962",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "722d88e9-4a71-40a3-9d96-3ca5c1b84962",
        "cursor": {
          "ref": "614b7e8b-eaea-4576-84b0-2d85d3f888f9",
          "length": 49,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "db6bd145-ebbd-4f29-a849-cb959f49053a"
        },
        "item": {
          "id": "722d88e9-4a71-40a3-9d96-3ca5c1b84962",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "888ff2c2-8181-42dd-bc81-7854f57910b3",
        "cursor": {
          "ref": "0b0d7805-359e-432d-8330-2afe7af8795c",
          "length": 49,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9fe5f033-4f5c-4735-8db9-529696595723"
        },
        "item": {
          "id": "888ff2c2-8181-42dd-bc81-7854f57910b3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "888ff2c2-8181-42dd-bc81-7854f57910b3",
        "cursor": {
          "ref": "0b0d7805-359e-432d-8330-2afe7af8795c",
          "length": 49,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9fe5f033-4f5c-4735-8db9-529696595723"
        },
        "item": {
          "id": "888ff2c2-8181-42dd-bc81-7854f57910b3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "12561d39-b033-448e-92c0-db29d5087371",
        "cursor": {
          "ref": "552de700-97d0-470c-be54-006ee446e7e8",
          "length": 49,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0a9505e7-ad5b-4a5c-a793-1e2d1c5ef6a5"
        },
        "item": {
          "id": "12561d39-b033-448e-92c0-db29d5087371",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "12561d39-b033-448e-92c0-db29d5087371",
        "cursor": {
          "ref": "552de700-97d0-470c-be54-006ee446e7e8",
          "length": 49,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0a9505e7-ad5b-4a5c-a793-1e2d1c5ef6a5"
        },
        "item": {
          "id": "12561d39-b033-448e-92c0-db29d5087371",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e31f9dc4-8ed7-4193-91eb-86564e220b84",
        "cursor": {
          "ref": "99145e3c-9475-454c-a0f0-1be3c581e175",
          "length": 49,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "87a316e0-28c4-41bb-9fca-d47646c8542d"
        },
        "item": {
          "id": "e31f9dc4-8ed7-4193-91eb-86564e220b84",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e31f9dc4-8ed7-4193-91eb-86564e220b84",
        "cursor": {
          "ref": "99145e3c-9475-454c-a0f0-1be3c581e175",
          "length": 49,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "87a316e0-28c4-41bb-9fca-d47646c8542d"
        },
        "item": {
          "id": "e31f9dc4-8ed7-4193-91eb-86564e220b84",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "35a8bffa-5ffe-4c35-949d-9e8b985637f4",
        "cursor": {
          "ref": "f5baa0ed-1937-4239-9bc1-b16421d6e9d0",
          "length": 49,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9ab5e5b4-c3e6-4e2a-b4f3-df4689b19162"
        },
        "item": {
          "id": "35a8bffa-5ffe-4c35-949d-9e8b985637f4",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "35a8bffa-5ffe-4c35-949d-9e8b985637f4",
        "cursor": {
          "ref": "f5baa0ed-1937-4239-9bc1-b16421d6e9d0",
          "length": 49,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9ab5e5b4-c3e6-4e2a-b4f3-df4689b19162"
        },
        "item": {
          "id": "35a8bffa-5ffe-4c35-949d-9e8b985637f4",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "c8d6bb1d-a322-4728-a41b-84fc94ed049e",
        "cursor": {
          "ref": "4931674f-091c-4b27-97e1-c007cfe4c793",
          "length": 49,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "866e211d-d90f-46a0-82ea-bfd99ec1a896"
        },
        "item": {
          "id": "c8d6bb1d-a322-4728-a41b-84fc94ed049e",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c8d6bb1d-a322-4728-a41b-84fc94ed049e",
        "cursor": {
          "ref": "4931674f-091c-4b27-97e1-c007cfe4c793",
          "length": 49,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "866e211d-d90f-46a0-82ea-bfd99ec1a896"
        },
        "item": {
          "id": "c8d6bb1d-a322-4728-a41b-84fc94ed049e",
          "name": "credentials_issue:options:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "1f35de47-edd9-4b60-aa46-350ec3eab5da",
        "cursor": {
          "ref": "deccb459-0d9c-4e75-9731-014d2444c376",
          "length": 49,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2a9ff8c6-cacd-4151-8672-a1e852a88839"
        },
        "item": {
          "id": "1f35de47-edd9-4b60-aa46-350ec3eab5da",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "1f35de47-edd9-4b60-aa46-350ec3eab5da",
        "cursor": {
          "ref": "deccb459-0d9c-4e75-9731-014d2444c376",
          "length": 49,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2a9ff8c6-cacd-4151-8672-a1e852a88839"
        },
        "item": {
          "id": "1f35de47-edd9-4b60-aa46-350ec3eab5da",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "de089592-f39d-4aed-9e1d-7099979658bf",
        "cursor": {
          "ref": "5aac193f-204d-4bdc-83e7-f03d5a9c8f1e",
          "length": 49,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a54ea4d8-713c-4c6d-bd83-8a2c13d09e4c"
        },
        "item": {
          "id": "de089592-f39d-4aed-9e1d-7099979658bf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "de089592-f39d-4aed-9e1d-7099979658bf",
        "cursor": {
          "ref": "5aac193f-204d-4bdc-83e7-f03d5a9c8f1e",
          "length": 49,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a54ea4d8-713c-4c6d-bd83-8a2c13d09e4c"
        },
        "item": {
          "id": "de089592-f39d-4aed-9e1d-7099979658bf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "a516641a-46dd-4210-bee8-d43984bff9e4",
        "cursor": {
          "ref": "22047558-40e1-4d3b-a966-4afefe7f9967",
          "length": 49,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9640354c-411a-4b80-b1d9-50fc212a3c8b"
        },
        "item": {
          "id": "a516641a-46dd-4210-bee8-d43984bff9e4",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "a516641a-46dd-4210-bee8-d43984bff9e4",
        "cursor": {
          "ref": "22047558-40e1-4d3b-a966-4afefe7f9967",
          "length": 49,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9640354c-411a-4b80-b1d9-50fc212a3c8b"
        },
        "item": {
          "id": "a516641a-46dd-4210-bee8-d43984bff9e4",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "ad2357a7-c911-4cd3-939c-e0a7fca8ab19",
        "cursor": {
          "ref": "bba3b8dd-24ee-4777-b685-bed4cbb2db6b",
          "length": 49,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "07bde288-9eef-45d0-9943-4c77b4b47ced"
        },
        "item": {
          "id": "ad2357a7-c911-4cd3-939c-e0a7fca8ab19",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "ad2357a7-c911-4cd3-939c-e0a7fca8ab19",
        "cursor": {
          "ref": "bba3b8dd-24ee-4777-b685-bed4cbb2db6b",
          "length": 49,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "07bde288-9eef-45d0-9943-4c77b4b47ced"
        },
        "item": {
          "id": "ad2357a7-c911-4cd3-939c-e0a7fca8ab19",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "8a1ba9bc-790b-4108-9823-346ceb4ba6f9",
        "cursor": {
          "ref": "3054e40c-cf4a-48f2-bccf-efd365deda44",
          "length": 49,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2d7f4dd4-43e3-435c-a75a-e04150d7f89f"
        },
        "item": {
          "id": "8a1ba9bc-790b-4108-9823-346ceb4ba6f9",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "8a1ba9bc-790b-4108-9823-346ceb4ba6f9",
        "cursor": {
          "ref": "3054e40c-cf4a-48f2-bccf-efd365deda44",
          "length": 49,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2d7f4dd4-43e3-435c-a75a-e04150d7f89f"
        },
        "item": {
          "id": "8a1ba9bc-790b-4108-9823-346ceb4ba6f9",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "5f8df8a6-354e-4bd4-97ab-244bcb461190",
        "cursor": {
          "ref": "6146590e-69ea-455f-aaae-ec1030ede6ef",
          "length": 49,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b9841e2d-d2b9-4512-8cfb-55d4f2bc60bf"
        },
        "item": {
          "id": "5f8df8a6-354e-4bd4-97ab-244bcb461190",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "5f8df8a6-354e-4bd4-97ab-244bcb461190",
        "cursor": {
          "ref": "6146590e-69ea-455f-aaae-ec1030ede6ef",
          "length": 49,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b9841e2d-d2b9-4512-8cfb-55d4f2bc60bf"
        },
        "item": {
          "id": "5f8df8a6-354e-4bd4-97ab-244bcb461190",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "1260bc71-90b8-4575-a4d5-f73d8f2d8677",
        "cursor": {
          "ref": "5e34da98-a0ed-476e-857b-ff2ccc9e1664",
          "length": 49,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "67f6ee06-fa35-4636-9f3a-5b3d6791fc30"
        },
        "item": {
          "id": "1260bc71-90b8-4575-a4d5-f73d8f2d8677",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1260bc71-90b8-4575-a4d5-f73d8f2d8677",
        "cursor": {
          "ref": "5e34da98-a0ed-476e-857b-ff2ccc9e1664",
          "length": 49,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "67f6ee06-fa35-4636-9f3a-5b3d6791fc30"
        },
        "item": {
          "id": "1260bc71-90b8-4575-a4d5-f73d8f2d8677",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "6f6cd768-13f0-4aae-a8cd-0bda0759f852",
        "cursor": {
          "ref": "832f081f-b375-4d2d-916b-6f301dbb0a48",
          "length": 49,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "63fa19b6-44be-4e63-888f-1e7a6821bc81"
        },
        "item": {
          "id": "6f6cd768-13f0-4aae-a8cd-0bda0759f852",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "6f6cd768-13f0-4aae-a8cd-0bda0759f852",
        "cursor": {
          "ref": "832f081f-b375-4d2d-916b-6f301dbb0a48",
          "length": 49,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "63fa19b6-44be-4e63-888f-1e7a6821bc81"
        },
        "item": {
          "id": "6f6cd768-13f0-4aae-a8cd-0bda0759f852",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "4f9caa5d-a19a-4119-8cee-f88d68eae3a1",
        "cursor": {
          "ref": "d4df525c-5507-4d5b-83f8-28b535421166",
          "length": 49,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "65f26f06-9e18-47d0-980e-d0df1a0bd51b"
        },
        "item": {
          "id": "4f9caa5d-a19a-4119-8cee-f88d68eae3a1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "4f9caa5d-a19a-4119-8cee-f88d68eae3a1",
        "cursor": {
          "ref": "d4df525c-5507-4d5b-83f8-28b535421166",
          "length": 49,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "65f26f06-9e18-47d0-980e-d0df1a0bd51b"
        },
        "item": {
          "id": "4f9caa5d-a19a-4119-8cee-f88d68eae3a1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7e2bf12c-b232-4b86-aab5-cd4a447c486a",
        "cursor": {
          "ref": "a0bfd212-dbb1-4d53-9608-b182723ec614",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d16d946b-afdb-4aca-aa2f-63bc15d1d1f7"
        },
        "item": {
          "id": "7e2bf12c-b232-4b86-aab5-cd4a447c486a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "7e2bf12c-b232-4b86-aab5-cd4a447c486a",
        "cursor": {
          "ref": "a0bfd212-dbb1-4d53-9608-b182723ec614",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d16d946b-afdb-4aca-aa2f-63bc15d1d1f7"
        },
        "item": {
          "id": "7e2bf12c-b232-4b86-aab5-cd4a447c486a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "7e2bf12c-b232-4b86-aab5-cd4a447c486a",
        "cursor": {
          "ref": "a0bfd212-dbb1-4d53-9608-b182723ec614",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d16d946b-afdb-4aca-aa2f-63bc15d1d1f7"
        },
        "item": {
          "id": "7e2bf12c-b232-4b86-aab5-cd4a447c486a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "1dc24916-0eb5-47dd-86ab-a44cae87833f",
        "cursor": {
          "ref": "51ce62cb-dff4-42a1-9d91-56bbf2ef25e0",
          "length": 49,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "71af1834-46cb-4a33-96e8-5442413266f2"
        },
        "item": {
          "id": "1dc24916-0eb5-47dd-86ab-a44cae87833f",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1dc24916-0eb5-47dd-86ab-a44cae87833f",
        "cursor": {
          "ref": "51ce62cb-dff4-42a1-9d91-56bbf2ef25e0",
          "length": 49,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "71af1834-46cb-4a33-96e8-5442413266f2"
        },
        "item": {
          "id": "1dc24916-0eb5-47dd-86ab-a44cae87833f",
          "name": "credentials_issue"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1a424e42-701b-4852-b972-2d5c35b823b5",
        "cursor": {
          "ref": "35a0661c-f091-4b92-a8e2-1ed413d79ce4",
          "length": 49,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c1773cc3-49f8-41e1-9683-b8614cfd8a26"
        },
        "item": {
          "id": "1a424e42-701b-4852-b972-2d5c35b823b5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1a424e42-701b-4852-b972-2d5c35b823b5",
        "cursor": {
          "ref": "35a0661c-f091-4b92-a8e2-1ed413d79ce4",
          "length": 49,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c1773cc3-49f8-41e1-9683-b8614cfd8a26"
        },
        "item": {
          "id": "1a424e42-701b-4852-b972-2d5c35b823b5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e3288f4e-d180-4268-9451-653afe69a084",
        "cursor": {
          "ref": "1778271a-1bb3-4c27-9754-651e59836eec",
          "length": 49,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bda93ed4-dc16-4614-babb-a806b0d5e02a"
        },
        "item": {
          "id": "e3288f4e-d180-4268-9451-653afe69a084",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "e3288f4e-d180-4268-9451-653afe69a084",
        "cursor": {
          "ref": "1778271a-1bb3-4c27-9754-651e59836eec",
          "length": 49,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bda93ed4-dc16-4614-babb-a806b0d5e02a"
        },
        "item": {
          "id": "e3288f4e-d180-4268-9451-653afe69a084",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a4b4c705-d67f-461b-a560-ddbc190ea64e",
        "cursor": {
          "ref": "2c676923-3be0-4aeb-8008-b1dfcf4fc61c",
          "length": 49,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5f9a6a21-c5f5-41ec-a685-1a209918da2f"
        },
        "item": {
          "id": "a4b4c705-d67f-461b-a560-ddbc190ea64e",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "a4b4c705-d67f-461b-a560-ddbc190ea64e",
        "cursor": {
          "ref": "2c676923-3be0-4aeb-8008-b1dfcf4fc61c",
          "length": 49,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5f9a6a21-c5f5-41ec-a685-1a209918da2f"
        },
        "item": {
          "id": "a4b4c705-d67f-461b-a560-ddbc190ea64e",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c7af24da-aadb-4836-9e97-7875074f6ecc",
        "cursor": {
          "ref": "6048e006-68bd-4883-b39c-6b9ff1e4b043",
          "length": 49,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1c05ad33-93fd-4d92-acd5-5407416f98a2"
        },
        "item": {
          "id": "c7af24da-aadb-4836-9e97-7875074f6ecc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c7af24da-aadb-4836-9e97-7875074f6ecc",
        "cursor": {
          "ref": "6048e006-68bd-4883-b39c-6b9ff1e4b043",
          "length": 49,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1c05ad33-93fd-4d92-acd5-5407416f98a2"
        },
        "item": {
          "id": "c7af24da-aadb-4836-9e97-7875074f6ecc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f19a5278-8663-47fe-8895-858f335462b5",
        "cursor": {
          "ref": "454ac770-4a60-45db-b17d-3c9d51d06158",
          "length": 49,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "39ef6e4f-9e15-49d2-8759-d68df59eab60"
        },
        "item": {
          "id": "f19a5278-8663-47fe-8895-858f335462b5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f19a5278-8663-47fe-8895-858f335462b5",
        "cursor": {
          "ref": "454ac770-4a60-45db-b17d-3c9d51d06158",
          "length": 49,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "39ef6e4f-9e15-49d2-8759-d68df59eab60"
        },
        "item": {
          "id": "f19a5278-8663-47fe-8895-858f335462b5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3058f932-2ae8-4ee7-8925-f437c10b40d3",
        "cursor": {
          "ref": "d3bb284c-e533-4d86-b97a-f7f23f4f25da",
          "length": 49,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "95e3855e-2c26-4481-bf4f-f4676ce6535d"
        },
        "item": {
          "id": "3058f932-2ae8-4ee7-8925-f437c10b40d3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3058f932-2ae8-4ee7-8925-f437c10b40d3",
        "cursor": {
          "ref": "d3bb284c-e533-4d86-b97a-f7f23f4f25da",
          "length": 49,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "95e3855e-2c26-4481-bf4f-f4676ce6535d"
        },
        "item": {
          "id": "3058f932-2ae8-4ee7-8925-f437c10b40d3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "bd0c9b04-883c-4f6e-b866-57d6b5fe2bf3",
        "cursor": {
          "ref": "47c28380-6d9f-4995-8bfe-ce2728b7bf59",
          "length": 49,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0549e99e-09f2-48e1-bf28-62920466f34c"
        },
        "item": {
          "id": "bd0c9b04-883c-4f6e-b866-57d6b5fe2bf3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "bd0c9b04-883c-4f6e-b866-57d6b5fe2bf3",
        "cursor": {
          "ref": "47c28380-6d9f-4995-8bfe-ce2728b7bf59",
          "length": 49,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0549e99e-09f2-48e1-bf28-62920466f34c"
        },
        "item": {
          "id": "bd0c9b04-883c-4f6e-b866-57d6b5fe2bf3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "c721018b-7f6d-4860-afe0-026d43a29721",
        "cursor": {
          "ref": "63798c4d-f0f1-47eb-a651-37199cf7fc11",
          "length": 49,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5b47a796-6f19-4f87-92e5-0bf81635a257"
        },
        "item": {
          "id": "c721018b-7f6d-4860-afe0-026d43a29721",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c721018b-7f6d-4860-afe0-026d43a29721",
        "cursor": {
          "ref": "63798c4d-f0f1-47eb-a651-37199cf7fc11",
          "length": 49,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5b47a796-6f19-4f87-92e5-0bf81635a257"
        },
        "item": {
          "id": "c721018b-7f6d-4860-afe0-026d43a29721",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "44321835-0650-4b0b-9862-c822ae3d88ed",
        "cursor": {
          "ref": "a84a4480-090f-4c78-8957-c6e3aa466619",
          "length": 49,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ceac7158-dffb-4b43-867e-8f6ba270478a"
        },
        "item": {
          "id": "44321835-0650-4b0b-9862-c822ae3d88ed",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "44321835-0650-4b0b-9862-c822ae3d88ed",
        "cursor": {
          "ref": "a84a4480-090f-4c78-8957-c6e3aa466619",
          "length": 49,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ceac7158-dffb-4b43-867e-8f6ba270478a"
        },
        "item": {
          "id": "44321835-0650-4b0b-9862-c822ae3d88ed",
          "name": "credentials_status:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "17b9ddec-aab0-49dc-9d7a-aec53c9d5306",
        "cursor": {
          "ref": "178245ce-77b6-4f24-ad5e-339f4fbd31ed",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e77a7cd5-cf0c-4908-a151-3a5d7817b183"
        },
        "item": {
          "id": "17b9ddec-aab0-49dc-9d7a-aec53c9d5306",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "17b9ddec-aab0-49dc-9d7a-aec53c9d5306",
        "cursor": {
          "ref": "178245ce-77b6-4f24-ad5e-339f4fbd31ed",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e77a7cd5-cf0c-4908-a151-3a5d7817b183"
        },
        "item": {
          "id": "17b9ddec-aab0-49dc-9d7a-aec53c9d5306",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "17b9ddec-aab0-49dc-9d7a-aec53c9d5306",
        "cursor": {
          "ref": "178245ce-77b6-4f24-ad5e-339f4fbd31ed",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e77a7cd5-cf0c-4908-a151-3a5d7817b183"
        },
        "item": {
          "id": "17b9ddec-aab0-49dc-9d7a-aec53c9d5306",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "90394c1c-40d5-4407-af56-95bda32c73d1",
        "cursor": {
          "ref": "76a9d39d-1b90-46e3-b081-0eb883904310",
          "length": 49,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dbf73888-f722-43e9-958f-d2272e15a70c"
        },
        "item": {
          "id": "90394c1c-40d5-4407-af56-95bda32c73d1",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "90394c1c-40d5-4407-af56-95bda32c73d1",
        "cursor": {
          "ref": "76a9d39d-1b90-46e3-b081-0eb883904310",
          "length": 49,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dbf73888-f722-43e9-958f-d2272e15a70c"
        },
        "item": {
          "id": "90394c1c-40d5-4407-af56-95bda32c73d1",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3602b425-8700-40ac-b397-2d0650484756",
        "cursor": {
          "ref": "2749a2bd-dec0-4ab8-8c2c-215bc5071e79",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "04e21fd8-fdd7-47b8-ab32-7fe685be8194"
        },
        "item": {
          "id": "3602b425-8700-40ac-b397-2d0650484756",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3602b425-8700-40ac-b397-2d0650484756",
        "cursor": {
          "ref": "2749a2bd-dec0-4ab8-8c2c-215bc5071e79",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "04e21fd8-fdd7-47b8-ab32-7fe685be8194"
        },
        "item": {
          "id": "3602b425-8700-40ac-b397-2d0650484756",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3602b425-8700-40ac-b397-2d0650484756",
        "cursor": {
          "ref": "2749a2bd-dec0-4ab8-8c2c-215bc5071e79",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "04e21fd8-fdd7-47b8-ab32-7fe685be8194"
        },
        "item": {
          "id": "3602b425-8700-40ac-b397-2d0650484756",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "959d6ec8-01b6-4497-b246-217d74447c02",
        "cursor": {
          "ref": "cece40a6-6839-4a99-b506-62af34b47591",
          "length": 49,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d060033c-b094-4881-8d48-17353ba1f459"
        },
        "item": {
          "id": "959d6ec8-01b6-4497-b246-217d74447c02",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "959d6ec8-01b6-4497-b246-217d74447c02",
        "cursor": {
          "ref": "cece40a6-6839-4a99-b506-62af34b47591",
          "length": 49,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d060033c-b094-4881-8d48-17353ba1f459"
        },
        "item": {
          "id": "959d6ec8-01b6-4497-b246-217d74447c02",
          "name": "credentials_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9186bf7b-ab6b-4376-a78e-58301d159064",
        "cursor": {
          "ref": "7deb1401-5943-4a91-9bc9-e207d321c621",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f9d2785f-4055-4876-a2f2-f5d0b1235ce4"
        },
        "item": {
          "id": "9186bf7b-ab6b-4376-a78e-58301d159064",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9186bf7b-ab6b-4376-a78e-58301d159064",
        "cursor": {
          "ref": "7deb1401-5943-4a91-9bc9-e207d321c621",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f9d2785f-4055-4876-a2f2-f5d0b1235ce4"
        },
        "item": {
          "id": "9186bf7b-ab6b-4376-a78e-58301d159064",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9186bf7b-ab6b-4376-a78e-58301d159064",
        "cursor": {
          "ref": "7deb1401-5943-4a91-9bc9-e207d321c621",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f9d2785f-4055-4876-a2f2-f5d0b1235ce4"
        },
        "item": {
          "id": "9186bf7b-ab6b-4376-a78e-58301d159064",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      }
    ]
  }
}