{
  "collection": {
    "info": {
      "_postman_id": "8ce11389-4715-4913-ac8a-339aceeb0d65",
      "name": "Credentials Revocation Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "19df94c5-906e-4ee0-a784-70ce1cd98698",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "{{CLIENT_SCOPE}}"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "47607e9a-ee91-46a0-b865-dd6f99d8ade3",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "d3699ae1-281f-446a-a459-d65d09f066dc"
            }
          }
        ]
      },
      {
        "id": "6c4b32d4-e120-452a-93e8-412431437652",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "411d5712-3d0f-4efc-bddc-f76b3b7643b8",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `access_token` collection variable is missing, but it will",
                "// give an indication of why the request failed in that scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    const access_token = pm.collectionVariables.get(\"access_token\");",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// The value of didDocument.id is persisted as a Postman collection variable",
                "// that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    pm.collectionVariables.set(\"credential_issuer_id\", didDocument.id);",
                "});"
              ],
              "_lastExecutionId": "3558335f-2b85-4f30-8d6b-b34724b4606f"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "eae6248e-069a-4cae-9017-11ea2d805fbe",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/vc+ld+json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/vc-revocation-list-2020/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"{{$isoTimestamp}}\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"{{$isoTimestamp}}\",\n        \"credentialStatus\": {\n            \"type\": \"RevocationList2020Status\"\n        }\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e1a8c4a4-c88d-427c-85b9-1cec1aec081d",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const {verifiableCredential} = pm.response.json();",
                "    pm.collectionVariables.set(\"verifiable_credential\", JSON.stringify(verifiableCredential));",
                "});"
              ],
              "_lastExecutionId": "84db0057-3a5c-4992-9e25-7e92c7f49e3d"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "0a52fce4-f0f2-4543-a41e-a59cd7ecaf72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfc33df3-62f0-4a35-ad25-86c259ec6a6b"
            }
          }
        ]
      },
      {
        "id": "1c6f90e6-512a-47b1-abf9-8559feb27d5e",
        "name": "Verify Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "478c1ead-6695-499f-81d4-a9f109e862e9",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The verification should succeed.",
                "pm.test(\"verification should be successful\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "6d8388f4-56c5-449d-8ca8-815ec789a5b2"
            }
          }
        ]
      },
      {
        "id": "a09bb9e7-51cf-416e-b4b1-0577ad1ec3e1",
        "name": "Revoke Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "status"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credentialId\": \"{{verifiable_credential_id}}\",\n    \"credentialStatus\": [\n        {\n            \"type\": \"RevocationList2020Status\",\n            \"status\": \"1\"\n        }\n    ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc8927fe-0942-4ed5-803d-13f1e8307d21",
              "type": "text/javascript",
              "exec": [
                "// Extract credential ID from verifiable credential",
                "let verifiable_credential_id;",
                "try {",
                "    const { id } = JSON.parse(pm.collectionVariables.get(\"verifiable_credential\"));",
                "    pm.collectionVariables.set('verifiable_credential_id', id)",
                "} catch {}",
                ""
              ],
              "_lastExecutionId": "e9382a2d-cad8-49f5-9489-50ed5705abc0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "507e142b-7f4e-4608-9711-b0ada55a2a16",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/status` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// Verifiable credential ID is a required element item used in the request body",
                "pm.test(\"`verifiable_credential_id` local variable must be set\", function () {",
                "    pm.expect(\"verifiable_credential\").to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Revoke Credentials\" request is `200 Success`",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});"
              ],
              "_lastExecutionId": "8b7af4e9-2e85-4901-ba8b-9d3d4432af5a"
            }
          }
        ]
      },
      {
        "id": "4250d07d-39b5-4194-8b07-047b77447be5",
        "name": "Verify Revocation",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c32fb7e4-7df6-4ded-a6d0-5cb5a8985679",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Checks should have errors",
                "//pm.test(\"Checks should have credentialStatus errors\", function() {",
                "//    const { errors } = pm.response.json();",
                "//    pm.expect(errors).to.include(\"credentialStatus\");",
                "//});",
                "",
                "// Confirm error",
                "pm.test(\"Checks should have credentialStatus errors\", function() {",
                "    let obj = pm.response.json().verifications.find(e => e.title === \"Revocation\");",
                "    pm.expect(obj.status).to.eql(\"bad\");",
                "});",
                "",
                "",
                ""
              ],
              "_lastExecutionId": "c3431076-7b0c-40a6-aa37-cfebb00aa829"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 18
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713831669363,
      "completed": 1713831669540
    },
    "executions": [
      {
        "id": "19df94c5-906e-4ee0-a784-70ce1cd98698",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4665c889-5690-49b3-bcd4-a12253fca82b",
          "httpRequestId": "91a10b28-56e4-4841-8341-05fa588e0a09"
        },
        "item": {
          "id": "19df94c5-906e-4ee0-a784-70ce1cd98698",
          "name": "Get Access Token"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response body must include non-empty access_token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response body must represent `Bearer` token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "returned token must expire in the future",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "`access_token` persisted to collectionVariables",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:1)"
            }
          }
        ]
      },
      {
        "id": "6c4b32d4-e120-452a-93e8-412431437652",
        "cursor": {
          "ref": "2ae7dc86-3872-4709-be4f-04c29623f900",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "17635594-46a6-47cd-bd58-8257f77b7a4e"
        },
        "item": {
          "id": "6c4b32d4-e120-452a-93e8-412431437652",
          "name": "Get Organization DIDs"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "`access_token` collection variable must be set",
              "message": "expected '' not to be empty",
              "stack": "AssertionError: expected '' not to be empty\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "must include valid JSON response body",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "didDocument must be present in response body",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:2)"
            }
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "verification method controller must match did subject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:2)"
            }
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "`credential_issuer_id` persisted to collectionVariables",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:6:2)"
            }
          }
        ]
      },
      {
        "id": "eae6248e-069a-4cae-9017-11ea2d805fbe",
        "cursor": {
          "ref": "103c7fa8-eb34-4af8-b04e-ef8762e133ee",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "592f744b-2742-46cb-a84d-db2279131d9f"
        },
        "item": {
          "id": "eae6248e-069a-4cae-9017-11ea2d805fbe",
          "name": "Issue Credential"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `201 Created` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "`verifiable_credential` persisted to collectionVariables",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:3)"
            }
          }
        ]
      },
      {
        "id": "1c6f90e6-512a-47b1-abf9-8559feb27d5e",
        "cursor": {
          "ref": "f4e21f7f-acff-473c-91a3-8e7be6daf683",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a77378dd-e6fa-4688-83a2-980a1cdc9ca0"
        },
        "item": {
          "id": "1c6f90e6-512a-47b1-abf9-8559feb27d5e",
          "name": "Verify Credential"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "verification should be successful",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "verification should be successful",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:4)"
            }
          }
        ]
      },
      {
        "id": "a09bb9e7-51cf-416e-b4b1-0577ad1ec3e1",
        "cursor": {
          "ref": "ba3a0a5b-37df-46f9-b7de-a8f62a07ab7e",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "76ee1f71-d45a-4dc8-af18-4e05da428e66"
        },
        "item": {
          "id": "a09bb9e7-51cf-416e-b4b1-0577ad1ec3e1",
          "name": "Revoke Credential"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential_id` local variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "id": "4250d07d-39b5-4194-8b07-047b77447be5",
        "cursor": {
          "ref": "2a67332b-091e-402e-b3d9-6db0c647b04c",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6091898a-5489-417e-b3cd-687d8bd606ab"
        },
        "item": {
          "id": "4250d07d-39b5-4194-8b07-047b77447be5",
          "name": "Verify Revocation"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:6)"
            }
          },
          {
            "assertion": "Checks should have credentialStatus errors",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Checks should have credentialStatus errors",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:6)"
            }
          }
        ]
      }
    ]
  }
}