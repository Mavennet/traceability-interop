{
  "collection": {
    "info": {
      "_postman_id": "97bd6bb0-fb39-4bd6-94ee-dfc43b5f2c51",
      "name": "Credentials Revocation Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b95604c8-e837-4146-bc43-ec5bbe38577f",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"audience\": \"{{TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{CLIENT_ID}}\",\n    \"client_secret\": \"{{CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e726d72e-aae4-4473-9e69-acd67613d64d",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "89e4f802-e1d2-406a-a992-fd5e2c861826"
            }
          }
        ]
      },
      {
        "id": "70f5c327-01cf-45d0-a9f3-d5658534ae1d",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "26829c8b-4bae-42b7-be59-13d357f99183",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `access_token` collection variable is missing, but it will",
                "// give an indication of why the request failed in that scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    const access_token = pm.collectionVariables.get(\"access_token\");",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// The DID document must contain an alsoKnownAs property.",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "// The alsoKnownAs property MUST be an array.",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "// The alsoKnownAs property MUST be a set.",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "// The second element of the alsoKnownAs property will be used as a",
                "// credentials_issuer_id for subsequent tests.",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// The value of didDocument.alsoKnownAs[1] is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "});"
              ],
              "_lastExecutionId": "d8d93858-8dcc-4186-8b13-d1d7a9a15a3c"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "55007745-69e7-48a3-8539-164222bb262d",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/vc-revocation-list-2020/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"2020-04-02T18:48:36Z\",\n        \"credentialStatus\": {\n            \"type\": \"RevocationList2020Status\"\n        }\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4252fe7f-d264-4608-b0d7-f5a152015ea2",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const verifiable_credential = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_credential\", verifiable_credential);",
                "})",
                ""
              ],
              "_lastExecutionId": "64d5258b-2552-44d8-8af0-4cd4fffbe002"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "73e7dc75-6d5b-44d7-8d05-09324d33b136",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1abe73a3-4aa7-4250-888a-7a98185dcb52"
            }
          }
        ]
      },
      {
        "id": "765b94b7-3ea1-43d7-9b0e-585b9f7fb632",
        "name": "Verify Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1260a922-dbd6-4d80-aa29-499770fec9d2",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Checks should not have errors",
                "pm.test(\"Checks should have no errors\", function() {",
                "    const { errors } = pm.response.json();",
                "    pm.expect(errors).to.be.empty;",
                "});",
                "",
                ""
              ],
              "_lastExecutionId": "57635d77-8bd7-4e0d-a858-5aea20b68cd7"
            }
          }
        ]
      },
      {
        "id": "ab466574-924d-476e-876d-30042ac513d9",
        "name": "Revoke Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "status"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credentialId\": \"{{verifiable_credential_id}}\",\n    \"credentialStatus\": [\n        {\n            \"type\": \"RevocationList2020Status\",\n            \"status\": \"1\"\n        }\n    ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a89e681-2538-4575-860f-49a915b2a51a",
              "type": "text/javascript",
              "exec": [
                "// Extract credential ID from verifiable credential",
                "let verifiable_credential_id;",
                "try {",
                "    const { id } = JSON.parse(pm.collectionVariables.get(\"verifiable_credential\"));",
                "    pm.collectionVariables.set('verifiable_credential_id', id)",
                "} catch {}",
                ""
              ],
              "_lastExecutionId": "e8875b6b-d82f-4b81-b450-c7a58fa95395"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3453ee5d-0bc7-4bd1-b9dc-dc03ae8fdc2f",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/status` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// Verifiable credential ID is a required element item used in the request body",
                "pm.test(\"`verifiable_credential_id` local variable must be set\", function () {",
                "    pm.expect(\"verifiable_credential\").to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Revoke Credentials\" request is `200 Success`",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});"
              ],
              "_lastExecutionId": "1b5c6f09-b8be-4d14-98b2-87ce5944d1b2"
            }
          }
        ]
      },
      {
        "id": "5b10f690-cfdc-4095-b1c0-bbd723124cb5",
        "name": "Verify Revocation",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "570c25bd-c272-4568-8bea-2d64cd59511f",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Checks should have errors",
                "//pm.test(\"Checks should have credentialStatus errors\", function() {",
                "//    const { errors } = pm.response.json();",
                "//    pm.expect(errors).to.include(\"credentialStatus\");",
                "//});",
                "",
                "// Confirm error",
                "pm.test(\"Checks should have credentialStatus errors\", function() {",
                "    let obj = pm.response.json().verifications.find(e => e.title === \"Revocation\");",
                "    pm.expect(obj.status).to.eql(\"bad\");",
                "});",
                "",
                "",
                ""
              ],
              "_lastExecutionId": "35ba7fa4-8095-4331-b50f-b5f727053c58"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 30,
        "pending": 0,
        "failed": 22
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1659227039421,
      "completed": 1659227039700
    },
    "executions": [
      {
        "id": "b95604c8-e837-4146-bc43-ec5bbe38577f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c5d20cff-588f-49e1-aa73-0772f6bac172",
          "httpRequestId": "c198132a-224b-4197-b430-64e5f481c6a7"
        },
        "item": {
          "id": "b95604c8-e837-4146-bc43-ec5bbe38577f",
          "name": "Get Access Token"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response body must include non-empty access_token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response body must represent `Bearer` token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "returned token must expire in the future",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "`access_token` persisted to collectionVariables",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:1)"
            }
          }
        ]
      },
      {
        "id": "70f5c327-01cf-45d0-a9f3-d5658534ae1d",
        "cursor": {
          "ref": "36bfbaea-5fc2-430f-bfc5-5e8007492544",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ee86e31b-945d-4126-a52c-68394deee09f"
        },
        "item": {
          "id": "70f5c327-01cf-45d0-a9f3-d5658534ae1d",
          "name": "Get Organization DIDs"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "`access_token` collection variable must be set",
              "message": "expected '' not to be empty",
              "stack": "AssertionError: expected '' not to be empty\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "must include valid JSON response body",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "didDocument must be present in response body",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:2)"
            }
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "alsoKnownAs MUST be present",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:2)"
            }
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "alsoKnownAs MUST be an array",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:6:2)"
            }
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "alsoKnownAs values MUST be unique",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:7:2)"
            }
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 7,
              "test": "alsoKnownAs[1] must be present",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:8:2)"
            }
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 8,
              "test": "verification method controller must match did subject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:9:2)"
            }
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 9,
              "test": "`credential_issuer_id` persisted to collectionVariables",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:10:2)"
            }
          }
        ]
      },
      {
        "id": "55007745-69e7-48a3-8539-164222bb262d",
        "cursor": {
          "ref": "b198da1c-a3bd-4054-9d66-846bb65fda9f",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6ead27c4-ffac-4cb8-89ea-80bdad4fdefd"
        },
        "item": {
          "id": "55007745-69e7-48a3-8539-164222bb262d",
          "name": "Issue Credential"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `201 Created` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "`verifiable_credential` persisted to collectionVariables",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:3)"
            }
          }
        ]
      },
      {
        "id": "765b94b7-3ea1-43d7-9b0e-585b9f7fb632",
        "cursor": {
          "ref": "36805b85-8c0d-4035-b232-7a2254c05afa",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "75db3045-a748-4eef-bec5-b32c877b05ff"
        },
        "item": {
          "id": "765b94b7-3ea1-43d7-9b0e-585b9f7fb632",
          "name": "Verify Credential"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "Checks should have no errors",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Checks should have no errors",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:4)"
            }
          }
        ]
      },
      {
        "id": "ab466574-924d-476e-876d-30042ac513d9",
        "cursor": {
          "ref": "f54acce3-970f-48d3-ba6a-6f654b330fee",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "565e2196-0645-4fa8-b97a-02c2e8de25f4"
        },
        "item": {
          "id": "ab466574-924d-476e-876d-30042ac513d9",
          "name": "Revoke Credential"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential_id` local variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "id": "5b10f690-cfdc-4095-b1c0-bbd723124cb5",
        "cursor": {
          "ref": "6e629094-53c3-42f4-bfbd-fd776bcf4077",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "838e3fea-374b-44b1-bf80-51da0f8fd7d1"
        },
        "item": {
          "id": "5b10f690-cfdc-4095-b1c0-bbd723124cb5",
          "name": "Verify Revocation"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:6)"
            }
          },
          {
            "assertion": "Checks should have credentialStatus errors",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Checks should have credentialStatus errors",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:6)"
            }
          }
        ]
      }
    ]
  }
}