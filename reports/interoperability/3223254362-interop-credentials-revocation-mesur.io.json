{
  "collection": {
    "info": {
      "_postman_id": "97bd6bb0-fb39-4bd6-94ee-dfc43b5f2c51",
      "name": "Credentials Revocation Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "626ba731-7609-40d9-bdf7-edd25d339d16",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "resolve:dids issue:credentials verify:credentials update:credentials"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ea516ad1-8c16-408e-a6ca-b8cf48ca421b",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "d42c5b40-79fd-49a1-be13-97f746ad941e"
            }
          }
        ]
      },
      {
        "id": "04fa85f5-dc80-4e92-a124-14f107d71025",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "77af2bb5-133d-4926-9e54-c76becc6375c",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `access_token` collection variable is missing, but it will",
                "// give an indication of why the request failed in that scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    const access_token = pm.collectionVariables.get(\"access_token\");",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// The DID document must contain an alsoKnownAs property.",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "// The alsoKnownAs property MUST be an array.",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "// The alsoKnownAs property MUST be a set.",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "// The second element of the alsoKnownAs property will be used as a",
                "// credentials_issuer_id for subsequent tests.",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// The value of didDocument.alsoKnownAs[1] is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "});"
              ],
              "_lastExecutionId": "c3d32bc8-8a39-401d-9d25-4be78f529d73"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "df814b71-6816-4dea-9076-d83cf2a752cf",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/vc-revocation-list-2020/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"{{$isoTimestamp}}\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"{{$isoTimestamp}}\",\n        \"credentialStatus\": {\n            \"type\": \"RevocationList2020Status\"\n        }\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1a4cd109-45ed-471b-bbd0-cb54b9a2cf2d",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const verifiable_credential = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_credential\", verifiable_credential);",
                "})",
                ""
              ],
              "_lastExecutionId": "e1b1e6ca-172d-4987-9091-7ba15bf31905"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "150261d6-c101-441d-bf34-ed4741fa8696",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1192a55-791d-4df9-ae93-6afeb3715637"
            }
          }
        ]
      },
      {
        "id": "6320db3a-da2e-482e-894e-1834badf3d3e",
        "name": "Verify Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d50fdf22-388b-4d7c-a4d9-947c597cb972",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Checks should not have errors",
                "pm.test(\"Checks should have no errors\", function() {",
                "    const { errors } = pm.response.json();",
                "    pm.expect(errors).to.be.empty;",
                "});",
                "",
                ""
              ],
              "_lastExecutionId": "67501a47-31c4-40fc-a852-dd987cf8b391"
            }
          }
        ]
      },
      {
        "id": "2dfc6aba-8f6f-4bd2-aa1e-28ff14a29e31",
        "name": "Revoke Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "status"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credentialId\": \"{{verifiable_credential_id}}\",\n    \"credentialStatus\": [\n        {\n            \"type\": \"RevocationList2020Status\",\n            \"status\": \"1\"\n        }\n    ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80079116-20db-4d64-83c1-3c5028eebec0",
              "type": "text/javascript",
              "exec": [
                "// Extract credential ID from verifiable credential",
                "let verifiable_credential_id;",
                "try {",
                "    const { id } = JSON.parse(pm.collectionVariables.get(\"verifiable_credential\"));",
                "    pm.collectionVariables.set('verifiable_credential_id', id)",
                "} catch {}",
                ""
              ],
              "_lastExecutionId": "1f6e33c6-7f05-402f-a8f9-e0f36f274f63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7f57c6f-3e65-4b53-835b-d9ee68b84e06",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/status` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// Verifiable credential ID is a required element item used in the request body",
                "pm.test(\"`verifiable_credential_id` local variable must be set\", function () {",
                "    pm.expect(\"verifiable_credential\").to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Revoke Credentials\" request is `200 Success`",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});"
              ],
              "_lastExecutionId": "9c6c5b30-fa8b-4552-bdb4-8cb56d43f95b"
            }
          }
        ]
      },
      {
        "id": "3072d1c7-885f-49a8-aae6-2998938f6ec6",
        "name": "Verify Revocation",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6b8a0390-5002-4b69-a0e9-05037d7584d6",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Checks should have errors",
                "//pm.test(\"Checks should have credentialStatus errors\", function() {",
                "//    const { errors } = pm.response.json();",
                "//    pm.expect(errors).to.include(\"credentialStatus\");",
                "//});",
                "",
                "// Confirm error",
                "pm.test(\"Checks should have credentialStatus errors\", function() {",
                "    let obj = pm.response.json().verifications.find(e => e.title === \"Revocation\");",
                "    pm.expect(obj.status).to.eql(\"bad\");",
                "});",
                "",
                "",
                ""
              ],
              "_lastExecutionId": "5b11af88-5da6-42cf-bf38-71d4c947c608"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 30,
        "pending": 0,
        "failed": 22
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665448180528,
      "completed": 1665448180747
    },
    "executions": [
      {
        "id": "626ba731-7609-40d9-bdf7-edd25d339d16",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4d46f61b-ea1c-4556-a416-209d046f81c4",
          "httpRequestId": "0d79ae5c-2437-4184-9d2f-cada83ee3017"
        },
        "item": {
          "id": "626ba731-7609-40d9-bdf7-edd25d339d16",
          "name": "Get Access Token"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response body must include non-empty access_token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response body must represent `Bearer` token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "returned token must expire in the future",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "`access_token` persisted to collectionVariables",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:1)"
            }
          }
        ]
      },
      {
        "id": "04fa85f5-dc80-4e92-a124-14f107d71025",
        "cursor": {
          "ref": "881c4103-46f1-4be1-8ae3-94c82d9f202f",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f0b014a5-8bc0-48f8-9043-57f8a54ef01a"
        },
        "item": {
          "id": "04fa85f5-dc80-4e92-a124-14f107d71025",
          "name": "Get Organization DIDs"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "`access_token` collection variable must be set",
              "message": "expected '' not to be empty",
              "stack": "AssertionError: expected '' not to be empty\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "must include valid JSON response body",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "didDocument must be present in response body",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:2)"
            }
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "alsoKnownAs MUST be present",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:2)"
            }
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "alsoKnownAs MUST be an array",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:6:2)"
            }
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "alsoKnownAs values MUST be unique",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:7:2)"
            }
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 7,
              "test": "alsoKnownAs[1] must be present",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:8:2)"
            }
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 8,
              "test": "verification method controller must match did subject",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:9:2)"
            }
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 9,
              "test": "`credential_issuer_id` persisted to collectionVariables",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:10:2)"
            }
          }
        ]
      },
      {
        "id": "df814b71-6816-4dea-9076-d83cf2a752cf",
        "cursor": {
          "ref": "83474722-27ec-4278-8caa-1a43cf4a58fe",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "eaa40cf4-46a8-4c4f-8f9a-a3cfb7ccd187"
        },
        "item": {
          "id": "df814b71-6816-4dea-9076-d83cf2a752cf",
          "name": "Issue Credential"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `201 Created` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "`verifiable_credential` persisted to collectionVariables",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:3)"
            }
          }
        ]
      },
      {
        "id": "6320db3a-da2e-482e-894e-1834badf3d3e",
        "cursor": {
          "ref": "f3f4fa5b-bb68-46df-bab9-174c1e68271a",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "168278c9-0a5c-465b-aa2d-57360439f6de"
        },
        "item": {
          "id": "6320db3a-da2e-482e-894e-1834badf3d3e",
          "name": "Verify Credential"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "Checks should have no errors",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Checks should have no errors",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:4)"
            }
          }
        ]
      },
      {
        "id": "2dfc6aba-8f6f-4bd2-aa1e-28ff14a29e31",
        "cursor": {
          "ref": "135bed12-6e9a-4489-ac09-87339ed28812",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1f5ab973-f719-40a7-baf5-a5703e65d943"
        },
        "item": {
          "id": "2dfc6aba-8f6f-4bd2-aa1e-28ff14a29e31",
          "name": "Revoke Credential"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential_id` local variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "id": "3072d1c7-885f-49a8-aae6-2998938f6ec6",
        "cursor": {
          "ref": "e2b7a1b5-238b-457c-a2dd-cad7e3bbbb26",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6aaa4b93-101a-4ae6-9a7b-3d0250d063df"
        },
        "item": {
          "id": "3072d1c7-885f-49a8-aae6-2998938f6ec6",
          "name": "Verify Revocation"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:3:6)"
            }
          },
          {
            "assertion": "Checks should have credentialStatus errors",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Checks should have credentialStatus errors",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:6)"
            }
          }
        ]
      }
    ]
  }
}